{{olv-toolbar
  class='ui secondary menu no-margin'
  createNewButton=createNewButton
  enableCreateNewButton=(not readonly)
  refreshButton=refreshButton
  deleteButton=deleteButton
  colsConfigButton=colsConfigButton
  advLimitButton=advLimitButton
  enableFilters=enableFilters
  exportExcelButton=exportExcelButton
  showFilters=_showFilters
  filters=filters
  toggleStateFilters=(action "toggleStateFilters")
  resetFilters=(action "resetFilters" this.attrs.resetFilters)
  filterButton=filterButton
  filterText=filterText
  buttonClass=buttonClass
  enableDeleteButton=(not readonly)
  componentName=componentName
  modelController=currentController
  customButtonAction=(action 'customButtonAction')
  customButtons=customButtons
  editFormRoute=editFormRoute
  showConfigDialog="showConfigDialog"
  showAdvLimitDialog="showConfigDialog"
  confirmDeleteRows=confirmDeleteRows
  inHierarchicalMode=inHierarchicalMode
  inExpandMode=inExpandMode
  availableHierarchicalMode=_availableHierarchicalMode
  availableCollExpandMode=availableCollExpandMode
  switchHierarchicalMode=(action "switchHierarchicalMode")
  switchExpandMode=(action "switchExpandMode")
  readonly=readonly
}}
{{object-list-view
  placeholder=placeholder
  readonly=readonly
  columnsWidthAutoresize=columnsWidthAutoresize
  minAutoColumnWidth=minAutoColumnWidth
  buttonClass=buttonClass
  tableStriped=tableStriped
  customTableClass=customTableClass
  cellComponent=cellComponent
  singleColumnCellComponent=singleColumnCellComponent
  singleColumnHeaderTitle=singleColumnHeaderTitle
  createNewByPrototype=(action "createNewByPrototype")
  showValidationMessagesInRow=(and (not readonly) showValidationMessagesInRow)
  showAsteriskInRow=showAsteriskInRow
  showCheckBoxInRow=showCheckBoxInRow
  showEditButtonInRow=showEditButtonInRow
  showPrototypeButtonInRow=showPrototypeButtonInRow
  showDeleteButtonInRow=showDeleteButtonInRow
  showEditMenuItemInRow=showEditMenuItemInRow
  showPrototypeMenuItemInRow=showPrototypeMenuItemInRow
  showDeleteMenuItemInRow=showDeleteMenuItemInRow
  sendMenuItemAction=(action "sendMenuItemAction")
  menuInRowAdditionalItems=menuInRowAdditionalItems
  rowClickable=(and (not readonly) rowClickable)
  orderable=orderable
  sorting=sorting
  immediateDelete=true
  modelName=modelName
  modelProjection=modelProjection
  content=content
  sortByColumn=(action (if this.attrs.sortByColumn this.attrs.sortByColumn 'sortByColumn'))
  addColumnToSorting=(action (if this.attrs.addColumnToSorting this.attrs.addColumnToSorting 'addColumnToSorting'))
  enableFilters=enableFilters
  showFilters=_showFilters
  filters=filters
  applyFilters=(action (if applyFilters applyFilters "applyFilters"))
  componentForFilter=componentForFilter
  conditionsByType=conditionsByType
  filterByAnyMatch=(action (if this.attrs.filterByAnyMatch this.attrs.filterByAnyMatch 'filterByAnyMatch'))
  filterByAnyWord=filterByAnyWord
  filterByAllWords=filterByAllWords
  configurateRow=this.attrs.configurateRow
  configurateSelectedRows=this.attrs.configurateSelectedRows
  confirmDeleteRow=confirmDeleteRow
  beforeDeleteRecord=beforeDeleteRecord
  action=(action 'objectListViewRowClick')
  beforeDeleteAllRecords=beforeDeleteAllRecords
  componentName=componentName
  allowColumnResize=allowColumnResize
  selectedRecord=selectedRecord
  notUseUserSettings=notUseUserSettings
  hierarchicalIndent=hierarchicalIndent
  inHierarchicalMode=inHierarchicalMode
  inExpandMode=inExpandMode
  disableHierarchicalMode=(if hierarchyByAttribute true disableHierarchicalMode)
  loadRecords=(action "loadRecords")
  availableHierarchicalMode=(action "availableHierarchicalMode")
  useRowByRowLoading=useRowByRowLoading
  useRowByRowLoadingProgress=useRowByRowLoadingProgress
  eventsBus=eventsBus
  onEditForm=onEditForm
  customButtonInRowAction='customButtonInRowAction'
  customButtonsInRow=customButtonsInRow
  defaultSortingButton=defaultSortingButton
  defaultLeftPadding=defaultLeftPadding
  overflowedComponents=overflowedComponents
  customParameters=customParameters
  fixedHeader=fixedHeader
}}
{{#if (or (not inHierarchicalMode) hierarchyPaging)}}
  <div class="ui secondary menu no-margin nav-bar">
    <div class="ui basic buttons">
      {{#if hasPreviousPage}}
        <button class="ui button prev-page-button" {{action 'previousPage' this.attrs.previousPage componentName}}>
        </button>
      {{else}}
        <button class="ui disabled button prev-page-button" {{action 'previousPage' this.attrs.previousPage componentName}} disabled="disabled">
        </button>
      {{/if}}
      {{#each pages as |page|}}
        {{#if page.isEllipsis}}
          <div class="ui button">...</div>
        {{else}}
          {{#if page.isCurrent}}
            <button class="ui disabled active button" disabled="disabled">{{page.number}}</button>
          {{else}}
            <button class="ui button" {{action 'gotoPage' this.attrs.gotoPage page.number componentName}}>{{page.number}}</button>
          {{/if}}
        {{/if}}
      {{/each}}
      {{#if hasNextPage}}
        <button class="ui button next-page-button" {{action 'nextPage' this.attrs.nextPage componentName}}>
        </button>
      {{else}}
        <button class="ui disabled button next-page-button" {{action 'nextPage' this.attrs.nextPage componentName}} disabled="disabled">
        </button>
      {{/if}}
    </div>
    <div class="right menu">
      {{#if (and showShowingEntries recordsTotalCount)}}
        <div class="showing-entries">
          {{#if (and currentIntervalRecords recordsTotalCount) }}
            {{concat
              (t "components.flexberry-objectlistview.showing-entries.showing") currentIntervalRecords (t "components.flexberry-objectlistview.showing-entries.of") recordsTotalCount (t "components.flexberry-objectlistview.showing-entries.entries")
            }}
          {{/if}}
        </div>
      {{/if}}
      {{flexberry-dropdown needChecksOnValue=false items=perPageValues value=perPageValue class="compact selection" onChange=(action "perPageClick") settings=(hash direction="upward")}}
    </div>
  </div>
{{/if}}
