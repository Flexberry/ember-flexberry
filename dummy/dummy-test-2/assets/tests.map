{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/acceptance/components/base-flexberry-lookup-test.js","dummy/tests/acceptance/components/flexberry-dropdown/flexberry-dropdown-conditional-render-test.js","dummy/tests/acceptance/components/flexberry-dropdown/flexberry-dropdown-empty-value-test.js","dummy/tests/acceptance/components/flexberry-groupedit-test.js","dummy/tests/acceptance/components/flexberry-groupedit/flexberry-groupedit-check-all-at-page-test.js","dummy/tests/acceptance/components/flexberry-groupedit/flexberry-groupedit-configurate-row-test.js","dummy/tests/acceptance/components/flexberry-groupedit/flexberry-groupedit-default-sort-test.js","dummy/tests/acceptance/components/flexberry-groupedit/flexberry-groupedit-delete-with-details-test.js","dummy/tests/acceptance/components/flexberry-groupedit/flexberry-groupedit-sort-test.js","dummy/tests/acceptance/components/flexberry-groupedit/flexberry-groupedit-user-button-test.js","dummy/tests/acceptance/components/flexberry-lookup/change-component-lookup-test.js","dummy/tests/acceptance/components/flexberry-lookup/change-model-lookup-test.js","dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-actions-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-autocomplete-en-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-autocomplete-ru-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-autofill-by-limit-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-custom-window-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-default-ordering-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-default-user-setting-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-events-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-limit-function-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-prefer-developer-to-default-user-setting-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-prefer-stored-to-default-user-setting-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-preview-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-projection-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-relation-name-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-window-search-test.js","dummy/tests/acceptance/components/flexberry-lookup/lookup-test-functions.js","dummy/tests/acceptance/components/flexberry-lookup/visiting-flexberry-lookup-autocomplete-test.js","dummy/tests/acceptance/components/flexberry-lookup/visiting-flexberry-lookup-dropdown-test.js","dummy/tests/acceptance/components/flexberry-multiple-lookup/flexberry-multiple-lookup-configurate-tags-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/checkbox-at-editform-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/edit-in-modal-open-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-empty-filter-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-filter-by-enther-click-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-filter-on-toolbar-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-filter-render-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-filter-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-ge-filter-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-le-filter-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-like-filter-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-neq-filter-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-without-operation-filter-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-all-at-all-page-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-all-at-page-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-config-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-checked-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-close-from-edit-form-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-colsconfig-column-localization-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-column-config-save-button-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-configurate-row-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-date-format-moment-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-data-cancel-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-data-immediately-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-with-promise-data-cancel-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-with-promise-data-immediately-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-with-promise-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-button-in-row-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-button-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-record-from-e-form-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-record-from-olv-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-with-details-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-dropdown-filter-for-directories-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-edit-button-in-row-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-from-edit-form-with-queryparams-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-getCellComponent-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-goto-editform-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-limit-function-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-locales-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-lock-edit-form-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-open-newform-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-paging-dropdown-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-paging-navigation-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-select-record-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-by-computable-field-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-clear-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-for-each-column-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-on-all-columns-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-with-default-setting-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-toolbar-custom-components-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-user-button-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-user-settings-on-multi-list-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-user-settings-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-wrapper-projection-test.js","dummy/tests/acceptance/components/flexberry-simpledatetime/flexberry-simpledatetime-manual-enter-test.js","dummy/tests/acceptance/components/flexberry-toggler/flexberry-toggler-with-inner-toggler-test.js","dummy/tests/acceptance/components/highload-edit-form-menu-test.js","dummy/tests/acceptance/components/readonly-test/edit-form-readonly-test.js","dummy/tests/acceptance/edit-form-validation-test/execute-validation-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-base-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-checkbox-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-detail-delete-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-detail-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-dropdown-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-file-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-lookup-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-textarea-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-textbox-letter-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-textbox-numeric-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-textbox-unique-date-test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/ember-i18n/test-helpers.js","dummy/tests/helpers/ember-prop-types.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/validate-properties.js","dummy/tests/integration/components/flexberry-checkbox-test.js","dummy/tests/integration/components/flexberry-ddau-checkbox-test.js","dummy/tests/integration/components/flexberry-dropdown-test.js","dummy/tests/integration/components/flexberry-edit-panel-test.js","dummy/tests/integration/components/flexberry-error-test.js","dummy/tests/integration/components/flexberry-field-test.js","dummy/tests/integration/components/flexberry-groupedit-test.js","dummy/tests/integration/components/flexberry-lookup-test.js","dummy/tests/integration/components/flexberry-sidebar-test.js","dummy/tests/integration/components/flexberry-simpledatetime-test.js","dummy/tests/integration/components/flexberry-sitemap-searchbar-test.js","dummy/tests/integration/components/flexberry-sitemap-test.js","dummy/tests/integration/components/flexberry-tab-bar-test.js","dummy/tests/integration/components/flexberry-textarea-test.js","dummy/tests/integration/components/flexberry-textbox-test.js","dummy/tests/integration/components/flexberry-toggler-test.js","dummy/tests/integration/components/flexberry-validationmessage-test.js","dummy/tests/integration/components/flexberry-validationsummary-test.js","dummy/tests/integration/components/flexberry/validation-summary-test.js","dummy/tests/integration/components/form-load-time-tracker-test.js","dummy/tests/integration/components/groupedit-toolbar-test.js","dummy/tests/integration/components/modal-dialog-test.js","dummy/tests/integration/components/object-list-view-test.js","dummy/tests/integration/components/olv-filter-interval-test.js","dummy/tests/integration/components/ui-message-test.js","dummy/tests/test-helper.js","dummy/tests/unit/adapters/application-test.js","dummy/tests/unit/controllers/application-test.js","dummy/tests/unit/controllers/detail-edit-form-test.js","dummy/tests/unit/controllers/edit-form-test.js","dummy/tests/unit/controllers/flexberry-file-view-dialog-test.js","dummy/tests/unit/controllers/list-form-test.js","dummy/tests/unit/controllers/lookup-dialog-test.js","dummy/tests/unit/controllers/new-platform-flexberry-services-lock-list-test.js","dummy/tests/unit/helpers/readonly-cell-test.js","dummy/tests/unit/initializers/i18n-test.js","dummy/tests/unit/initializers/render-perf-logger-test.js","dummy/tests/unit/instance-initializers/i18n-test.js","dummy/tests/unit/instance-initializers/lock-test.js","dummy/tests/unit/instance-initializers/moment-test.js","dummy/tests/unit/mixins/dynamic-actions-test.js","dummy/tests/unit/mixins/dynamic-properties-test.js","dummy/tests/unit/mixins/errorable-route-test.js","dummy/tests/unit/mixins/flexberry-file-controller-test.js","dummy/tests/unit/mixins/flexberry-groupedit-route-test.js","dummy/tests/unit/mixins/lock-route-test.js","dummy/tests/unit/mixins/modal-application-route-test.js","dummy/tests/unit/mixins/multi-list-controller-test.js","dummy/tests/unit/mixins/multi-list-model-edit-test.js","dummy/tests/unit/mixins/multi-list-model-test.js","dummy/tests/unit/mixins/multi-list-route-test.js","dummy/tests/unit/mixins/paginated-controller-test.js","dummy/tests/unit/mixins/paginated-route-test.js","dummy/tests/unit/mixins/predicate-from-filters-test.js","dummy/tests/unit/mixins/reload-list-mixin-test.js","dummy/tests/unit/mixins/sortable-controller-test.js","dummy/tests/unit/mixins/sortable-route-test.js","dummy/tests/unit/models/new-platform-flexberry-flexberry-user-setting-test.js","dummy/tests/unit/models/new-platform-flexberry-services-lock-test.js","dummy/tests/unit/routes/application-test.js","dummy/tests/unit/routes/edit-form-new-test.js","dummy/tests/unit/routes/edit-form-test.js","dummy/tests/unit/routes/list-form-test.js","dummy/tests/unit/routes/new-platform-flexberry-services-lock-list-test.js","dummy/tests/unit/routes/projected-model-form-test.js","dummy/tests/unit/serializers/new-platform-flexberry-services-lock-test.js","dummy/tests/unit/services/app-state-test.js","dummy/tests/unit/services/compatibility-validations-test.js","dummy/tests/unit/services/detail-interaction-test.js","dummy/tests/unit/services/device-test.js","dummy/tests/unit/services/form-load-time-tracker-test.js","dummy/tests/unit/services/log-test.js","dummy/tests/unit/services/objectlistview-events-test.js","dummy/tests/unit/services/user-settings-test.js","dummy/tests/unit/utils/cut-string-by-length-test.js","dummy/tests/unit/utils/deserialize-sorting-param-test.js","dummy/tests/unit/utils/get-attr-locale-key-test.js","dummy/tests/unit/utils/get-current-agregator-test.js","dummy/tests/unit/utils/get-projection-by-name-test.js","dummy/tests/unit/utils/need-save-current-agregator-test.js","dummy/tests/unit/utils/run-after-test.js","dummy/tests/unit/utils/serialize-sorting-param-test.js","dummy/tests/unit/utils/string-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dummy/tests/acceptance/components/base-flexberry-lookup-test', ['qunit', 'dummy/tests/helpers/start-app', 'ember-flexberry-data/query/predicate', 'ember-flexberry-data/query/builder'], function (_qunit, _startApp, _predicate, _builder) {\n  'use strict';\n\n  var openLookupDialog = function openLookupDialog($lookup) {\n    return new Ember.RSVP.Promise(function (resolve, reject) {\n      var checkIntervalId = void 0;\n      var checkIntervalSucceed = false;\n      var checkInterval = 500;\n\n      var timeout = 4000;\n\n      var $lookupChooseButton = Ember.$('.ui-change', $lookup);\n\n      // Try to open lookup dialog.\n      Ember.run(function () {\n        $lookupChooseButton.click();\n      });\n\n      // Wait for lookup dialog to be opened & data loaded.\n      Ember.run(function () {\n        checkIntervalId = window.setInterval(function () {\n          var $lookupDialog = Ember.$('.flexberry-modal');\n          var $records = Ember.$('.content table.object-list-view tbody tr', $lookupDialog);\n          if ($records.length === 0) {\n            // Data isn't loaded yet.\n            return;\n          }\n\n          // Data is loaded.\n          // Stop interval & resolve promise.\n          window.clearInterval(checkIntervalId);\n          checkIntervalSucceed = true;\n\n          resolve($lookupDialog);\n        }, checkInterval);\n      });\n\n      // Set wait timeout.\n      Ember.run(function () {\n        window.setTimeout(function () {\n          if (checkIntervalSucceed) {\n            return;\n          }\n\n          // Time is out.\n          // Stop intervals & reject promise.\n          window.clearInterval(checkIntervalId);\n          reject('flexberry-lookup load data operation is timed out');\n        }, timeout);\n      });\n    });\n  };\n\n  var chooseRecordInLookupDialog = function chooseRecordInLookupDialog($lookupDialog, recordIndex) {\n    return new Ember.RSVP.Promise(function (resolve, reject) {\n      var checkIntervalId = void 0;\n      var checkIntervalSucceed = false;\n      var checkInterval = 500;\n\n      var timeout = 4000;\n\n      var $records = Ember.$('.content table.object-list-view tbody tr', $lookupDialog);\n      var $choosedRecord = Ember.$($records[recordIndex]);\n\n      // Try to choose record in the lookup dialog.\n      Ember.run(function () {\n        // Inside object-list-views component click actions are available only if cell in row has been clicked.\n        // Click on whole row wont take an effect.\n        var $choosedRecordFirstCell = Ember.$(Ember.$('td', $choosedRecord)[1]);\n        $choosedRecordFirstCell.click();\n\n        // Click on modal-dialog close icon.\n        // Сrutch correcting irregular bug\n        var $modelDilogClose = Ember.$('.close.icon');\n        $modelDilogClose.click();\n      });\n\n      // Wait for lookup dialog to be closed.\n      Ember.run(function () {\n        checkIntervalId = window.setInterval(function () {\n          if (!$lookupDialog.hasClass('hidden')) {\n            // Dialog is still opened.\n            return;\n          }\n\n          // Dialog is closed.\n          // Stop interval & resolve promise.\n          window.clearInterval(checkIntervalId);\n          checkIntervalSucceed = true;\n\n          resolve();\n        }, checkInterval);\n      });\n\n      // Set wait timeout.\n      Ember.run(function () {\n        window.setTimeout(function () {\n          if (checkIntervalSucceed) {\n            return;\n          }\n\n          // Time is out.\n          // Stop intervals & reject promise.\n          window.clearInterval(checkIntervalId);\n          reject('flexberry-lookup choose record operation is timed out');\n        }, timeout);\n      });\n    });\n  };\n\n  var app = void 0;\n  var latestReceivedRecords = void 0;\n\n  (0, _qunit.module)('Acceptance | flexberry-lookup-base', {\n    beforeEach: function beforeEach() {\n      // Start application.\n      app = (0, _startApp.default)();\n\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = app.__container__.lookup('controller:application');\n      applicationController.set('isInAcceptanceTestMode', true);\n\n      // Override store.query method to receive & remember records which will be requested by lookup dialog.\n      var store = app.__container__.lookup('service:store');\n      var originalQueryMethod = store.query;\n      store.query = function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        // Call original method & remember returned records.\n        return originalQueryMethod.apply(this, args).then(function (records) {\n          latestReceivedRecords = records.toArray();\n\n          return records;\n        });\n      };\n    },\n    afterEach: function afterEach() {\n      // Remove semantic ui modal dialog's dimmer.\n      Ember.$('body .ui.dimmer.modals').remove();\n\n      // Destroy application.\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('changes in component\\'s value causes changes in related model\\'s specified \\'belongsTo\\' relation', function (assert) {\n    visit('components-acceptance-tests/flexberry-lookup/base-operations');\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var model = Ember.get(controller, 'model');\n      var relationName = Ember.get(controller, 'relationName');\n      var displayAttributeName = Ember.get(controller, 'displayAttributeName');\n\n      var $lookup = Ember.$('.flexberry-lookup');\n      var $lookupInput = Ember.$('input', $lookup);\n      assert.strictEqual($lookupInput.val(), '', 'lookup display value is empty by default');\n\n      // Wait for lookup dialog to be opened, choose first record & check component's state.\n      var asyncOperationsCompleted = assert.async();\n      openLookupDialog($lookup).then(function ($lookupDialog) {\n        assert.ok($lookupDialog);\n\n        // Lookup dialog successfully opened & data is loaded.\n        // Try to choose first loaded record.\n        return chooseRecordInLookupDialog($lookupDialog, 0);\n      }).then(function () {\n        // First loaded record chosen successfully.\n        // Check that chosen record is now set to related model's 'belongsTo' relation.\n        var chosenRecord = model.get(relationName);\n        var expectedRecord = latestReceivedRecords[0];\n        assert.strictEqual(chosenRecord, expectedRecord, 'chosen record is set to model\\'s \\'' + relationName + '\\' relation as expected');\n\n        var chosenRecordDisplayAttribute = chosenRecord.get(displayAttributeName);\n        assert.strictEqual($lookupInput.val(), chosenRecordDisplayAttribute, 'lookup display value is equals to chosen record\\'s \\'' + displayAttributeName + '\\' attribute');\n      }).catch(function (reason) {\n        // Error output.\n        assert.ok(false, reason);\n      }).finally(function () {\n        asyncOperationsCompleted();\n      });\n    });\n  });\n\n  (0, _qunit.test)('changes in model\\'s value causes changes in component\\'s specified \\'belongsTo\\' model', function (assert) {\n    assert.expect(2);\n    visit('components-acceptance-tests/flexberry-lookup/base-operations');\n    andThen(function () {\n\n      var $lookup = Ember.$('.flexberry-lookup');\n      var $lookupInput = Ember.$('input', $lookup);\n      assert.strictEqual($lookupInput.val() === '', true, 'lookup display value is empty by default');\n\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var model = Ember.get(controller, 'model');\n      var store = app.__container__.lookup('service:store');\n      var suggestionType = void 0;\n\n      // Create limit for query.\n      var query = new _builder.default(store).from('ember-flexberry-dummy-suggestion-type').selectByProjection('SettingLookupExampleView');\n\n      // Load olv data.\n      store.query('ember-flexberry-dummy-suggestion-type', query.build()).then(function (suggestionTypes) {\n\n        var suggestionTypesArr = suggestionTypes.toArray();\n\n        suggestionType = suggestionTypesArr.objectAt(0);\n      }).then(function () {\n\n        // Change data in the model.\n        model.set('type', suggestionType);\n\n        var done = assert.async();\n\n        setTimeout(function () {\n          $lookupInput = Ember.$('input', $lookup);\n          assert.strictEqual($lookupInput.val() === suggestionType.get('name'), true, 'lookup display value isn\\'t empty');\n          done();\n        }, 100);\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-lookup limit function test', function (assert) {\n\n    visit('components-acceptance-tests/flexberry-lookup/settings-example-limit-function');\n\n    andThen(function () {\n      assert.equal(currentURL(), 'components-acceptance-tests/flexberry-lookup/settings-example-limit-function');\n\n      var $limitFunctionButton = Ember.$('.limitFunction');\n      var $lookupChouseButton = Ember.$('.ui-change');\n\n      Ember.run(function () {\n        $limitFunctionButton.click();\n        $lookupChouseButton.click();\n      });\n\n      var store = app.__container__.lookup('service:store');\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var limitType = controller.limitType;\n      var queryPredicate = new _predicate.StringPredicate('name').contains(limitType);\n\n      // Create limit for query.\n      var query = new _builder.default(store).from('ember-flexberry-dummy-suggestion-type').selectByProjection('SettingLookupExampleView').where(queryPredicate);\n\n      // Load olv data.\n      store.query('ember-flexberry-dummy-suggestion-type', query.build()).then(function (suggestionTypes) {\n\n        var suggestionTypesArr = suggestionTypes.toArray();\n        var suggestionModelLength = suggestionTypesArr.length;\n\n        var done = assert.async();\n\n        Ember.run(function () {\n          setTimeout(function () {\n            var $lookupSearch = Ember.$('.content table.object-list-view');\n            var $lookupSearchThead = $lookupSearch.children('tbody');\n            var $lookupSearchTr = $lookupSearchThead.children('tr');\n            var $lookupRows = $lookupSearchTr.children('td');\n            var $suggestionTableLength = $lookupSearchTr.length;\n\n            assert.expect(2 + $suggestionTableLength);\n\n            assert.strictEqual(suggestionModelLength >= $suggestionTableLength, true, 'Сorrect number of values restrictions limiting function');\n\n            // Сomparison data in the model and olv table.\n            for (var i = 0; i < $suggestionTableLength; i++) {\n              var suggestionType = suggestionTypesArr.objectAt(i);\n              var suggestionTypeName = suggestionType.get('name');\n\n              var $cell = Ember.$($lookupRows[3 * i + 1]);\n              var $cellDiv = $cell.children('div');\n              var $cellText = $cellDiv.text().trim();\n\n              assert.strictEqual(suggestionTypeName === $cellText, true, 'Сorrect data at lookup\\'s olv');\n            }\n\n            done();\n          }, 2000);\n        });\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-lookup actions test', function (assert) {\n    assert.expect(5);\n\n    var controller = void 0;\n    Ember.run(function () {\n      controller = app.__container__.lookup('controller:components-acceptance-tests/flexberry-lookup/settings-example-actions');\n    });\n\n    // Remap remove action.\n    var $onRemoveData = void 0;\n    Ember.set(controller, 'actions.externalRemoveAction', function (actual) {\n      $onRemoveData = actual;\n      assert.notEqual($onRemoveData, undefined, 'Component sends \\'remove\\' action after first click');\n      assert.strictEqual($onRemoveData.relationName, 'type', 'Component sends \\'remove\\' with actual relationName');\n    });\n\n    // Remap chose action.\n    var $onChooseData = void 0;\n    Ember.set(controller, 'actions.externalChooseAction', function (actual) {\n      $onChooseData = actual;\n      assert.notEqual($onChooseData, undefined, 'Component sends \\'choose\\' action after first click');\n      assert.strictEqual($onChooseData.componentName, 'flexberry-lookup', 'Component sends \\'choose\\' with actual componentName');\n      assert.strictEqual($onChooseData.projection, 'SettingLookupExampleView', 'Component sends \\'choose\\' with actual projection');\n    });\n\n    visit('components-acceptance-tests/flexberry-lookup/settings-example-actions');\n    andThen(function () {\n      var $lookupButtouChoose = Ember.$('.ui-change');\n      var $lookupButtouRemove = Ember.$('.ui-clear');\n\n      Ember.run(function () {\n        $lookupButtouChoose.click();\n        $lookupButtouRemove.click();\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-lookup relation name test', function (assert) {\n    assert.expect(1);\n    visit('components-acceptance-tests/flexberry-lookup/settings-example-relation-name');\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var relationName = Ember.get(controller, 'relationName');\n      assert.strictEqual(relationName, 'Temp relation name', 'relationName: \\'' + relationName + '\\' as expected');\n    });\n  });\n\n  (0, _qunit.test)('flexberry-lookup projection test', function (assert) {\n    assert.expect(2);\n\n    visit('components-acceptance-tests/flexberry-lookup/settings-example-projection');\n\n    andThen(function () {\n      assert.equal(currentURL(), 'components-acceptance-tests/flexberry-lookup/settings-example-projection');\n\n      var $lookupButtouChoose = Ember.$('.ui-change');\n\n      // Click choose button.\n      Ember.run(function () {\n        $lookupButtouChoose.click();\n      });\n\n      Ember.run(function () {\n        var done = assert.async();\n        setTimeout(function () {\n\n          var $lookupSearch = Ember.$('.content table.object-list-view');\n          var $lookupSearchThead = $lookupSearch.children('thead');\n          var $lookupSearchTr = $lookupSearchThead.children('tr');\n          var $lookupHeaders = $lookupSearchTr.children('th');\n\n          // Check count at table header.\n          assert.strictEqual($lookupHeaders.length === 3, true, 'Component has SuggestionTypeE projection');\n\n          done();\n        }, 1000);\n      });\n    });\n  });\n\n  (0, _qunit.test)('visiting flexberry-lookup dropdown', function (assert) {\n    assert.expect(13);\n\n    visit('components-acceptance-tests/flexberry-lookup/settings-example-dropdown');\n\n    andThen(function () {\n\n      assert.equal(currentURL(), 'components-acceptance-tests/flexberry-lookup/settings-example-dropdown');\n\n      // Retrieve component, it's inner <input>.\n      var $lookupSearch = Ember.$('.lookup-field');\n      var $lookupButtonChoose = Ember.$('.ui-change');\n      var $lookupButtonClear = Ember.$('.lookup-remove-button');\n\n      assert.strictEqual($lookupSearch.length === 0, true, 'Component has n\\'t flexberry-lookup');\n      assert.strictEqual($lookupButtonChoose.length === 0, true, 'Component has n\\'t button choose');\n      assert.strictEqual($lookupButtonClear.length === 0, true, 'Component has n\\'t button remove');\n\n      // Retrieve component, it's inner <input>.\n      var $dropdown = Ember.$('.flexberry-dropdown.search.selection');\n      var $dropdownSearch = $dropdown.children('.search');\n      var $dropdownIcon = $dropdown.children('.dropdown.icon');\n      var $dropdownMenu = $dropdown.children('.menu');\n      var $deopdownText = $dropdown.children('.text');\n\n      assert.strictEqual($dropdown.length === 1, true, 'Component has class flexberry-dropdown');\n      assert.strictEqual($dropdown.hasClass('search'), true, 'Component\\'s wrapper has \\'search\\' css-class');\n      assert.strictEqual($dropdown.hasClass('selection'), true, 'Component\\'s wrapper has \\'selection\\' css-class');\n      assert.strictEqual($dropdown.hasClass('ember-view'), true, 'Component\\'s wrapper has \\'ember-view\\' css-class');\n      assert.strictEqual($dropdown.hasClass('dropdown'), true, 'Component\\'s wrapper has \\'dropdown\\' css-class');\n\n      assert.strictEqual($dropdownSearch.length === 1, true, 'Component has class search');\n\n      assert.strictEqual($dropdownIcon.length === 1, true, 'Component has class dropdown and icon');\n\n      assert.strictEqual($deopdownText.length === 1, true, 'Component has class text');\n\n      assert.strictEqual($dropdownMenu.length === 1, true, 'Component has class menu');\n    });\n  });\n\n  (0, _qunit.test)('visiting flexberry-lookup autocomplete', function (assert) {\n    assert.expect(5);\n\n    visit('components-acceptance-tests/flexberry-lookup/settings-example-autocomplete');\n\n    andThen(function () {\n\n      assert.equal(currentURL(), 'components-acceptance-tests/flexberry-lookup/settings-example-autocomplete');\n\n      var $lookup = Ember.$('.flexberry-lookup');\n\n      assert.strictEqual($lookup.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n      assert.strictEqual($lookup.hasClass('search'), true, 'Component\\'s wrapper has \\'search\\' css-class');\n\n      var $lookupField = Ember.$('.lookup-field');\n\n      assert.strictEqual($lookupField.hasClass('prompt'), true, 'Component\\'s wrapper has \\'prompt\\' css-class');\n\n      var $result = Ember.$('.result');\n\n      assert.strictEqual($result.length === 1, true, 'Component has inner class \\'result\\'');\n    });\n  });\n\n  (0, _qunit.test)('flexberry-lookup limit function through dynamic properties test', function (assert) {\n\n    var path = 'components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example';\n\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentURL(), path);\n\n      var $limitFunctionButton1 = Ember.$('.firstLimitFunction');\n      var $limitFunctionButton2 = Ember.$('.secondLimitFunction');\n      var $clearLimitFunctionButton = Ember.$('.clearLimitFunction');\n      var limitFunction1 = void 0;\n      var limitFunction2 = void 0;\n\n      var store = app.__container__.lookup('service:store');\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n\n      // Create limit for query.\n      var query = new _builder.default(store).from('ember-flexberry-dummy-suggestion-type').selectByProjection('SettingLookupExampleView').top(2);\n\n      // Load olv data.\n      store.query('ember-flexberry-dummy-suggestion-type', query.build()).then(function (suggestionTypes) {\n        var suggestionTypesArr = suggestionTypes.toArray();\n        limitFunction1 = suggestionTypesArr.objectAt(0).get('name');\n        limitFunction2 = suggestionTypesArr.objectAt(1).get('name');\n      }).then(function () {\n\n        $limitFunctionButton1.click();\n        assert.equal(controller.lookupCustomLimitPredicate._containsValue, limitFunction1, 'Current limit function afther first limit function button click');\n\n        $limitFunctionButton2.click();\n        assert.equal(controller.lookupCustomLimitPredicate._containsValue, limitFunction2, 'Current limit function afther second limit function button click');\n\n        $clearLimitFunctionButton.click();\n        assert.equal(controller.lookupCustomLimitPredicate, undefined, 'Absent limit function afther clear limit function button click');\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-dropdown/flexberry-dropdown-conditional-render-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var path = 'components-examples/flexberry-dropdown/conditional-render-example';\n  var testName = 'conditional render test';\n\n  (0, _qunit.module)('Acceptance | flexberry-dropdown | ' + testName, function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n\n    hooks.beforeEach(function () {\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = this.owner.lookup('controller:application');\n      Ember.set(applicationController, 'isInAcceptanceTestMode', true);\n    });\n\n    (0, _qunit.test)(testName, function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var $dropdown, done, timeout;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(4);\n\n                _context.next = 3;\n                return (0, _testHelpers.visit)(path);\n\n              case 3:\n                assert.equal((0, _testHelpers.currentURL)(), path, 'Path is correctly');\n\n                $dropdown = Ember.$('.flexberry-dropdown');\n\n                assert.equal($dropdown.length, 1, 'Dropdown is rendered');\n\n                // Select dropdown item.\n                Ember.run(function () {\n                  $dropdown.dropdown('set selected', 'Enum value №1');\n                });\n\n                done = assert.async();\n                timeout = 100;\n\n                Ember.run.later(function () {\n                  var $dropdown = Ember.$('.flexberry-dropdown');\n                  assert.equal($dropdown.length, 0, 'Dropdown isn\\'t rendered');\n\n                  var $span = Ember.$('div.field span');\n                  assert.equal($span.text(), 'Enum value №1', 'Span is rendered');\n                  done();\n                }, timeout);\n\n              case 10:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/acceptance/components/flexberry-dropdown/flexberry-dropdown-empty-value-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var path = 'components-examples/flexberry-dropdown/empty-value-example';\n  var testName = 'empty value test';\n\n  (0, _qunit.module)('Acceptance | flexberry-dropdown | ' + testName, function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n\n    hooks.beforeEach(function () {\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = this.owner.lookup('controller:application');\n      Ember.set(applicationController, 'isInAcceptanceTestMode', true);\n    });\n\n    hooks.afterEach(function () {\n      Ember.run(this.owner, 'destroy');\n    });\n\n    (0, _qunit.test)(testName, function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var $dropdown;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(3);\n\n                _context.next = 3;\n                return (0, _testHelpers.visit)(path);\n\n              case 3:\n                assert.equal((0, _testHelpers.currentURL)(), path, 'Path is correctly');\n\n                $dropdown = Ember.$('.flexberry-dropdown');\n\n                assert.equal($dropdown.length, 1, 'Dropdown is rendered');\n                assert.equal($dropdown[0].innerText.trim(), 'Enum value №2', 'Dropdown value is \"Enum value №2\"');\n\n              case 7:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/acceptance/components/flexberry-groupedit-test', ['qunit', 'dummy/tests/helpers/start-app', 'ember-test-helpers/wait'], function (_qunit, _startApp, _wait) {\n  'use strict';\n\n  var app = void 0;\n\n  (0, _qunit.module)('Acceptance | flexberry-groupedit', {\n    beforeEach: function beforeEach() {\n      // Start application.\n      app = (0, _startApp.default)();\n\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = app.__container__.lookup('controller:application');\n      Ember.set(applicationController, 'isInAcceptanceTestMode', true);\n    },\n    afterEach: function afterEach() {\n      // Destroy application.\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('it properly rerenders', function (assert) {\n    assert.expect(4);\n    var done = assert.async();\n\n    var path = 'components-acceptance-tests/flexberry-groupedit/properly-rerenders';\n    visit(path);\n    (0, _wait.default)().then(function () {\n\n      assert.equal(Ember.$('.object-list-view').find('tr').length, 2);\n\n      // Add record.\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n\n      var detailModel = Ember.get(controller, 'model.details');\n      var store = Ember.get(controller, 'store');\n\n      var detail1 = store.createRecord('components-examples/flexberry-groupedit/shared/detail');\n      var detail2 = store.createRecord('components-examples/flexberry-groupedit/shared/detail');\n      detailModel.pushObjects([detail1, detail2]);\n\n      (0, _wait.default)().then(function () {\n        assert.equal(Ember.$('.object-list-view').find('tr').length, 3);\n\n        var $componentGroupEditToolbar = Ember.$('.groupedit-toolbar');\n        var $componentButtons = $componentGroupEditToolbar.children('.ui.button');\n        var $componentButtonAdd = Ember.$($componentButtons[0]);\n\n        Ember.run(function () {\n          $componentButtonAdd.click();\n        });\n\n        (0, _wait.default)().then(function () {\n          assert.equal(Ember.$('.object-list-view').find('tr').length, 4, 'details add properly');\n\n          var $componentCheckBoxs = Ember.$('.flexberry-checkbox', Ember.$('.object-list-view'));\n          var $componentFirstCheckBox = Ember.$($componentCheckBoxs[0]);\n\n          Ember.run(function () {\n            $componentFirstCheckBox.click();\n          });\n\n          (0, _wait.default)().then(function () {\n            var $componentButtonRemove = Ember.$($componentButtons[1]);\n\n            Ember.run(function () {\n              $componentButtonRemove.click();\n            });\n\n            assert.equal(Ember.$('.object-list-view').find('tr').length, 3, 'details remove properly');\n            done();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-groupedit/flexberry-groupedit-check-all-at-page-test', ['qunit', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'dummy/tests/helpers/start-app'], function (_qunit, _folvTestsFunctions, _startApp) {\n  'use strict';\n\n  var app = void 0;\n  var path = 'components-examples/flexberry-groupedit/configurate-row-example';\n  var testName = 'check all at page';\n  var olvContainerClass = '.object-list-view-container';\n  var trTableClass = 'table.object-list-view tbody tr';\n\n  (0, _qunit.module)('Acceptance | flexberry-groupedit | ' + testName, {\n    beforeEach: function beforeEach() {\n\n      // Start application.\n      app = (0, _startApp.default)();\n\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = app.__container__.lookup('controller:application');\n      applicationController.set('isInAcceptanceTestMode', true);\n    },\n    afterEach: function afterEach() {\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)(testName, function (assert) {\n    assert.expect(4);\n\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $olv = Ember.$('.object-list-view ');\n      var $thead = Ember.$('th.dt-head-left', $olv)[0];\n\n      Ember.run(function () {\n        var done = assert.async();\n        (0, _folvTestsFunctions.loadingList)($thead, olvContainerClass, trTableClass).then(function ($list) {\n          assert.ok($list);\n          var $rows = Ember.$('.object-list-view-helper-column', $list);\n\n          click('.ui.check-all-at-page-button');\n          andThen(function () {\n            var $checkCheckBox = Ember.$('.flexberry-checkbox.checked', $rows);\n            assert.equal($checkCheckBox.length, $rows.length, 'All checkBox in row are select');\n\n            click('.ui.check-all-at-page-button');\n            andThen(function () {\n              $checkCheckBox = Ember.$('.flexberry-checkbox.checked', $rows);\n              assert.equal($checkCheckBox.length, 0, 'All checkBox in row are unselect');\n            });\n          });\n\n          done();\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-groupedit/flexberry-groupedit-configurate-row-test', ['qunit', 'dummy/tests/helpers/start-app'], function (_qunit, _startApp) {\n  'use strict';\n\n  var app = void 0;\n  var path = 'components-examples/flexberry-groupedit/configurate-row-example';\n  var testName = 'configurate row';\n\n  (0, _qunit.module)('Acceptance | flexberry-groupedit | ' + testName, {\n    beforeEach: function beforeEach() {\n\n      // Start application.\n      app = (0, _startApp.default)();\n\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = app.__container__.lookup('controller:application');\n      applicationController.set('isInAcceptanceTestMode', true);\n    },\n    afterEach: function afterEach() {\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)(testName, function (assert) {\n    assert.expect(58);\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path, 'Path is correctly');\n      var $folvRows = Ember.$('.object-list-view-container tbody tr');\n\n      for (var i = 0; i < $folvRows.length; i++) {\n        var $row = $folvRows[i];\n        var $deleteButton = Ember.$('.object-list-view-row-delete-button', $row);\n        var $flagField = Ember.$('.field .flexberry-checkbox', $row);\n\n        if (i % 2 === 0) {\n          assert.equal($deleteButton.hasClass('disabled'), true, 'Delete button in an even row is disabled');\n          assert.equal($flagField.hasClass('checked'), true, 'CheckBox in an even row is checked');\n        } else {\n          assert.equal($deleteButton.hasClass('disabled'), false, 'Delete button in a non-even row isn\\'t disabled');\n          assert.equal($flagField.hasClass('checked'), false, 'CheckBox in an even row isn\\'t checked');\n        }\n\n        var $textField = Ember.$('.field .flexberry-textbox input', $row);\n        assert.equal($textField[0].value, i + 1 + 'test', 'TextBox have currect text');\n      }\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-groupedit/flexberry-groupedit-default-sort-test', ['qunit', 'dummy/tests/helpers/start-app'], function (_qunit, _startApp) {\n  'use strict';\n\n  var app = void 0;\n  var testName = 'default sort test';\n\n  (0, _qunit.module)('Acceptance | flexberry-groupedit | ' + testName, {\n    beforeEach: function beforeEach() {\n\n      // Start application.\n      app = (0, _startApp.default)();\n\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = app.__container__.lookup('controller:application');\n      applicationController.set('isInAcceptanceTestMode', true);\n    },\n    afterEach: function afterEach() {\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)(testName, function (assert) {\n    assert.expect(9);\n    var path = 'ember-flexberry-dummy-suggestion-edit/2e98a54d-7146-4e61-bb2d-a278796c861e';\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      assert.equal(controller.model.id, '2e98a54d-7146-4e61-bb2d-a278796c861e');\n\n      var currentSorting = controller.get('sorting')[0];\n      var defaultSorting = controller.developerUserSettings.suggestionUserVotesGroupEdit.DEFAULT.sorting;\n\n      var $usersVotesTable = Ember.$('.object-list-view')[1];\n\n      click($usersVotesTable.tHead.rows[0].children[1]);\n      andThen(function () {\n        currentSorting = controller.get('sorting')[0];\n        assert.ok(currentSorting.propName === 'voteType', currentSorting.direction === 'asc', 'sorting changed');\n\n        var $defaultSortingButton = Ember.$('.object-list-view .clear-sorting-button')[0];\n\n        click($defaultSortingButton);\n        andThen(function () {\n          currentSorting = controller.get('sorting')[0];\n          assert.ok(currentSorting.propName === defaultSorting[0].propName, currentSorting.direction === defaultSorting[0].direction, 'default sorting');\n          click($usersVotesTable.tHead.rows[0].children[1]);\n\n          andThen(function () {\n            currentSorting = controller.get('sorting')[0];\n            assert.ok(currentSorting.propName === 'voteType', currentSorting.direction === 'asc', 'sorting changed');\n            var $clearSettingsButton = Ember.$('.ui-clear-settings')[0];\n\n            click($clearSettingsButton);\n            andThen(function () {\n              currentSorting = controller.get('sorting')[0];\n              assert.ok(currentSorting.propName === defaultSorting[0].propName, currentSorting.direction === defaultSorting[0].direction);\n\n              var press = Ember.$.Event('click');\n              press.ctrlKey = true;\n              press.which = 17;\n              Ember.$('body').trigger(press);\n\n              andThen(function () {\n                Ember.$($usersVotesTable.tHead.rows[0].children[1]).trigger(press);\n                Ember.run.later(function () {\n                  currentSorting = controller.get('sorting');\n                  assert.ok(currentSorting[0].propName === 'author', currentSorting.direction === 'asc', currentSorting[1].propName === 'voteType', currentSorting.direction === 'asc');\n\n                  click($defaultSortingButton);\n                  andThen(function () {\n                    currentSorting = controller.get('sorting')[0];\n                    assert.ok(currentSorting.propName === defaultSorting[0].propName, currentSorting.direction === defaultSorting[0].direction);\n\n                    Ember.$('body').trigger(press);\n                    andThen(function () {\n                      Ember.$($usersVotesTable.tHead.rows[0].children[1]).trigger(press);\n                      Ember.run.later(function () {\n                        currentSorting = controller.get('sorting');\n                        assert.ok(currentSorting[0].propName === 'author', currentSorting.direction === 'asc', currentSorting[1].propName === 'voteType', currentSorting.direction === 'asc');\n\n                        click($clearSettingsButton);\n                        andThen(function () {\n                          currentSorting = controller.get('sorting')[0];\n                          assert.ok(currentSorting.propName === defaultSorting[0].propName, currentSorting.direction === defaultSorting[0].direction);\n                        });\n                      });\n                    });\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-groupedit/flexberry-groupedit-delete-with-details-test', ['ember-flexberry-data/utils/generate-unique-id', 'ember-flexberry-data/query/builder', 'ember-flexberry-data/query/predicate', 'qunit', 'dummy/tests/helpers/start-app'], function (_generateUniqueId, _builder, _predicate, _qunit, _startApp) {\n  'use strict';\n\n  var app = void 0;\n  var store = void 0;\n  var path = 'components-acceptance-tests/flexberry-groupedit/delete-with-details';\n  var modelName = 'ember-flexberry-dummy-suggestion';\n  var commentModelName = 'ember-flexberry-dummy-comment';\n  var commentVoteModelName = 'ember-flexberry-dummy-comment-vote';\n\n  (0, _qunit.module)('Acceptance | flexberry-groupedit | delete with details', {\n    beforeEach: function beforeEach() {\n\n      // Start application.\n      app = (0, _startApp.default)();\n\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = app.__container__.lookup('controller:application');\n      applicationController.set('isInAcceptanceTestMode', true);\n      store = app.__container__.lookup('service:store');\n    },\n    afterEach: function afterEach() {\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('delete with details', function (assert) {\n    var mainSuggestionRecord = void 0;\n    var mainSuggestionTypeRecord = void 0;\n    var mainApplicationUserRecord = void 0;\n    var initTestData = function initTestData(createdRecordsPrefix) {\n      // Add records for deleting.\n      return Ember.RSVP.Promise.all([store.createRecord('ember-flexberry-dummy-suggestion-type', { name: createdRecordsPrefix + \"0\" }).save(), store.createRecord('ember-flexberry-dummy-application-user', {\n        name: createdRecordsPrefix + \"1\",\n        eMail: \"1\",\n        phone1: \"1\"\n      }).save()]).then(function (createdCustomRecords) {\n        mainSuggestionTypeRecord = createdCustomRecords[0];\n        mainApplicationUserRecord = createdCustomRecords[1];\n\n        return Ember.RSVP.Promise.all([store.createRecord(modelName, { text: createdRecordsPrefix + \"0\", type: createdCustomRecords[0], author: createdCustomRecords[1], editor1: createdCustomRecords[1] }).save()]).then(function (suggestions) {\n          mainSuggestionRecord = suggestions[0];\n          return Ember.RSVP.Promise.all([store.createRecord(commentModelName, { text: createdRecordsPrefix + \"0\", suggestion: suggestions[0], author: createdCustomRecords[1] }).save(), store.createRecord(commentModelName, { text: createdRecordsPrefix + \"1\", suggestion: suggestions[0], author: createdCustomRecords[1] }).save(), store.createRecord(commentModelName, { text: createdRecordsPrefix + \"2\", suggestion: suggestions[0], author: createdCustomRecords[1] }).save()]).then(function (comments) {\n            return Ember.RSVP.Promise.all([store.createRecord(commentVoteModelName, { name: createdRecordsPrefix + \"0\", comment: comments[0], applicationUser: createdCustomRecords[1] }).save(), store.createRecord(commentVoteModelName, { name: createdRecordsPrefix + \"1\", comment: comments[0], applicationUser: createdCustomRecords[1] }).save(), store.createRecord(commentVoteModelName, { name: createdRecordsPrefix + \"2\", comment: comments[1], applicationUser: createdCustomRecords[1] }).save()]);\n          });\n        });\n      });\n    };\n\n    var getRows = function getRows() {\n      var olvContainerClass = '.object-list-view-container';\n      var trTableClass = 'table.object-list-view tbody tr';\n\n      var $folvContainer = Ember.$(olvContainerClass);\n      var $rows = function $rows() {\n        return Ember.$(trTableClass, $folvContainer).toArray();\n      };\n      return $rows;\n    };\n\n    var checkRecordsWereAdded = function checkRecordsWereAdded(searchedRecord) {\n      var $rows = getRows();\n\n      // Check that the records have been added.\n      var recordIsForDeleting = $rows().reduce(function (sum, element) {\n        var nameRecord = Ember.$.trim(element.children[1].children[0].children[0].value);\n        var flag = nameRecord.indexOf(searchedRecord) >= 0;\n        return sum + flag;\n      }, 0);\n\n      return recordIsForDeleting;\n    };\n\n    var getDeleteButton = function getDeleteButton(searchedRecord) {\n      var $rows = getRows();\n      var $deleteBtnInRow = undefined;\n      $rows().forEach(function (element) {\n        var nameRecord = Ember.$.trim(element.children[1].children[0].children[0].value);\n        if (nameRecord.indexOf(searchedRecord) >= 0) {\n          $deleteBtnInRow = Ember.$('.object-list-view-row-delete-button', element);\n        }\n      });\n\n      return $deleteBtnInRow;\n    };\n\n    var lookAtLocalStore = function lookAtLocalStore(modelName, searchedField, searchedValue) {\n      var currentLoadedData = store.peekAll(modelName);\n      for (var i = 0; i < currentLoadedData.content.length; i++) {\n        var record = currentLoadedData.objectAt(i);\n        if (record.get(searchedField) == searchedValue) {\n          return !record.isDeleted;\n        }\n      }\n\n      return false;\n    };\n\n    Ember.run(function () {\n      var done1 = assert.async();\n      var createdRecordsPrefix = 'fge-delete-with-details-test' + (0, _generateUniqueId.default)();\n      initTestData(createdRecordsPrefix).then(function () {\n        visit(path + '?createdRecordsPrefix=' + createdRecordsPrefix);\n        andThen(function () {\n          assert.equal(currentPath(), path, createdRecordsPrefix);\n\n          // Check records added.\n          assert.equal(checkRecordsWereAdded(createdRecordsPrefix + \"0\") > 0, true, 1 + ' record added');\n          assert.equal(checkRecordsWereAdded(createdRecordsPrefix + \"1\") > 0, true, 2 + ' record added');\n          assert.equal(checkRecordsWereAdded(createdRecordsPrefix + \"2\") > 0, true, 3 + ' record added');\n\n          var $deleteButton1 = getDeleteButton(createdRecordsPrefix + \"0\");\n          var done2 = assert.async();\n          Ember.run(function () {\n            // An exception can be thrown to console due to observer on detail's count.\n            $deleteButton1.click();\n          });\n\n          wait().then(function () {\n            assert.equal(checkRecordsWereAdded(createdRecordsPrefix + \"0\"), 0, 1 + ' record deleted');\n            assert.equal(checkRecordsWereAdded(createdRecordsPrefix + \"1\") > 0, true, 2 + ' still on OLV');\n            assert.equal(checkRecordsWereAdded(createdRecordsPrefix + \"2\") > 0, true, 3 + ' still on OLV');\n\n            assert.notOk(lookAtLocalStore(commentModelName, 'text', createdRecordsPrefix + \"0\"), \"1 comment deleted\");\n            assert.ok(lookAtLocalStore(commentModelName, 'text', createdRecordsPrefix + \"1\"), \"2 comment still on store\");\n            assert.ok(lookAtLocalStore(commentModelName, 'text', createdRecordsPrefix + \"2\"), \"3 comment still on store\");\n\n            assert.notOk(lookAtLocalStore(commentVoteModelName, 'comment.text', createdRecordsPrefix + \"0\"), \"Comment votes for 1 deleted\");\n            assert.ok(lookAtLocalStore(commentVoteModelName, 'comment.text', createdRecordsPrefix + \"1\"), \"Comment votes for 2 still on store\");\n\n            var builder = new _builder.default(store, commentModelName).where(new _predicate.SimplePredicate('text', \"==\", createdRecordsPrefix + \"0\"));\n            var done3 = assert.async();\n            store.query(commentModelName, builder.build()).then(function (data) {\n              assert.equal(data.get('length'), 1, '1 comment is not deleted on backend');\n\n              var builder = new _builder.default(store, commentVoteModelName).where(new _predicate.SimplePredicate('comment.text', \"==\", createdRecordsPrefix + \"0\"));\n              var done4 = assert.async();\n              store.query(commentVoteModelName, builder.build()).then(function (data) {\n                assert.equal(data.get('length'), 2, 'Comment votes for comment 1 not deleted on backend');\n                var done5 = assert.async();\n\n                // An exception can be thrown to console due to observer on detail's count.\n                mainSuggestionRecord.rollbackAll();\n                mainSuggestionRecord.destroyRecord().then(function () {\n                  return Ember.RSVP.Promise.all([mainSuggestionTypeRecord.destroyRecord(), mainApplicationUserRecord.destroyRecord()]);\n                }).then(function () {\n                  return done5();\n                });\n\n                done4();\n              });\n              done3();\n            });\n            done2();\n          });\n          done1();\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-groupedit/flexberry-groupedit-sort-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Acceptance | flexberry-groupedit | sort test', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n\n    (0, _qunit.test)('sort test', function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        var recordArray, flexberryGroupeditComponent, sortResult;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(78);\n                recordArray = Ember.A();\n\n                // Создание тестовых данных\n\n                Ember.run(function () {\n                  recordArray.pushObject(_this.owner.lookup('service:store').createRecord('ember-flexberry-dummy-suggestion', {\n                    id: 1,\n                    address: 'Alphabeth5',\n                    text: 'Beatrith5',\n                    date: new Date(2021, 10, 6, 12, 45, 0),\n                    moderated: false\n                  }));\n\n                  recordArray.pushObject(_this.owner.lookup('service:store').createRecord('ember-flexberry-dummy-suggestion', {\n                    id: 2,\n                    address: 'Alphabeth4',\n                    text: 'Beatrith4',\n                    date: new Date(2020, 10, 6, 12, 45, 0),\n                    moderated: true\n                  }));\n\n                  recordArray.pushObject(_this.owner.lookup('service:store').createRecord('ember-flexberry-dummy-suggestion', {\n                    id: 3,\n                    address: 'Alphabeth3',\n                    text: 'Beatrith1',\n                    date: new Date(2022, 10, 6, 12, 45, 0),\n                    moderated: true\n                  }));\n\n                  recordArray.pushObject(_this.owner.lookup('service:store').createRecord('ember-flexberry-dummy-suggestion', {\n                    id: 4,\n                    address: 'Alphabeth2',\n                    text: 'Beatrith2',\n                    date: new Date(2021, 11, 6, 12, 45, 0),\n                    moderated: true\n                  }));\n\n                  recordArray.pushObject(_this.owner.lookup('service:store').createRecord('ember-flexberry-dummy-suggestion', {\n                    id: 5,\n                    address: 'Alphabeth1',\n                    text: 'Beatrith3',\n                    date: new Date(2021, 9, 6, 12, 45, 0),\n                    moderated: true\n                  }));\n                });\n\n                flexberryGroupeditComponent = this.owner.lookup('component:flexberry-groupedit');\n\n\n                try {\n                  sortResult = void 0;\n\n\n                  sortResult = flexberryGroupeditComponent.sortRecords(recordArray, { propName: 'address', direction: 'asc' }, 0, 4);\n                  specialArrayCompare(sortResult, [5, 4, 3, 2, 1], assert, 'sortRecords | address | asc');\n\n                  sortResult = flexberryGroupeditComponent.sortRecords(recordArray, { propName: 'address', direction: 'desc' }, 0, 4);\n                  specialArrayCompare(sortResult, [1, 2, 3, 4, 5], assert, 'sortRecords | address | desc');\n\n                  sortResult = flexberryGroupeditComponent.sortRecords(recordArray, { propName: 'address', direction: 'none' }, 0, 4);\n                  specialArrayCompare(sortResult, [1, 2, 3, 4, 5], assert, 'sortRecords | address | none');\n\n                  sortResult = flexberryGroupeditComponent.sortRecords(recordArray, { propName: 'date', direction: 'asc' }, 0, 4);\n                  specialArrayCompare(sortResult, [2, 5, 1, 4, 3], assert, 'sortRecords | date | asc');\n\n                  sortResult = flexberryGroupeditComponent.sortRecords(recordArray, { propName: 'date', direction: 'desc' }, 0, 4);\n                  specialArrayCompare(sortResult, [3, 4, 1, 5, 2], assert, 'sortRecords | date | desc');\n\n                  sortResult = flexberryGroupeditComponent.sortRecords(recordArray, { propName: 'date', direction: 'none' }, 0, 4);\n                  specialArrayCompare(sortResult, [3, 4, 1, 5, 2], assert, 'sortRecords | date | none');\n\n                  sortResult = flexberryGroupeditComponent.sortRecords(recordArray, { propName: 'moderated', direction: 'asc' }, 0, 4);\n                  specialArrayCompare(sortResult, [1, 4, 3, 5, 2], assert, 'sortRecords | boolean | asc');\n\n                  sortResult = flexberryGroupeditComponent.sortRecords(recordArray, { propName: 'moderated', direction: 'desc' }, 0, 4);\n                  specialArrayCompare(sortResult, [4, 3, 5, 2, 1], assert, 'sortRecords | boolean | desc');\n\n                  sortResult = flexberryGroupeditComponent.sortRecords(recordArray, { propName: 'moderated', direction: 'none' }, 0, 4);\n                  specialArrayCompare(sortResult, [4, 3, 5, 2, 1], assert, 'sortRecords | boolean | none');\n\n                  sortResult = flexberryGroupeditComponent.sortRecords(recordArray, { propName: 'id', direction: 'asc' }, 0, 4);\n                  specialArrayCompare(sortResult, [1, 2, 3, 4, 5], assert, 'sortRecords | id | asc');\n\n                  sortResult = flexberryGroupeditComponent.sortRecords(recordArray, { propName: 'address', direction: 'asc' }, 1, 3);\n                  specialArrayCompare(sortResult, [1, 4, 3, 2, 5], assert, 'sortRecords | partial sort | asc');\n\n                  sortResult = flexberryGroupeditComponent.sortRecords(recordArray, { propName: 'address', direction: 'asc' }, 1, 4);\n                  specialArrayCompare(sortResult, [1, 5, 4, 3, 2], assert, 'sortRecords | partial sort | asc');\n\n                  sortResult = flexberryGroupeditComponent.sortRecords(recordArray, { propName: 'address', direction: 'desc' }, 0, 3);\n                  specialArrayCompare(sortResult, [1, 3, 4, 5, 2], assert, 'sortRecords | partial sort | desc');\n                } finally {\n                  Ember.run(function () {\n                    recordArray.forEach(function (currentRecord) {\n                      _this.owner.lookup('service:store').deleteRecord(currentRecord);\n                    });\n                  });\n                }\n\n              case 5:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  });\n\n  function specialArrayCompare(resultArray, compareArray, assert, message) {\n    assert.equal(compareArray.length, resultArray.length, message + ' | Length');\n    for (var i = 0; i < compareArray.length; i++) {\n      assert.equal(compareArray[i], resultArray.objectAt(i).id, message + ' | Data ' + i);\n    }\n  }\n});","define('dummy/tests/acceptance/components/flexberry-groupedit/flexberry-groupedit-user-button-test', ['qunit', 'dummy/tests/helpers/start-app'], function (_qunit, _startApp) {\n  'use strict';\n\n  var app = void 0;\n  var testName = 'user button test';\n\n  (0, _qunit.module)('Acceptance | flexberry-groupedit | ' + testName, {\n    beforeEach: function beforeEach() {\n\n      // Start application.\n      app = (0, _startApp.default)();\n\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = app.__container__.lookup('controller:application');\n      applicationController.set('isInAcceptanceTestMode', true);\n    },\n    afterEach: function afterEach() {\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)(testName, function (assert) {\n    assert.expect(3);\n    var path = 'components-examples/flexberry-groupedit/custom-buttons-example';\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n\n      // Enable the hi button.\n      click('.toggle-hi-button');\n\n      // First click.\n      click('.test-click-button');\n      andThen(function () {\n        return assert.equal(controller.clickCounter, 2, 'Test button was pressed');\n      });\n\n      // Second click.\n      click('.test-click-button');\n      andThen(function () {\n        return assert.equal(controller.clickCounter, 3, 'Test button was pressed');\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-lookup/change-component-lookup-test', ['dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_executeFlexberryLookupTest) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var openLookupDialog = function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee($lookup) {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt('return', new Ember.RSVP.Promise(function (resolve, reject) {\n                var checkIntervalId = void 0;\n                var checkIntervalSucceed = false;\n                var checkInterval = 500;\n                var timeout = 4000;\n\n                var $lookupChooseButton = Ember.$('.ui-change', $lookup);\n\n                // Try to open lookup dialog.\n                Ember.run(function () {\n                  $lookupChooseButton.click();\n                });\n\n                // Wait for lookup dialog to be opened & data loaded.\n                Ember.run(function () {\n                  checkIntervalId = window.setInterval(function () {\n                    var $lookupDialog = Ember.$('.flexberry-modal');\n                    var $records = Ember.$('.content table.object-list-view tbody tr', $lookupDialog);\n                    if ($records.length === 0) {\n                      return; // Data isn't loaded yet.\n                    }\n\n                    // Data is loaded.\n                    window.clearInterval(checkIntervalId);\n                    checkIntervalSucceed = true;\n                    resolve($lookupDialog);\n                  }, checkInterval);\n                });\n\n                // Set wait timeout.\n                Ember.run(function () {\n                  window.setTimeout(function () {\n                    if (checkIntervalSucceed) {\n                      return;\n                    }\n                    window.clearInterval(checkIntervalId);\n                    reject('flexberry-lookup load data operation is timed out');\n                  }, timeout);\n                });\n              }));\n\n            case 1:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function openLookupDialog(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var chooseRecordInLookupDialog = function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2($lookupDialog, recordIndex) {\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt('return', new Ember.RSVP.Promise(function (resolve, reject) {\n                var checkIntervalId = void 0;\n                var checkIntervalSucceed = false;\n                var checkInterval = 500;\n                var timeout = 4000;\n\n                var $records = Ember.$('.content table.object-list-view tbody tr', $lookupDialog);\n                var $choosedRecord = Ember.$($records[recordIndex]);\n\n                // Try to choose record in the lookup dialog.\n                Ember.run(function () {\n                  var $choosedRecordFirstCell = Ember.$(Ember.$('td', $choosedRecord)[1]);\n                  $choosedRecordFirstCell.click();\n\n                  // Click on modal-dialog close icon.\n                  var $modelDilogClose = Ember.$('.close.icon');\n                  $modelDilogClose.click();\n                });\n\n                // Wait for lookup dialog to be closed.\n                Ember.run(function () {\n                  checkIntervalId = window.setInterval(function () {\n                    if (!$lookupDialog.hasClass('hidden')) {\n                      return; // Dialog is still opened.\n                    }\n                    window.clearInterval(checkIntervalId);\n                    checkIntervalSucceed = true;\n                    resolve();\n                  }, checkInterval);\n                });\n\n                // Set wait timeout.\n                Ember.run(function () {\n                  window.setTimeout(function () {\n                    if (checkIntervalSucceed) {\n                      return;\n                    }\n                    window.clearInterval(checkIntervalId);\n                    reject('flexberry-lookup choose record operation is timed out');\n                  }, timeout);\n                });\n              }));\n\n            case 1:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, undefined);\n    }));\n\n    return function chooseRecordInLookupDialog(_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  (0, _executeFlexberryLookupTest.executeTest)('changes in component\\'s value causes changes in related model\\'s specified \\'belongsTo\\' relation', function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(store, assert, app, latestReceivedRecords) {\n      var controller, model, relationName, displayAttributeName, updateLookupValueTest, $lookup, $lookupInput, $lookupDialog, chosenRecord, expectedRecord, chosenRecordDisplayAttribute, updateLookupValueTestUpdated;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              assert.expect(6);\n              _context3.next = 3;\n              return visit('components-acceptance-tests/flexberry-lookup/base-operations');\n\n            case 3:\n              controller = app.__container__.lookup('controller:' + currentRouteName());\n              model = Ember.get(controller, 'model');\n              relationName = Ember.get(controller, 'relationName');\n              displayAttributeName = Ember.get(controller, 'displayAttributeName');\n              updateLookupValueTest = Ember.get(controller, 'updateLookupValueTest');\n\n              assert.strictEqual(updateLookupValueTest, 'base', 'updateLookupValueTest has default value');\n\n              $lookup = Ember.$('.flexberry-lookup');\n              $lookupInput = Ember.$('input', $lookup);\n\n              assert.strictEqual($lookupInput.val(), '', 'lookup display value is empty by default');\n\n              // Open lookup dialog and choose first record.\n              _context3.next = 14;\n              return openLookupDialog($lookup);\n\n            case 14:\n              $lookupDialog = _context3.sent;\n\n              assert.ok($lookupDialog, 'Lookup dialog opened successfully');\n\n              // Choose first loaded record.\n              _context3.next = 18;\n              return chooseRecordInLookupDialog($lookupDialog, 0);\n\n            case 18:\n\n              // Check that chosen record is set to related model's 'belongsTo' relation.\n              chosenRecord = model.get(relationName);\n              expectedRecord = latestReceivedRecords[0];\n\n              assert.strictEqual(chosenRecord, expectedRecord, 'Chosen record is set to model\\'s \\'' + relationName + '\\' relation as expected');\n\n              chosenRecordDisplayAttribute = chosenRecord.get(displayAttributeName);\n\n              assert.strictEqual($lookupInput.val(), chosenRecordDisplayAttribute, 'Lookup display value equals to chosen record\\'s \\'' + displayAttributeName + '\\' attribute');\n\n              updateLookupValueTestUpdated = Ember.get(controller, 'updateLookupValueTest');\n\n              assert.strictEqual(updateLookupValueTestUpdated, 'updated', 'updateLookupValue action was called');\n\n            case 25:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, undefined);\n    }));\n\n    return function (_x4, _x5, _x6, _x7) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-lookup/change-model-lookup-test', ['ember-flexberry-data/query/builder', 'dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test', '@ember/test-helpers'], function (_builder, _executeFlexberryLookupTest, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFlexberryLookupTest.executeTest)('changes in model\\'s value causes changes in component\\'s specified \\'belongsTo\\' model', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert, app) {\n      var $lookup, $lookupInput, controller, model, query, suggestionTypes, suggestionType;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(2);\n              _context.next = 3;\n              return visit('components-acceptance-tests/flexberry-lookup/base-operations');\n\n            case 3:\n              $lookup = Ember.$('.flexberry-lookup');\n              $lookupInput = Ember.$('input', $lookup);\n\n              assert.strictEqual($lookupInput.val(), '', 'lookup display value is empty by default');\n\n              controller = app.__container__.lookup('controller:' + currentRouteName());\n              model = Ember.get(controller, 'model');\n\n              // Создаем запрос\n\n              query = new _builder.default(store).from('ember-flexberry-dummy-suggestion-type').selectByProjection('SettingLookupExampleView');\n\n              // Загружаем данные\n\n              _context.next = 11;\n              return store.query('ember-flexberry-dummy-suggestion-type', query.build());\n\n            case 11:\n              suggestionTypes = _context.sent;\n              suggestionType = suggestionTypes.get('firstObject');\n\n\n              Ember.run(function () {\n                model.set('type', suggestionType);\n              });\n\n              _context.next = 16;\n              return (0, _testHelpers.settled)();\n\n            case 16:\n              // Убедитесь, что все асинхронные операции завершены\n\n              // Проверяем значение после обновления модели\n              $lookupInput = Ember.$('input', $lookup);\n              assert.strictEqual($lookupInput.val(), suggestionType.get('name'), 'lookup display value isn\\'t empty');\n\n            case 18:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test', ['exports', 'qunit', 'dummy/tests/helpers/start-app'], function (exports, _qunit, _startApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.executeTest = executeTest;\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  function executeTest(testName, callback, additionalBeforeEachSettings) {\n    var app = void 0;\n    var store = void 0;\n    var latestReceivedRecords = Ember.A();\n\n    (0, _qunit.module)('Acceptance | flexberry-lookup-base | ' + testName, {\n      beforeEach: function beforeEach() {\n        // Start application.\n        app = (0, _startApp.default)();\n\n        // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n        var applicationController = app.__container__.lookup('controller:application');\n        applicationController.set('isInAcceptanceTestMode', true);\n\n        // Override store.query method to receive & remember records which will be requested by lookup dialog.\n        store = app.__container__.lookup('service:store');\n        var originalQueryMethod = store.query;\n        store.query = function () {\n          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return originalQueryMethod.apply(this, args).then(function (records) {\n            latestReceivedRecords.clear();\n            latestReceivedRecords.addObjects(records.toArray());\n            return records;\n          });\n        };\n\n        if (!Ember.isNone(additionalBeforeEachSettings) && typeof additionalBeforeEachSettings === 'function') {\n          additionalBeforeEachSettings(app, store);\n        }\n      },\n      afterEach: function afterEach() {\n        // Remove semantic ui modal dialog's dimmer.\n        Ember.$('body .ui.dimmer.modals').remove();\n\n        // Destroy application.\n        Ember.run(app, 'destroy');\n      }\n    });\n\n    (0, _qunit.test)(testName, function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return callback(store, assert, app, latestReceivedRecords);\n\n              case 2:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-actions-test', ['dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test', '@ember/test-helpers'], function (_executeFlexberryLookupTest, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup actions test', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert, app) {\n      var controller, $onRemoveData, $onChooseData, $lookupButtonChoose, $lookupButtonRemove;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(5);\n\n              controller = app.__container__.lookup('controller:components-acceptance-tests/flexberry-lookup/settings-example-actions');\n\n              // Remap remove action.\n\n              $onRemoveData = void 0;\n\n              Ember.set(controller, 'actions.externalRemoveAction', function (actual) {\n                $onRemoveData = actual;\n                assert.notEqual($onRemoveData, undefined, 'Component sends \\'remove\\' action after first click');\n                assert.strictEqual($onRemoveData.relationName, 'type', 'Component sends \\'remove\\' with actual relationName');\n              });\n\n              // Remap choose action.\n              $onChooseData = void 0;\n\n              Ember.set(controller, 'actions.externalChooseAction', function (actual) {\n                $onChooseData = actual;\n                assert.notEqual($onChooseData, undefined, 'Component sends \\'choose\\' action after first click');\n                assert.strictEqual($onChooseData.componentName, 'flexberry-lookup', 'Component sends \\'choose\\' with actual componentName');\n                assert.strictEqual($onChooseData.projection, 'SettingLookupExampleView', 'Component sends \\'choose\\' with actual projection');\n              });\n\n              _context.next = 8;\n              return visit('components-acceptance-tests/flexberry-lookup/settings-example-actions');\n\n            case 8:\n              _context.next = 10;\n              return (0, _testHelpers.settled)();\n\n            case 10:\n              $lookupButtonChoose = Ember.$('.ui-change');\n              $lookupButtonRemove = Ember.$('.ui-clear');\n\n              // Simulate clicks on the buttons\n\n              Ember.run(function () {\n                $lookupButtonChoose.click();\n                $lookupButtonRemove.click();\n              });\n\n              // Wait for any asynchronous operations to complete\n              _context.next = 15;\n              return (0, _testHelpers.settled)();\n\n            case 15:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-autocomplete-en-test', ['dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test', 'dummy/tests/acceptance/components/flexberry-lookup/lookup-test-functions', '@ember/test-helpers'], function (_executeFlexberryLookupTest, _lookupTestFunctions, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup autocomplete message en', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert, app) {\n      var path, textbox, $message, $messageHeader, $messageDescription;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(4);\n              path = 'components-acceptance-tests/flexberry-lookup/settings-example-autocomplete';\n              _context.next = 4;\n              return visit(path);\n\n            case 4:\n              assert.equal(currentPath(), path, 'Navigated to the correct path');\n\n              _context.next = 7;\n              return (0, _lookupTestFunctions.loadingLocales)('en', app);\n\n            case 7:\n              textbox = Ember.$('.ember-text-field')[0];\n              _context.next = 10;\n              return fillIn(textbox, 'gfhfkjglkhlh');\n\n            case 10:\n              _context.next = 12;\n              return (0, _testHelpers.settled)();\n\n            case 12:\n              _context.next = 14;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 6000);\n              });\n\n            case 14:\n\n              // Check for the message\n              $message = Ember.$('.message');\n\n              assert.strictEqual($message.hasClass('empty'), true, 'Component\\'s wrapper has message');\n\n              $messageHeader = $message.children('.header');\n\n              assert.equal($messageHeader.text(), 'No results', 'Message\\'s header is properly');\n\n              $messageDescription = $message.children('.description');\n\n              assert.equal($messageDescription.text(), 'No results found', 'Message\\'s description is properly');\n\n            case 20:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-autocomplete-ru-test', ['@ember/test-helpers', 'dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test', 'dummy/tests/acceptance/components/flexberry-lookup/lookup-test-functions'], function (_testHelpers, _executeFlexberryLookupTest, _lookupTestFunctions) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup autocomplete message ru', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert, app) {\n      var path, textbox, $message, $messageHeader, $messageDescription;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(4);\n              path = 'components-acceptance-tests/flexberry-lookup/settings-example-autocomplete';\n              _context.next = 4;\n              return visit(path);\n\n            case 4:\n              assert.equal(currentPath(), path, 'The current URL is correct');\n\n              _context.next = 7;\n              return (0, _lookupTestFunctions.loadingLocales)('ru', app);\n\n            case 7:\n              textbox = Ember.$('.ember-text-field')[0];\n              _context.next = 10;\n              return fillIn(textbox, 'gfhfkjglkhlh');\n\n            case 10:\n              _context.next = 12;\n              return (0, _testHelpers.settled)();\n\n            case 12:\n              _context.next = 14;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 6000);\n              });\n\n            case 14:\n              $message = Ember.$('.message');\n\n              assert.ok($message.hasClass('empty'), 'Component\\'s wrapper has message');\n\n              $messageHeader = $message.children('.header');\n\n              assert.equal($messageHeader.text(), 'Нет данных', 'Message\\'s header is properly');\n\n              $messageDescription = $message.children('.description');\n\n              assert.equal($messageDescription.text(), 'Значения не найдены', 'Message\\'s description is properly');\n\n            case 20:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-autofill-by-limit-test', ['@ember/test-helpers', 'dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_testHelpers, _executeFlexberryLookupTest) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup autofillByLimit in readonly test', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert) {\n      var $lookupField, value;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(1);\n              _context.next = 3;\n              return visit('components-acceptance-tests/flexberry-lookup/settings-example-autofill-by-limit');\n\n            case 3:\n              $lookupField = document.querySelector('.isreadonly .lookup-field');\n              value = $lookupField.value;\n\n              assert.ok(Ember.isBlank(value), 'Value was changed');\n\n            case 6:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup autofillByLimit is clean test', function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(store, assert) {\n      var $lookupField, value, $clearButton, valueUpdate;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              assert.expect(2);\n              _context2.next = 3;\n              return visit('components-acceptance-tests/flexberry-lookup/settings-example-autofill-by-limit');\n\n            case 3:\n              _context2.next = 5;\n              return (0, _testHelpers.settled)();\n\n            case 5:\n              $lookupField = document.querySelector('.isclean .lookup-field');\n              value = $lookupField.value;\n\n              assert.notOk(Ember.isBlank(value), 'Value wasn\\'t changed');\n\n              $clearButton = document.querySelector('.isclean .ui-clear');\n              _context2.next = 11;\n              return (0, _testHelpers.click)($clearButton);\n\n            case 11:\n              _context2.next = 13;\n              return (0, _testHelpers.settled)();\n\n            case 13:\n              valueUpdate = $lookupField.value;\n\n              assert.ok(Ember.isBlank(valueUpdate), 'Value isn\\'t empty');\n\n            case 15:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, undefined);\n    }));\n\n    return function (_x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup autofillByLimit changes select value test', function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(store, assert, app) {\n      var controller, defaultValue, $lookupField, value;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              assert.expect(1);\n              _context3.next = 3;\n              return visit('components-acceptance-tests/flexberry-lookup/settings-example-autofill-by-limit');\n\n            case 3:\n              controller = app.__container__.lookup('controller:' + currentRouteName());\n              defaultValue = controller.defaultValue.id;\n              $lookupField = document.querySelector('.exist .lookup-field');\n              value = $lookupField.value;\n\n\n              assert.notEqual(defaultValue, value, 'DefaultValue: \\'' + defaultValue + '\\' didn\\'t change');\n\n            case 8:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, undefined);\n    }));\n\n    return function (_x5, _x6, _x7) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-custom-window-test', ['ember-flexberry-data/query/builder', 'ember-flexberry-data/query/condition', 'ember-flexberry-data/query/filter-operator', 'ember-flexberry-data/query/predicate', 'dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_builder, _condition, _filterOperator, _predicate, _executeFlexberryLookupTest) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup custom window test', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert, app) {\n      var modelName, waitTime, nameEtalone, eMailEtalone, sp1, sp2, cp, storeInstance, builder, result, arr, $lookupChooseButton, $filterElementOnToolbar, $filterInput, $filterApplyButton, lookupController, currentModel, filteredByCommonProjectionCountN, $closeIcon, testController, filteredByFilterProjectionCount, filteredByFilterProjectionCount2, filteredInAnotherLookup;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return visit('components-acceptance-tests/flexberry-lookup/settings-example-custom-window');\n\n            case 2:\n              modelName = 'ember-flexberry-dummy-application-user';\n              waitTime = 2000;\n              nameEtalone = void 0;\n              eMailEtalone = void 0;\n\n\n              assert.equal(currentURL(), 'components-acceptance-tests/flexberry-lookup/settings-example-custom-window');\n\n              sp1 = new _predicate.SimplePredicate('name', _filterOperator.default.Neq, '');\n              sp2 = new _predicate.SimplePredicate('eMail', _filterOperator.default.Neq, '');\n              cp = new _predicate.ComplexPredicate(_condition.default.And, sp1, sp2);\n              storeInstance = app.__container__.lookup('service:store');\n              builder = new _builder.default(storeInstance).from(modelName).selectByProjection('ApplicationUserL').where(cp).top(1);\n              _context.next = 14;\n              return storeInstance.query(modelName, builder.build());\n\n            case 14:\n              result = _context.sent;\n              arr = result.toArray();\n\n              nameEtalone = arr.objectAt(0).get('name');\n              eMailEtalone = arr.objectAt(0).get('eMail');\n\n              assert.notEqual(nameEtalone, eMailEtalone);\n\n              $lookupChooseButton = Ember.$('.ui-change');\n\n              assert.equal($lookupChooseButton.length, 4);\n\n              Ember.run(function () {\n                $lookupChooseButton[0].click();\n              });\n\n              _context.next = 24;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, waitTime);\n              });\n\n            case 24:\n              $filterElementOnToolbar = Ember.$('div.olv-search');\n\n              assert.equal($filterElementOnToolbar.length, 1, 'Lookup window has filter element on toolbar.');\n\n              $filterInput = Ember.$('div.olv-search input');\n              $filterApplyButton = Ember.$('div.olv-search button.search-button');\n              lookupController = app.__container__.lookup('controller:lookup-dialog');\n\n              // 1) Filter by name as nameEtalone by common projection and get N records.\n\n              Ember.run(function () {\n                fillIn($filterInput, nameEtalone);\n              });\n\n              $filterApplyButton.click();\n              _context.next = 33;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, waitTime);\n              });\n\n            case 33:\n              currentModel = Ember.get(lookupController, 'model');\n              filteredByCommonProjectionCountN = Ember.get(currentModel, 'meta.count');\n\n              assert.ok(filteredByCommonProjectionCountN >= 1, 'Found ' + filteredByCommonProjectionCountN + ' records by common projection filtered by \"' + nameEtalone + '\".');\n\n              // Close for proper initiation of filter projection name.\n              $closeIcon = Ember.$('i.close');\n\n              Ember.run(function () {\n                $closeIcon.click();\n              });\n\n              _context.next = 40;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, waitTime);\n              });\n\n            case 40:\n\n              // 2) Filter by eMail as eMailEtalone by filter projection containing only eMail property and get at least 1 record.\n              testController = app.__container__.lookup('controller:' + currentRouteName());\n\n              Ember.run(function () {\n                Ember.set(testController, 'filterProjectionName', 'TestLookupCustomWindow');\n                Ember.set(testController, 'projectionName', 'ApplicationUserE');\n              });\n\n              Ember.run(function () {\n                $lookupChooseButton[0].click();\n              });\n\n              _context.next = 45;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, waitTime);\n              });\n\n            case 45:\n\n              $filterElementOnToolbar = Ember.$('div.olv-search');\n              assert.equal($filterElementOnToolbar.length, 1, 'Lookup window has filter element on toolbar.');\n              $filterInput = Ember.$('div.olv-search input');\n              $filterApplyButton = Ember.$('div.olv-search button.search-button');\n              Ember.run(function () {\n                fillIn($filterInput, eMailEtalone);\n              });\n              $filterApplyButton.click();\n\n              _context.next = 53;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, waitTime);\n              });\n\n            case 53:\n\n              currentModel = Ember.get(lookupController, 'model');\n              filteredByFilterProjectionCount = Ember.get(currentModel, 'meta.count');\n\n              assert.ok(filteredByFilterProjectionCount >= 1, 'Found ' + filteredByFilterProjectionCount + ' records by filter projection filtered by \"' + eMailEtalone + '\".');\n\n              // 3) Filter by name as nameEtalone by filter projection containing only eMail property and get less than N records.\n              $filterElementOnToolbar = Ember.$('div.olv-search');\n              assert.equal($filterElementOnToolbar.length, 1, 'Lookup window has filter element on toolbar.');\n              $filterInput = Ember.$('div.olv-search input');\n              $filterApplyButton = Ember.$('div.olv-search button.search-button');\n              Ember.run(function () {\n                fillIn($filterInput, nameEtalone);\n              });\n              $filterApplyButton.click();\n\n              _context.next = 64;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, waitTime);\n              });\n\n            case 64:\n\n              currentModel = Ember.get(lookupController, 'model');\n              filteredByFilterProjectionCount2 = Ember.get(currentModel, 'meta.count');\n\n              assert.ok(filteredByCommonProjectionCountN > filteredByFilterProjectionCount2, 'Found ' + filteredByFilterProjectionCount2 + ' records by filter projection filtered by \"' + nameEtalone + '\".');\n\n              // 4) Open another lookup and check that filter projection name is not used and controller is clear from old options.\n              $closeIcon = Ember.$('i.close');\n              Ember.run(function () {\n                $closeIcon.click();\n              });\n\n              _context.next = 71;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, waitTime);\n              });\n\n            case 71:\n\n              Ember.run(function () {\n                $lookupChooseButton[1].click();\n              });\n\n              _context.next = 74;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, waitTime);\n              });\n\n            case 74:\n\n              $filterElementOnToolbar = Ember.$('div.olv-search');\n              assert.equal($filterElementOnToolbar.length, 1, 'Another lookup window has filter element on toolbar.');\n              $filterInput = Ember.$('div.olv-search input');\n              $filterApplyButton = Ember.$('div.olv-search button.search-button');\n              Ember.run(function () {\n                fillIn($filterInput, nameEtalone);\n              });\n              $filterApplyButton.click();\n\n              _context.next = 82;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, waitTime);\n              });\n\n            case 82:\n\n              currentModel = Ember.get(lookupController, 'model');\n              filteredInAnotherLookup = Ember.get(currentModel, 'meta.count');\n\n              assert.equal(filteredInAnotherLookup, filteredByCommonProjectionCountN, 'Found ' + filteredInAnotherLookup + ' records in another lookup filtered by \"' + nameEtalone + '\".');\n\n            case 85:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup on groupedit custom window test', function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(store, assert, app) {\n      var modelName, waitTime, nameEtalone, eMailEtalone, sp1, sp2, cp, storeInstance, builder, result, arr, $lookupChooseButton, $filterElementOnToolbar, $filterInput, $filterApplyButton, lookupController, currentModel, filteredByCommonProjectionCountN, $closeIcon, filteredByFilterProjectionCount, filteredByFilterProjectionCount2, filteredInAnotherLookup;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return visit('components-acceptance-tests/flexberry-lookup/settings-example-custom-window');\n\n            case 2:\n              modelName = 'ember-flexberry-dummy-application-user';\n              waitTime = 2000;\n              nameEtalone = void 0;\n              eMailEtalone = void 0;\n\n\n              assert.equal(currentURL(), 'components-acceptance-tests/flexberry-lookup/settings-example-custom-window');\n\n              sp1 = new _predicate.SimplePredicate('name', _filterOperator.default.Neq, '');\n              sp2 = new _predicate.SimplePredicate('eMail', _filterOperator.default.Neq, '');\n              cp = new _predicate.ComplexPredicate(_condition.default.And, sp1, sp2);\n              storeInstance = app.__container__.lookup('service:store');\n              builder = new _builder.default(storeInstance).from(modelName).selectByProjection('ApplicationUserL').where(cp).top(1);\n              _context2.next = 14;\n              return storeInstance.query(modelName, builder.build());\n\n            case 14:\n              result = _context2.sent;\n              arr = result.toArray();\n\n              nameEtalone = arr.objectAt(0).get('name');\n              eMailEtalone = arr.objectAt(0).get('eMail');\n\n              assert.notEqual(nameEtalone, eMailEtalone);\n\n              $lookupChooseButton = Ember.$('.ui-change');\n\n              assert.equal($lookupChooseButton.length, 4);\n\n              Ember.run(function () {\n                $lookupChooseButton[2].click();\n              });\n\n              _context2.next = 24;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, waitTime);\n              });\n\n            case 24:\n              $filterElementOnToolbar = Ember.$('div.olv-search');\n\n              assert.equal($filterElementOnToolbar.length, 1, 'Lookup window from groupedit has filter element on toolbar.');\n\n              $filterInput = Ember.$('div.olv-search input');\n              $filterApplyButton = Ember.$('div.olv-search button.search-button');\n              lookupController = app.__container__.lookup('controller:lookup-dialog');\n\n              // 1) Filter by name as nameEtalone by common projection and get N records.\n\n              Ember.run(function () {\n                fillIn($filterInput, nameEtalone);\n              });\n\n              $filterApplyButton.click();\n              _context2.next = 33;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, waitTime);\n              });\n\n            case 33:\n              currentModel = Ember.get(lookupController, 'model');\n              filteredByCommonProjectionCountN = Ember.get(currentModel, 'meta.count');\n\n              assert.ok(filteredByCommonProjectionCountN >= 1, 'Found ' + filteredByCommonProjectionCountN + ' records by common projection filtered by \"' + nameEtalone + '\".');\n\n              $closeIcon = Ember.$('i.close');\n\n              Ember.run(function () {\n                $closeIcon.click();\n              });\n\n              _context2.next = 40;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, waitTime);\n              });\n\n            case 40:\n\n              // 2) Filter by eMail as eMailEtalone by filter projection containing only eMail property and get at least 1 record.\n              Ember.run(function () {\n                $lookupChooseButton[3].click();\n              });\n\n              _context2.next = 43;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, waitTime);\n              });\n\n            case 43:\n\n              $filterElementOnToolbar = Ember.$('div.olv-search');\n              assert.equal($filterElementOnToolbar.length, 1, 'Lookup window from groupedit has filter element on toolbar.');\n              $filterInput = Ember.$('div.olv-search input');\n              $filterApplyButton = Ember.$('div.olv-search button.search-button');\n              Ember.run(function () {\n                fillIn($filterInput, eMailEtalone);\n              });\n              $filterApplyButton.click();\n\n              _context2.next = 51;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, waitTime);\n              });\n\n            case 51:\n\n              currentModel = Ember.get(lookupController, 'model');\n              filteredByFilterProjectionCount = Ember.get(currentModel, 'meta.count');\n\n              assert.ok(filteredByFilterProjectionCount >= 1, 'Found ' + filteredByFilterProjectionCount + ' records by filter projection filtered by \"' + eMailEtalone + '\".');\n\n              // 3) Filter by name as nameEtalone by filter projection containing only eMail property and get less than N records.\n              $filterElementOnToolbar = Ember.$('div.olv-search');\n              assert.equal($filterElementOnToolbar.length, 1, 'Lookup window has filter element on toolbar.');\n              $filterInput = Ember.$('div.olv-search input');\n              $filterApplyButton = Ember.$('div.olv-search button.search-button');\n              Ember.run(function () {\n                fillIn($filterInput, nameEtalone);\n              });\n              $filterApplyButton.click();\n\n              _context2.next = 62;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, waitTime);\n              });\n\n            case 62:\n\n              currentModel = Ember.get(lookupController, 'model');\n              filteredByFilterProjectionCount2 = Ember.get(currentModel, 'meta.count');\n\n              assert.ok(filteredByCommonProjectionCountN > filteredByFilterProjectionCount2, 'Found ' + filteredByFilterProjectionCount2 + ' records by filter projection filtered by \"' + nameEtalone + '\".');\n\n              // 4) Open another lookup and check that filter projection name is not used and controller is clear from old options.\n              $closeIcon = Ember.$('i.close');\n              Ember.run(function () {\n                $closeIcon.click();\n              });\n\n              _context2.next = 69;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, waitTime);\n              });\n\n            case 69:\n\n              Ember.run(function () {\n                $lookupChooseButton[2].click();\n              });\n\n              _context2.next = 72;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, waitTime);\n              });\n\n            case 72:\n\n              $filterElementOnToolbar = Ember.$('div.olv-search');\n              assert.equal($filterElementOnToolbar.length, 1, 'Another lookup window from groupedit has filter element on toolbar.');\n              $filterInput = Ember.$('div.olv-search input');\n              $filterApplyButton = Ember.$('div.olv-search button.search-button');\n              Ember.run(function () {\n                fillIn($filterInput, nameEtalone);\n              });\n              $filterApplyButton.click();\n\n              _context2.next = 80;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, waitTime);\n              });\n\n            case 80:\n\n              currentModel = Ember.get(lookupController, 'model');\n              filteredInAnotherLookup = Ember.get(currentModel, 'meta.count');\n\n              assert.equal(filteredInAnotherLookup, filteredByCommonProjectionCountN, 'Found ' + filteredInAnotherLookup + ' records in another lookup filtered by \"' + nameEtalone + '\".');\n\n            case 83:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, undefined);\n    }));\n\n    return function (_x4, _x5, _x6) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-default-ordering-test', ['@ember/test-helpers', 'dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_testHelpers, _executeFlexberryLookupTest) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup default ordering test', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert, app) {\n      var path, checkHeaderOrder, $lookupChooseButton, $menuNextPageButton, $menuCloseButton, $defaultSortingButton;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              checkHeaderOrder = function checkHeaderOrder() {\n                var defaultSorting = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n                var $menuTableHeaders = Ember.$('.content table.object-list-view thead tr th');\n                $menuTableHeaders.each(function () {\n                  var $header = $(this).children('div');\n                  var $headerName = $header.attr('data-olv-header-property-name');\n                  var $headerOrder = $header.children('.object-list-view-order-icon');\n                  var $headerOrderTitle = $headerOrder.children('div').attr('title');\n\n                  var columnIsName = $headerName === 'name';\n\n                  if (columnIsName && !defaultSorting) {\n                    assert.equal($headerOrder.length === 0, true, $headerName + ' has no sorting');\n                    return;\n                  }\n\n                  assert.equal($headerOrder.length !== 0, true, $headerName + ' has sorting ' + $headerOrderTitle);\n\n                  if (!columnIsName && defaultSorting) {\n                    click($header);\n                  }\n                });\n              };\n\n              assert.expect(9);\n              path = 'components-examples/flexberry-lookup/default-ordering-example';\n              _context.next = 5;\n              return visit(path);\n\n            case 5:\n              _context.next = 7;\n              return (0, _testHelpers.settled)();\n\n            case 7:\n              assert.equal(currentPath(), path);\n\n              $lookupChooseButton = Ember.$('.flexberry-lookup .ui-change')[0];\n\n              // Default sorting\n\n              _context.next = 11;\n              return click($lookupChooseButton);\n\n            case 11:\n              _context.next = 13;\n              return (0, _testHelpers.settled)();\n\n            case 13:\n              checkHeaderOrder(true);\n\n              // Changed sorting check\n              _context.next = 16;\n              return (0, _testHelpers.settled)();\n\n            case 16:\n              checkHeaderOrder();\n              $menuNextPageButton = Ember.$('.ui.basic.buttons').children('.next-page-button');\n              _context.next = 20;\n              return click($menuNextPageButton);\n\n            case 20:\n              _context.next = 22;\n              return (0, _testHelpers.settled)();\n\n            case 22:\n              checkHeaderOrder();\n              $menuCloseButton = Ember.$('.close.icon');\n              _context.next = 26;\n              return click($menuCloseButton);\n\n            case 26:\n              _context.next = 28;\n              return (0, _testHelpers.settled)();\n\n            case 28:\n              _context.next = 30;\n              return click($lookupChooseButton);\n\n            case 30:\n              _context.next = 32;\n              return (0, _testHelpers.settled)();\n\n            case 32:\n              checkHeaderOrder();\n              $defaultSortingButton = Ember.$('.ui.button.default-sort');\n              _context.next = 36;\n              return click($defaultSortingButton);\n\n            case 36:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-default-user-setting-test', ['dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_executeFlexberryLookupTest) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup render olv with default user setting test', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert, app) {\n      var $lookupChooseButton, $lookupSearch, $lookupSearchThead, $lookupSearchTr, $lookupHeaders;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(2);\n\n              _context.next = 3;\n              return visit('components-examples/flexberry-lookup/user-settings-example');\n\n            case 3:\n\n              assert.equal(currentURL(), 'components-examples/flexberry-lookup/user-settings-example');\n\n              $lookupChooseButton = Ember.$('.ui-change');\n\n              // Click choose button.\n\n              _context.next = 7;\n              return click($lookupChooseButton);\n\n            case 7:\n              $lookupSearch = Ember.$('.content table.object-list-view');\n              $lookupSearchThead = $lookupSearch.children('thead');\n              $lookupSearchTr = $lookupSearchThead.children('tr');\n              $lookupHeaders = $lookupSearchTr.children('th');\n\n              // Check count at table header.\n\n              assert.strictEqual($lookupHeaders.length, 2, 'Component render olv with default user setting');\n\n            case 12:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }(), function (app) {\n    var service = app.__container__.lookup('service:user-settings');\n    service.getCurrentUserSetting = function () {\n      return Ember.Object.create({});\n    };\n  });\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-events-test', ['sinon', 'dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test', 'dummy/tests/acceptance/components/flexberry-lookup/lookup-test-functions'], function (_sinon, _executeFlexberryLookupTest, _lookupTestFunctions) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup events test', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert, app) {\n      var lookupEventsService, spy, $lookupChooseButton, compareLookupModalWindowData, $lookupDialog, $header;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return visit('components-acceptance-tests/flexberry-lookup/settings-example-events');\n\n            case 2:\n\n              assert.equal(currentURL(), 'components-acceptance-tests/flexberry-lookup/settings-example-events');\n              lookupEventsService = app.__container__.lookup('service:lookup-events');\n\n              assert.notEqual(lookupEventsService, null);\n\n              // Spy on event triggering.\n              spy = _sinon.default.spy(lookupEventsService, \"lookupDialogOnDataLoadedTrigger\");\n              $lookupChooseButton = Ember.$('.ui-change');\n\n              assert.ok(spy.notCalled);\n\n              compareLookupModalWindowData = function compareLookupModalWindowData(spyCallCountExpected, isInitialCallExpected) {\n                assert.equal(spy.callCount, spyCallCountExpected);\n                if (spy.callCount !== spyCallCountExpected) {\n                  return;\n                }\n\n                var callArgs = spy.args[spy.callCount - 1];\n                assert.equal(callArgs.length, 3);\n                var dataLoaded = callArgs[1];\n                var isInitialCall = callArgs[2];\n                assert.equal(isInitialCall, isInitialCallExpected);\n\n                var $lookupDialog = Ember.$('.flexberry-modal');\n                var $records = Ember.$('.content table.object-list-view tbody tr', $lookupDialog);\n                var lookupRecordCount = $records.length;\n                assert.equal(dataLoaded.content.length, lookupRecordCount);\n\n                // Comparison data from spy and olv table.\n                for (var i = 0; i < lookupRecordCount; i++) {\n                  var suggestionTypeName = Ember.get(dataLoaded.content[i]._record, 'name');\n                  var $cellText = Ember.$($records[i]).children('td').eq(1).text().trim();\n                  assert.strictEqual($cellText, suggestionTypeName);\n                }\n              };\n\n              // Wait for lookup dialog to be opened.\n\n\n              _context.next = 11;\n              return (0, _lookupTestFunctions.loadingList)($lookupChooseButton, '.flexberry-modal', '.content table.object-list-view tbody tr');\n\n            case 11:\n              compareLookupModalWindowData(1, true);\n\n              // Call reload on modal window without closing it.\n              $lookupDialog = Ember.$('.flexberry-modal');\n              $header = Ember.$('.content table.object-list-view thead tr th', $lookupDialog).eq(1);\n\n              assert.equal(spy.callCount, 1);\n\n              // Lookup dialog successfully opened & data is loaded.\n              // Try to change sorting.\n              _context.next = 17;\n              return (0, _lookupTestFunctions.loadingList)($header, '.flexberry-modal', '.content table.object-list-view tbody tr');\n\n            case 17:\n              compareLookupModalWindowData(2, false);\n\n            case 18:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-limit-function-test', ['ember-flexberry-data/query/builder', 'ember-flexberry-data/query/predicate', 'dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_builder, _predicate, _executeFlexberryLookupTest) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup limit function test', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert, app) {\n      var $limitFunctionButton, $lookupChooseButton, controller, limitType, queryPredicate, query, suggestionTypes, suggestionTypesArr, suggestionModelLength, $lookupSearch, $lookupSearchTr, $suggestionTableLength, i, suggestionType, suggestionTypeName, $cell, $cellText;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return visit('components-acceptance-tests/flexberry-lookup/settings-example-limit-function');\n\n            case 2:\n\n              assert.equal(currentURL(), 'components-acceptance-tests/flexberry-lookup/settings-example-limit-function');\n\n              $limitFunctionButton = Ember.$('.limitFunction');\n              $lookupChooseButton = Ember.$('.ui-change');\n\n\n              Ember.run(function () {\n                click($limitFunctionButton);\n                click($lookupChooseButton);\n              });\n\n              controller = app.__container__.lookup('controller:' + currentRouteName());\n              limitType = controller.limitType;\n              queryPredicate = new _predicate.StringPredicate('name').contains(limitType);\n\n              // Create limit for query.\n\n              query = new _builder.default(store).from('ember-flexberry-dummy-suggestion-type').selectByProjection('SettingLookupExampleView').where(queryPredicate);\n\n              // Load olv data.\n\n              _context.next = 12;\n              return store.query('ember-flexberry-dummy-suggestion-type', query.build());\n\n            case 12:\n              suggestionTypes = _context.sent;\n              suggestionTypesArr = suggestionTypes.toArray();\n              suggestionModelLength = suggestionTypesArr.length;\n              $lookupSearch = Ember.$('.content table.object-list-view');\n              $lookupSearchTr = $lookupSearch.children('tbody').children('tr');\n              $suggestionTableLength = $lookupSearchTr.length;\n\n\n              assert.expect(2 + $suggestionTableLength);\n\n              assert.strictEqual(suggestionModelLength >= $suggestionTableLength, true, 'Correct number of values restrictions limiting function');\n\n              // Comparison data in the model and olv table.\n              for (i = 0; i < $suggestionTableLength; i++) {\n                suggestionType = suggestionTypesArr.objectAt(i);\n                suggestionTypeName = suggestionType.get('name');\n                $cell = Ember.$($lookupSearchTr[i]).children('td').eq(1); // Assuming name is in the second column\n\n                $cellText = $cell.children('div').text().trim();\n\n\n                assert.strictEqual(suggestionTypeName, $cellText, 'Correct data at lookup\\'s olv');\n              }\n\n            case 21:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-prefer-developer-to-default-user-setting-test', ['@ember/test-helpers', 'dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_testHelpers, _executeFlexberryLookupTest) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup prefer developer to default user setting test', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert) {\n      var $lookupButtonChoose, $lookupSearch, $lookupSearchThead, $lookupSearchTr, $lookupHeaders;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(2);\n\n              _context.next = 3;\n              return visit('components-examples/flexberry-lookup/user-settings-example');\n\n            case 3:\n              assert.equal(currentURL(), 'components-examples/flexberry-lookup/user-settings-example');\n\n              $lookupButtonChoose = Ember.$('.ui-change');\n\n              // Click choose button.\n\n              Ember.run(function () {\n                click($lookupButtonChoose);\n              });\n\n              // Wait for the table to be updated.\n              _context.next = 8;\n              return (0, _testHelpers.settled)();\n\n            case 8:\n              $lookupSearch = Ember.$('.content table.object-list-view');\n              $lookupSearchThead = $lookupSearch.children('thead');\n              $lookupSearchTr = $lookupSearchThead.children('tr');\n              $lookupHeaders = $lookupSearchTr.children('th');\n\n              // Check count at table header.\n\n              assert.strictEqual($lookupHeaders.length === 1, true, 'Component renders OLV with developer user setting');\n\n            case 13:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-prefer-stored-to-default-user-setting-test', ['@ember/test-helpers', 'dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_testHelpers, _executeFlexberryLookupTest) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup prefer stored to default user setting test', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert) {\n      var $lookupButtonChoose, $lookupSearch, $lookupSearchThead, $lookupSearchTr, $lookupHeaders;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(2);\n\n              _context.next = 3;\n              return visit('components-examples/flexberry-lookup/user-settings-example');\n\n            case 3:\n              assert.equal(currentURL(), 'components-examples/flexberry-lookup/user-settings-example');\n\n              $lookupButtonChoose = Ember.$('.ui-change');\n\n              // Click choose button.\n\n              Ember.run(function () {\n                click($lookupButtonChoose);\n              });\n\n              // Wait for the table to be updated.\n              _context.next = 8;\n              return (0, _testHelpers.settled)();\n\n            case 8:\n              $lookupSearch = Ember.$('.content table.object-list-view');\n              $lookupSearchThead = $lookupSearch.children('thead');\n              $lookupSearchTr = $lookupSearchThead.children('tr');\n              $lookupHeaders = $lookupSearchTr.children('th');\n\n              // Check count at table header.\n\n              assert.strictEqual($lookupHeaders.length === 1, true, 'Component renders OLV with user setting');\n\n            case 13:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }(), function (app) {\n    var service = app.__container__.lookup('service:user-settings');\n    service.getCurrentUserSetting = function () {\n      return Ember.Object.create({\n        colsOrder: [{\n          propName: 'name'\n        }]\n      });\n    };\n  });\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-preview-test', ['dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_executeFlexberryLookupTest) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup preview in modal test', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert, app) {\n      var path, controller, testName, $inModal, $modal, $form, $field, value;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(2);\n              path = 'components-acceptance-tests/flexberry-lookup/settings-example-preview';\n              _context.next = 4;\n              return visit(path);\n\n            case 4:\n\n              assert.equal(currentPath(), path);\n\n              controller = app.__container__.lookup('controller:' + currentRouteName());\n              testName = controller.testName;\n              $inModal = Ember.$('.in-modal');\n              _context.next = 10;\n              return click('.ui-preview', $inModal);\n\n            case 10:\n              $modal = Ember.$('.modal');\n              $form = Ember.$('.form', $modal);\n              $field = Ember.$('.flexberry-field .flexberry-textbox', $form);\n              value = $field.children('input').val();\n\n              assert.equal(value, testName);\n\n            case 15:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup preview in separate route test', function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(store, assert, app) {\n      var path, controller, testName, $inSeparateRoute, $form, $field, value;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              assert.expect(2);\n              path = 'components-acceptance-tests/flexberry-lookup/settings-example-preview';\n              _context2.next = 4;\n              return visit(path);\n\n            case 4:\n\n              assert.equal(currentPath(), path);\n\n              controller = app.__container__.lookup('controller:' + currentRouteName());\n              testName = controller.testName;\n              $inSeparateRoute = Ember.$('.in-separate-route');\n              _context2.next = 10;\n              return click('.ui-preview', $inSeparateRoute);\n\n            case 10:\n              $form = Ember.$('.form');\n              $field = Ember.$('.flexberry-field .flexberry-textbox', $form);\n              value = $field.children('input').val();\n\n              assert.equal(value, testName);\n\n            case 14:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, undefined);\n    }));\n\n    return function (_x4, _x5, _x6) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup preview in groupedit test', function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(store, assert, app) {\n      var path, controller, testName, $inGroupedit, $form, $field, value;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              assert.expect(2);\n              path = 'components-acceptance-tests/flexberry-lookup/settings-example-preview';\n              _context3.next = 4;\n              return visit(path);\n\n            case 4:\n\n              assert.equal(currentPath(), path);\n\n              controller = app.__container__.lookup('controller:' + currentRouteName());\n              testName = controller.testName;\n              $inGroupedit = Ember.$('.in-groupedit');\n              _context3.next = 10;\n              return click('.ui-preview', $inGroupedit);\n\n            case 10:\n              $form = Ember.$('.form');\n              $field = Ember.$('.flexberry-field .flexberry-textbox', $form);\n              value = $field.children('input').val();\n\n              assert.equal(value, testName);\n\n            case 14:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, undefined);\n    }));\n\n    return function (_x7, _x8, _x9) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-projection-test', ['@ember/test-helpers', 'dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_testHelpers, _executeFlexberryLookupTest) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup projection test', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert, app) {\n      var $lookupButtonChoose, $lookupSearch, $lookupSearchThead, $lookupSearchTr, $lookupHeaders;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(2);\n\n              _context.next = 3;\n              return visit('components-acceptance-tests/flexberry-lookup/settings-example-projection');\n\n            case 3:\n\n              assert.equal(currentURL(), 'components-acceptance-tests/flexberry-lookup/settings-example-projection');\n\n              $lookupButtonChoose = Ember.$('.ui-change');\n\n              // Click choose button.\n\n              _context.next = 7;\n              return click($lookupButtonChoose);\n\n            case 7:\n              _context.next = 9;\n              return (0, _testHelpers.settled)();\n\n            case 9:\n              $lookupSearch = Ember.$('.content table.object-list-view');\n              $lookupSearchThead = $lookupSearch.children('thead');\n              $lookupSearchTr = $lookupSearchThead.children('tr');\n              $lookupHeaders = $lookupSearchTr.children('th');\n\n              // Check count at table header.\n\n              assert.strictEqual($lookupHeaders.length, 3, 'Component has SuggestionTypeE projection');\n\n            case 14:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-relation-name-test', ['dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test', '@ember/test-helpers'], function (_executeFlexberryLookupTest, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup relation name test', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert, app) {\n      var controller, relationName;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(1);\n\n              _context.next = 3;\n              return visit('components-acceptance-tests/flexberry-lookup/settings-example-relation-name');\n\n            case 3:\n              _context.next = 5;\n              return (0, _testHelpers.settled)();\n\n            case 5:\n              // Дождаться завершения всех асинхронных операций\n\n              controller = app.__container__.lookup('controller:' + currentRouteName());\n              relationName = Ember.get(controller, 'relationName');\n\n\n              assert.strictEqual(relationName, 'Temp relation name', 'relationName: \\'' + relationName + '\\' as expected');\n\n            case 8:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-window-search-test', ['@ember/test-helpers', 'dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_testHelpers, _executeFlexberryLookupTest) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup window search test', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert, app) {\n      var path, $lookupChooseButton, $windowSearchField, $lookupTable, $lookupTableBody, $lookupTableRow, $lookupTableRowText, sampleText, $windowSearchButton, $lookupTableRowTextAfterSearch;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(3);\n              path = 'components-examples/flexberry-lookup/customizing-window-example';\n              _context.next = 4;\n              return visit(path);\n\n            case 4:\n              assert.equal(currentPath(), path);\n\n              $lookupChooseButton = Ember.$('button.ui-change');\n              _context.next = 8;\n              return click($lookupChooseButton);\n\n            case 8:\n              _context.next = 10;\n              return (0, _testHelpers.settled)();\n\n            case 10:\n              $windowSearchField = Ember.$('div.block-action-input').children('input');\n              $lookupTable = Ember.$('.content table.object-list-view');\n              $lookupTableBody = $lookupTable.children('tbody');\n              $lookupTableRow = $lookupTableBody.children('tr');\n              $lookupTableRowText = $lookupTableRow.find('div.oveflow-text').eq(2);\n\n\n              assert.equal($windowSearchField.length, 1, 'search exists');\n\n              sampleText = Ember.$.trim($lookupTableRowText.text());\n              _context.next = 19;\n              return fillIn($windowSearchField, sampleText);\n\n            case 19:\n              $windowSearchButton = Ember.$('button.search-button');\n              _context.next = 22;\n              return click($windowSearchButton);\n\n            case 22:\n              _context.next = 24;\n              return (0, _testHelpers.settled)();\n\n            case 24:\n              $lookupTable = Ember.$('.content table.object-list-view');\n              $lookupTableBody = $lookupTable.children('tbody');\n              $lookupTableRow = $lookupTableBody.children('tr');\n              $lookupTableRowTextAfterSearch = $lookupTableRow.find('div.oveflow-text').first();\n\n\n              assert.equal(sampleText === Ember.$.trim($lookupTableRowTextAfterSearch.text()), true, 'search works');\n\n            case 29:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-lookup/lookup-test-functions', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var loadingList = exports.loadingList = function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee($ctrlForClick, list, records) {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt('return', new Promise(function (resolve, reject) {\n                var checkIntervalId = void 0;\n                var checkIntervalSucceed = false;\n                var checkInterval = 500;\n                var timeout = 10000;\n\n                // Клик по контроллеру.\n                click($ctrlForClick);\n\n                checkIntervalId = window.setInterval(function () {\n                  var $list = Ember.$(list);\n                  var $records = Ember.$(records, $list);\n                  if ($records.length === 0) {\n                    // Данные еще не загружены.\n                    return;\n                  }\n\n                  // Данные загружены.\n                  // Остановить интервал и разрешить промис.\n                  window.clearInterval(checkIntervalId);\n                  checkIntervalSucceed = true;\n                  resolve($list);\n                }, checkInterval);\n\n                // Установить тайм-аут ожидания.\n                window.setTimeout(function () {\n                  if (checkIntervalSucceed) {\n                    return;\n                  }\n\n                  // Время вышло.\n                  // Остановить интервалы и отклонить промис.\n                  window.clearInterval(checkIntervalId);\n                  reject('editForm load operation is timed out');\n                }, timeout);\n              }));\n\n            case 1:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function loadingList(_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var loadingLocales = exports.loadingLocales = function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(locale, app) {\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt('return', new Promise(function (resolve) {\n                var i18n = app.__container__.lookup('service:i18n');\n\n                i18n.set('locale', locale);\n\n                var timeout = 500;\n                setTimeout(function () {\n                  resolve({ msg: 'ok' });\n                }, timeout);\n              }));\n\n            case 1:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function loadingLocales(_x4, _x5) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n});","define('dummy/tests/acceptance/components/flexberry-lookup/visiting-flexberry-lookup-autocomplete-test', ['dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_executeFlexberryLookupTest) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeFlexberryLookupTest.executeTest)('visiting flexberry-lookup autocomplete', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert, app) {\n      var $lookup, $lookupField, $result;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              /* eslint-enable no-unused-vars */\n              assert.expect(5);\n\n              _context.next = 3;\n              return visit('components-acceptance-tests/flexberry-lookup/settings-example-autocomplete');\n\n            case 3:\n\n              assert.equal(currentURL(), 'components-acceptance-tests/flexberry-lookup/settings-example-autocomplete');\n\n              $lookup = Ember.$('.flexberry-lookup');\n\n\n              assert.strictEqual($lookup.hasClass('ui'), true, \"Component's wrapper has 'ui' css-class\");\n              assert.strictEqual($lookup.hasClass('search'), true, \"Component's wrapper has 'search' css-class\");\n\n              $lookupField = Ember.$('.lookup-field');\n\n\n              assert.strictEqual($lookupField.hasClass('prompt'), true, \"Component's wrapper has 'prompt' css-class\");\n\n              $result = Ember.$('.result');\n\n\n              assert.strictEqual($result.length === 1, true, \"Component has inner class 'result'\");\n\n            case 11:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-lookup/visiting-flexberry-lookup-dropdown-test', ['dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_executeFlexberryLookupTest) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeFlexberryLookupTest.executeTest)('visiting flexberry-lookup dropdown', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert, app) {\n      var $lookupSearch, $lookupButtonChoose, $lookupButtonClear, $dropdown, $dropdownSearch, $dropdownIcon, $dropdownMenu, $dropdownText;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              /* eslint-enable no-unused-vars */\n              assert.expect(13);\n\n              _context.next = 3;\n              return visit('components-acceptance-tests/flexberry-lookup/settings-example-dropdown');\n\n            case 3:\n\n              assert.equal(currentURL(), 'components-acceptance-tests/flexberry-lookup/settings-example-dropdown');\n\n              // Получение компонентов и их внутренних элементов.\n              $lookupSearch = Ember.$('.lookup-field');\n              $lookupButtonChoose = Ember.$('.ui-change');\n              $lookupButtonClear = Ember.$('.lookup-remove-button');\n\n\n              assert.strictEqual($lookupSearch.length === 0, true, \"Component hasn't flexberry-lookup\");\n              assert.strictEqual($lookupButtonChoose.length === 0, true, \"Component hasn't button choose\");\n              assert.strictEqual($lookupButtonClear.length === 0, true, \"Component hasn't button remove\");\n\n              // Получение компонентов и их внутренних элементов.\n              $dropdown = Ember.$('.flexberry-dropdown.search.selection');\n              $dropdownSearch = $dropdown.children('.search');\n              $dropdownIcon = $dropdown.children('.dropdown.icon');\n              $dropdownMenu = $dropdown.children('.menu');\n              $dropdownText = $dropdown.children('.text');\n\n\n              assert.strictEqual($dropdown.length === 1, true, 'Component has class flexberry-dropdown');\n              assert.strictEqual($dropdown.hasClass('search'), true, \"Component's wrapper has 'search' css-class\");\n              assert.strictEqual($dropdown.hasClass('selection'), true, \"Component's wrapper has 'selection' css-class\");\n              assert.strictEqual($dropdown.hasClass('ember-view'), true, \"Component's wrapper has 'ember-view' css-class\");\n              assert.strictEqual($dropdown.hasClass('dropdown'), true, \"Component's wrapper has 'dropdown' css-class\");\n\n              assert.strictEqual($dropdownSearch.length === 1, true, 'Component has class search');\n              assert.strictEqual($dropdownIcon.length === 1, true, 'Component has class dropdown and icon');\n              assert.strictEqual($dropdownText.length === 1, true, 'Component has class text');\n              assert.strictEqual($dropdownMenu.length === 1, true, 'Component has class menu');\n\n            case 24:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-multiple-lookup/flexberry-multiple-lookup-configurate-tags-test', ['qunit', 'dummy/tests/helpers/start-app'], function (_qunit, _startApp) {\n  'use strict';\n\n  var app = void 0;\n  var path = 'components-examples/flexberry-multiple-lookup/configurate-tags';\n  var testName = 'configurate tags test';\n\n  (0, _qunit.module)('Acceptance | flexberry-multiple-lookup | ' + testName, {\n    beforeEach: function beforeEach() {\n      // Start application.\n      app = (0, _startApp.default)();\n\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = app.__container__.lookup('controller:application');\n      Ember.set(applicationController, 'isInAcceptanceTestMode', true);\n    },\n    afterEach: function afterEach() {\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)(testName, function (assert) {\n    assert.expect(7);\n\n    visit(path);\n\n    wait().then(function () {\n      assert.equal(currentPath(), path, 'Path is correct');\n\n      var $lookup = Ember.$('.flexberry-lookup');\n      var $lookupButtouChoose = $lookup.find('.ui-change');\n\n      Ember.run(function () {\n        return $lookupButtouChoose.click();\n      });\n\n      wait().then(function () {\n        var $olv = Ember.$('.object-list-view');\n        var $tbody = $olv.find('td');\n\n        Ember.run(function () {\n          return $tbody[1].click();\n        });\n\n        wait().then(function () {\n          var $tags = Ember.$('div a.ui.label');\n\n          assert.strictEqual($tags.length, 1, 'Tag is rendered');\n\n          var $deleteIcon = Ember.$($tags[0]).children('i.delete.icon');\n          var username = $tags[0].innerText.split(' ').join('');\n\n          assert.strictEqual($deleteIcon.length, 1, 'Delete icon is rendered');\n\n          Ember.run(function () {\n            return $deleteIcon.click();\n          });\n\n          wait().then(function () {\n            $tags = Ember.$('div a.ui.label');\n\n            assert.strictEqual($tags.length, 0, 'Tag removed');\n\n            var $table = Ember.$('table.ui.celled.table.flexberry-word-break');\n            var $fields = $table.find('.ember-text-field');\n            var $checkboxes = $table.find('.ember-checkbox');\n\n            fillIn($fields[0], username);\n            fillIn($fields[1], 'red');\n\n            Ember.run(function () {\n              return $checkboxes[0].click();\n            });\n            Ember.run(function () {\n              return $checkboxes[1].click();\n            });\n            Ember.run(function () {\n              return $lookupButtouChoose.click();\n            });\n\n            wait().then(function () {\n              $olv = Ember.$('.object-list-view');\n              $tbody = $olv.find('td');\n\n              Ember.run(function () {\n                return $tbody[1].click();\n              });\n\n              wait().then(function () {\n                $tags = Ember.$('div a.ui.label');\n\n                assert.strictEqual($tags.length, 1, 'Tag is rendered');\n\n                assert.strictEqual(Ember.$($tags[0]).hasClass('red'), true, 'Component\\'s wrapper has \\'red\\' css-class');\n\n                $deleteIcon = Ember.$($tags[0]).children('i.delete.icon');\n\n                assert.strictEqual($deleteIcon.length, 0, 'Delete icon is not rendered');\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/checkbox-at-editform-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions'], function (_executeFolvTest, _folvTestsFunctions) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFolvTest.executeTest)('check checkbox at editform', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert, app) {\n      var path, controller, $folvContainer, $trTableBody, $cell, $editForm, checkbox;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(2);\n              path = 'components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox';\n              _context.next = 4;\n              return visit(path);\n\n            case 4:\n              controller = app.__container__.lookup('controller:' + currentRouteName());\n              $folvContainer = Ember.$('.object-list-view-container');\n              $trTableBody = Ember.$('table.object-list-view tbody tr', $folvContainer);\n              $cell = $trTableBody.length > 0 ? $trTableBody[0].children[1] : null;\n\n              controller.set('rowClickable', true);\n\n              // Загружаем форму редактирования\n              _context.prev = 9;\n              _context.next = 12;\n              return (0, _folvTestsFunctions.loadingList)($cell, 'form.flexberry-vertical-form', '.field');\n\n            case 12:\n              $editForm = _context.sent;\n              checkbox = Ember.$('.flexberry-checkbox');\n\n\n              assert.ok($editForm, 'edit form open');\n              assert.equal(checkbox.hasClass('checked'), true, 'checkbox is checked');\n              _context.next = 21;\n              break;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context['catch'](9);\n\n              // Выводим ошибку\n              assert.ok(false, _context.t0);\n\n            case 21:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined, [[9, 18]]);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/edit-in-modal-open-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/locales/ru/translations', '@ember/test-helpers'], function (_executeFolvTest, _translations, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFolvTest.executeTest)('check edit in modal open', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert) {\n      var path, row, $editForm, closeButton;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(3);\n              path = 'ember-flexberry-dummy-suggestion-type-list';\n              _context.next = 4;\n              return visit(path);\n\n            case 4:\n              assert.equal(currentURL(), path, 'Visited the correct path');\n\n              row = document.querySelector('.field');\n              _context.next = 8;\n              return click(row);\n\n            case 8:\n              _context.next = 10;\n              return (0, _testHelpers.settled)();\n\n            case 10:\n              // Wait for any pending promises\n\n              $editForm = document.querySelector('.flexberry-modal');\n\n              assert.ok($editForm, 'edit form open');\n              assert.strictEqual($editForm.querySelector('.ui.header').innerText, Ember.get(_translations.default, 'forms.ember-flexberry-dummy-suggestion-type-edit.caption'), 'check header');\n\n              closeButton = document.querySelector('.close-button');\n              _context.next = 16;\n              return click(closeButton);\n\n            case 16:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', ['exports', 'qunit', 'dummy/tests/helpers/start-app'], function (exports, _qunit, _startApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.executeTest = executeTest;\n  exports.addDataForDestroy = addDataForDestroy;\n\n  var dataForDestroy = Ember.A();\n  var app = void 0;\n  function executeTest(testName, callback) {\n    var store = void 0;\n    var userSettingsService = void 0;\n\n    (0, _qunit.module)('Acceptance | flexberry-objectlistview | ' + testName, {\n      beforeEach: function beforeEach() {\n        Ember.run(function () {\n          // Start application.\n          app = (0, _startApp.default)();\n\n          // Just take it and turn it off...\n          app.__container__.lookup('service:log').set('enabled', false);\n\n          // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n          var applicationController = app.__container__.lookup('controller:application');\n          applicationController.set('isInAcceptanceTestMode', true);\n          store = app.__container__.lookup('service:store');\n\n          userSettingsService = app.__container__.lookup('service:user-settings');\n          var getCurrentPerPage = function getCurrentPerPage() {\n            return 5;\n          };\n\n          userSettingsService.set('getCurrentPerPage', getCurrentPerPage);\n        });\n      },\n      afterEach: function afterEach() {\n        Ember.run(function () {\n          if (dataForDestroy.length !== 0) {\n            recursionDelete(0);\n          } else {\n            Ember.run(app, 'destroy');\n          }\n        });\n      }\n    });\n\n    (0, _qunit.test)(testName, function (assert) {\n      return callback(store, assert, app);\n    });\n  }\n\n  /**\n    Function to delete data after testing.\n    @public\n    @method addDataForDestroy\n    @param {Object} data  or array of Object.\n   */\n\n  function addDataForDestroy(data) {\n    if (Ember.isArray(data)) {\n      dataForDestroy.addObjects(data);\n    } else {\n      dataForDestroy.addObject(data);\n    }\n  }\n\n  function recursionDelete(index) {\n    if (index < dataForDestroy.length) {\n      if (!dataForDestroy[index].currentState.isDeleted) {\n        dataForDestroy[index].destroyRecord().then(function () {\n          recursionDelete(index + 1);\n        });\n      } else {\n        recursionDelete(index + 1);\n      }\n    } else {\n      dataForDestroy.clear();\n      Ember.run(app, 'destroy');\n    }\n  }\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-empty-filter-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions'], function (_executeFolvTest, _folvTestsFunctions) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check empty filter', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/custom-filter';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var filtreInsertOperation = 'empty';\n    var filtreInsertParametr = '';\n    var user = void 0;\n    var type = void 0;\n    var suggestion = void 0;\n    Ember.run(function () {\n      var newRecords = Ember.A();\n      user = newRecords.pushObject(store.createRecord('ember-flexberry-dummy-application-user', { name: 'Random name fot empty filther test',\n        eMail: 'Random eMail fot empty filther test' }));\n      type = newRecords.pushObject(store.createRecord('ember-flexberry-dummy-suggestion-type', { name: 'Random name fot empty filther test' }));\n\n      type.save().then(function () {\n        user.save().then(function () {\n          Ember.run(function () {\n            suggestion = newRecords.pushObject(store.createRecord(modelName, { type: type, author: user, editor1: user }));\n            suggestion.save();\n            (0, _executeFolvTest.addDataForDestroy)(suggestion);\n            (0, _executeFolvTest.addDataForDestroy)(type);\n            (0, _executeFolvTest.addDataForDestroy)(user);\n          });\n        });\n      });\n\n      visit(path + '?perPage=500');\n      andThen(function () {\n        assert.equal(currentPath(), path);\n        var $filterButtonDiv = Ember.$('.buttons.filter-active');\n        var $filterButton = $filterButtonDiv.children('button');\n        var $objectListView = Ember.$('.object-list-view');\n\n        // Activate filtre row.\n        Ember.run(function () {\n          $filterButton.click();\n        });\n\n        (0, _folvTestsFunctions.filterCollumn)($objectListView, 0, filtreInsertOperation, filtreInsertParametr).then(function () {\n          // Apply filter function.\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = Ember.$('.refresh-button')[0];\n            refreshButton.click();\n          };\n\n          // Apply filter.\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          var done1 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var filtherResult = controller.model.content;\n            var successful = true;\n            for (var i = 0; i < filtherResult.length; i++) {\n              var address = filtherResult[i]._data.address;\n              if (!Ember.isNone(address)) {\n                successful = false;\n              }\n            }\n\n            assert.equal(filtherResult.length >= 1, true, 'Filtered list is empty');\n            assert.equal(successful, true, 'Filter not successfully worked');\n          }).finally(function () {\n            newRecords[2].destroyRecord().then(function () {\n              Ember.run(function () {\n                newRecords[0].destroyRecord();\n                newRecords[1].destroyRecord();\n                done1();\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-filter-by-enther-click-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/query/filter-operator', 'ember-flexberry-data/query/builder'], function (_executeFolvTest, _folvTestsFunctions, _filterOperator, _builder) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check filter by enter click', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-filter';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var filtreInsertOperation = 'eq';\n    var filtreInsertParametr = void 0;\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n      var builder = new _builder.default(store).from(modelName).selectByProjection('SuggestionL').where('address', _filterOperator.default.Neq, '').top(1);\n      store.query(modelName, builder.build()).then(function (result) {\n        var arr = result.toArray();\n        filtreInsertParametr = arr.objectAt(0).get('address');\n        if (!filtreInsertParametr) {\n          assert.ok(false, 'Empty data');\n        }\n      }).then(function () {\n        var $filterButtonDiv = Ember.$('.buttons.filter-active');\n        var $filterButton = $filterButtonDiv.children('button');\n        var $objectListView = Ember.$('.object-list-view');\n\n        // Activate filtre row.\n        Ember.run(function () {\n          $filterButton.click();\n        });\n\n        (0, _folvTestsFunctions.filterCollumn)($objectListView, 0, filtreInsertOperation, filtreInsertParametr).then(function () {\n          // Apply filter by enter click function.\n          var refreshFunction = function refreshFunction() {\n            var input = Ember.$('.ember-text-field')[0];\n            input.focus();\n            keyEvent(input, 'keydown', 13);\n          };\n\n          // Apply filter.\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          var done1 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var filtherResult = controller.model.content;\n            var successful = true;\n            for (var i = 0; i < filtherResult.length; i++) {\n              var address = filtherResult[i]._data.address;\n              if (address !== filtreInsertParametr) {\n                successful = false;\n              }\n            }\n\n            assert.equal(filtherResult.length >= 1, true, 'Filtered list is empty');\n            assert.equal(successful, true, 'Filter successfully worked');\n            done1();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-filter-on-toolbar-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'ember-flexberry-data/query/builder', 'ember-flexberry-data/query/condition', 'ember-flexberry-data/query/filter-operator', 'ember-flexberry-data/query/predicate', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions'], function (_executeFolvTest, _builder, _condition, _filterOperator, _predicate, _folvTestsFunctions) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check filter on toolbar with filter projection', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/custom-filter';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var adressEtalone = void 0;\n    var typeNameEtalone = void 0;\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n      var sp1 = new _predicate.SimplePredicate('address', _filterOperator.default.Neq, '');\n      var sp2 = new _predicate.SimplePredicate('type.name', _filterOperator.default.Neq, '');\n      var cp = new _predicate.ComplexPredicate(_condition.default.And, sp1, sp2);\n\n      var builder = new _builder.default(store).from(modelName).selectByProjection('SuggestionL').where(cp).top(1);\n      store.query(modelName, builder.build()).then(function (result) {\n        var arr = result.toArray();\n        adressEtalone = arr.objectAt(0).get('address');\n        typeNameEtalone = arr.objectAt(0).get('type.name');\n\n        // TODO: add proper predicate on query that \"address != type.name\" when it will be availible.\n        assert.notEqual(adressEtalone, typeNameEtalone);\n      }).then(function () {\n        var $filterInput = Ember.$('div.olv-search input');\n        var $filterApplyButton = Ember.$('div.olv-search button.search-button');\n\n        // 1) Filter by address as adressEtalone by common projection and get N records.\n        fillIn($filterInput, adressEtalone);\n\n        andThen(function () {\n          var refreshFunction = function refreshFunction() {\n            $filterApplyButton.click();\n          };\n\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n\n          // Apply filter.\n          var done1 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function ($list) {\n            var currentModel = Ember.get(controller, 'model');\n            var filteredByCommonProjectionCountN = Ember.get(currentModel, 'meta.count');\n            assert.ok(filteredByCommonProjectionCountN >= 1, 'Found ' + filteredByCommonProjectionCountN + ' records by common projection filtered by \"' + adressEtalone + '\".');\n\n            // 2) Filter by type.name as typeNameEtalone by filter projection containing only type.name property and get at least 1 record.\n            Ember.run(function () {\n              Ember.set(controller, 'filterProjectionName', 'TestFilterOnToolbarView');\n            });\n\n            Ember.run(function () {\n              fillIn($filterInput, typeNameEtalone);\n            });\n\n            var done2 = assert.async();\n            (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function ($list) {\n              var currentModel = Ember.get(controller, 'model');\n              var filteredByFilterProjectionCount = Ember.get(currentModel, 'meta.count');\n              assert.ok(filteredByFilterProjectionCount >= 1, 'Found ' + filteredByFilterProjectionCount + ' records by filter projection filtered by \"' + typeNameEtalone + '\".');\n\n              // 3) Filter by address as adressEtalone by filter projection containing only type.name property and get less than N records.\n              Ember.run(function () {\n                fillIn($filterInput, adressEtalone);\n              });\n\n              var done3 = assert.async();\n              (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function ($list) {\n                var currentModel = Ember.get(controller, 'model');\n                var filteredByFilterProjectionCount2 = Ember.get(currentModel, 'meta.count');\n                assert.ok(filteredByCommonProjectionCountN > filteredByFilterProjectionCount2, 'Found ' + filteredByFilterProjectionCount2 + ' records by filter projection filtered by \"' + adressEtalone + '\".');\n\n                Ember.run(function () {\n                  Ember.set(controller, 'filterProjectionName', undefined);\n                });\n                done3();\n              });\n\n              done2();\n            });\n\n            done1();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-filter-render-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions'], function (_executeFolvTest, _folvTestsFunctions) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check filter renders', function (store, assert, app) {\n    assert.expect(34);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-filter';\n\n    Ember.run(function () {\n      visit(path);\n      andThen(function () {\n        assert.equal(currentPath(), path);\n\n        var $filterButtonDiv = Ember.$('.buttons.filter-active');\n        var $filterButton = $filterButtonDiv.children('button');\n        var $filterRemoveButton = $filterButtonDiv.children('.removeFilter-button');\n        var $filterButtonIcon = $filterButton.children('i');\n\n        var $table = Ember.$('.object-list-view');\n        var $tableTbody = $table.children('tbody');\n        var $tableRows = $tableTbody.children('tr');\n\n        // Check filtre button div.\n        assert.strictEqual($filterButtonDiv.prop('tagName'), 'DIV', 'Filtre button\\'s wrapper is a <div>');\n        assert.strictEqual($filterButtonDiv.hasClass('ui icon buttons'), true, 'Filtre button\\'s wrapper has \\'ui icon buttons\\' css-class');\n        assert.strictEqual($filterButtonDiv.hasClass('filter-active'), true, 'Filtre button\\'s wrapper has \\'filter-active\\' css-class');\n        assert.strictEqual($filterButtonDiv.length === 1, true, 'Component has filter button');\n\n        // Check filtre button.\n        assert.strictEqual($filterButton.length === 1, true, 'Filtre button has inner button block');\n        assert.strictEqual($filterButton.hasClass('ui button'), true, 'Filtre button\\'s wrapper has \\'ui button\\' css-class');\n        assert.strictEqual($filterButton[0].title, 'Добавить фильтр', 'Filtre button has title');\n        assert.strictEqual($filterButton.prop('tagName'), 'BUTTON', 'Component\\'s inner button block is a <button>');\n\n        // Check button's icon <i>.\n        assert.strictEqual($filterButtonIcon.length === 1, true, 'Filtre button\\'s title has icon block');\n        assert.strictEqual($filterButtonIcon.prop('tagName'), 'I', 'Filtre button\\'s icon block is a <i>');\n        assert.strictEqual($filterButtonIcon.hasClass('filter icon'), true, 'Filtre button\\'s icon block has \\'filter icon\\' css-class');\n\n        // Check filtre remove button.\n        assert.strictEqual($filterRemoveButton.length === 0, true, 'Component hasn\\'t remove filter button');\n\n        // Check filtre row.\n        assert.strictEqual($tableRows.length === 5, true, 'Filtre row aren\\'t active');\n\n        var $objectListView = Ember.$('.object-list-view');\n\n        // Activate filtre row.\n        Ember.run(function () {\n          $filterButton.click();\n        });\n\n        $tableRows = $tableTbody.children('tr');\n\n        // Check filtre row afther filter active.\n        assert.strictEqual($tableRows.length === 7, true, 'Filtre row aren\\'t active');\n\n        var filtreInsertOperation = 'ge';\n        var filtreInsertParametr = 'A value that will never be told';\n\n        (0, _folvTestsFunctions.filterCollumn)($objectListView, 0, filtreInsertOperation, filtreInsertParametr).then(function () {\n          // Apply filter function.\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = Ember.$('.refresh-button')[0];\n            refreshButton.click();\n          };\n\n          // Apply filter.\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          var done1 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            $filterButtonDiv = Ember.$('.buttons.filter-active');\n            $filterButton = $filterButtonDiv.children('.button.active');\n            $filterButtonIcon = $filterButton.children('i');\n            $filterRemoveButton = $filterButtonDiv.children('.removeFilter-button');\n            var $filterRemoveButtonIcon = $filterRemoveButton.children('i');\n\n            // Check filtre button div.\n            assert.strictEqual($filterButtonDiv.prop('tagName'), 'DIV', 'Filtre button\\'s wrapper is a <div>');\n            assert.strictEqual($filterButtonDiv.hasClass('ui icon buttons'), true, 'Filtre button\\'s wrapper has \\'ui icon buttons\\' css-class');\n            assert.strictEqual($filterButtonDiv.hasClass('filter-active'), true, 'Filtre button\\'s wrapper has \\'filter-active\\' css-class');\n            assert.strictEqual($filterButtonDiv.length === 1, true, 'Component has filter button');\n\n            // Check filtre button.\n            assert.strictEqual($filterButton.length === 1, true, 'Filtre button has inner button block');\n            assert.strictEqual($filterButton.hasClass('ui button'), true, 'Filtre button\\'s wrapper has \\'ui button\\' css-class');\n            assert.strictEqual($filterButton[0].title, 'Добавить фильтр', 'Filtre button has title');\n            assert.strictEqual($filterButton.prop('tagName'), 'BUTTON', 'Component\\'s inner button block is a <button>');\n\n            // Check button's icon <i>.\n            assert.strictEqual($filterButtonIcon.length === 1, true, 'Filtre button\\'s title has icon block');\n            assert.strictEqual($filterButtonIcon.prop('tagName'), 'I', 'Filtre button\\'s icon block is a <i>');\n            assert.strictEqual($filterButtonIcon.hasClass('filter icon'), true, 'Filtre button\\'s icon block has \\'filter icon\\' css-class');\n\n            // Check filtre remove button.\n            assert.strictEqual($filterRemoveButton.length === 1, true, 'Filtre remove button has inner button block');\n            assert.strictEqual($filterRemoveButton.hasClass('ui button'), true, 'Filtre remove button\\'s wrapper has \\'ui button\\' css-class');\n            assert.strictEqual($filterRemoveButton[0].title, 'Сбросить фильтр', 'Filtre remove button has title');\n            assert.strictEqual($filterRemoveButton.prop('tagName'), 'BUTTON', 'Component\\'s inner button block is a <button>');\n\n            // Check remove button's icon <i>.\n            assert.strictEqual($filterRemoveButtonIcon.length === 1, true, 'Filtre button\\'s title has icon block');\n            assert.strictEqual($filterRemoveButtonIcon.prop('tagName'), 'I', 'Filtre button\\'s icon block is a <i>');\n            assert.strictEqual($filterRemoveButtonIcon.hasClass('remove icon'), true, 'Filtre button\\'s icon block has \\'remove icon\\' css-class');\n\n            // Deactivate filtre row.\n            Ember.run(function () {\n              $filterButton.click();\n            });\n\n            // Apply filter.\n            var done2 = assert.async();\n            (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n              $tableRows = $tableTbody.children('tr');\n\n              // Check filtre row afther filter deactivate.\n              assert.strictEqual($tableRows.length === 1, true, 'Filtre row aren\\'t deactivate');\n              done2();\n            });\n            done1();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-filter-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/query/filter-operator', 'ember-flexberry-data/query/builder'], function (_executeFolvTest, _folvTestsFunctions, _filterOperator, _builder) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check filter', function (store, assert, app) {\n    assert.expect(2);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-filter';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var filtreInsertOperationArr = ['eq', undefined, 'eq', 'eq', 'eq', 'eq'];\n    var filtreInsertValueArr = void 0;\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n      var builder2 = new _builder.default(store).from(modelName).selectByProjection('SuggestionL').where('address', _filterOperator.default.Neq, '').top(1);\n      store.query(modelName, builder2.build()).then(function (result) {\n        var arr = result.toArray();\n        filtreInsertValueArr = [arr.objectAt(0).get('address'), undefined, arr.objectAt(0).get('votes'), arr.objectAt(0).get('moderated').toString(), arr.objectAt(0).get('type.name'), arr.objectAt(0).get('author.name')];\n      }).then(function () {\n        var $filterButtonDiv = Ember.$('.buttons.filter-active');\n        var $filterButton = $filterButtonDiv.children('button');\n        var $objectListView = Ember.$('.object-list-view');\n\n        // Activate filtre row.\n        Ember.run(function () {\n          $filterButton.click();\n        });\n\n        (0, _folvTestsFunctions.filterObjectListView)($objectListView, filtreInsertOperationArr, filtreInsertValueArr).then(function () {\n          // Apply filter function.\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = Ember.$('.refresh-button')[0];\n            refreshButton.click();\n          };\n\n          // Apply filter.\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          var done1 = assert.async();\n          /* eslint-disable no-unused-vars */\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function ($list) {\n            var filtherResult = controller.model.content;\n            assert.equal(filtherResult.length >= 1, true, 'Filtered list is not empty');\n            done1();\n          });\n          /* eslint-enable no-unused-vars */\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-ge-filter-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/query/builder'], function (_executeFolvTest, _folvTestsFunctions, _builder) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check ge filter', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-filter';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var filtreInsertOperation = 'ge';\n    var filtreInsertParametr = void 0;\n\n    visit(path + '?perPage=500');\n    andThen(function () {\n      assert.equal(currentPath(), path);\n      var builder2 = new _builder.default(store).from(modelName).selectByProjection('SuggestionL').top(1);\n      store.query(modelName, builder2.build()).then(function (result) {\n        var arr = result.toArray();\n        filtreInsertParametr = arr.objectAt(0).get('votes') - 1;\n      }).then(function () {\n        var $filterButtonDiv = Ember.$('.buttons.filter-active');\n        var $filterButton = $filterButtonDiv.children('button');\n        var $objectListView = Ember.$('.object-list-view');\n\n        // Activate filtre row.\n        Ember.run(function () {\n          $filterButton.click();\n        });\n\n        (0, _folvTestsFunctions.filterCollumn)($objectListView, 2, filtreInsertOperation, filtreInsertParametr).then(function () {\n          // Apply filter function.\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = Ember.$('.refresh-button')[0];\n            refreshButton.click();\n          };\n\n          // Apply filter.\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          var done1 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var filtherResult = controller.model.content;\n            var successful = true;\n            for (var i = 0; i < filtherResult.length; i++) {\n              var votes = filtherResult[0]._data.votes;\n              if (votes <= filtreInsertParametr) {\n                successful = false;\n              }\n            }\n\n            assert.equal(filtherResult.length >= 1, true, 'Filtered list is empty');\n            assert.equal(successful, true, 'Filter successfully worked');\n            done1();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-le-filter-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/query/builder'], function (_executeFolvTest, _folvTestsFunctions, _builder) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check le filter', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-filter';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var filtreInsertOperation = 'le';\n    var filtreInsertParametr = void 0;\n\n    visit(path + '?perPage=500');\n    andThen(function () {\n      assert.equal(currentPath(), path);\n      var builder2 = new _builder.default(store).from(modelName).selectByProjection('SuggestionL').top(1);\n      store.query(modelName, builder2.build()).then(function (result) {\n        var arr = result.toArray();\n        filtreInsertParametr = arr.objectAt(0).get('votes') + 1;\n      }).then(function () {\n        var $filterButtonDiv = Ember.$('.buttons.filter-active');\n        var $filterButton = $filterButtonDiv.children('button');\n        var $objectListView = Ember.$('.object-list-view');\n\n        // Activate filtre row.\n        Ember.run(function () {\n          $filterButton.click();\n        });\n\n        (0, _folvTestsFunctions.filterCollumn)($objectListView, 2, filtreInsertOperation, filtreInsertParametr).then(function () {\n          // Apply filter function.\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = Ember.$('.refresh-button')[0];\n            refreshButton.click();\n          };\n\n          // Apply filter.\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          var done1 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var filtherResult = controller.model.content;\n            var successful = true;\n            for (var i = 0; i < filtherResult.length; i++) {\n              var votes = filtherResult[0]._data.votes;\n              if (votes >= filtreInsertParametr) {\n                successful = false;\n              }\n            }\n\n            assert.equal(filtherResult.length >= 1, true, 'Filtered list is empty');\n            assert.equal(successful, true, 'Filter successfully worked');\n            done1();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-like-filter-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/query/filter-operator', 'ember-flexberry-data/query/builder'], function (_executeFolvTest, _folvTestsFunctions, _filterOperator, _builder) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check like filter', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-filter';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var filtreInsertOperation = 'like';\n    var filtreInsertParametr = void 0;\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n      var builder2 = new _builder.default(store).from(modelName).selectByProjection('SuggestionL').where('address', _filterOperator.default.Neq, '').top(1);\n      store.query(modelName, builder2.build()).then(function (result) {\n        var arr = result.toArray();\n        filtreInsertParametr = arr.objectAt(0).get('address');\n        filtreInsertParametr = filtreInsertParametr.slice(1, filtreInsertParametr.length);\n        if (!filtreInsertParametr) {\n          assert.ok(false, 'Empty data');\n        }\n      }).then(function () {\n        var $filterButtonDiv = Ember.$('.buttons.filter-active');\n        var $filterButton = $filterButtonDiv.children('button');\n        var $objectListView = Ember.$('.object-list-view');\n\n        // Activate filtre row.\n        Ember.run(function () {\n          $filterButton.click();\n        });\n\n        (0, _folvTestsFunctions.filterCollumn)($objectListView, 0, filtreInsertOperation, filtreInsertParametr).then(function () {\n          // Apply filter function.\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = Ember.$('.refresh-button')[0];\n            refreshButton.click();\n          };\n\n          // Apply filter.\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          var done1 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var filtherResult = controller.model.content;\n            var successful = true;\n            for (var i = 0; i < filtherResult.length; i++) {\n              var address = filtherResult[i]._data.address;\n              if (address.lastIndexOf(filtreInsertParametr) === -1) {\n                successful = false;\n              }\n            }\n\n            assert.equal(filtherResult.length >= 1, true, 'Filtered list is empty');\n            assert.equal(successful, true, 'Filter successfully worked');\n            done1();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-neq-filter-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/query/filter-operator', 'ember-flexberry-data/query/builder'], function (_executeFolvTest, _folvTestsFunctions, _filterOperator, _builder) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check neq filter', function (store, assert, app) {\n    assert.expect(2);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-filter';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var filtreInsertOperation = 'neq';\n    var filtreInsertParametr = void 0;\n\n    visit(path + '?perPage=500');\n    andThen(function () {\n      assert.equal(currentPath(), path);\n      var builder2 = new _builder.default(store).from(modelName).selectByProjection('SuggestionL').where('address', _filterOperator.default.Neq, '').top(1);\n      store.query(modelName, builder2.build()).then(function (result) {\n        var arr = result.toArray();\n        filtreInsertParametr = arr.objectAt(0).get('address');\n        if (!filtreInsertParametr) {\n          assert.ok(false, 'Empty data');\n        }\n      }).then(function () {\n        var $filterButtonDiv = Ember.$('.buttons.filter-active');\n        var $filterButton = $filterButtonDiv.children('button');\n        var $objectListView = Ember.$('.object-list-view');\n\n        // Activate filtre row.\n        Ember.run(function () {\n          $filterButton.click();\n        });\n\n        (0, _folvTestsFunctions.filterCollumn)($objectListView, 0, filtreInsertOperation, filtreInsertParametr).then(function () {\n          // Apply filter function.\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = Ember.$('.refresh-button')[0];\n            refreshButton.click();\n          };\n\n          // Apply filter.\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          var done1 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var filtherResult = controller.model.content;\n            var successful = true;\n            for (var i = 0; i < filtherResult.length; i++) {\n              var address = filtherResult[i]._data.address;\n              if (address === filtreInsertParametr) {\n                successful = false;\n              }\n            }\n\n            assert.equal(successful, true, 'Filter successfully worked');\n            done1();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-without-operation-filter-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/query/filter-operator', 'ember-flexberry-data/query/builder'], function (_executeFolvTest, _folvTestsFunctions, _filterOperator, _builder) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check without operation filter', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-filter';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var filtreInsertOperation = '';\n    var filtreInsertParametr = void 0;\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n      var builder2 = new _builder.default(store).from(modelName).selectByProjection('SuggestionL').where('address', _filterOperator.default.Neq, '').top(1);\n      store.query(modelName, builder2.build()).then(function (result) {\n        var arr = result.toArray();\n        filtreInsertParametr = arr.objectAt(0).get('address');\n        filtreInsertParametr = filtreInsertParametr.slice(1, filtreInsertParametr.length);\n        if (!filtreInsertParametr) {\n          assert.ok(false, 'Empty data');\n        }\n      }).then(function () {\n        var $filterButtonDiv = Ember.$('.buttons.filter-active');\n        var $filterButton = $filterButtonDiv.children('button');\n        var $objectListView = Ember.$('.object-list-view');\n\n        // Activate filtre row.\n        Ember.run(function () {\n          $filterButton.click();\n        });\n\n        (0, _folvTestsFunctions.filterCollumn)($objectListView, 0, filtreInsertOperation, filtreInsertParametr).then(function () {\n          // Apply filter function.\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = Ember.$('.refresh-button')[0];\n            refreshButton.click();\n          };\n\n          // Apply filter.\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          var done1 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var filtherResult = controller.model.content;\n            var successful = true;\n            for (var i = 0; i < filtherResult.length; i++) {\n              var address = filtherResult[i]._data.address;\n              if (address.lastIndexOf(filtreInsertParametr) === -1) {\n                successful = false;\n              }\n            }\n\n            assert.equal(filtherResult.length >= 1, true, 'Filtered list is empty');\n            assert.equal(successful, true, 'Filter successfully worked');\n            done1();\n          });\n        });\n      });\n    });\n  });\n});","// import { run } from '@ember/runloop';\n// import $ from 'jquery';\n// import { get } from '@ember/object';\n// import { executeTest } from './execute-folv-test';\n// import { loadingList, checkSortingList, loadingLocales, getOrderByClause } from './folv-tests-functions';\n\n// var olvContainerClass = '.object-list-view-container';\n// var trTableClass = 'table.object-list-view tbody tr';\n\n// Need to add sort by multiple columns.\n// TODO: Fix for menu\n// executeTest('check select all at all page', (store, assert, app) => {\n// assert.expect(10);\n// let path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n// visit(path);\n// click('.ui.clear-sorting-button');\n// andThen(() => {\n\n//   // Check page path.\n//   assert.equal(currentPath(), path);\n//   let controller = app.__container__.lookup('controller:' + currentRouteName());\n//   let projectionName = get(controller, 'modelProjection');\n\n//   let orderByClause = null;\n\n//   let $olv = $('.object-list-view ');\n//   let $thead = $('th.dt-head-left', $olv)[0];\n\n//   let currentSorting = controller.get('computedSorting');\n//   if (!$.isEmptyObject(currentSorting)) {\n//     orderByClause = getOrderByClause(currentSorting);\n//   }\n\n//   run(() => {\n//     let done = assert.async();\n\n//     // Check sortihg in the first column. Sorting is not append.\n//     loadingLocales('ru', app).then(() => {\n//       checkSortingList(store, projectionName, $olv, orderByClause).then((isTrue) => {\n//         assert.ok(isTrue, 'sorting is not applied');\n\n//         // Check sortihg icon in the first column. Sorting icon is not added.\n//         assert.equal($thead.children[0].children.length, 1, 'no sorting icon in the first column');\n//         let done1 = assert.async();\n//         loadingList($thead, olvContainerClass, trTableClass).then(($list) => {\n\n//           assert.ok($list);\n\n//           let $checkAllButton = $('.check-all-button');\n//           run(() => {\n//             $checkAllButton.click();\n//           });\n\n//           let $checkAllAtPageButton = $('.check-all-at-page-button');\n//           let $checkCheckBox = $('.flexberry-checkbox.checked.read-only');\n//           let $deleteButton = $('.delete-button');\n\n//           // Check afther select all.\n//           assert.equal($checkAllAtPageButton.hasClass('disabled'), true, 'select all at page aren\\'t available');\n//           assert.equal($checkCheckBox.length, 5, 'all checkBox in row are select and readOnly');\n//           assert.equal($deleteButton.hasClass('disabled'), false, 'delete are available');\n\n//           run(() => {\n//             $checkAllButton.click();\n//           });\n\n//           $checkAllAtPageButton = $('.check-all-at-page-button');\n//           $checkCheckBox = $('.flexberry-checkbox.checked.read-only');\n//           $deleteButton = $('.delete-button');\n\n//           // Check afther unselect all.\n//           assert.equal($checkAllAtPageButton.hasClass('disabled'), false, 'select all at page are available');\n//           assert.equal($checkCheckBox.length, 0, 'all checkBox in row are select and readOnly');\n//           assert.equal($deleteButton.hasClass('disabled'), true, 'delete aren\\'t available');\n\n//           done1();\n//         });\n//         done();\n//       });\n//     });\n//   });\n// });\n// });\ndefine(\"dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-all-at-all-page-test\", [], function () {\n  \"use strict\";\n});","// import { run } from '@ember/runloop';\n// import $ from 'jquery';\n// import { get } from '@ember/object';\n// import { executeTest } from './execute-folv-test';\n// import { loadingList, checkSortingList, loadingLocales, getOrderByClause } from './folv-tests-functions';\n\n// var olvContainerClass = '.object-list-view-container';\n// var trTableClass = 'table.object-list-view tbody tr';\n\n// Need to add sort by multiple columns.\n// executeTest('check select all at page', (store, assert, app) => {\n// assert.expect(8);\n// let path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n// visit(path);\n// click('.ui.clear-sorting-button');\n// andThen(() => {\n\n//   // Check page path.\n//   assert.equal(currentPath(), path);\n//   let controller = app.__container__.lookup('controller:' + currentRouteName());\n//   let projectionName = get(controller, 'modelProjection');\n\n//   let orderByClause = null;\n\n//   let $olv = $('.object-list-view ');\n//   let $thead = $('th.dt-head-left', $olv)[0];\n\n//   let currentSorting = controller.get('computedSorting');\n//   if (!$.isEmptyObject(currentSorting)) {\n//     orderByClause = getOrderByClause(currentSorting);\n//   }\n\n//   run(() => {\n//     let done = assert.async();\n\n//     // Check sortihg in the first column. Sorting is not append.\n//     loadingLocales('ru', app).then(() => {\n//       checkSortingList(store, projectionName, $olv, orderByClause).then((isTrue) => {\n//         assert.ok(isTrue, 'sorting is not applied');\n\n//         // Check sortihg icon in the first column. Sorting icon is not added.\n//         assert.equal($thead.children[0].children.length, 1, 'no sorting icon in the first column');\n//         let done1 = assert.async();\n//         loadingList($thead, olvContainerClass, trTableClass).then(($list) => {\n\n//           assert.ok($list);\n\n//           let $checkAllAtPageButton = $('.check-all-at-page-button');\n//           run(() => {\n//             $checkAllAtPageButton.click();\n//           });\n\n//           let $deleteButton = $('.delete-button');\n//           let $checkCheckBox = $('.flexberry-checkbox.checked');\n\n//           // Check afther select all at page.\n//           assert.equal($checkCheckBox.length, 5, 'all checkBox in row are select');\n//           assert.equal($deleteButton.hasClass('disabled'), false, 'delete are available');\n\n//           run(() => {\n//             $checkAllAtPageButton.click();\n//           });\n\n//           $deleteButton = $('.delete-button');\n//           $checkCheckBox = $('.flexberry-checkbox.checked');\n\n//           // Check afther unselect all at page.\n//           assert.equal($checkCheckBox.length, 0, 'all checkBox in row are unselect');\n//           assert.equal($deleteButton.hasClass('disabled'), true, 'delete aren\\'t available');\n\n//           done1();\n//         });\n//         done();\n//       });\n//     });\n//   });\n// });\n// });\ndefine(\"dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-all-at-page-test\", [], function () {\n  \"use strict\";\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-config-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', '@ember/test-helpers'], function (_executeFolvTest, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFolvTest.executeTest)('check folv config', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert) {\n      var path, config;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n              _context.next = 3;\n              return visit(path);\n\n            case 3:\n              _context.next = 5;\n              return (0, _testHelpers.settled)();\n\n            case 5:\n              // Ждем завершения всех асинхронных действий\n\n              config = ['createNewButton', 'deleteButton', 'refreshButton', 'showDeleteMenuItemInRow'];\n\n\n              checkOlvConfig('[data-test-olv]', null, assert, config);\n\n            case 7:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-checked-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', '@ember/test-helpers'], function (_executeFolvTest, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFolvTest.executeTest)('test checking', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert) {\n      var path, $folvContainer, $row, $firstCell, $checkboxInRow, recordIsChecked;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(2);\n              path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n              _context.next = 4;\n              return visit(path);\n\n            case 4:\n              assert.equal(currentPath(), path, 'Visited the correct path');\n\n              $folvContainer = document.querySelector('.object-list-view-container');\n              $row = $folvContainer.querySelector('table.object-list-view tbody tr');\n\n              // Mark first record.\n\n              $firstCell = $row.querySelector('.object-list-view-helper-column-cell');\n              $checkboxInRow = $firstCell.querySelector('.flexberry-checkbox');\n              _context.next = 11;\n              return click($checkboxInRow);\n\n            case 11:\n              _context.next = 13;\n              return (0, _testHelpers.settled)();\n\n            case 13:\n              // Ждем завершения всех асинхронных действий\n\n              recordIsChecked = $checkboxInRow.classList.contains('checked');\n\n              assert.ok(recordIsChecked, 'First row is checked');\n\n            case 15:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-close-from-edit-form-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', '@ember/test-helpers'], function (_executeFolvTest, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFolvTest.executeTest)('check close button from edit form', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert) {\n      var path;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(1);\n              path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n              _context.next = 4;\n              return visit(path);\n\n            case 4:\n              assert.equal(currentPath(), path, 'Visited the correct path');\n\n              _context.next = 7;\n              return (0, _testHelpers.settled)();\n\n            case 7:\n              // Ждем завершения всех асинхронных действий\n              checkCloseEditForm('[data-test-olv]', null, assert, path);\n\n            case 8:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-colsconfig-column-localization-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'dummy/locales/ru/translations', 'dummy/locales/en/translations', '@ember/test-helpers'], function (_executeFolvTest, _folvTestsFunctions, _translations, _translations2, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFolvTest.executeTest)('check colsconfig column localization test', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(store, assert, app) {\n      var path, checkLocalization;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              assert.expect(21);\n              path = 'ember-flexberry-dummy-suggestion-list';\n              _context2.next = 4;\n              return visit(path);\n\n            case 4:\n              assert.equal(currentPath(), path, 'Visited the correct path');\n\n              checkLocalization = function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(currentLocale, locale) {\n                  var columnsLocalization, $columns;\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          columnsLocalization = Ember.get(currentLocale, 'models.ember-flexberry-dummy-suggestion.projections.SuggestionL');\n                          _context.next = 3;\n                          return click('.config-button');\n\n                        case 3:\n                          _context.next = 5;\n                          return (0, _testHelpers.settled)();\n\n                        case 5:\n                          // Ждем завершения всех асинхронных действий\n\n                          $columns = Ember.$('.flexberry-colsconfig tbody tr');\n\n                          $columns.each(function (i, column) {\n                            var cellText = column.cells[2].innerText;\n                            var propname = column.getAttribute('propname').replace('.name', '');\n                            var assertionMessage = locale + ' locale ' + propname + ' ok';\n                            var caption = Ember.get(columnsLocalization, propname + '.__caption__');\n                            assert.equal(caption, cellText, assertionMessage);\n                          });\n\n                          _context.next = 9;\n                          return click('.close.icon');\n\n                        case 9:\n                          _context.next = 11;\n                          return (0, _testHelpers.settled)();\n\n                        case 11:\n                        case 'end':\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, undefined);\n                }));\n\n                return function checkLocalization(_x4, _x5) {\n                  return _ref2.apply(this, arguments);\n                };\n              }();\n\n              _context2.next = 8;\n              return (0, _folvTestsFunctions.loadingLocales)('en', app);\n\n            case 8:\n              _context2.next = 10;\n              return checkLocalization(_translations2.default, 'En');\n\n            case 10:\n              _context2.next = 12;\n              return (0, _folvTestsFunctions.loadingLocales)('ru', app);\n\n            case 12:\n              _context2.next = 14;\n              return checkLocalization(_translations.default, 'Ru');\n\n            case 14:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, undefined);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-column-config-save-button-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', '@ember/test-helpers'], function (_executeFolvTest, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFolvTest.executeTest)('check column config save button test', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert) {\n      var path, $field, $fieldInput;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(3);\n              path = 'ember-flexberry-dummy-suggestion-list';\n              _context.next = 4;\n              return visit(path);\n\n            case 4:\n              assert.equal(currentPath(), path, 'Visited the correct path');\n\n              _context.next = 7;\n              return click('button.config-button');\n\n            case 7:\n              _context.next = 9;\n              return (0, _testHelpers.settled)();\n\n            case 9:\n              // Ждем завершения всех асинхронных действий\n\n              $field = document.querySelector('div.ui.action.input');\n              $fieldInput = $field.querySelector('input');\n\n\n              assert.equal($field.querySelectorAll('.cols-config-save.disabled').length === 1, true, 'button disabled');\n              _context.next = 14;\n              return fillIn($fieldInput, 'aaayyyeee leemaauuuu');\n\n            case 14:\n              _context.next = 16;\n              return (0, _testHelpers.settled)();\n\n            case 16:\n              // Ждем завершения всех асинхронных действий\n\n              assert.equal($field.querySelectorAll('.cols-config-save.disabled').length === 0, true, 'button active');\n\n            case 17:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-configurate-row-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', '@ember/test-helpers'], function (_executeFolvTest, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFolvTest.executeTest)('check configurate row test', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert, app) {\n      var path, controller, $folvContainer, $positiveRows, $folvRow, $cell, $geRow;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(3);\n              path = 'components-examples/flexberry-objectlistview/configurate-rows';\n              _context.next = 4;\n              return visit(path);\n\n            case 4:\n              _context.next = 6;\n              return (0, _testHelpers.settled)();\n\n            case 6:\n              assert.equal(currentPath(), path, 'Visited the correct path');\n\n              controller = app.__container__.lookup('controller:' + currentRouteName());\n              $folvContainer = document.querySelectorAll('.object-list-view-container');\n              $positiveRows = $folvContainer[0].querySelector('.positive');\n\n              // Check positive row at folv.\n\n              $folvRow = $positiveRows;\n              $cell = $folvRow.querySelector('.oveflow-text');\n\n              assert.equal($cell.innerText, controller.configurateRowByAddress || '', 'Positive row text matches');\n\n              // Check positive row at GroupEdit.\n              $geRow = $folvContainer[1].querySelector('.positive');\n\n              $cell = $geRow.querySelector('.oveflow-text');\n              assert.equal($cell.innerText, controller.configurateRowByAddress || '', 'Positive row text matches for GroupEdit');\n\n            case 16:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-date-format-moment-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry/locales/ru/translations'], function (_executeFolvTest, _folvTestsFunctions, _translations) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFolvTest.executeTest)('date format moment L', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert, app) {\n      var path, olvContainerClass, $toolBar, $refreshButton, controller, refreshFunction, moment, momentValue, $folvContainer, $table, $headRow, indexDate, $dateCell, dateFormatRuRe, findDateRu, dateFormatEnRe, dataCellStr, findDateEn;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(5);\n              path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n              _context.next = 4;\n              return visit(path);\n\n            case 4:\n              assert.equal(currentPath(), path, 'Correct path is visited');\n\n              _context.next = 7;\n              return (0, _folvTestsFunctions.loadingLocales)('ru', app);\n\n            case 7:\n              olvContainerClass = '.object-list-view-container';\n              $toolBar = Ember.$('.ui.secondary.menu')[0];\n              $refreshButton = $toolBar.children[0];\n\n\n              assert.equal($refreshButton.innerText.trim(), Ember.get(_translations.default, 'components.olv-toolbar.refresh-button-text'), 'Button refresh exists');\n\n              controller = app.__container__.lookup('controller:' + currentRouteName());\n\n              refreshFunction = function refreshFunction() {\n                var refreshButton = Ember.$('.refresh-button')[0];\n                refreshButton.click();\n              };\n\n              _context.next = 15;\n              return (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller);\n\n            case 15:\n              moment = app.__container__.lookup('service:moment');\n              momentValue = Ember.get(moment, 'defaultFormat');\n\n              assert.equal(momentValue, 'L', 'Moment value is \\'L\\'');\n\n              $folvContainer = Ember.$(olvContainerClass);\n              $table = Ember.$('table.object-list-view', $folvContainer);\n              $headRow = Ember.$('thead tr', $table)[0].children;\n\n              indexDate = function indexDate() {\n                for (var index = 0; index < $headRow.length; index++) {\n                  var $dateAttribute = Ember.$($headRow[index]).children('div');\n                  if ($dateAttribute.length !== 0 && Ember.$.trim($dateAttribute[0].getAttribute('data-olv-header-property-name')) === 'date') {\n                    return index;\n                  }\n                }\n                return -1; // Если не найдено\n              };\n\n              $dateCell = function $dateCell() {\n                return Ember.$.trim(Ember.$('tbody tr', $table)[0].children[indexDate()].innerText);\n              };\n\n              // Date format must be DD.MM.YYYY\n\n\n              dateFormatRuRe = /(0[1-9]|[12][0-9]|3[01])\\.(0[1-9]|1[012])\\.(19|20)\\d\\d/;\n              findDateRu = dateFormatRuRe.exec($dateCell());\n\n\n              assert.ok(findDateRu, 'Date format is \\'DD.MM.YYYY\\'');\n\n              _context.next = 28;\n              return (0, _folvTestsFunctions.loadingLocales)('en', app);\n\n            case 28:\n              _context.next = 30;\n              return (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller);\n\n            case 30:\n\n              // Date format must be MM/DD/YYYY\n              dateFormatEnRe = /(0[1-9]|1[012])\\/(0[1-9]|[12][0-9]|3[01])\\/(19|20)\\d\\d/;\n              dataCellStr = $dateCell();\n              findDateEn = dateFormatEnRe.exec(dataCellStr);\n\n\n              assert.ok(findDateEn, 'Date format is \\'MM/DD/YYYY\\'');\n\n            case 34:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-data-cancel-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'ember-flexberry-data/utils/generate-unique-id', 'ember-flexberry-data/query/builder', 'ember-flexberry-data/query/filter-operator', '@ember/test-helpers'], function (_executeFolvTest, _generateUniqueId, _builder, _filterOperator, _testHelpers) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check delete before record data cancel test', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-cancel';\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var howAddRec = 1;\n    var uuid = '0' + (0, _generateUniqueId.default)();\n\n    // Add records for deleting.\n    Ember.run(function () {\n      var newRecord = store.createRecord(modelName, { name: uuid });\n      var done1 = assert.async();\n\n      newRecord.save().then(function () {\n        (0, _executeFolvTest.addDataForDestroy)(newRecord);\n        var builder = new _builder.default(store).from(modelName).count();\n        var done = assert.async();\n        store.query(modelName, builder.build()).then(function (result) {\n          visit(path + '?perPage=' + result.meta.count);\n          andThen(function () {\n            assert.equal(currentPath(), path);\n\n            var olvContainerClass = '.object-list-view-container';\n            var trTableClass = 'table.object-list-view tbody tr';\n\n            var $folvContainer = Ember.$(olvContainerClass);\n            var $rows = function $rows() {\n              return Ember.$(trTableClass, $folvContainer).toArray();\n            };\n\n            // Check that the records have been added.\n            var recordIsForDeleting = $rows().reduce(function (sum, element) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              var flag = nameRecord.indexOf(uuid) >= 0;\n              return sum + flag;\n            }, 0);\n\n            assert.equal(recordIsForDeleting > 0, true, howAddRec + ' record added');\n\n            /* eslint-disable no-unused-vars */\n            var clickPromises = [];\n            $rows().forEach(function (element, i, arr) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              if (nameRecord.indexOf(uuid) >= 0) {\n                var $deleteBtnInRow = Ember.$('.object-list-view-row-delete-button', element)[0];\n                clickPromises.push((0, _testHelpers.click)($deleteBtnInRow));\n              }\n            });\n            /* eslint-enable no-unused-vars */\n\n            Promise.all(clickPromises).then(function () {\n              var done2 = assert.async();\n\n              // Check that the records wasn't remove in beforeDeleteRecord.\n              var controller = app.__container__.lookup('controller:' + currentRouteName());\n              assert.ok(controller.recordWasNotDelete, 'Records wasn\\'t remove in beforeDeleteRecord');\n\n              // Check that the records have been removed.\n              var recordsIsDeleteBtnInRow = $rows().every(function (element) {\n                var nameRecord = Ember.$.trim(element.children[1].innerText);\n                return nameRecord.indexOf(uuid) < 0;\n              });\n\n              assert.notOk(recordsIsDeleteBtnInRow, 'Each entry begins with \\'' + uuid + '\\' wasn\\'t deleted with button in row');\n\n              // Check that the records hadn't removed from store.\n              var builder2 = new _builder.default(store, modelName).where('name', _filterOperator.default.Eq, uuid).count();\n              var timeout = 500;\n              Ember.run.later(function () {\n                store.query(modelName, builder2.build()).then(function (result) {\n                  assert.ok(result.meta.count, 'record \\'' + uuid + '\\'not found in store');\n                  done2();\n                }).finally(function () {\n                  newRecord.destroyRecord();\n                });\n              }, timeout);\n            });\n          });\n          done();\n        });\n        done1();\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-data-immediately-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'ember-flexberry-data/utils/generate-unique-id', 'ember-flexberry-data/query/builder', 'ember-flexberry-data/query/filter-operator', '@ember/test-helpers'], function (_executeFolvTest, _generateUniqueId, _builder, _filterOperator, _testHelpers) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check delete before record data immediately test', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-immediately';\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var howAddRec = 1;\n    var uuid = '0' + (0, _generateUniqueId.default)();\n\n    // Add record for deleting.\n    Ember.run(function () {\n      var newRecord = store.createRecord(modelName, { name: uuid });\n      var done1 = assert.async();\n\n      newRecord.save().then(function () {\n        (0, _executeFolvTest.addDataForDestroy)(newRecord);\n        var builder = new _builder.default(store).from(modelName).count();\n        var done = assert.async();\n        store.query(modelName, builder.build()).then(function (result) {\n          visit(path + '?perPage=' + result.meta.count);\n          andThen(function () {\n            assert.equal(currentPath(), path);\n\n            var olvContainerClass = '.object-list-view-container';\n            var trTableClass = 'table.object-list-view tbody tr';\n\n            var $folvContainer = Ember.$(olvContainerClass);\n            var $rows = function $rows() {\n              return Ember.$(trTableClass, $folvContainer).toArray();\n            };\n\n            // Check that the record have been added.\n            var recordIsForDeleting = $rows().reduce(function (sum, element) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              var flag = nameRecord.indexOf(uuid) >= 0;\n              return sum + flag;\n            }, 0);\n\n            assert.equal(recordIsForDeleting > 0, true, howAddRec + ' record added');\n\n            /* eslint-disable no-unused-vars */\n            var clickPromises = [];\n            $rows().forEach(function (element, i, arr) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              if (nameRecord.indexOf(uuid) >= 0) {\n                var $deleteBtnInRow = Ember.$('.object-list-view-row-delete-button', element)[0];\n                clickPromises.push((0, _testHelpers.click)($deleteBtnInRow));\n              }\n            });\n            /* eslint-enable no-unused-vars */\n\n            Promise.all(clickPromises).then(function () {\n              var done2 = assert.async();\n\n              // Check that the records wasn't removed in beforeDeleteRecord.\n              var controller = app.__container__.lookup('controller:' + currentRouteName());\n              assert.ok(controller.recordWasNotDelete, 'Records wasn\\'t remove in beforeDeleteRecord');\n\n              // Check if the records haven't been removed.\n              var recordsIsDeleteBtnInRow = $rows().every(function (element) {\n                var nameRecord = Ember.$.trim(element.children[1].innerText);\n                return nameRecord.indexOf(uuid) < 0;\n              });\n\n              assert.ok(recordsIsDeleteBtnInRow, 'Each entry begins with \\'' + uuid + '\\' was deleted with button in row');\n\n              // Check that the records have been removed from store.\n              var builder2 = new _builder.default(store, modelName).where('name', _filterOperator.default.Eq, uuid).count();\n              var timeout = 500;\n              Ember.run.later(function () {\n                store.query(modelName, builder2.build()).then(function (result) {\n                  assert.ok(result.meta.count, 'record \\'' + uuid + '\\'not found in store');\n                  done2();\n                }).finally(function () {\n                  newRecord.destroyRecord();\n                });\n              }, timeout);\n            });\n          });\n          done();\n        });\n        done1();\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'ember-flexberry-data/utils/generate-unique-id', 'ember-flexberry-data/query/builder', 'ember-flexberry-data/query/filter-operator', '@ember/test-helpers'], function (_executeFolvTest, _generateUniqueId, _builder, _filterOperator, _testHelpers) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check delete before record test', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record';\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var howAddRec = 1;\n    var uuid = '0' + (0, _generateUniqueId.default)();\n\n    // Add records for deliting.\n    Ember.run(function () {\n      var newRecord = store.createRecord(modelName, { name: uuid });\n      var done1 = assert.async();\n\n      newRecord.save().then(function () {\n        (0, _executeFolvTest.addDataForDestroy)(newRecord);\n        var builder = new _builder.default(store).from(modelName).count();\n        var done = assert.async();\n        store.query(modelName, builder.build()).then(function (result) {\n          visit(path + '?perPage=' + result.meta.count);\n          andThen(function () {\n            assert.equal(currentPath(), path);\n\n            var olvContainerClass = '.object-list-view-container';\n            var trTableClass = 'table.object-list-view tbody tr';\n\n            var $folvContainer = Ember.$(olvContainerClass);\n            var $rows = function $rows() {\n              return Ember.$(trTableClass, $folvContainer).toArray();\n            };\n\n            // Check that the records have been added.\n            var recordIsForDeleting = $rows().reduce(function (sum, element) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              var flag = nameRecord.indexOf(uuid) >= 0;\n              return sum + flag;\n            }, 0);\n\n            assert.equal(recordIsForDeleting > 0, true, howAddRec + ' record added');\n\n            /* eslint-disable no-unused-vars */\n            var clickPromises = [];\n            $rows().forEach(function (element, i, arr) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              if (nameRecord.indexOf(uuid) >= 0) {\n                var $deleteBtnInRow = Ember.$('.object-list-view-row-delete-button', element)[0];\n                clickPromises.push((0, _testHelpers.click)($deleteBtnInRow));\n              }\n            });\n            /* eslint-enable no-unused-vars */\n\n            Promise.all(clickPromises).then(function () {\n              var done2 = assert.async();\n\n              // Check that the records wasn't remove in beforeDeleteRecord.\n              var controller = app.__container__.lookup('controller:' + currentRouteName());\n              assert.ok(controller.recordWasNotDelete, 'Records wasn\\'t remove in beforeDeleteRecord');\n\n              // Check that the records have been removed.\n              var recordsIsDeleteBtnInRow = $rows().every(function (element) {\n                var nameRecord = Ember.$.trim(element.children[1].innerText);\n                return nameRecord.indexOf(uuid) < 0;\n              });\n\n              assert.ok(recordsIsDeleteBtnInRow, 'Each entry begins with \\'' + uuid + '\\' is delete with button in row');\n\n              // Check that the records had been removed from store.\n              var builder2 = new _builder.default(store, modelName).where('name', _filterOperator.default.Eq, uuid).count();\n              var timeout = 500;\n              Ember.run.later(function () {\n                store.query(modelName, builder2.build()).then(function (result) {\n                  assert.notOk(result.meta.count, 'record \\'' + uuid + '\\'not found in store');\n                  done2();\n                });\n              }, timeout);\n            });\n          });\n          done();\n        });\n        done1();\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-with-promise-data-cancel-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'ember-flexberry-data/utils/generate-unique-id', 'ember-flexberry-data/query/builder', 'ember-flexberry-data/query/filter-operator', '@ember/test-helpers'], function (_executeFolvTest, _generateUniqueId, _builder, _filterOperator, _testHelpers) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check delete before record with promise data cancel test', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-cancel';\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var howAddRec = 1;\n    var uuid = '0' + (0, _generateUniqueId.default)();\n\n    // Add records for deliting.\n    Ember.run(function () {\n      var newRecord = store.createRecord(modelName, { name: uuid });\n      var done1 = assert.async();\n\n      newRecord.save().then(function () {\n        (0, _executeFolvTest.addDataForDestroy)(newRecord);\n        var builder = new _builder.default(store).from(modelName).count();\n        var done = assert.async();\n        store.query(modelName, builder.build()).then(function (result) {\n          visit(path + '?perPage=' + result.meta.count);\n          andThen(function () {\n            assert.equal(currentPath(), path);\n\n            var olvContainerClass = '.object-list-view-container';\n            var trTableClass = 'table.object-list-view tbody tr';\n\n            var $folvContainer = Ember.$(olvContainerClass);\n            var $rows = function $rows() {\n              return Ember.$(trTableClass, $folvContainer).toArray();\n            };\n\n            // Check that the records have been added.\n            var recordIsForDeleting = $rows().reduce(function (sum, element) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              var flag = nameRecord.indexOf(uuid) >= 0;\n              return sum + flag;\n            }, 0);\n\n            assert.equal(recordIsForDeleting > 0, true, howAddRec + ' record added');\n\n            /* eslint-disable no-unused-vars */\n            var clickPromises = [];\n            $rows().forEach(function (element, i, arr) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              if (nameRecord.indexOf(uuid) >= 0) {\n                var $deleteBtnInRow = Ember.$('.object-list-view-row-delete-button', element)[0];\n                clickPromises.push((0, _testHelpers.click)($deleteBtnInRow));\n              }\n            });\n            /* eslint-enable no-unused-vars */\n\n            Promise.all(clickPromises).then(function () {\n              var done2 = assert.async();\n\n              // Check that the records wasn't remove in beforeDeleteRecord.\n              var controller = app.__container__.lookup('controller:' + currentRouteName());\n              assert.ok(controller.recordWasNotDelete, 'Records wasn\\'t remove in beforeDeleteRecord');\n\n              // Check if the records wasn't removed.\n              var recordsIsDeleteBtnInRow = $rows().every(function (element) {\n                var nameRecord = Ember.$.trim(element.children[1].innerText);\n                return nameRecord.indexOf(uuid) < 0;\n              });\n\n              assert.notOk(recordsIsDeleteBtnInRow, 'Each entry begins with \\'' + uuid + '\\' is delete with button in row');\n\n              // Check that the records haven't been removed from store.\n              var builder2 = new _builder.default(store, modelName).where('name', _filterOperator.default.Eq, uuid).count();\n              var timeout = 500;\n              Ember.run.later(function () {\n                store.query(modelName, builder2.build()).then(function (result) {\n                  assert.ok(result.meta.count, 'record \\'' + uuid + '\\'not found in store');\n                  done2();\n                }).finally(function () {\n                  newRecord.destroyRecord();\n                });\n              }, timeout);\n            });\n          });\n          done();\n        });\n        done1();\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-with-promise-data-immediately-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'ember-flexberry-data/utils/generate-unique-id', 'ember-flexberry-data/query/builder', 'ember-flexberry-data/query/filter-operator', '@ember/test-helpers'], function (_executeFolvTest, _generateUniqueId, _builder, _filterOperator, _testHelpers) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check delete before record with promise data immediately test', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-immediately';\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var howAddRec = 1;\n    var uuid = '0' + (0, _generateUniqueId.default)();\n\n    // Add records for deliting.\n    Ember.run(function () {\n      var newRecord = store.createRecord(modelName, { name: uuid });\n      var done1 = assert.async();\n\n      newRecord.save().then(function () {\n        (0, _executeFolvTest.addDataForDestroy)(newRecord);\n        var builder = new _builder.default(store).from(modelName).count();\n        var done = assert.async();\n        store.query(modelName, builder.build()).then(function (result) {\n          visit(path + '?perPage=' + result.meta.count);\n          andThen(function () {\n            assert.equal(currentPath(), path);\n\n            var olvContainerClass = '.object-list-view-container';\n            var trTableClass = 'table.object-list-view tbody tr';\n\n            var $folvContainer = Ember.$(olvContainerClass);\n            var $rows = function $rows() {\n              return Ember.$(trTableClass, $folvContainer).toArray();\n            };\n\n            // Check that the records have been added.\n            var recordIsForDeleting = $rows().reduce(function (sum, element) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              var flag = nameRecord.indexOf(uuid) >= 0;\n              return sum + flag;\n            }, 0);\n\n            assert.equal(recordIsForDeleting > 0, true, howAddRec + ' record added');\n\n            /* eslint-disable no-unused-vars */\n            var clickPromises = [];\n            $rows().forEach(function (element, i, arr) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              if (nameRecord.indexOf(uuid) >= 0) {\n                var $deleteBtnInRow = Ember.$('.object-list-view-row-delete-button', element)[0];\n                clickPromises.push((0, _testHelpers.click)($deleteBtnInRow));\n              }\n            });\n            /* eslint-enable no-unused-vars */\n\n            Promise.all(clickPromises).then(function () {\n              var done2 = assert.async();\n\n              // Check that the records wasn't remove in beforeDeleteRecord.\n              var controller = app.__container__.lookup('controller:' + currentRouteName());\n              assert.ok(controller.recordWasNotDelete, 'Records wasn\\'t remove in beforeDeleteRecord');\n\n              // Check if the records wasn't removed.\n              var recordsIsDeleteBtnInRow = $rows().every(function (element) {\n                var nameRecord = Ember.$.trim(element.children[1].innerText);\n                return nameRecord.indexOf(uuid) < 0;\n              });\n\n              assert.ok(recordsIsDeleteBtnInRow, 'Each entry begins with \\'' + uuid + '\\' is delete with button in row');\n\n              // Check that the records have been removed from store.\n              var builder2 = new _builder.default(store, modelName).where('name', _filterOperator.default.Eq, uuid).count();\n              var timeout = 500;\n              Ember.run.later(function () {\n                store.query(modelName, builder2.build()).then(function (result) {\n                  assert.ok(result.meta.count, 'record \\'' + uuid + '\\'not found in store');\n                  done2();\n                }).finally(function () {\n                  newRecord.destroyRecord();\n                });\n              }, timeout);\n            });\n          });\n          done();\n        });\n        done1();\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-with-promise-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'ember-flexberry-data/utils/generate-unique-id', 'ember-flexberry-data/query/builder', 'ember-flexberry-data/query/filter-operator', '@ember/test-helpers'], function (_executeFolvTest, _generateUniqueId, _builder, _filterOperator, _testHelpers) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check delete before record with promise test', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise';\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var howAddRec = 1;\n    var uuid = '0' + (0, _generateUniqueId.default)();\n\n    // Add records for deliting.\n    Ember.run(function () {\n      var newRecord = store.createRecord(modelName, { name: uuid });\n      var done1 = assert.async();\n\n      newRecord.save().then(function () {\n        (0, _executeFolvTest.addDataForDestroy)(newRecord);\n        var builder = new _builder.default(store).from(modelName).count();\n        var done = assert.async();\n        store.query(modelName, builder.build()).then(function (result) {\n          visit(path + '?perPage=' + result.meta.count);\n          andThen(function () {\n            assert.equal(currentPath(), path);\n\n            var olvContainerClass = '.object-list-view-container';\n            var trTableClass = 'table.object-list-view tbody tr';\n\n            var $folvContainer = Ember.$(olvContainerClass);\n            var $rows = function $rows() {\n              return Ember.$(trTableClass, $folvContainer).toArray();\n            };\n\n            // Check that the records have been added.\n            var recordIsForDeleting = $rows().reduce(function (sum, element) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              var flag = nameRecord.indexOf(uuid) >= 0;\n              return sum + flag;\n            }, 0);\n\n            assert.equal(recordIsForDeleting > 0, true, howAddRec + ' record added');\n\n            /* eslint-disable no-unused-vars */\n            var clickPromises = [];\n            $rows().forEach(function (element, i, arr) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              if (nameRecord.indexOf(uuid) >= 0) {\n                var $deleteBtnInRow = Ember.$('.object-list-view-row-delete-button', element)[0];\n                clickPromises.push((0, _testHelpers.click)($deleteBtnInRow));\n              }\n            });\n            /* eslint-enable no-unused-vars */\n\n            Promise.all(clickPromises).then(function () {\n              var done2 = assert.async();\n\n              // Check that the records wasn't remove in beforeDeleteRecord.\n              var controller = app.__container__.lookup('controller:' + currentRouteName());\n              assert.ok(controller.recordWasNotDelete, 'Records wasn\\'t remove in beforeDeleteRecord');\n\n              // Check that the records haven't been removed.\n              var recordsIsDeleteBtnInRow = $rows().every(function (element) {\n                var nameRecord = Ember.$.trim(element.children[1].innerText);\n                return nameRecord.indexOf(uuid) < 0;\n              });\n\n              assert.ok(recordsIsDeleteBtnInRow, 'Each entry begins with \\'' + uuid + '\\' is delete with button in row');\n\n              // Check that the records haven't been removed into store.\n              var builder2 = new _builder.default(store, modelName).where('name', _filterOperator.default.Eq, uuid).count();\n              var timeout = 500;\n              Ember.run.later(function () {\n                store.query(modelName, builder2.build()).then(function (result) {\n                  assert.notOk(result.meta.count, 'record \\'' + uuid + '\\'not found in store');\n                  done2();\n                });\n              }, timeout);\n            });\n          });\n          done();\n        });\n        done1();\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-button-in-row-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'ember-flexberry-data/utils/generate-unique-id', '@ember/test-helpers', 'ember-flexberry-data/query/filter-operator', 'ember-flexberry-data/query/builder'], function (_executeFolvTest, _generateUniqueId, _testHelpers, _filterOperator, _builder) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeFolvTest.executeTest)('check delete button in row', function (store, assert, app) {\n    assert.expect(4);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var howAddRec = 1;\n    var uuid = '0' + (0, _generateUniqueId.default)();\n\n    // Add records for deliting.\n    Ember.run(function () {\n      var newRecord = store.createRecord(modelName, { name: uuid });\n      var done1 = assert.async();\n\n      newRecord.save().then(function () {\n        (0, _executeFolvTest.addDataForDestroy)(newRecord);\n        var builder = new _builder.default(store).from(modelName).count();\n        var done = assert.async();\n        store.query(modelName, builder.build()).then(function (result) {\n          visit(path + '?perPage=' + result.meta.count);\n          andThen(function () {\n            assert.equal(currentPath(), path);\n\n            var olvContainerClass = '.object-list-view-container';\n            var trTableClass = 'table.object-list-view tbody tr';\n\n            var $folvContainer = Ember.$(olvContainerClass);\n            var $rows = function $rows() {\n              return Ember.$(trTableClass, $folvContainer).toArray();\n            };\n\n            // Check that the records have been added.\n            var recordIsForDeleting = $rows().reduce(function (sum, element) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              var flag = nameRecord.indexOf(uuid) >= 0;\n              return sum + flag;\n            }, 0);\n\n            assert.equal(recordIsForDeleting, howAddRec, howAddRec + ' record added');\n\n            /* eslint-disable no-unused-vars */\n            var clickPromises = [];\n            $rows().forEach(function (element, i, arr) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              if (nameRecord.indexOf(uuid) >= 0) {\n                var $deleteBtnInRow = Ember.$('.object-list-view-row-delete-button', element)[0];\n                Ember.run(function () {\n                  clickPromises.push((0, _testHelpers.click)($deleteBtnInRow));\n                });\n              }\n            });\n            /* eslint-enable no-unused-vars */\n\n            Promise.all(clickPromises).then(function () {\n              var done2 = assert.async();\n\n              // Check that the records have been removed.\n              var recordsIsDeleteBtnInRow = $rows().every(function (element) {\n                var nameRecord = Ember.$.trim(element.children[1].innerText);\n                return nameRecord.indexOf(uuid) < 0;\n              });\n\n              assert.ok(recordsIsDeleteBtnInRow, 'Each entry begins with \\'' + uuid + '\\' is delete with button in row');\n\n              // Check that the records have been removed into store.\n              var builder2 = new _builder.default(store, modelName).where('name', _filterOperator.default.Eq, uuid).count();\n              var timeout = 500;\n              Ember.run.later(function () {\n                store.query(modelName, builder2.build()).then(function (result) {\n                  assert.notOk(result.meta.count, 'record \\'' + uuid + '\\'not found in store');\n                  done2();\n                });\n              }, timeout);\n            });\n          });\n          done();\n        });\n        done1();\n      });\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-button-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/utils/generate-unique-id', 'ember-flexberry-data/query/filter-operator', 'ember-flexberry-data/query/builder'], function (_executeFolvTest, _folvTestsFunctions, _generateUniqueId, _filterOperator, _builder) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeFolvTest.executeTest)('check delete using button on toolbar', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var howAddRec = 2;\n    var uuid = '0' + (0, _generateUniqueId.default)();\n\n    // Add records for deliting.\n    Ember.run(function () {\n      var newRecords = Ember.A();\n\n      for (var i = 0; i < howAddRec; i++) {\n        newRecords.pushObject(store.createRecord('ember-flexberry-dummy-suggestion-type', { name: uuid }));\n      }\n\n      var done2 = assert.async();\n      var promises = Ember.A();\n      newRecords.forEach(function (item) {\n        promises.push(item.save());\n      });\n\n      (0, _executeFolvTest.addDataForDestroy)(newRecords);\n\n      Ember.RSVP.Promise.all(promises).then(function (resolvedPromises) {\n        assert.ok(resolvedPromises, 'All records saved.');\n\n        var builder = new _builder.default(store).from(modelName).count();\n        var done1 = assert.async();\n        store.query(modelName, builder.build()).then(function (result) {\n          visit(path + '?perPage=' + result.meta.count);\n          andThen(function () {\n            assert.equal(currentPath(), path);\n            var olvContainerClass = '.object-list-view-container';\n            var trTableClass = 'table.object-list-view tbody tr';\n\n            var $folvContainer = Ember.$(olvContainerClass);\n            var $rows = function $rows() {\n              return Ember.$(trTableClass, $folvContainer).toArray();\n            };\n\n            // Check that the records have been added.\n            var recordIsForDeleting = $rows().reduce(function (sum, current) {\n              var nameRecord = Ember.$.trim(current.children[1].innerText);\n              var flag = nameRecord.indexOf(uuid) >= 0;\n              return sum + flag;\n            }, 0);\n\n            assert.equal(recordIsForDeleting, howAddRec, howAddRec + ' records added');\n\n            var checkRecords = function checkRecords() {\n              promises.clear();\n              $rows().forEach(function (row) {\n                var nameRecord = Ember.$.trim(row.children[1].innerText);\n                var $firstCell = Ember.$('.object-list-view-helper-column-cell', row);\n                var checkboxInRow = Ember.$('.flexberry-checkbox', $firstCell)[0];\n                if (nameRecord.indexOf(uuid) >= 0) {\n                  promises.pushObject(click(checkboxInRow));\n                }\n              });\n\n              return Ember.RSVP.Promise.all(promises);\n            };\n\n            checkRecords().then(function () {\n              var $toolBar = Ember.$('.ui.secondary.menu')[0];\n              var $deleteButton = $toolBar.children[2];\n              var done = assert.async();\n\n              // Delete the marked records.\n              /* eslint-disable no-unused-vars */\n              (0, _folvTestsFunctions.loadingList)($deleteButton, olvContainerClass, trTableClass).then(function ($list) {\n                var recordsIsDelete = $rows().every(function (element) {\n                  var nameRecord = Ember.$.trim(element.children[1].innerText);\n                  return nameRecord.indexOf(uuid) < 0;\n                });\n\n                assert.ok(recordsIsDelete, 'Each entry begins with \\'' + uuid + '\\' is delete with button in toolbar button');\n\n                // Check that the records have been removed into store.\n                var builder2 = new _builder.default(store).from(modelName).where('name', _filterOperator.default.Eq, uuid).count();\n                var done3 = assert.async();\n                store.query(modelName, builder2.build()).then(function (result) {\n                  assert.notOk(result.meta.count, 'records \\'' + uuid + '\\'not found in store');\n                  done3();\n                });\n                done();\n              });\n              /* eslint-enable no-unused-vars */\n            });\n          });\n          done1();\n        });\n        done2();\n      });\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-record-from-e-form-test', ['qunit'], function (_qunit) {\n  'use strict';\n\n  // Need to add sort by multiple columns.\n  (0, _qunit.skip)('check delete record from edit form', function (store, assert) {\n    assert.expect(1);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n    visit(path);\n    andThen(function () {\n\n      // Check page path.\n      assert.equal(currentPath(), path);\n\n      var model = 'ember-flexberry-dummy-suggestion-type';\n      var prop = 'name';\n      checkDeleteRecordFromEditForm('[data-test-olv]', null, assert, store, model, prop);\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-record-from-olv-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test'], function (_executeFolvTest) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFolvTest.executeTest)('check delete record from olv', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert) {\n      var path, model, prop;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(1);\n\n              path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n              _context.next = 4;\n              return visit(path);\n\n            case 4:\n\n              assert.equal(currentPath(), path, 'Correct path is visited');\n\n              model = 'ember-flexberry-dummy-suggestion-type';\n              prop = 'name';\n              _context.next = 9;\n              return checkDeleteRecordFromOlv('[data-test-olv]', null, assert, store, model, prop);\n\n            case 9:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-with-details-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'ember-flexberry-data/utils/generate-unique-id', 'ember-flexberry-data/query/builder', 'ember-flexberry-data/query/predicate'], function (_executeFolvTest, _generateUniqueId, _builder, _predicate) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check delete with details', function (store, assert, app) {\n    assert.expect(25);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/delete-with-details';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var commentModelName = 'ember-flexberry-dummy-comment';\n    var commentVoteModelName = 'ember-flexberry-dummy-comment-vote';\n    var mainSuggestionTypeRecord = void 0;\n    var mainApplicationUserRecord = void 0;\n    var initTestData = function initTestData(createdRecordsPrefix) {\n      // Add records for deleting.\n      return Ember.RSVP.Promise.all([store.createRecord('ember-flexberry-dummy-suggestion-type', { name: createdRecordsPrefix + \"0\" }).save(), store.createRecord('ember-flexberry-dummy-application-user', {\n        name: createdRecordsPrefix + \"1\",\n        eMail: \"1\",\n        phone1: \"1\"\n      }).save()]).then(function (createdCustomRecords) {\n        mainSuggestionTypeRecord = createdCustomRecords[0];\n        mainApplicationUserRecord = createdCustomRecords[1];\n\n        return Ember.RSVP.Promise.all([store.createRecord(modelName, { text: createdRecordsPrefix + \"0\", type: createdCustomRecords[0], author: createdCustomRecords[1], editor1: createdCustomRecords[1] }).save(), store.createRecord(modelName, { text: createdRecordsPrefix + \"1\", type: createdCustomRecords[0], author: createdCustomRecords[1], editor1: createdCustomRecords[1] }).save(), store.createRecord(modelName, { text: createdRecordsPrefix + \"2\", type: createdCustomRecords[0], author: createdCustomRecords[1], editor1: createdCustomRecords[1] }).save()]).then(function (suggestions) {\n          return Ember.RSVP.Promise.all([store.createRecord(commentModelName, { text: createdRecordsPrefix + \"0\", suggestion: suggestions[0], author: createdCustomRecords[1] }).save(), store.createRecord(commentModelName, { text: createdRecordsPrefix + \"1\", suggestion: suggestions[0], author: createdCustomRecords[1] }).save(), store.createRecord(commentModelName, { text: createdRecordsPrefix + \"2\", suggestion: suggestions[1], author: createdCustomRecords[1] }).save(), store.createRecord(commentModelName, { text: createdRecordsPrefix + \"3\", suggestion: suggestions[1], author: createdCustomRecords[1] }).save()]).then(function (comments) {\n            return Ember.RSVP.Promise.all([store.createRecord(commentVoteModelName, { name: createdRecordsPrefix + \"0\", comment: comments[0], applicationUser: createdCustomRecords[1] }).save(), store.createRecord(commentVoteModelName, { name: createdRecordsPrefix + \"1\", comment: comments[0], applicationUser: createdCustomRecords[1] }).save(), store.createRecord(commentVoteModelName, { name: createdRecordsPrefix + \"2\", comment: comments[1], applicationUser: createdCustomRecords[1] }).save()]);\n          });\n        });\n      });\n    };\n\n    var getRows = function getRows() {\n      var olvContainerClass = '.object-list-view-container';\n      var trTableClass = 'table.object-list-view tbody tr';\n\n      var $folvContainer = Ember.$(olvContainerClass);\n      var $rows = function $rows() {\n        return Ember.$(trTableClass, $folvContainer).toArray();\n      };\n      return $rows;\n    };\n\n    var checkRecordsWereAdded = function checkRecordsWereAdded(searchedRecord) {\n      var $rows = getRows();\n\n      // Check that the records have been added.\n      var recordIsForDeleting = $rows().reduce(function (sum, element) {\n        var nameRecord = Ember.$.trim(element.children[2].innerText);\n        var flag = nameRecord.indexOf(searchedRecord) >= 0;\n        return sum + flag;\n      }, 0);\n\n      return recordIsForDeleting;\n    };\n\n    var getDeleteButton = function getDeleteButton(searchedRecord) {\n      var $rows = getRows();\n      var $deleteBtnInRow = undefined;\n      $rows().forEach(function (element) {\n        var nameRecord = Ember.$.trim(element.children[2].innerText);\n        if (nameRecord.indexOf(searchedRecord) >= 0) {\n          $deleteBtnInRow = Ember.$('.object-list-view-row-delete-button', element);\n        }\n      });\n\n      return $deleteBtnInRow;\n    };\n\n    var lookAtLocalStore = function lookAtLocalStore(modelName, searchedField, searchedValue) {\n      var currentLoadedData = store.peekAll(modelName);\n      for (var i = 0; i < currentLoadedData.content.length; i++) {\n        if (currentLoadedData.objectAt(i).get(searchedField) == searchedValue) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    // Add records for deleting.\n    Ember.run(function () {\n      var done1 = assert.async();\n      var createdRecordsPrefix = 'folv-delete-with-details-test' + (0, _generateUniqueId.default)();\n      initTestData(createdRecordsPrefix).then(function () {\n        var builder = new _builder.default(store).from(modelName).count();\n        var done = assert.async();\n        store.query(modelName, builder.build()).then(function (result) {\n          visit(path + '?perPage=' + result.meta.count);\n          andThen(function () {\n            assert.equal(currentPath(), path);\n\n            // Check records added.\n            assert.equal(checkRecordsWereAdded(createdRecordsPrefix + \"0\") > 0, true, 1 + ' record added');\n            assert.equal(checkRecordsWereAdded(createdRecordsPrefix + \"1\") > 0, true, 2 + ' record added');\n            assert.equal(checkRecordsWereAdded(createdRecordsPrefix + \"2\") > 0, true, 3 + ' record added');\n\n            var $deleteButton1 = getDeleteButton(createdRecordsPrefix + \"0\");\n            var done2 = assert.async();\n            Ember.run(function () {\n              // An exception can be thrown to console due to observer on detail's count.\n              $deleteButton1.click();\n            });\n            wait().then(function () {\n              assert.equal(checkRecordsWereAdded(createdRecordsPrefix + \"0\"), 0, 1 + ' record deleted');\n              assert.equal(checkRecordsWereAdded(createdRecordsPrefix + \"1\") > 0, true, 2 + ' still on OLV');\n              assert.equal(checkRecordsWereAdded(createdRecordsPrefix + \"2\") > 0, true, 3 + ' still on OLV');\n\n              // Check local storage.\n              assert.notOk(lookAtLocalStore(modelName, 'text', createdRecordsPrefix + \"0\"), \"1 suggestion deleted on store\");\n              assert.ok(lookAtLocalStore(modelName, 'text', createdRecordsPrefix + \"1\"), \"2 suggestion still on store\");\n              assert.ok(lookAtLocalStore(modelName, 'text', createdRecordsPrefix + \"2\"), \"3 suggestion still on store\");\n\n              assert.notOk(lookAtLocalStore(commentModelName, 'text', createdRecordsPrefix + \"0\"), \"1 comment deleted\");\n              assert.notOk(lookAtLocalStore(commentModelName, 'text', createdRecordsPrefix + \"1\"), \"2 comment deleted\");\n              assert.ok(lookAtLocalStore(commentModelName, 'text', createdRecordsPrefix + \"2\"), \"3 comment still on store\");\n              assert.ok(lookAtLocalStore(commentModelName, 'text', createdRecordsPrefix + \"3\"), \"4 comment still on store\");\n\n              assert.notOk(lookAtLocalStore(commentVoteModelName, 'comment.text', createdRecordsPrefix + \"0\"), \"Comment vote deleted\");\n              assert.notOk(lookAtLocalStore(commentVoteModelName, 'comment.text', createdRecordsPrefix + \"1\"), \"Comment vote deleted\");\n\n              var builder = new _builder.default(store, modelName).where(new _predicate.SimplePredicate('text', \"==\", createdRecordsPrefix + \"0\"));\n              var done3 = assert.async();\n              store.query(modelName, builder.build()).then(function (data) {\n                assert.equal(data.get('length'), 0, '1 suggestion deleted on backend');\n\n                var $deleteButton2 = getDeleteButton(createdRecordsPrefix + \"1\");\n                var done4 = assert.async();\n                Ember.run(function () {\n                  // An exception can be thrown to console due to observer on detail's count.\n                  $deleteButton2.click();\n                });\n                wait().then(function () {\n                  assert.equal(checkRecordsWereAdded(createdRecordsPrefix + \"1\"), 0, 2 + ' record deleted');\n                  assert.equal(checkRecordsWereAdded(createdRecordsPrefix + \"2\") > 0, true, 3 + ' still on OLV');\n\n                  // Check local storage.\n                  assert.notOk(lookAtLocalStore(modelName, 'text', createdRecordsPrefix + \"1\"), \"2 suggestion deleted on store\");\n                  assert.ok(lookAtLocalStore(modelName, 'text', createdRecordsPrefix + \"2\"), \"3 suggestion still on store\");\n\n                  assert.notOk(lookAtLocalStore(commentModelName, 'text', createdRecordsPrefix + \"2\"), \"3 comment deleted\");\n                  assert.notOk(lookAtLocalStore(commentModelName, 'text', createdRecordsPrefix + \"3\"), \"4 comment deleted\");\n\n                  var $deleteButton3 = getDeleteButton(createdRecordsPrefix + \"2\");\n                  var done5 = assert.async();\n                  Ember.run(function () {\n                    // An exception can be thrown to console due to observer on detail's count.\n                    $deleteButton3.click();\n                  });\n                  wait().then(function () {\n                    assert.equal(checkRecordsWereAdded(createdRecordsPrefix + \"2\"), 0, 3 + ' record deleted');\n\n                    // Check local storage.\n                    assert.notOk(lookAtLocalStore(modelName, 'text', createdRecordsPrefix + \"2\"), \"3 suggestion deleted on store\");\n\n                    Ember.RSVP.Promise.all([mainSuggestionTypeRecord.destroyRecord(), mainApplicationUserRecord.destroyRecord()]).then(function () {\n                      return done5();\n                    });\n                  });\n                  done4();\n                });\n                done3();\n              });\n              done2();\n            });\n          });\n          done();\n        });\n        done1();\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-dropdown-filter-for-directories-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', '@ember/test-helpers'], function (_executeFolvTest, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFolvTest.executeTest)('check dropdown in the filter for directories', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert, app) {\n      var path, filterButtonDiv, filterButton, olv, thead, index, objectListViewFiltersColumns, objectListViewFiltersRows, dropdownForDirectories, menu, items, controller, filterResult, isFiltered, refreshButton;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(7);\n\n              path = 'components-examples/flexberry-objectlistview/custom-filter';\n              _context.next = 4;\n              return visit(path);\n\n            case 4:\n              assert.equal(currentPath(), path, 'Path is correct');\n\n              filterButtonDiv = document.querySelector('.buttons.filter-active');\n              filterButton = filterButtonDiv.querySelector('button');\n              olv = document.querySelector('.object-list-view');\n              thead = olv.querySelectorAll('th');\n              index = Array.from(thead).findIndex(function (item) {\n                return item.innerText === 'Тип предложения' || item.innerText === 'Type';\n              });\n              _context.next = 12;\n              return click(filterButton);\n\n            case 12:\n              objectListViewFiltersColumns = document.querySelectorAll('.object-list-view-filters');\n              objectListViewFiltersRows = objectListViewFiltersColumns[1].children;\n\n\n              assert.strictEqual(objectListViewFiltersColumns.length === 2, true, 'Filter columns are rendered');\n              assert.strictEqual(objectListViewFiltersRows.length > 0, true, 'Filter rows are rendered');\n\n              dropdownForDirectories = objectListViewFiltersRows[index].querySelector('.flexberry-dropdown');\n              menu = dropdownForDirectories.querySelector('div.menu');\n              items = menu.children;\n\n\n              assert.strictEqual(dropdownForDirectories !== null, true, 'Dropdown in the filter for directories is rendered');\n\n              _context.next = 22;\n              return click(dropdownForDirectories);\n\n            case 22:\n              assert.strictEqual(dropdownForDirectories.classList.contains('active'), true, 'Dropdown menu is rendered');\n\n              controller = app.__container__.lookup('controller:' + currentRouteName());\n              filterResult = controller.model.toArray();\n              isFiltered = true;\n\n\n              filterResult.forEach(function (element) {\n                if (element.type.name !== items[0].innerText) {\n                  isFiltered = false;\n                }\n              });\n\n              assert.strictEqual(isFiltered, false, 'Is not filtered');\n\n              _context.next = 30;\n              return click(items[0]);\n\n            case 30:\n              _context.next = 32;\n              return (0, _testHelpers.settled)();\n\n            case 32:\n              // Wait for the click to process\n\n              refreshButton = document.querySelector('.refresh-button');\n              _context.next = 35;\n              return click(refreshButton);\n\n            case 35:\n              _context.next = 37;\n              return (0, _testHelpers.settled)();\n\n            case 37:\n              // Wait for the refresh to process\n\n              filterResult = controller.model.toArray();\n              isFiltered = true;\n\n              filterResult.forEach(function (element) {\n                if (element.type.name !== items[0].innerText) {\n                  isFiltered = false;\n                }\n              });\n\n              assert.strictEqual(isFiltered, true, 'Is filtered');\n\n            case 41:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-edit-button-in-row-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions'], function (_executeFolvTest, _folvTestsFunctions) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFolvTest.executeTest)('check edit button in row', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert) {\n      var path, editButtonsInRow, openEditFormFunction;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(3);\n              path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n              _context.next = 4;\n              return visit(path);\n\n            case 4:\n\n              // Check page path.\n              assert.equal(currentPath(), path, 'Path is correct');\n\n              editButtonsInRow = document.querySelectorAll('.object-list-view-row-edit-button');\n\n              assert.equal(editButtonsInRow.length, 5, 'All rows have edit buttons');\n\n              // Apply filter function.\n\n              openEditFormFunction = function openEditFormFunction() {\n                var editButtonInRow = editButtonsInRow[0];\n                return click(editButtonInRow);\n              };\n\n              // Open edit form.\n\n\n              _context.next = 10;\n              return (0, _folvTestsFunctions.openEditFormByFunction)(openEditFormFunction);\n\n            case 10:\n              assert.ok(true, 'Edit form opened');\n\n            case 11:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-from-edit-form-with-queryparams-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions'], function (_executeFolvTest, _folvTestsFunctions) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFolvTest.executeTest)('check return from editForm with queryParam', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert, app) {\n      var path, controller, openEditFormFunction, returnToListFormFunction;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(2);\n              path = 'components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-list?perPage=5';\n              _context.next = 4;\n              return visit(path);\n\n            case 4:\n              controller = app.__container__.lookup('controller:' + currentRouteName());\n\n              // Open edit form function.\n\n              openEditFormFunction = function openEditFormFunction() {\n                var editButtonInRow = document.querySelector('.object-list-view-row-edit-button');\n                return click(editButtonInRow);\n              };\n\n              // Return to list form function.\n\n\n              returnToListFormFunction = function returnToListFormFunction() {\n                var returnToListFormButton = document.querySelector('.return-to-list-form');\n                return click(returnToListFormButton);\n              };\n\n              // Open edit form.\n\n\n              _context.next = 9;\n              return (0, _folvTestsFunctions.openEditFormByFunction)(openEditFormFunction);\n\n            case 9:\n              assert.ok(true, 'Edit form opened');\n\n              _context.next = 12;\n              return (0, _folvTestsFunctions.refreshListByFunction)(returnToListFormFunction, controller);\n\n            case 12:\n              assert.equal(controller.model.content.length, 1, 'QueryParams applied successfully');\n\n            case 13:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-getCellComponent-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry/locales/en/translations'], function (_executeFolvTest, _folvTestsFunctions, _translations) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check getCellComponent', function (store, assert, app) {\n    assert.expect(7);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/date-format';\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      // Set 'en' as current locale.\n      (0, _folvTestsFunctions.loadingLocales)('en', app).then(function () {\n\n        var olvContainerClass = '.object-list-view-container';\n\n        var controller = app.__container__.lookup('controller:' + currentRouteName());\n\n        var $folvContainer = Ember.$('.object-list-view-container');\n        var $table = Ember.$('table.object-list-view', $folvContainer);\n\n        var $headRow = Ember.$('thead tr', $table)[0].children;\n\n        var indexDate = function indexDate() {\n          var toReturn = void 0;\n          /* eslint-disable no-unused-vars */\n          Object.keys($headRow).forEach(function (element, index, array) {\n            if (Ember.$.trim($headRow[element].innerText) === 'Date') {\n              toReturn = index;\n              return false;\n            }\n          });\n          /* eslint-enable no-unused-vars */\n          return toReturn;\n        };\n\n        var $dateCell = function $dateCell() {\n          return Ember.$.trim(Ember.$('tbody tr', $table)[0].children[indexDate()].innerText);\n        };\n\n        var myRe = /[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])/;\n\n        // Date format most be YYYY-MM-DD.\n        var myArray = myRe.exec($dateCell());\n\n        var result = myArray ? myArray[0] : null;\n        assert.ok(result, 'date format is \\'YYYY-MM-DD\\' ');\n\n        controller.set('dateFormat', '2');\n        var $toolBar = Ember.$('.ui.secondary.menu')[0];\n        var $toolBarButtons = $toolBar.children;\n        var $refreshButton = $toolBarButtons[0];\n        assert.equal($refreshButton.innerText.trim(), Ember.get(_translations.default, 'components.olv-toolbar.refresh-button-text'), 'button refresh exist');\n\n        var timeout = 500;\n        Ember.run.later(function () {\n          // Apply filter function.\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = Ember.$('.refresh-button')[0];\n            refreshButton.click();\n          };\n\n          // Apply filter.\n          var done = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var $list = Ember.$(olvContainerClass);\n            assert.ok($list, 'list loaded');\n\n            /* eslint-disable no-useless-escape */\n            // Date format most be DD.MM.YYYY, hh:mm:ss.\n            var reDateTime = /(0[1-9]|[12][0-9]|3[01])\\.(0[1-9]|1[012])\\.(19|20)\\d\\d\\, ([0-1]\\d|2[0-3])(:[0-5]\\d){2}$/;\n            var arrayDateTime = reDateTime.exec($dateCell());\n            /* eslint-enable no-useless-escape */\n\n            var resultDateTime = arrayDateTime ? arrayDateTime[0] : null;\n            assert.ok(resultDateTime, 'date format is \\'DD.MM.YYYY, hh:mm:ss\\' ');\n            controller.set('dateFormat', '3');\n\n            var done2 = assert.async();\n            Ember.run.later(function () {\n              var done1 = assert.async();\n              (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n                var $list = Ember.$(olvContainerClass);\n                assert.ok($list, 'list loaded');\n\n                /* eslint-disable no-useless-escape */\n                // Date format most be II (example Sep 4 1986).\n                var reDateString = /[a-zA-Z]{3} ([1-9]|[12][0-9]|3[01])\\, (19|20)\\d\\d/;\n                var arrayDateString = reDateString.exec($dateCell());\n                /* eslint-enable no-useless-escape */\n\n                var resultDateString = arrayDateString ? arrayDateString[0] : null;\n                assert.ok(resultDateString, 'date format is \\'ll\\' ');\n                done1();\n              });\n              done2();\n            }, timeout);\n            done();\n          });\n        }, timeout);\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-goto-editform-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', '@ember/test-helpers'], function (_executeFolvTest, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _executeFolvTest.executeTest)('check goto editform', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(store, assert, app) {\n      var path, controller, editFormRoute, olvElement, helpers, olv, rows, timeout;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n              _context.next = 3;\n              return visit(path);\n\n            case 3:\n              _context.next = 5;\n              return (0, _testHelpers.settled)();\n\n            case 5:\n              controller = app.__container__.lookup('controller:' + currentRouteName());\n              editFormRoute = controller.get('editFormRoute');\n\n              // Проверяем, что editFormRoute существует\n\n              assert.ok(editFormRoute, 'editFormRoute is defined');\n\n              // Проверяем, что элемент для открытия формы редактирования существует\n              olvElement = document.querySelector('[data-test-olv]');\n\n              assert.ok(olvElement, 'Object List View element is present');\n\n              if (!Ember.isBlank(editFormRoute)) {\n                _context.next = 12;\n                break;\n              }\n\n              throw new Error('editFormRoute can\\'t be undefined');\n\n            case 12:\n              helpers = app.testHelpers;\n              olv = helpers.findWithAssert(olvElement);\n              rows = helpers.findWithAssert('.object-list-view-container table.object-list-view tbody tr', olv);\n\n\n              controller.set('rowClickable', true);\n\n              timeout = 1000;\n\n              // Ждем, чтобы убедиться, что все асинхронные операции завершены\n\n              _context.next = 19;\n              return (0, _testHelpers.settled)();\n\n            case 19:\n              _context.next = 21;\n              return click(rows[1].children[1]);\n\n            case 21:\n              _context.next = 23;\n              return (0, _testHelpers.settled)();\n\n            case 23:\n\n              // Проверяем, что мы находимся на нужном маршруте\n              assert.equal(helpers.currentRouteName(), editFormRoute, 'on edit route');\n\n            case 24:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-limit-function-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/query/builder', 'ember-flexberry-data/query/filter-operator'], function (_executeFolvTest, _folvTestsFunctions, _builder, _filterOperator) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check limit function', function (store, assert, app) {\n    assert.expect(6);\n    var path = 'components-examples/flexberry-objectlistview/limit-function-example?perPage=500';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var result1 = void 0;\n    var result2 = void 0;\n    var count = void 0;\n\n    visit(path);\n    andThen(function () {\n      var builder1 = new _builder.default(store).from(modelName).selectByProjection('SuggestionL');\n      store.query(modelName, builder1.build()).then(function (result) {\n        var arr = result.toArray();\n        count = arr.length;\n      }).then(function () {\n        var builder2 = new _builder.default(store).from(modelName).selectByProjection('SuggestionL').where('address', _filterOperator.default.Neq, '');\n        store.query(modelName, builder2.build()).then(function (result) {\n          var arr = result.toArray();\n          result1 = arr.objectAt(0).get('address');\n          result2 = arr.objectAt(1).get('address');\n\n          if (!result1 && !result2) {\n            assert.ok(false, 'Laad empty data');\n          }\n        }).then(function () {\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          controller.set('limitFunction', result1);\n\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = Ember.$('.refresh-button')[0];\n            refreshButton.click();\n          };\n\n          assert.equal(controller.model.content.length, count, 'Folv load with current object count');\n\n          /* eslint-disable no-unused-vars */\n          var done1 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function ($list) {\n            var resultText = Ember.$('.oveflow-text')[0];\n            assert.notEqual(controller.model.content.length, count, 'Folv load with object current count');\n            assert.equal(resultText.innerText, result1, 'Correct result afther apply limitFunction');\n\n            controller.set('limitFunction', result2);\n\n            var done2 = assert.async();\n            (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function ($list) {\n              var resultText = Ember.$('.oveflow-text')[0];\n              assert.notEqual(controller.model.content.length, count, 'Folv load with current object count');\n              assert.equal(resultText.innerText, result2, 'Correct result afther apply limitFunction');\n\n              controller.set('limitFunction', undefined);\n\n              var done3 = assert.async();\n              (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function ($list) {\n                assert.equal(controller.model.content.length, count, 'Folv load with current object count');\n                done3();\n              });\n              done2();\n            });\n            done1();\n          });\n          /* eslint-enable no-unused-vars */\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-locales-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations'], function (_executeFolvTest, _folvTestsFunctions, _translations, _translations2) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check locale change', function (store, assert, app) {\n    assert.expect(11);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      function toolbarBtnTextAssert(currentLocale) {\n        assert.notEqual($toolBarButtons.length, 0, 'buttons in toolbar exists');\n        assert.equal($toolBarButtons[0].innerText.trim(), Ember.get(currentLocale, 'components.olv-toolbar.refresh-button-text'), 'button refresh exist');\n        assert.equal($toolBarButtons[1].innerText.trim(), Ember.get(currentLocale, 'components.olv-toolbar.add-button-text'), 'button create exist');\n        assert.equal($toolBarButtons[2].innerText.trim(), Ember.get(currentLocale, 'components.olv-toolbar.delete-button-text'), 'button delete exist');\n        assert.equal(Ember.$($toolBarButtons[2]).hasClass('disabled'), true, 'button delete is disabled');\n      }\n\n      var $toolBar = Ember.$('.ui.secondary.menu')[0];\n      var $toolBarButtons = $toolBar.children;\n\n      // Set 'ru' as current locale.\n      (0, _folvTestsFunctions.loadingLocales)('ru', app).then(function () {\n        toolbarBtnTextAssert(_translations.default);\n        (0, _folvTestsFunctions.loadingLocales)('en', app).then(function () {\n          toolbarBtnTextAssert(_translations2.default);\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-lock-edit-form-test', ['qunit'], function (_qunit) {\n  'use strict';\n\n  (0, _qunit.skip)('check lock edit form', function (store, assert) {\n    assert.expect(1);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var model = 'ember-flexberry-dummy-suggestion-type';\n      var prop = 'name';\n      checkLockEditForm('[data-test-olv]', null, assert, store, model, prop, path);\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-open-newform-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test'], function (_executeFolvTest) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check goto new form', function (store, assert, app) {\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var newFormRoute = controller.get('editFormRoute') + '.new';\n      goToNewForm('[data-test-olv]', null, assert, newFormRoute);\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-paging-dropdown-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/utils/generate-unique-id'], function (_executeFolvTest, _folvTestsFunctions, _generateUniqueId) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check paging dropdown', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var uuid = (0, _generateUniqueId.default)();\n\n    // Add records for paging.\n    Ember.run(function () {\n\n      (0, _folvTestsFunctions.addRecords)(store, modelName, uuid).then(function (resolvedPromises) {\n        assert.ok(resolvedPromises, 'All records saved.');\n\n        visit(path);\n        andThen(function () {\n          assert.equal(currentPath(), path);\n\n          var $choosedIthem = void 0;\n          var trTableBody = void 0;\n          var activeItem = void 0;\n\n          // Refresh function.\n          var refreshFunction = function refreshFunction() {\n            var $folvPerPageButton = Ember.$('.flexberry-dropdown.compact');\n            var $menu = Ember.$('.menu', $folvPerPageButton);\n            trTableBody = function trTableBody() {\n              return Ember.$(Ember.$('table.object-list-view tbody tr')).length.toString();\n            };\n\n            activeItem = function activeItem() {\n              return Ember.$(Ember.$('.item.active.selected', $menu)).text();\n            };\n\n            // The list should be more than 5 items.\n            assert.equal(activeItem(), trTableBody(), 'equal perPage and visible element count');\n            $folvPerPageButton.click();\n            var timeout = 500;\n            Ember.run.later(function () {\n              var menuIsVisible = $menu.hasClass('visible');\n              assert.strictEqual(menuIsVisible, true, 'menu is visible');\n              $choosedIthem = Ember.$('.item', $menu);\n              $choosedIthem[1].click();\n            }, timeout);\n          };\n\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          var done = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            // The list should be more than 10 items\n            assert.equal(activeItem(), trTableBody(), 'equal perPage and visible element count');\n          }).catch(function (reason) {\n            // Error output.\n            assert.ok(false, reason);\n          }).finally(function () {\n            (0, _folvTestsFunctions.deleteRecords)(store, modelName, uuid, assert);\n            done();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-paging-navigation-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/utils/generate-unique-id'], function (_executeFolvTest, _folvTestsFunctions, _generateUniqueId) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check paging nav', function (store, assert, app) {\n    assert.expect(29);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var uuid = (0, _generateUniqueId.default)();\n    var last = void 0;\n\n    // Add records for paging.\n    Ember.run(function () {\n      (0, _folvTestsFunctions.addRecords)(store, modelName, uuid).then(function (resolvedPromises) {\n        assert.ok(resolvedPromises, 'All records saved.');\n        var done = assert.async();\n        visit(path + '?perPage=1');\n        andThen(function () {\n          assert.equal(currentPath(), path);\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n\n          // check paging.\n          var $basicButtons = Ember.$('.ui.button', '.ui.basic.buttons');\n          last = controller.get('model.meta.count');\n\n          assert.equal(Ember.$($basicButtons[0]).hasClass('disabled'), true, 'button prev is disabled');\n          assert.equal(Ember.$($basicButtons[1]).hasClass('active'), true, 'page 1 is active');\n          assert.equal(Ember.$($basicButtons[1])[0].innerText, 1, '1st page is depicted');\n          assert.equal(Ember.$($basicButtons[2])[0].innerText, 2, '2nd page is depicted');\n          assert.equal(Ember.$($basicButtons[3])[0].innerText, 3, '3rd page is depicted');\n          assert.equal(Ember.$($basicButtons[4])[0].innerText, 4, '4th page is depicted');\n          assert.equal(Ember.$($basicButtons[5])[0].innerText, '...', '... page is depicted');\n          assert.equal(Ember.$($basicButtons[6])[0].innerText, last, 'last page is depicted');\n\n          var done1 = assert.async();\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = $basicButtons[4];\n            refreshButton.click();\n          };\n\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var $basicButtons = Ember.$('.ui.button', '.ui.basic.buttons');\n            assert.equal(Ember.$($basicButtons[1]).hasClass('active'), false, 'page 1 is not active');\n            assert.equal(Ember.$($basicButtons[4]).hasClass('active'), true, 'page 4 is active');\n            assert.equal(Ember.$($basicButtons[1])[0].innerText, 1, '1st page is depicted');\n            assert.equal(Ember.$($basicButtons[2])[0].innerText, '...', '... page is depicted');\n            assert.equal(Ember.$($basicButtons[3])[0].innerText, 3, '3rd page is depicted');\n            assert.equal(Ember.$($basicButtons[4])[0].innerText, 4, '4th page is depicted');\n            assert.equal(Ember.$($basicButtons[5])[0].innerText, 5, '5th page is depicted');\n            assert.equal(Ember.$($basicButtons[6])[0].innerText, '...', '... page is depicted');\n            assert.equal(Ember.$($basicButtons[7])[0].innerText, last, 'last page is depicted');\n\n            var done2 = assert.async();\n            var refreshFunction = function refreshFunction() {\n              var refreshButton = $basicButtons[7];\n              refreshButton.click();\n            };\n\n            (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n              var $basicButtons = Ember.$('.ui.button', '.ui.basic.buttons');\n              assert.equal(Ember.$($basicButtons[4]).hasClass('active'), false, 'page 4 is not active');\n              assert.equal(Ember.$($basicButtons[6]).hasClass('active'), true, 'last page is active');\n              assert.equal(Ember.$($basicButtons[7]).hasClass('disabled'), true, 'button next is disabled');\n              assert.equal(Ember.$($basicButtons[6])[0].innerText, last, 'last page is depicted');\n              assert.equal(Ember.$($basicButtons[1])[0].innerText, 1, '1st page is depicted');\n              assert.equal(Ember.$($basicButtons[2])[0].innerText, '...', '... page is depicted');\n              assert.equal(Ember.$($basicButtons[3])[0].innerText, last - 3, 'n-3 page is depicted');\n              assert.equal(Ember.$($basicButtons[4])[0].innerText, last - 2, 'n-2 page is depicted');\n              assert.equal(Ember.$($basicButtons[5])[0].innerText, last - 1, 'n-1 page is depicted');\n              assert.equal(Ember.$($basicButtons[6])[0].innerText, last, 'last page is depicted');\n            }).catch(function (reason) {\n              throw new Error(reason);\n            }).finally(function () {\n              (0, _folvTestsFunctions.deleteRecords)(store, modelName, uuid, assert);\n              done2();\n              done();\n            });\n          }).catch(function (reason) {\n            throw new Error(reason);\n          }).finally(function () {\n            (0, _folvTestsFunctions.deleteRecords)(store, modelName, uuid, assert);\n            done1();\n          });\n        });\n      });\n    });\n  });\n});","// import { executeTest} from './execute-folv-test';\n// import Builder from 'ember-flexberry-data/query/builder';\n// import $ from 'jquery';\n\n// executeTest('check configurate selected rows', (store, assert, app) => {\n//   assert.expect(8);\n//   let path = 'components-examples/flexberry-objectlistview/selected-rows';\n//   let modelName = 'ember-flexberry-dummy-suggestion-type';\n//   let count;\n\n//   visit(path);\n//   andThen(() => {\n//     assert.equal(currentPath(), path);\n\n//     let builder = new Builder(store).from(modelName);\n//     store.query(modelName, builder.build()).then((result) => {\n//       let arr = result.toArray();\n//       count = arr.length;\n//     }).then(function() {\n//       let $folvContainer = $('.object-list-view-container');\n//       let $checkAllButtton = $('.check-all-button', $folvContainer).first();\n//       let $checkAllAtPageButton = $('.check-all-at-page-button', $folvContainer).first();\n//       let $row = $('table.object-list-view tbody tr', $folvContainer);\n//       let controller = app.__container__.lookup('controller:' + currentRouteName());\n\n//       let $firstCell = $('.flexberry-checkbox', $row[0]);\n//       let $secondCell = $('.flexberry-checkbox', $row[1]);\n\n//       // Сheck first record.\n//       $firstCell.click();\n//       assert.equal(controller.countSelectedRows, 1, 'First row is checked');\n\n//       // Сheck second record.\n//       $secondCell.click();\n//       assert.equal(controller.countSelectedRows, 2, 'Second row is checked');\n\n//       // Uncheck second record.\n//       $firstCell.click();\n//       assert.equal(controller.countSelectedRows, 1, 'First row is checked');\n\n//       // Сheck all record at page.\n//       $checkAllAtPageButton.click();\n//       assert.equal(controller.countSelectedRows, 5, 'First row is checked');\n\n//       // Uncheck all record at page.\n//       $checkAllAtPageButton.click();\n//       assert.equal(controller.countSelectedRows, 0, 'First row is checked');\n\n//       // Сheck fist reccord and all record.\n//       $firstCell.click();\n//       $checkAllButtton.click();\n//       assert.equal(controller.countSelectedRows, count, 'First row is checked');\n\n//       // Uncheck all record.\n//       $checkAllButtton.click();\n//       assert.equal(controller.countSelectedRows, 0, 'First row is checked');\n//     });\n//   });\n// });\ndefine(\"dummy/tests/acceptance/components/flexberry-objectlistview/folv-select-record-test\", [], function () {\n  \"use strict\";\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-by-computable-field-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/query/builder'], function (_executeFolvTest, _folvTestsFunctions, _builder) {\n  'use strict';\n\n  // Need to add sort by multiple columns.\n  (0, _executeFolvTest.executeTest)('check sorting by computable field', function (store, assert, app) {\n    assert.expect(6);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/computable-field';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var minValue = void 0;\n    var maxValue = void 0;\n\n    visit(path);\n    click('.ui.clear-sorting-button');\n    andThen(function () {\n      assert.equal(currentPath(), path);\n      var builder = new _builder.default(store).from(modelName).selectByProjection('SuggestionL').orderBy('commentsCount');\n      store.query(modelName, builder.build()).then(function (result) {\n        var arr = result.toArray();\n        minValue = arr.objectAt(0).get('commentsCount');\n        maxValue = arr.objectAt(arr.length - 1).get('commentsCount');\n      }).then(function () {\n\n        var $olv = Ember.$('.object-list-view ');\n        var $thead = Ember.$('th.dt-head-left', $olv)[9];\n        var controller = app.__container__.lookup('controller:' + currentRouteName());\n\n        // Refresh function.\n        var refreshFunction = function refreshFunction() {\n          $thead.click();\n        };\n\n        var done1 = assert.async();\n        (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n          var $cellText = Ember.$('div.oveflow-text')[9];\n          assert.equal(controller.sort, '+commentsCount', 'sorting symbol added');\n          assert.equal($cellText.innerText, minValue, 'sorting symbol added');\n          var done2 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var $cellText = Ember.$('div.oveflow-text')[9];\n            assert.equal(controller.sort, '-commentsCount', 'sorting symbol added');\n            assert.equal($cellText.innerText, maxValue, 'sorting symbol added');\n            var done3 = assert.async();\n            (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n              assert.equal(controller.sort, null, 'sorting is reset');\n              done3();\n            });\n            done2();\n          });\n          done1();\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-clear-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry/locales/ru/translations'], function (_executeFolvTest, _folvTestsFunctions, _translations) {\n  'use strict';\n\n  // Need to add sort by multiple columns.\n  (0, _executeFolvTest.executeTest)('check sorting clear', function (store, assert, app) {\n    assert.expect(8);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    click('.ui.clear-sorting-button');\n    andThen(function () {\n\n      // Check page path.\n      assert.equal(currentPath(), path);\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var projectionName = Ember.get(controller, 'modelProjection');\n\n      var orderByClause = null;\n\n      var $olv = Ember.$('.object-list-view ');\n      var $thead = Ember.$('th.dt-head-left', $olv)[0];\n\n      var currentSorting = controller.get('computedSorting');\n      if (!Ember.$.isEmptyObject(currentSorting)) {\n        orderByClause = (0, _folvTestsFunctions.getOrderByClause)(currentSorting);\n      }\n\n      Ember.run(function () {\n        var done = assert.async();\n\n        // Check sortihg in the first column. Sorting is not append.\n        (0, _folvTestsFunctions.loadingLocales)('ru', app).then(function () {\n          (0, _folvTestsFunctions.checkSortingList)(store, projectionName, $olv, orderByClause).then(function (isTrue) {\n            assert.ok(isTrue, 'sorting is not applied');\n\n            // Check sortihg icon in the first column. Sorting icon is not added.\n            assert.equal($thead.children[0].children.length, 1, 'no sorting icon in the first column');\n\n            // Refresh function.\n            var refreshFunction = function refreshFunction() {\n              $thead.click();\n            };\n\n            var done1 = assert.async();\n            (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n              var $thead = Ember.$('th.dt-head-left', $olv)[0];\n              var $ord = Ember.$('.object-list-view-order-icon', $thead);\n              var $divOrd = Ember.$('div', $ord);\n\n              assert.equal($divOrd.attr('title'), Ember.get(_translations.default, 'components.object-list-view.sort-ascending'), 'title is Order ascending');\n              assert.equal(Ember.$('.icon', $divOrd).hasClass('ascending'), true, 'sorting symbol added');\n\n              var done2 = assert.async();\n              (0, _folvTestsFunctions.checkSortingList)(store, projectionName, $olv, 'address asc').then(function (isTrue) {\n                assert.ok(isTrue, 'sorting applied');\n\n                var done3 = assert.async();\n                var refreshFunction2 = function refreshFunction2() {\n                  var $clearButton = Ember.$('.clear-sorting-button');\n                  $clearButton.click();\n                };\n\n                (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction2, controller).then(function () {\n                  var $thead = Ember.$('th.dt-head-left', $olv)[0];\n                  var $ord = Ember.$('.object-list-view-order-icon', $thead);\n                  var $divOrd = Ember.$('div', $ord);\n\n                  assert.equal($divOrd.attr('title'), undefined, 'sorting are clear');\n                  assert.equal(Ember.$.trim($divOrd.text()), '', 'sorting symbol delete');\n\n                  done3();\n                });\n                done2();\n              });\n              done1();\n            });\n            done();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-for-each-column-test', ['qunit'], function (_qunit) {\n  'use strict';\n\n  (0, _qunit.skip)('check sorting for each column', function (store, assert) {\n    assert.expect(1);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    andThen(function () {\n\n      // Check page path.\n      assert.equal(currentPath(), path);\n\n      checkOlvSortForEachColumn('[data-test-olv]', null, assert);\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-on-all-columns-test', ['qunit'], function (_qunit) {\n  'use strict';\n\n  (0, _qunit.skip)('check sorting on all column', function (store, assert) {\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    andThen(function () {\n\n      // Check page path.\n      assert.equal(currentPath(), path);\n\n      checkOlvSortOnAllColumns('[data-test-olv]', null, assert);\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry/locales/ru/translations'], function (_executeFolvTest, _folvTestsFunctions, _translations) {\n  'use strict';\n\n  // Need to add sort by multiple columns.\n  (0, _executeFolvTest.executeTest)('check sorting', function (store, assert, app) {\n    assert.expect(14);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    click('.ui.clear-sorting-button');\n    andThen(function () {\n\n      // Check page path.\n      assert.equal(currentPath(), path);\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var projectionName = Ember.get(controller, 'modelProjection');\n\n      var orderByClause = null;\n\n      var $olv = Ember.$('.object-list-view ');\n      var $thead = Ember.$('th.dt-head-left', $olv)[0];\n\n      var currentSorting = controller.get('computedSorting');\n      if (!Ember.$.isEmptyObject(currentSorting)) {\n        orderByClause = (0, _folvTestsFunctions.getOrderByClause)(currentSorting);\n      }\n\n      Ember.run(function () {\n        var done = assert.async();\n\n        // Check sortihg in the first column. Sorting is not append.\n        (0, _folvTestsFunctions.loadingLocales)('ru', app).then(function () {\n          (0, _folvTestsFunctions.checkSortingList)(store, projectionName, $olv, orderByClause).then(function (isTrue) {\n            assert.ok(isTrue, 'sorting is not applied');\n\n            // Check sortihg icon in the first column. Sorting icon is not added.\n            assert.equal($thead.children[0].children.length, 1, 'no sorting icon in the first column');\n            assert.equal(controller.sort, undefined, 'no sorting in URL');\n\n            // Refresh function.\n            var refreshFunction = function refreshFunction() {\n              $thead.click();\n            };\n\n            var done1 = assert.async();\n            (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n              var $thead = Ember.$('th.dt-head-left', $olv)[0];\n              var $ord = Ember.$('.object-list-view-order-icon', $thead);\n              var $divOrd = Ember.$('div', $ord);\n\n              assert.equal($divOrd.attr('title'), Ember.get(_translations.default, 'components.object-list-view.sort-ascending'), 'title is Order ascending');\n              assert.equal(Ember.$('.icon', $divOrd).hasClass(\"ascending\"), true, 'sorting symbol added');\n              assert.equal(controller.sort, '+address', 'up sorting in URL');\n\n              var done2 = assert.async();\n              (0, _folvTestsFunctions.checkSortingList)(store, projectionName, $olv, 'address asc').then(function (isTrue) {\n                assert.ok(isTrue, 'sorting applied');\n                var done3 = assert.async();\n                (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n                  var $thead = Ember.$('th.dt-head-left', $olv)[0];\n                  var $ord = Ember.$('.object-list-view-order-icon', $thead);\n                  var $divOrd = Ember.$('div', $ord);\n\n                  assert.equal($divOrd.attr('title'), Ember.get(_translations.default, 'components.object-list-view.sort-descending'), 'title is Order descending');\n                  assert.equal(Ember.$('.icon', $divOrd).hasClass(\"descending\"), true, 'sorting symbol added');\n                  assert.equal(controller.sort, '-address', 'down sorting in URL');\n\n                  var done4 = assert.async();\n                  (0, _folvTestsFunctions.checkSortingList)(store, projectionName, $olv, 'address desc').then(function (isTrue) {\n                    assert.ok(isTrue, 'sorting applied');\n\n                    var done5 = assert.async();\n                    (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n                      assert.equal(controller.sort, null, 'no sorting in URL');\n                      var done6 = assert.async();\n                      (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n                        assert.equal(controller.sort, '+address', 'up sorting in URL');\n                        done6();\n                      });\n                      done5();\n                    });\n                    done4();\n                  });\n                }).finally(function () {\n                  done3();\n                });\n                done2();\n              });\n              done1();\n            });\n            done();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-with-default-setting-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry/locales/ru/translations'], function (_executeFolvTest, _folvTestsFunctions, _translations) {\n  'use strict';\n\n  // Need to add sort by multiple columns.\n  (0, _executeFolvTest.executeTest)('check sorting with default setting', function (store, assert, app) {\n    assert.expect(9);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n    visit(path);\n    click('.ui.clear-sorting-button');\n    andThen(function () {\n\n      // Check page path.\n      assert.equal(currentPath(), path);\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n\n      var $olv = Ember.$('.object-list-view ');\n\n      Ember.run(function () {\n        (0, _folvTestsFunctions.loadingLocales)('ru', app).then(function () {\n          // Refresh function.\n          var refreshFunction = function refreshFunction() {\n            $thead.click();\n          };\n\n          var $thead = Ember.$('th.dt-head-left', $olv)[0];\n          var $ord = Ember.$('.object-list-view-order-icon', $thead);\n          var $divOrd = Ember.$('div', $ord);\n\n          assert.equal($divOrd.attr('title'), Ember.get(_translations.default, 'components.object-list-view.sort-ascending'), 'title is Order ascending');\n          assert.equal(Ember.$('.icon', $divOrd).hasClass('ascending'), true, 'sorting symbol added');\n          assert.equal(controller.sort, '+name', 'up sorting in URL');\n\n          var done1 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var $thead = Ember.$('th.dt-head-left', $olv)[0];\n            var $ord = Ember.$('.object-list-view-order-icon', $thead);\n            var $divOrd = Ember.$('div', $ord);\n\n            assert.equal($divOrd.attr('title'), Ember.get(_translations.default, 'components.object-list-view.sort-descending'), 'title is Order descending');\n            assert.equal(Ember.$('.icon', $divOrd).hasClass('descending'), true, 'sorting symbol changed');\n            assert.equal(controller.sort, '-name', 'down sorting in URL');\n\n            var done2 = assert.async();\n            (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n              assert.equal(controller.sort, null, 'no sorting in URL');\n              var done3 = assert.async();\n              (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n                assert.equal(controller.sort, '+name', 'up sorting in URL');\n                done3();\n              });\n              done2();\n            });\n          }).finally(function () {\n            done1();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', ['exports', 'ember-flexberry-data/query/filter-operator', 'ember-flexberry-data/query/builder'], function (exports, _filterOperator, _builder) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.loadingList = loadingList;\n  exports.openEditFormByFunction = openEditFormByFunction;\n  exports.refreshListByFunction = refreshListByFunction;\n  exports.checkSortingList = checkSortingList;\n  exports.addRecords = addRecords;\n  exports.deleteRecords = deleteRecords;\n  exports.loadingLocales = loadingLocales;\n  exports.filterObjectListView = filterObjectListView;\n  exports.filterCollumn = filterCollumn;\n  exports.getOrderByClause = getOrderByClause;\n\n\n  // Function for waiting list loading.\n  function loadingList($ctrlForClick, list, records) {\n    return new Ember.RSVP.Promise(function (resolve, reject) {\n      var checkIntervalId = void 0;\n      var checkIntervalSucceed = false;\n      var checkInterval = 500;\n      var timeout = 10000;\n\n      Ember.run(function () {\n        $ctrlForClick.click();\n      });\n\n      Ember.run(function () {\n        checkIntervalId = window.setInterval(function () {\n          var $list = Ember.$(list);\n          var $records = Ember.$(records, $list);\n          if ($records.length === 0) {\n\n            // Data isn't loaded yet.\n            return;\n          }\n\n          // Data is loaded.\n          // Stop interval & resolve promise.\n          window.clearInterval(checkIntervalId);\n          checkIntervalSucceed = true;\n          resolve($list);\n        }, checkInterval);\n      });\n\n      // Set wait timeout.\n      Ember.run(function () {\n        window.setTimeout(function () {\n          if (checkIntervalSucceed) {\n            return;\n          }\n\n          // Time is out.\n          // Stop intervals & reject promise.\n          window.clearInterval(checkIntervalId);\n          reject('ListForm load operation is timed out');\n        }, timeout);\n      });\n    });\n  }\n\n  /**\n    Function for waiting editform loading afther open editform by function at acceptance test.\n    @public\n    @method openEditFormByFunction\n    @param {Function} openEditFormFunction Method options.\n   */\n  function openEditFormByFunction(openEditFormFunction) {\n    return new Ember.RSVP.Promise(function (resolve, reject) {\n      var checkIntervalId = void 0;\n      var checkIntervalSucceed = false;\n      var checkInterval = 500;\n      var timeout = 10000;\n\n      openEditFormFunction();\n\n      Ember.run(function () {\n        checkIntervalId = window.setInterval(function () {\n          if (Ember.$('.ui.button.close-button').length === 0) {\n\n            // Edit form isn't loaded yet.\n            return;\n          }\n\n          // Edit form is loaded, wait to render.\n          // Stop interval & resolve promise.\n          window.setTimeout(function () {\n            window.clearInterval(checkIntervalId);\n            checkIntervalSucceed = true;\n            resolve();\n          });\n        }, checkInterval);\n      });\n\n      // Set wait timeout.\n      Ember.run(function () {\n        window.setTimeout(function () {\n          if (checkIntervalSucceed) {\n            return;\n          }\n\n          // Time is out.\n          // Stop intervals & reject promise.\n          window.clearInterval(checkIntervalId);\n          reject('editForm load operation is timed out');\n        }, timeout);\n      });\n    });\n  }\n\n  /**\n    Function for waiting list loading afther refresh by function at acceptance test.\n    @public\n    @method refreshListByFunction\n    @param {Function} refreshFunction Method options.\n    @param {Object} controlle Current form controller.\n    For use:\n      Form controller must have the following code:\n        ```js\n          loadCount: 0\n        ```\n      Form router must have the following code:\n        ```js\n          onModelLoadingAlways(data) {\n            let loadCount = this.get('controller.loadCount') + 1;\n            this.set('controller.loadCount', loadCount);\n          }\n        ```\n   */\n  function refreshListByFunction(refreshFunction, controller) {\n    return new Ember.RSVP.Promise(function (resolve, reject) {\n      var checkIntervalId = void 0;\n      var checkIntervalSucceed = false;\n      var checkInterval = 500;\n      var renderInterval = 100;\n      var timeout = 10000;\n      var timeiutForLongTimeLoad = checkInterval + 500;\n\n      var $lastLoadCount = controller.loadCount;\n      refreshFunction();\n\n      Ember.run(function () {\n        checkIntervalId = window.setInterval(function () {\n          var loadCount = controller.loadCount;\n          if (loadCount === $lastLoadCount) {\n\n            // Data isn't loaded yet.\n            return;\n          }\n\n          // Data is loaded, wait to render.\n          // Stop interval & resolve promise.\n          window.setTimeout(function () {\n            window.clearInterval(checkIntervalId);\n            checkIntervalSucceed = true;\n            resolve();\n          }, renderInterval);\n        }, checkInterval);\n      });\n\n      // Set wait timeout.\n      Ember.run(function () {\n        window.setTimeout(function () {\n          // Timeout for with a long load, setInterval executed first.\n          window.setTimeout(function () {\n            if (checkIntervalSucceed) {\n              return;\n            }\n\n            // Time is out.\n            // Stop intervals & reject promise.\n            window.clearInterval(checkIntervalId);\n            reject('ListForm load operation is timed out');\n          }, timeiutForLongTimeLoad);\n        }, timeout);\n      });\n    });\n  }\n\n  // Function for check sorting.\n  function checkSortingList(store, projection, $olv, ordr) {\n    return new Ember.RSVP.Promise(function (resolve) {\n      Ember.run(function () {\n        var modelName = projection.modelName;\n        var builder = new _builder.default(store).from(modelName).selectByProjection(projection.projectionName).skip(0);\n        builder = !ordr ? builder : builder.orderBy(ordr);\n        store.query(modelName, builder.build()).then(function (records) {\n          var recordsArr = records.toArray();\n          var $tr = Ember.$('table.object-list-view tbody tr').toArray();\n\n          var isTrue = $tr.reduce(function (sum, current, i) {\n            var expectVal = !recordsArr[i].get('address') ? '' : recordsArr[i].get('address');\n            return sum && Ember.$.trim(current.children[1].innerText) === expectVal;\n          }, true);\n\n          resolve(isTrue);\n        });\n      });\n    });\n  }\n\n  // Function for addition records.\n  function addRecords(store, modelName, uuid) {\n    var promises = Ember.A();\n    var listCount = 55;\n    Ember.run(function () {\n\n      var builder = new _builder.default(store).from(modelName).count();\n      store.query(modelName, builder.build()).then(function (result) {\n        var howAddRec = listCount - result.meta.count;\n        var newRecords = Ember.A();\n        for (var i = 0; i < howAddRec; i++) {\n          newRecords.pushObject(store.createRecord(modelName, modelName == 'ember-flexberry-dummy-application-user' ? { name: uuid, eMail: uuid, phone1: uuid } : { name: uuid }));\n        }\n        newRecords.forEach(function (item) {\n          promises.push(item.save());\n        });\n      });\n    });\n    return Ember.RSVP.Promise.all(promises);\n  }\n\n  // Function for deleting records.\n  function deleteRecords(store, modelName, uuid) {\n    var builder = new _builder.default(store, modelName).where('name', _filterOperator.default.Eq, uuid);\n    return store.query(modelName, builder.build()).then(function (r) {\n      return Ember.RSVP.all(r.map(function (i) {\n        return i.destroyRecord();\n      }));\n    });\n  }\n\n  // Function for waiting loading list.\n  function loadingLocales(locale, app) {\n    return new Ember.RSVP.Promise(function (resolve) {\n      var i18n = app.__container__.lookup('service:i18n');\n\n      Ember.run(function () {\n        i18n.set('locale', locale);\n      });\n\n      var timeout = 500;\n      Ember.run.later(function () {\n        resolve({ msg: 'ok' });\n      }, timeout);\n    });\n  }\n\n  // Function for filter object-list-view by list of operations and values.\n  function filterObjectListView(objectListView, operations, filterValues) {\n    var tableBody = objectListView.children('tbody');\n    var tableRow = Ember.$(tableBody.children('tr'));\n    var tableColumns = Ember.$(tableRow[0]).children('td');\n\n    var promises = Ember.A();\n\n    for (var i = 0; i < tableColumns.length; i++) {\n      if (operations[i]) {\n        promises.push(filterCollumn(objectListView, i, operations[i], filterValues[i]));\n      }\n    }\n\n    return Ember.RSVP.Promise.all(promises);\n  }\n\n  // Function for filter object-list-view at one column by operations and values.\n  function filterCollumn(objectListView, columnNumber, operation, filterValue) {\n    return new Ember.RSVP.Promise(function (resolve) {\n      var tableBody = objectListView.children('tbody');\n      var tableRow = tableBody.children('tr');\n\n      var filterOperation = Ember.$(tableRow[0]).find('.flexberry-dropdown')[columnNumber];\n      var filterValueCell = Ember.$(tableRow[1]).children('td')[columnNumber];\n      // Select an existing item.\n      Ember.$(filterOperation).dropdown('set selected', operation);\n      var dropdown = Ember.$(filterValueCell).find('.flexberry-dropdown');\n      var textbox = Ember.$(filterValueCell).find('.ember-text-field');\n      var fillPromise = void 0;\n      if (textbox.length !== 0) {\n        fillPromise = fillIn(textbox, filterValue);\n      }\n      if (dropdown.length !== 0) {\n        dropdown.dropdown('set selected', filterValue);\n      }\n      if (fillPromise) {\n        fillPromise.then(function () {\n          return resolve();\n        });\n      } else {\n        var timeout = 300;\n        Ember.run.later(function () {\n          resolve();\n        }, timeout);\n      }\n    });\n  }\n\n  function getOrderByClause(currentSorting) {\n    return Object.keys(currentSorting).map(function (key) {\n      return { name: key, sortOrder: currentSorting[key].sortAscending ? 'asc' : 'desc', sortNumber: currentSorting[key].sortNumber };\n    }).sort(function (obj1, obj2) {\n      if (obj1.sortNumber < obj2.sortNumber) {\n        return -1;\n      }\n\n      if (obj1.sortNumber > obj2.sortNumber) {\n        return 1;\n      }\n\n      return 0;\n    }).map(function (obj) {\n      return obj.name + ' ' + obj.sortOrder;\n    }).join(', ');\n  }\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-toolbar-custom-components-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'ember-test-helpers/wait'], function (_executeFolvTest, _wait) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check toolbar custom components', function (store, assert) {\n    assert.expect(8);\n    var path = 'components-examples/flexberry-objectlistview/toolbar-custom-components-example';\n\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path, 'Path is correct');\n\n      var $toolbar = Ember.$('.flexberry-olv-toolbar');\n      var $dropdown = $toolbar.children('.flexberry-dropdown');\n      var $text = $dropdown.children('.text');\n      var $menu = $dropdown.children('div.menu');\n      var $items = $menu.children();\n\n      assert.equal($dropdown.length, 1, 'Dropdown is render');\n      assert.equal($text[0].innerText, 'Enum value №1', 'Dropdown is render');\n\n      andThen(function () {\n        Ember.run(function () {\n          return $dropdown.click();\n        });\n\n        assert.equal($items[0].innerText, 'Enum value №1', 'Dropdown list menu is rendered');\n        assert.equal(Ember.$($items[0]).hasClass('active selected'), true, 'Selected dropdown list item has the css-class \\'active\\'');\n\n        Ember.run(function () {\n          return Ember.$($items[5]).click();\n        });\n\n        (0, _wait.default)().then(function () {\n          $dropdown = $toolbar.children('.flexberry-dropdown');\n          $text = $dropdown.children('.text');\n\n          assert.equal($text[0].innerText, 'Enum value №6', 'Text in the dropdown list has changed');\n\n          Ember.run(function () {\n            return $dropdown.click();\n          });\n\n          (0, _wait.default)().then(function () {\n            $menu = $dropdown.children('div.menu');\n            $items = $menu.children();\n\n            assert.equal($items[5].innerText, 'Enum value №6', 'Dropdown list menu is rendered');\n            assert.equal(Ember.$($items[5]).hasClass('active selected'), true, 'Selected dropdown list item has the css-class \\'active\\'');\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-user-button-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test'], function (_executeFolvTest) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('user button test', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-examples/flexberry-objectlistview/toolbar-custom-buttons-example';\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n\n      // Enable the hi button.\n      click('.toggle-hi-button');\n\n      // First click.\n      click('.test-click-button');\n      andThen(function () {\n        return assert.equal(controller.clickCounter, 2, 'Test button was pressed');\n      });\n\n      // Second click.\n      click('.test-click-button');\n      andThen(function () {\n        return assert.equal(controller.clickCounter, 3, 'Test button was pressed');\n      });\n\n      assert.notOk(controller.get('modelFromClickedRow'));\n      click('.ui.button > .bug.icon:first');\n      andThen(function () {\n        assert.equal(controller.get('modelFromClickedRow.id'), controller.get('model.firstObject.id'));\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-user-settings-on-multi-list-test', ['qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/utils/generate-unique-id'], function (_qunit, _startApp, _folvTestsFunctions, _generateUniqueId) {\n  'use strict';\n\n  var app = void 0;\n  var store = void 0;\n  var route = void 0;\n  var path = 'components-acceptance-tests/flexberry-objectlistview/ember-flexberry-dummy-multi-list';\n  var pathHelp = 'components-examples/flexberry-lookup/user-settings-example';\n  var userService = void 0;\n\n  (0, _qunit.module)('Acceptance | flexberry-objectlistview | per page user settings on multi list', {\n    beforeEach: function beforeEach() {\n\n      // Start application.\n      app = (0, _startApp.default)();\n\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = app.__container__.lookup('controller:application');\n      applicationController.set('isInAcceptanceTestMode', true);\n      store = app.__container__.lookup('service:store');\n      userService = app.__container__.lookup('service:user-settings');\n      Ember.set(userService, 'isUserSettingsServiceEnabled', true);\n    },\n    afterEach: function afterEach() {\n      // Destroy application.\n      Ember.set(userService, 'isUserSettingsServiceEnabled', true);\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('check perPage developerUserSetting in multi list', function (assert) {\n    assert.expect(28);\n    var modelInfos = [{ modelName: 'ember-flexberry-dummy-application-user', uuid: (0, _generateUniqueId.default)(), componentName: 'MultiUserList', perPage: [9, 12, 9, 15] }, { modelName: 'ember-flexberry-dummy-application-user', uuid: (0, _generateUniqueId.default)(), componentName: 'MultiUserList2', perPage: [10, 13, 13, 16] }, { modelName: 'ember-flexberry-dummy-suggestion-type', uuid: (0, _generateUniqueId.default)(), componentName: 'MultiSuggestionList', perPage: [11, 14, 11, 17] }];\n\n    // Add records for paging.\n    Ember.run(function () {\n      initTestData(store, modelInfos).then(function (resolvedPromises) {\n        assert.ok(resolvedPromises, 'All records saved.');\n        var done = assert.async();\n\n        visit(path);\n        andThen(function () {\n          try {\n            assert.equal(currentPath(), path);\n            var currentUrl = currentURL();\n            assert.ok(true, \"Текущий адрес: \" + currentUrl);\n            checkPaging(assert, modelInfos, 0);\n\n            // There is an error on test if try to get this route earlier.\n            route = app.__container__.lookup('route:components-acceptance-tests/flexberry-objectlistview/ember-flexberry-dummy-multi-list');\n            Ember.set(route, 'developerUserSettings', {\n              'MultiUserList': { DEFAULT: { perPage: modelInfos[0].perPage[1] } },\n              'MultiUserList2': { DEFAULT: { perPage: modelInfos[1].perPage[1] } },\n              'MultiSuggestionList': { DEFAULT: { perPage: modelInfos[2].perPage[1] } }\n            });\n\n            var doneHelp = assert.async();\n            visit(pathHelp);\n            andThen(function () {\n              assert.equal(currentPath(), pathHelp);\n              var done1 = assert.async();\n              visit(path);\n              andThen(function () {\n                try {\n                  assert.equal(currentPath(), path);\n                  checkPaging(assert, modelInfos, 0);\n\n                  var done2 = assert.async();\n                  click(\"div.folv-for-changing div.cols-config i.dropdown\");\n                  andThen(function () {\n                    try {\n                      var done3 = assert.async();\n                      click(\"div.folv-for-changing div.cols-config i.remove\");\n                      andThen(function () {\n                        try {\n                          assert.ok(true, 'Произведён сброс настроек пользователя до developerUserSettings.');\n                          checkPaging(assert, modelInfos, 2);\n                          var done4 = assert.async();\n                          checkWithDisabledUserSettings(assert, done4, modelInfos);\n                        } catch (error) {\n                          clearAllData(assert, store, modelInfos);\n                          throw error;\n                        } finally {\n                          done3();\n                        }\n                      });\n                    } catch (error) {\n                      clearAllData(assert, store, modelInfos);\n                      throw error;\n                    } finally {\n                      done2();\n                    }\n                  });\n                } catch (error) {\n                  clearAllData(assert, store, modelInfos);\n                  throw error;\n                } finally {\n                  done1();\n                }\n              });\n              doneHelp();\n            });\n          } catch (error) {\n            clearAllData(assert, store, modelInfos);\n            throw error;\n          } finally {\n            done();\n          }\n        });\n      });\n    });\n  });\n\n  function checkWithDisabledUserSettings(assert, asyncDone, modelInfos) {\n    try {\n      var doneHelp = assert.async();\n      visit(pathHelp);\n      andThen(function () {\n        assert.equal(currentPath(), pathHelp);\n        Ember.set(route, 'developerUserSettings', {\n          'MultiUserList': { DEFAULT: { perPage: modelInfos[0].perPage[3] } },\n          'MultiUserList2': { DEFAULT: { perPage: modelInfos[1].perPage[3] } },\n          'MultiSuggestionList': { DEFAULT: { perPage: modelInfos[2].perPage[3] } }\n        });\n        Ember.set(userService, 'isUserSettingsServiceEnabled', false);\n\n        // Remove current saved not in Database settings.\n        Ember.set(userService, 'currentUserSettings', {});\n\n        var done1 = assert.async();\n        visit(path);\n        andThen(function () {\n          try {\n            assert.equal(currentPath(), path);\n            checkPaging(assert, modelInfos, 3);\n          } catch (error) {\n            throw error;\n          } finally {\n            clearAllData(assert, store, modelInfos);\n            done1();\n          }\n        });\n        doneHelp();\n      });\n    } catch (error) {\n      clearAllData(assert, store, modelInfos);\n      throw error;\n    } finally {\n      asyncDone();\n    }\n  }\n\n  // Function to check current perPage value on page.\n  function checkPaging(assert, modelInfos, expectedIndex) {\n    // check paging.\n    var $perPageElement = Ember.$('div.flexberry-dropdown div.text');\n    assert.equal($perPageElement.length, 3, \"Элементы количества записей на странице найдены.\");\n    assert.equal($perPageElement.eq(0).text(), modelInfos[0].perPage[expectedIndex], modelInfos[0].componentName + ': \\u041A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u044D\\u043B\\u0435\\u043C\\u0435\\u043D\\u0442\\u043E\\u0432 \\u043D\\u0430 \\u0441\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0435 \\u0440\\u0430\\u0432\\u043D\\u043E \\u0437\\u0430\\u0434\\u0430\\u043D\\u043D\\u043E\\u043C\\u0443: ' + modelInfos[0].perPage[expectedIndex] + '.');\n    assert.equal($perPageElement.eq(1).text(), modelInfos[1].perPage[expectedIndex], modelInfos[1].componentName + ': \\u041A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u044D\\u043B\\u0435\\u043C\\u0435\\u043D\\u0442\\u043E\\u0432 \\u043D\\u0430 \\u0441\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0435 \\u0440\\u0430\\u0432\\u043D\\u043E \\u0437\\u0430\\u0434\\u0430\\u043D\\u043D\\u043E\\u043C\\u0443: ' + modelInfos[1].perPage[expectedIndex] + '.');\n    assert.equal($perPageElement.eq(2).text(), modelInfos[2].perPage[expectedIndex], modelInfos[2].componentName + ': \\u041A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u044D\\u043B\\u0435\\u043C\\u0435\\u043D\\u0442\\u043E\\u0432 \\u043D\\u0430 \\u0441\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0435 \\u0440\\u0430\\u0432\\u043D\\u043E \\u0437\\u0430\\u0434\\u0430\\u043D\\u043D\\u043E\\u043C\\u0443: ' + modelInfos[2].perPage[expectedIndex] + '.');\n  }\n\n  function initTestData(store, modelInfos) {\n    return Ember.RSVP.Promise.all([(0, _folvTestsFunctions.addRecords)(store, modelInfos[0].modelName, modelInfos[0].uuid), (0, _folvTestsFunctions.addRecords)(store, modelInfos[1].modelName, modelInfos[1].uuid), (0, _folvTestsFunctions.addRecords)(store, modelInfos[2].modelName, modelInfos[2].uuid)]);\n  }\n\n  function clearAllData(assert, store, modelInfos) {\n    Ember.set(userService, 'isUserSettingsServiceEnabled', true);\n    var done = assert.async();\n    removeTestData(assert, store, modelInfos).then(function () {\n      var done1 = assert.async();\n      deleteAllUserSettings(assert, modelInfos).then(function () {\n        done1();\n      });\n      done();\n    });\n  }\n\n  function removeTestData(assert, store, modelInfos) {\n    return Ember.RSVP.Promise.all([(0, _folvTestsFunctions.deleteRecords)(store, modelInfos[0].modelName, modelInfos[0].uuid, assert), (0, _folvTestsFunctions.deleteRecords)(store, modelInfos[1].modelName, modelInfos[1].uuid, assert), (0, _folvTestsFunctions.deleteRecords)(store, modelInfos[2].modelName, modelInfos[2].uuid, assert)]);\n  }\n\n  function deleteAllUserSettings(assert, modelInfos) {\n    return Ember.RSVP.Promise.all([deleteUserSetting(assert, modelInfos[0].componentName), deleteUserSetting(assert, modelInfos[1].componentName), deleteUserSetting(assert, modelInfos[2].componentName)]);\n  }\n\n  // Function for deleting user settings from database.\n  function deleteUserSetting(assert, componentName) {\n    Ember.run(function () {\n      var done = assert.async();\n      userService._getExistingSettings(componentName, \"DEFAULT\").then(function (foundRecords) {\n        if (foundRecords && foundRecords.length > 0) {\n          assert.equal(foundRecords.length, 1, componentName + \": Найдена настройка пользователя.\");\n          foundRecords[0].deleteRecord();\n          foundRecords[0].save().then(function () {\n            assert.ok(true, componentName + \": Настройки пользователя удалены из БД.\");\n            done();\n          });\n        } else {\n          assert.ok(true, componentName + \": Настройки пользователя не найдены в БД.\");\n          done();\n        }\n      });\n    });\n  }\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-user-settings-test', ['qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/utils/generate-unique-id'], function (_qunit, _startApp, _folvTestsFunctions, _generateUniqueId) {\n  'use strict';\n\n  var app = void 0;\n  var store = void 0;\n  var route = void 0;\n  var path = 'components-acceptance-tests/flexberry-objectlistview/folv-user-settings';\n  var pathHelp = 'components-examples/flexberry-lookup/user-settings-example';\n  var modelName = 'ember-flexberry-dummy-suggestion-type';\n  var userService = void 0;\n\n  /* There is some problem with TransitionAborted on server, so for server there is variant without redirect.*/\n  var skip = true;\n\n  (0, _qunit.module)('Acceptance | flexberry-objectlistview | per page user settings', {\n    beforeEach: function beforeEach() {\n\n      // Start application.\n      app = (0, _startApp.default)();\n\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = app.__container__.lookup('controller:application');\n      applicationController.set('isInAcceptanceTestMode', true);\n      store = app.__container__.lookup('service:store');\n      route = app.__container__.lookup('route:components-acceptance-tests/flexberry-objectlistview/folv-user-settings');\n      userService = app.__container__.lookup('service:user-settings');\n      Ember.set(userService, 'isUserSettingsServiceEnabled', true);\n    },\n    afterEach: function afterEach() {\n      // Destroy application.\n      Ember.set(userService, 'isUserSettingsServiceEnabled', true);\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('check saving of user settings', function (assert) {\n    if (skip) {\n      assert.ok(true);\n      return;\n    }\n\n    assert.expect(21);\n    var uuid = (0, _generateUniqueId.default)();\n\n    route.set('developerUserSettings', { FOLVPagingObjectListView: { DEFAULT: { colsOrder: [{ propName: 'name' }], perPage: 28 } } });\n\n    // Add records for paging.\n    Ember.run(function () {\n      (0, _folvTestsFunctions.addRecords)(store, modelName, uuid).then(function (resolvedPromises) {\n        assert.ok(resolvedPromises, 'All records saved.');\n        var done = assert.async();\n        visit(path);\n        andThen(function () {\n          try {\n            assert.equal(currentPath(), path);\n            var currentUrl = currentURL();\n            assert.ok(currentUrl.contains(\"perPage=28\"), \"Переадресация выполнена успешно (настройка взята из developerUserSettings).\");\n            checkPaging(assert, '28');\n            route.set('developerUserSettings', { FOLVPagingObjectListView: { DEFAULT: { colsOrder: [{ propName: 'name' }], perPage: 17 } } });\n\n            var doneHelp = assert.async();\n            visit(pathHelp);\n            andThen(function () {\n              assert.equal(currentPath(), pathHelp);\n              var done1 = assert.async();\n              visit(path);\n              andThen(function () {\n                try {\n                  assert.equal(currentPath(), path);\n                  var _currentUrl = currentURL();\n                  assert.ok(_currentUrl.contains(\"perPage=28\"), \"Переадресация выполнена успешно (настройка взята из БД).\");\n                  checkPaging(assert, '28');\n\n                  var done2 = assert.async();\n                  click(\"div.cols-config i.dropdown\");\n                  andThen(function () {\n                    try {\n                      var done3 = assert.async();\n                      click(\"div.cols-config i.remove\");\n                      andThen(function () {\n                        try {\n                          assert.ok(true, 'Произведён сброс настроек пользователя до developerUserSettings.');\n                          var _currentUrl2 = currentURL();\n                          assert.ok(_currentUrl2.contains(\"perPage=17\"), \"Переадресация выполнена успешно (настройка взята из developerUserSettings).\");\n                          checkPaging(assert, '17');\n\n                          var done4 = assert.async();\n                          checkWithDisabledUserSettings(assert, done4);\n                        } catch (error) {\n                          (0, _folvTestsFunctions.deleteRecords)(store, modelName, uuid, assert);\n                          deleteUserSetting(assert);\n                          throw error;\n                        } finally {\n                          done3();\n                        }\n                      });\n                    } catch (error) {\n                      (0, _folvTestsFunctions.deleteRecords)(store, modelName, uuid, assert);\n                      deleteUserSetting(assert);\n                      throw error;\n                    } finally {\n                      done2();\n                    }\n                  });\n                } catch (error) {\n                  (0, _folvTestsFunctions.deleteRecords)(store, modelName, uuid, assert);\n                  deleteUserSetting(assert);\n                  throw error;\n                } finally {\n                  done1();\n                }\n              });\n              doneHelp();\n            });\n          } catch (error) {\n            (0, _folvTestsFunctions.deleteRecords)(store, modelName, uuid, assert);\n            deleteUserSetting(assert);\n            throw error;\n          } finally {\n            done();\n          }\n        });\n      });\n    });\n  });\n\n  function checkWithDisabledUserSettings(assert, asyncDone, uuid) {\n    try {\n      var doneHelp = assert.async();\n      visit(pathHelp);\n      andThen(function () {\n        assert.equal(currentPath(), pathHelp);\n        route.set('developerUserSettings', { FOLVPagingObjectListView: { DEFAULT: { colsOrder: [{ propName: 'name' }], perPage: 11 } } });\n        Ember.set(userService, 'isUserSettingsServiceEnabled', false);\n\n        // Remove current saved not in Database settings.\n        Ember.set(userService, 'currentUserSettings', {});\n\n        var done1 = assert.async();\n        visit(path);\n        andThen(function () {\n          try {\n            assert.equal(currentPath(), path);\n            var currentUrl = currentURL();\n            assert.ok(currentUrl.contains(\"perPage=11\"), \"Переадресация выполнена успешно (настройка взята из developerUserSettings).\");\n            checkPaging(assert, '11');\n          } catch (error) {\n            throw error;\n          } finally {\n            Ember.set(userService, 'isUserSettingsServiceEnabled', true);\n            (0, _folvTestsFunctions.deleteRecords)(store, modelName, uuid, assert);\n            deleteUserSetting(assert);\n            done1();\n          }\n        });\n        doneHelp();\n      });\n    } catch (error) {\n      (0, _folvTestsFunctions.deleteRecords)(store, modelName, uuid, assert);\n      deleteUserSetting(assert);\n      throw error;\n    } finally {\n      asyncDone();\n    }\n  }\n\n  // Function to check current perPage value on page.\n  function checkPaging(assert, expectedCount) {\n    // check paging.\n    var $perPageElement = Ember.$('div.flexberry-dropdown div.text');\n    assert.equal($perPageElement.length, 1, \"Элемент количества записей на странице найден.\");\n    assert.equal($perPageElement.text(), expectedCount, '\\u041A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u044D\\u043B\\u0435\\u043C\\u0435\\u043D\\u0442\\u043E\\u0432 \\u043D\\u0430 \\u0441\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0435 \\u0440\\u0430\\u0432\\u043D\\u043E \\u0437\\u0430\\u0434\\u0430\\u043D\\u043D\\u043E\\u043C\\u0443: ' + expectedCount + '.');\n  }\n\n  // Function for deleting user settings from database.\n  function deleteUserSetting(assert) {\n    Ember.run(function () {\n      var done = assert.async();\n      userService._getExistingSettings(\"FOLVPagingObjectListView\", \"DEFAULT\").then(function (foundRecords) {\n        if (foundRecords && foundRecords.length > 0) {\n          assert.equal(foundRecords.length, 1, \"Найдена настройка пользователя.\");\n          foundRecords[0].deleteRecord();\n          foundRecords[0].save().then(function () {\n            assert.ok(true, \"Настройки пользователя удалены из БД.\");\n            done();\n          });\n        } else {\n          assert.ok(true, \"Настройки пользователя не найдены в БД.\");\n          done();\n        }\n      });\n    });\n  }\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-wrapper-projection-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions'], function (_executeFolvTest, _folvTestsFunctions) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check wrapper and projection', function (store, assert, app) {\n    assert.expect(6);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    click('.ui.clear-sorting-button');\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var projectionName = function projectionName() {\n        return Ember.get(controller, 'modelProjection');\n      };\n\n      var $olv = Ember.$('.object-list-view ');\n      var $folvContainer = Ember.$('.object-list-view-container');\n      var $tableInFolvContainer = Ember.$('table', $folvContainer);\n      assert.equal($tableInFolvContainer.length, 1, 'folv table in container exist');\n\n      var $tableBody = Ember.$('tbody', '.object-list-view-container');\n      assert.equal($tableBody.length, 1, 'tbody in table exist');\n\n      var dtHeadTable = Ember.$('.dt-head-left.me.class', 'thead', $tableInFolvContainer);\n\n      var orderByClause = null;\n\n      var currentSorting = controller.get('computedSorting');\n      if (!Ember.$.isEmptyObject(currentSorting)) {\n        orderByClause = (0, _folvTestsFunctions.getOrderByClause)(currentSorting);\n      }\n\n      var done = assert.async();\n      (0, _folvTestsFunctions.checkSortingList)(store, projectionName(), $olv, orderByClause).then(function (isTrue) {\n        assert.ok(isTrue, 'records are displayed correctly');\n        done();\n      }).then(function () {\n        (0, _folvTestsFunctions.loadingLocales)('en', app).then(function () {\n\n          // Check projectionName.\n          var attrs = projectionName().attributes;\n          var flag = true;\n          /* eslint-disable no-unused-vars */\n          Object.keys(attrs).forEach(function (element, index, array) {\n            if (attrs[element].kind !== 'hasMany') {\n              flag = flag && Ember.$.trim(dtHeadTable[index].innerText) === attrs[element].caption;\n            }\n          });\n          /* eslint-enable no-unused-vars */\n          assert.ok(flag, 'projection = columns names');\n\n          var newProjectionName = 'SettingLookupExampleView';\n          controller.set('modelProjection', newProjectionName);\n\n          // get(controller, 'modelProjection') returns only the name of the projection when it replaced.\n          assert.equal(projectionName(), newProjectionName, 'projection name is changed');\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-simpledatetime/flexberry-simpledatetime-manual-enter-test', ['qunit', 'dummy/tests/helpers/start-app'], function (_qunit, _startApp) {\n  'use strict';\n\n  var app = void 0;\n  var path = 'components-acceptance-tests/flexberry-simpledatetime/manual-enter';\n\n  (0, _qunit.module)('Acceptance | flexberry-simpledatetime | manual enter on groupedit', {\n    beforeEach: function beforeEach() {\n\n      // Start application.\n      app = (0, _startApp.default)();\n\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = app.__container__.lookup('controller:application');\n      applicationController.set('isInAcceptanceTestMode', true);\n    },\n    afterEach: function afterEach() {\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('manual enter on groupedit', function (assert) {\n    assert.expect(5);\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path, 'Path is correct.');\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var detailModels = Ember.get(controller, 'model.details');\n      assert.equal(detailModels.length, 2, 'Data contains two details as expected');\n\n      var $datePickers = Ember.$('.custom-flatpickr');\n      assert.equal($datePickers.length, 2, 'There are two rows on groupedit.');\n      fillIn($datePickers[0], '01.01.2022');\n      andThen(function () {\n        assert.equal('2022-01-01', Ember.get(detailModels.objectAt(0), 'date').toISOString().split('T')[0], 'Properly initiated by custom date');\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        var todayForGE = dd + '.' + mm + '.' + yyyy;\n        fillIn($datePickers[1], todayForGE);\n        andThen(function () {\n          assert.equal(today.toISOString().split('T')[0], Ember.get(detailModels.objectAt(1), 'date').toISOString().split('T')[0], 'Properly initiated by current date');\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-toggler/flexberry-toggler-with-inner-toggler-test', ['qunit', 'dummy/tests/helpers/start-app'], function (_qunit, _startApp) {\n  'use strict';\n\n  var app = void 0;\n  var path = 'components-examples/flexberry-toggler/settings-example-inner';\n  var testName = 'flexberry-toggler with inner toggler test';\n\n  (0, _qunit.module)('Acceptance | flexberry-toggler | ' + testName, {\n    beforeEach: function beforeEach() {\n\n      // Start application.\n      app = (0, _startApp.default)();\n\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = app.__container__.lookup('controller:application');\n      applicationController.set('isInAcceptanceTestMode', true);\n\n      var controller = app.__container__.lookup('controller:components-examples/flexberry-toggler/settings-example-inner');\n      controller.set('duration', 0);\n    },\n    afterEach: function afterEach() {\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)(testName, function (assert) {\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path, 'Path is correct');\n\n      var rows = Ember.$('table.flexberry-word-break tbody tr');\n      var caption = Ember.$('.ember-text-field', rows[0]);\n      fillIn(caption, 'Caption text example');\n\n      andThen(function () {\n        var title1 = Ember.$('.title')[0].innerText;\n        assert.equal(caption[0].value, title1, 'Caption is correct');\n\n        var expandedInnerCaption = Ember.$('.ember-text-field', rows[5]);\n        var collapsedInnerCaption = Ember.$('.ember-text-field', rows[6]);\n        fillIn(expandedInnerCaption, 'Expanded inner caption text example');\n        fillIn(collapsedInnerCaption, 'Collapsed inner caption text example');\n\n        var expandedCaption = Ember.$('.ember-text-field', rows[1]);\n        var collapsedCaption = Ember.$('.ember-text-field', rows[2]);\n        fillIn(expandedCaption, 'Expanded caption text example');\n        fillIn(collapsedCaption, 'Collapsed caption text example');\n\n        andThen(function () {\n          var toggler = Ember.$('.flexberry-toggler .title');\n          assert.equal(collapsedInnerCaption[0].value, toggler[1].innerText, 'Collapsed inner caption is correct');\n\n          click(toggler[1]);\n          andThen(function () {\n            assert.equal(expandedInnerCaption[0].value, toggler[1].innerText, 'Expanded inner caption is correct');\n            assert.equal(expandedCaption[0].value, toggler[0].innerText, 'Expanded caption is correct');\n            var expandedCheckbox = rows[3].children[0].children[0];\n            assert.equal(expandedCheckbox.checked, true, 'expanded=true');\n\n            click(toggler[0]);\n            andThen(function () {\n              assert.equal(collapsedCaption[0].value, toggler[0].innerText, 'Collapsed caption is correct');\n              assert.equal(expandedCheckbox.checked, false, 'expanded=false');\n              click(expandedCheckbox);\n              andThen(function () {\n                assert.equal(expandedCheckbox.checked, true, 'expanded=true');\n                var expandedInnerCheckbox = rows[7].children[0].children[0];\n                assert.equal(expandedInnerCheckbox.checked, true, 'inner expanded=true');\n                click(expandedInnerCheckbox);\n                andThen(function () {\n                  assert.equal(expandedInnerCheckbox.checked, false, 'inner expanded=false');\n                  assert.equal(expandedCheckbox.checked, true, 'expanded=true');\n                  var icon = Ember.$('.flexberry-toggler .title .icon')[0];\n                  assert.equal(icon.className, 'dropdown icon', 'dropdown icon');\n                  var collapsedCaption = Ember.$('.ember-text-field', rows[8]);\n                  fillIn(collapsedCaption, 'paw icon');\n                  andThen(function () {\n                    assert.equal(icon.className, 'paw icon', 'paw icon');\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/highload-edit-form-menu-test', ['qunit', 'dummy/tests/helpers/start-app', 'ember-test-helpers/wait'], function (_qunit, _startApp, _wait) {\n  'use strict';\n\n  var app = void 0;\n\n  (0, _qunit.module)('Acceptance | high-edit-form-menu', {\n    beforeEach: function beforeEach() {\n      app = (0, _startApp.default)();\n    },\n    afterEach: function afterEach() {\n      // Destroy application.\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('it properly renders', function (assert) {\n    assert.expect(7);\n    var done = assert.async();\n\n    var path = 'components-examples/highload-edit-form-menu/index';\n    visit(path);\n    andThen(function () {\n      assert.equal(currentURL(), path);\n      Ember.$('.object-list-view').find('tr')[1].children[1].click();\n\n      andThen(function () {\n        (0, _wait.default)().then(function () {\n          assert.equal(Ember.$('.gruppaPolejVvoda').length, 4, 'all tabs are here');\n          assert.equal(Ember.$('.gruppaPolejVvoda.active').length, 1, 'only one tab is active');\n          assert.equal(Ember.$('.gruppaPolejVvoda')[0].classList.contains('active'), true, 'first tab is active');\n\n          Ember.run(function () {\n            Ember.$('.tabsNavigation')[0].click();\n          });\n\n          (0, _wait.default)().then(function () {\n            assert.equal(Ember.$('.gruppaPolejVvoda')[1].classList.contains('active'), true, 'next tab is active');\n\n            Ember.run(function () {\n              Ember.$('.tabsNavigation')[1].click();\n            });\n\n            (0, _wait.default)().then(function () {\n              assert.equal(Ember.$('.gruppaPolejVvoda')[0].classList.contains('active'), true, 'previous tab is active');\n\n              Ember.run(function () {\n                Ember.$('.showAllFormsButton').click();\n              });\n\n              (0, _wait.default)().then(function () {\n                assert.equal(Ember.$('.gruppaPolejVvoda.active').length, 4, 'all tabs are active');\n                done();\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/readonly-test/edit-form-readonly-test', ['qunit', 'dummy/tests/helpers/start-app'], function (_qunit, _startApp) {\n  'use strict';\n\n  var app = void 0;\n  var path = 'components-acceptance-tests/edit-form-readonly';\n\n  (0, _qunit.module)('Acceptance | edit-form | readonly-mode ', {\n    beforeEach: function beforeEach() {\n\n      // Start application.\n      app = (0, _startApp.default)();\n\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = app.__container__.lookup('controller:application');\n      applicationController.set('isInAcceptanceTestMode', true);\n    },\n    afterEach: function afterEach() {\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('controller is render properly', function (assert) {\n    assert.expect(3);\n\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      assert.equal(currentPath(), path, 'Path for edit-form-readonly-test is correctly');\n      assert.strictEqual(controller.get('readonly'), true, 'Controller\\'s flag \\'readonly\\' is enabled');\n\n      controller.set('readonly', false);\n      assert.strictEqual(controller.get('readonly'), false, 'Controller\\'s flag \\'readonly\\' is disabled');\n    });\n  });\n\n  (0, _qunit.test)('flexbery-checkbox on readonly editform', function (assert) {\n    assert.expect(4);\n\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $checkbox = find('[data-test-checkbox]');\n      assert.strictEqual($checkbox.hasClass('read-only'), true, 'Checkbox is readonly');\n\n      var $checkboxFge = find('[data-test-groupedit] .flexberry-checkbox');\n      assert.strictEqual($checkboxFge.hasClass('read-only'), true, 'Groupedit\\'s checkbox is readonly');\n\n      controller.set('readonly', false);\n      Ember.run.scheduleOnce('afterRender', function () {\n        assert.strictEqual($checkbox.hasClass('read-only'), false, 'Checkbox is not readonly');\n        assert.strictEqual($checkboxFge.hasClass('read-only'), false, 'Groupedit\\'s checkbox is not readonly');\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexbery-textbox on readonly editform', function (assert) {\n    assert.expect(4);\n\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $textboxInput = find('[data-test-textbox] input');\n      assert.strictEqual(Ember.$.trim($textboxInput.attr('readonly')), 'readonly', 'Textbox is readonly');\n\n      var $textboxFgeInput = find('[data-test-groupedit] .flexberry-textbox input');\n      assert.strictEqual(Ember.$.trim($textboxFgeInput.attr('readonly')), 'readonly', 'Groupedit\\'s textbox is readonly');\n\n      controller.set('readonly', false);\n      Ember.run.scheduleOnce('afterRender', function () {\n        assert.strictEqual($textboxInput.is('readonly'), false, 'Textbox is not readonly');\n        assert.strictEqual($textboxFgeInput.is('readonly'), false, 'Groupedit\\'s textbox is not readonly');\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-textarea on readonly editform', function (assert) {\n    assert.expect(4);\n\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $textareaInput = find('[data-test-textarea] textarea');\n      assert.strictEqual(Ember.$.trim($textareaInput.attr('readonly')), 'readonly', 'Textarea is readonly');\n\n      var $textareaInputFGE = find('[data-test-groupedit] .flexberry-textarea textarea');\n      assert.strictEqual(Ember.$.trim($textareaInputFGE.attr('readonly')), 'readonly', 'Groupedit\\'s textarea is readonly');\n\n      controller.set('readonly', false);\n      Ember.run.scheduleOnce('afterRender', function () {\n        assert.strictEqual(Ember.$.trim($textareaInput.attr('readonly')), '', 'Textarea don\\'t readonly');\n        assert.strictEqual(Ember.$.trim($textareaInputFGE.attr('readonly')), '', 'Groupedit\\'s textarea don\\'t readonly');\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-simpledatetime on readonly editform', function (assert) {\n    assert.expect(4);\n\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $simpledatetime = find('[data-test-simpledatetime] .custom-flatpickr');\n\n      assert.strictEqual(Ember.$.trim($simpledatetime.attr('readonly')), 'readonly', 'Time is readonly');\n\n      var $simpledatetimeFge = Ember.$('.in-groupedit .flexberry-simpledatetime .custom-flatpickr');\n      assert.strictEqual(Ember.$.trim($simpledatetimeFge.attr('readonly')), 'readonly', 'Groupedit\\'s datepicker is readonly');\n\n      controller.set('readonly', false);\n      Ember.run.scheduleOnce('afterRender', function () {\n        assert.strictEqual(Ember.$.trim($simpledatetime.attr('readonly')), '', 'Time is not readonly');\n        assert.strictEqual(Ember.$.trim($simpledatetimeFge.attr('readonly')), '', 'Groupedit\\'s datepicker is not readonly');\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-dropdown on readonly editform', function (assert) {\n    assert.expect(4);\n\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $dropdown = find('.not-in-groupedit .flexberry-dropdown');\n      assert.strictEqual($dropdown.hasClass('disabled'), true, 'Dropdown is readonly');\n\n      var $dropdownFge = find('[data-test-groupedit] .flexberry-dropdown');\n      assert.strictEqual($dropdownFge.hasClass('disabled'), true, 'Groupedit\\'s dropdown is readonly');\n\n      controller.set('readonly', false);\n      Ember.run.scheduleOnce('afterRender', function () {\n        assert.strictEqual($dropdown.hasClass('disabled'), false, 'Dropdown is not readonly');\n        assert.strictEqual($dropdownFge.hasClass('disabled'), false, 'Groupedit\\'s dropdown is not readonly');\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-file on readonly edit form', function (assert) {\n    assert.expect(14);\n\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $file = find('[data-test-file] input.flexberry-file-filename-input');\n      assert.strictEqual(Ember.$.trim($file.attr('readonly')), 'readonly', 'Flexberry-file is readonly');\n      var $downloadButton = find('[data-test-file] label.flexberry-file-download-button');\n      assert.strictEqual($downloadButton.hasClass('disabled'), true, 'Flexberry-file\\'s button \\'Download\\' is readonly');\n\n      var $fileFge = find('[data-test-groupedit] input.flexberry-file-filename-input');\n      assert.strictEqual(Ember.$.trim($fileFge.attr('readonly')), 'readonly', 'Groupedit\\'s flexberry-file is readonly');\n      var $downloadButtonFge = find('[data-test-groupedit] label.flexberry-file-download-button');\n      assert.strictEqual($downloadButtonFge.hasClass('disabled'), true, 'Groupedit\\'s flexberry-file\\'s button \\'Download\\' is readonly');\n\n      controller.set('readonly', false);\n      Ember.run.scheduleOnce('afterRender', function () {\n        assert.strictEqual(Ember.$(undefined).is('readonly'), false, 'Flexberry-file don\\'t readonly');\n        var $addButton = find('[data-test-file] label.flexberry-file-add-button');\n        assert.strictEqual($addButton.hasClass('disabled'), false, 'Flexberry-file\\'s button \\'Add\\' don\\'t readonly');\n        var $removeButton = find('[data-test-file] label.flexberry-file-remove-button');\n        assert.strictEqual($removeButton.hasClass('disabled'), true, 'Flexberry-file has button \\'Remove\\'');\n        var $uploadButton = find('[data-test-file] label.flexberry-file-upload-button');\n        assert.strictEqual($uploadButton.hasClass('disabled'), true, 'Flexberry-file has button \\'Upload\\'');\n        assert.strictEqual($downloadButton.hasClass('disabled'), true, 'Flexberry-file has button \\'Download\\'');\n\n        assert.strictEqual(Ember.$(undefined).is('readonly'), false, 'Groupedit\\'s flexberry-file don\\'t readonly');\n        var $addButtonFge = find('[data-test-groupedit] label.flexberry-file-add-button');\n        assert.strictEqual($addButtonFge.hasClass('disabled'), false, 'Groupedit\\'s flexberry-file\\'s button \\'Add\\' don\\'t readonly');\n        var $removeButtonFge = find('[data-test-groupedit] label.flexberry-file-remove-button');\n        assert.strictEqual($removeButtonFge.hasClass('disabled'), true, 'Groupedit\\'s flexberry-file has button \\'Remove\\'');\n        var $uploadButtonFge = find('[data-test-groupedit] label.flexberry-file-upload-button');\n        assert.strictEqual($uploadButtonFge.hasClass('disabled'), true, 'Groupedit\\'s flexberry-file has button \\'Upload\\'');\n        assert.strictEqual($downloadButtonFge.hasClass('disabled'), true, 'Groupedit\\'s flexberry-file has button \\'Download\\'');\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-lookup on readonly edit form', function (assert) {\n    assert.expect(12);\n\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $lookup = find('[data-test-lookup] input.lookup-field');\n      assert.strictEqual(Ember.$.trim($lookup.attr('readonly')), 'readonly', 'Lookup is readonly');\n      var $chooseButton = find('[data-test-lookup] button.ui-change');\n      assert.strictEqual($chooseButton.hasClass('disabled'), true, 'Flexberry-lookup\\'s button \\'Choose\\' is readonly');\n      var $removeButton = find('[data-test-lookup] button.ui-clear');\n      assert.strictEqual($removeButton.hasClass('disabled'), true, 'Flexberry-lookup\\'s button \\'Remove\\' is readonly');\n\n      var $lookupFge = find('[data-test-groupedit] input.lookup-field');\n      assert.strictEqual(Ember.$.trim($lookupFge.attr('readonly')), 'readonly', 'Groupedit\\'s lookup is readonly');\n      var $chooseButtonFge = find('[data-test-groupedit] button.ui-change');\n      assert.strictEqual($chooseButtonFge.hasClass('disabled'), true, 'Groupedit\\'s flexberry-lookup\\'s button \\'Choose\\' is readonly');\n      var $removeButtonFge = find('[data-test-groupedit] button.ui-clear');\n      assert.strictEqual($removeButtonFge.hasClass('disabled'), true, 'Groupedit\\'s flexberry-lookup\\'s button \\'Remove\\' is readonly');\n\n      controller.set('readonly', false);\n      Ember.run.scheduleOnce('afterRender', function () {\n        $removeButton = find('[data-test-lookup] button.ui-clear');\n        $removeButtonFge = find('[data-test-groupedit] button.ui-clear');\n        assert.strictEqual(Ember.$(undefined).is('readonly'), false, 'Lookup don\\'t readonly');\n        assert.strictEqual($chooseButton.hasClass('disabled'), false, 'Flexberry-lookup\\'s button \\'Choose\\' don\\'t readonly');\n        assert.strictEqual($removeButton.hasClass('disabled'), false, 'Flexberry-lookup\\'s button \\'Remove\\' don\\'t readonly');\n\n        assert.strictEqual($lookupFge.is('readonly'), false, 'Groupedit\\'s lookup is not readonly');\n        assert.strictEqual($chooseButtonFge.hasClass('disabled'), false, 'Groupedit\\'s flexberry-lookup\\'s button \\'Choose\\' is not readonly');\n        assert.strictEqual($removeButtonFge.hasClass('disabled'), false, 'Groupedit\\'s flexberry-lookup\\'s button \\'Remove\\' is not readonly');\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-lookup as dropdown on readonly edit form', function (assert) {\n    assert.expect(2);\n\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $dropdown = find('[data-test-lookup-d] .flexberry-dropdown');\n      assert.strictEqual($dropdown.hasClass('disabled'), true, 'Lookup as dropdown is readonly');\n\n      controller.set('readonly', false);\n      Ember.run.scheduleOnce('afterRender', function () {\n        assert.strictEqual($dropdown.hasClass('disabled'), false, 'Lookup as dropdown is not readonly');\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-groupedit on readonly edit form', function (assert) {\n    assert.expect(2);\n\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $groupedit = find('[data-test-groupedit] table');\n      assert.strictEqual($groupedit.hasClass('readonly'), true, 'Groupedit is readonly');\n\n      controller.set('readonly', false);\n      Ember.run.scheduleOnce('afterRender', function () {\n        assert.strictEqual($groupedit.hasClass('readonly'), false, 'Groupedit is not readonly');\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-groupedit\\'s button on readonly edit form', function (assert) {\n    assert.expect(12);\n\n    visit(path);\n    andThen(function () {\n      var $addButton = find('[data-test-groupedit] .ui-add');\n      var $removeButton = find('[data-test-groupedit] .ui-delete');\n      var $checkbox = find('[data-test-groupedit] .flexberry-checkbox');\n      var $removeButtonRow = find('[data-test-groupedit] .object-list-view-row-delete-button');\n      var $itemEditMenu = find('[data-test-groupedit] .edit-menu');\n      var $itemDeconsteMenu = find('[data-test-groupedit] .delete-menu');\n\n      assert.strictEqual(Ember.$.trim($addButton.attr('disabled')), 'disabled', 'Flexberry-groupedit\\'s button \\'Add\\' is readonly');\n      assert.strictEqual(Ember.$.trim($removeButton.attr('disabled')), 'disabled', 'Flexberry-groupedit\\'s button \\'Remove\\' is readonly');\n      assert.strictEqual($checkbox.hasClass('read-only'), true, 'Flexberry-groupedit\\'s checkbox helper is readonly');\n      assert.strictEqual($removeButtonRow.hasClass('disabled'), true, 'Flexberry-groupedit\\'s button \\'Remove in row\\' is readonly');\n      assert.strictEqual($itemEditMenu.hasClass('disabled'), true, 'Flexberry-groupedit\\'s item \\'Edit\\' in left menu is readonly');\n      assert.strictEqual($itemDeconsteMenu.hasClass('disabled'), true, 'Flexberry-groupedit\\'s item \\'Deconste\\' in left menu is readonly');\n\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      controller.set('readonly', false);\n      Ember.run.scheduleOnce('afterRender', function () {\n        $checkbox = find('[data-test-groupedit] .flexberry-checkbox');\n        $itemEditMenu = find('[data-test-groupedit] .edit-menu');\n        $itemDeconsteMenu = find('[data-test-groupedit] .delete-menu');\n        $removeButtonRow = find('[data-test-groupedit] .object-list-view-row-delete-button');\n\n        assert.strictEqual(Ember.$(undefined).is('disabled'), false, 'Flexberry-groupedit\\'s button \\'Add\\' don\\'t readonly');\n        assert.strictEqual(Ember.$(undefined).is('disabled'), false, 'Flexberry-groupedit\\'s button \\'Remove\\' don\\'t readonly');\n        assert.strictEqual($checkbox.hasClass('read-only'), false, 'Flexberry-groupedit\\'s checkbox helper don\\'t readonly');\n        assert.strictEqual($removeButtonRow.hasClass('disabled'), false, 'Flexberry-groupedit\\'s button \\'Remove in row\\' don\\'t readonly');\n        assert.strictEqual($itemEditMenu.hasClass('disabled'), false, 'Flexberry-groupedit\\'s item \\'Edit\\' in left menu don\\'t readonly');\n        assert.strictEqual($itemDeconsteMenu.hasClass('disabled'), false, 'Flexberry-groupedit\\'s item \\'Deconste\\' in left menu don\\'t readonly');\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/edit-form-validation-test/execute-validation-test', ['exports', 'qunit', 'dummy/tests/helpers/start-app'], function (exports, _qunit, _startApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.executeTest = executeTest;\n  function executeTest(testName, callback) {\n    var app = void 0;\n    var store = void 0;\n    var userSettingsService = void 0;\n\n    (0, _qunit.module)('Acceptance | flexberry-validation | ' + testName, {\n      beforeEach: function beforeEach() {\n\n        // Start application.\n        app = (0, _startApp.default)();\n\n        // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n        var applicationController = app.__container__.lookup('controller:application');\n        applicationController.set('isInAcceptanceTestMode', true);\n        store = app.__container__.lookup('service:store');\n\n        userSettingsService = app.__container__.lookup('service:user-settings');\n        var getCurrentPerPage = function getCurrentPerPage() {\n          return 5;\n        };\n\n        userSettingsService.set('getCurrentPerPage', getCurrentPerPage);\n      },\n      afterEach: function afterEach() {\n        Ember.run(app, 'destroy');\n        var daterangepicker = Ember.$('.daterangepicker');\n        daterangepicker.remove();\n      }\n    });\n\n    (0, _qunit.test)(testName, function (assert) {\n      return callback(store, assert, app);\n    });\n  }\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-base-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test'], function (_executeValidationTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check default value', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    // Open validation page.\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $validationLablesContainer = Ember.$('.ember-view.ui.basic.label');\n      var $validationSixteenWide = Ember.$('.list');\n      var $validationLi = $validationSixteenWide.children('li');\n\n      // Сounting the number of validationmessage.\n      assert.equal($validationLablesContainer.length, 11, 'All components have default value');\n      assert.equal($validationLi.length, 17, 'All components have default value in sixteenWide');\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-checkbox-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test'], function (_executeValidationTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check operation checkbox', function (store, assert, app) {\n    assert.expect(4);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    // Open validation page.\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $validationField = Ember.$(Ember.$('.field')[1]);\n      var $validationFlexberryCheckbox = $validationField.children('.flexberry-checkbox');\n      var $validationFlexberryErrorLable = $validationField.children('.label');\n\n      // Check default validationmessage text.\n      assert.equal($validationFlexberryErrorLable.text().trim(), 'Flag is required,Flag must be \\'true\\' only', 'Checkbox\\'s label have default value by default');\n\n      Ember.run(function () {\n        $validationFlexberryCheckbox.click();\n      });\n\n      // Check validationmessage text afther first click.\n      assert.equal($validationFlexberryErrorLable.text().trim(), '', 'Checkbox\\'s label havn\\'t value after first click');\n\n      Ember.run(function () {\n        $validationFlexberryCheckbox.click();\n      });\n\n      // Check validationmessage text = 'Flag must be 'true' only' afther first click.\n      assert.equal($validationFlexberryErrorLable.text().trim(), 'Flag must be \\'true\\' only', 'Checkbox\\'s label have value after second click');\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-detail-delete-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test'], function (_executeValidationTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check detail delete', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    // Open validation page.\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      // Сounting the number of validationmessage.\n      var $validationLablesContainer = Ember.$('.ember-view.ui.basic.label');\n      assert.equal($validationLablesContainer.length, 11, 'All components have default value');\n\n      // Delete detail.\n      click('.groupedit-new-row .flexberry-checkbox:first');\n      click('.groupedit-toolbar .ui-delete');\n\n      andThen(function () {\n        // Сounting the number of validationmessage = 8 afther detail delete.\n        $validationLablesContainer = Ember.$('.ember-view.ui.basic.label');\n        assert.equal($validationLablesContainer.length, 8, 'Detail was deleted without errors');\n      });\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-detail-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test'], function (_executeValidationTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check detail\\'s components', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    // Open validation page.\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      // Сounting the number of validationmessage.\n      var $validationLablesContainer = Ember.$('.ember-view.ui.basic.label');\n      assert.equal($validationLablesContainer.length, 11, 'All components have default value');\n\n      var $validationFlexberryCheckboxs = Ember.$('.flexberry-checkbox');\n      var $validationFlexberryOLVCheckbox = Ember.$($validationFlexberryCheckboxs[2]);\n\n      var $validationFlexberryTextboxs = Ember.$('.flexberry-textbox');\n      var $validationFlexberryOLVTextbox1 = Ember.$($validationFlexberryTextboxs[2]);\n      var $validationFlexberryOLVTextbox2 = Ember.$($validationFlexberryTextboxs[3]);\n\n      // Selct textbox inner.\n      var $validationFlexberryTextboxInner1 = $validationFlexberryOLVTextbox1.children('input');\n      var $validationFlexberryTextboxInner2 = $validationFlexberryOLVTextbox2.children('input');\n\n      // Select deteil's validationmessages.\n      var $validationField1 = Ember.$($validationLablesContainer[8]);\n      var $validationField2 = Ember.$($validationLablesContainer[9]);\n      var $validationField3 = Ember.$($validationLablesContainer[10]);\n\n      // Data insertion.\n      Ember.run(function () {\n        $validationFlexberryOLVCheckbox.click();\n        $validationFlexberryTextboxInner1[0].value = '1';\n        $validationFlexberryTextboxInner1.change();\n        $validationFlexberryTextboxInner2[0].value = '12345';\n        $validationFlexberryTextboxInner2.change();\n      });\n\n      // Validationmessage must be empty.\n      assert.ok($validationField1.text().trim() === '' && $validationField2.text().trim() === '' && $validationField3.text().trim() === '', 'All components have default value');\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-dropdown-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test'], function (_executeValidationTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check operation dropdown', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    // Open validation page.\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $validationField = Ember.$(Ember.$('.field')[6]);\n      var $validationFlexberryDropdown = $validationField.children('.flexberry-dropdown');\n      var $validationFlexberryErrorLable = $validationField.children('.label');\n\n      // Check default validationmessage text.\n      assert.equal($validationFlexberryErrorLable.text().trim(), 'Enumeration is required', 'Dropdown have default value');\n\n      Ember.run(function () {\n\n        // Open dropdown.\n        $validationFlexberryDropdown.click();\n        var $validationFlexberryDropdownMenu = $validationFlexberryDropdown.children('.menu');\n        var $validationFlexberryDropdownItems = $validationFlexberryDropdownMenu.children('.item');\n        var $validationFlexberryDropdownItem = Ember.$($validationFlexberryDropdownItems[0]);\n\n        // Select item\n        $validationFlexberryDropdownItem.click();\n      });\n\n      Ember.run.next(function () {\n        // Validationmessage must be empty.\n        assert.equal($validationFlexberryErrorLable.text().trim(), '', 'Dropdown have value');\n      });\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-file-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test'], function (_executeValidationTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check operation file', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $validationFieldFile = Ember.$(Ember.$('.field')[7]);\n      var $validationFlexberryErrorLable = $validationFieldFile.children('.label');\n\n      // Check default validationmessage text.\n      assert.equal($validationFlexberryErrorLable.text().trim(), 'File is required', 'Flexberry file have default value');\n\n      var $validationFlexberryLookupButton = Ember.$('.ui.button.ui-change')[0];\n\n      // Click lookup button.\n      Ember.run(function () {\n        $validationFlexberryLookupButton.click();\n      });\n\n      var done = assert.async();\n\n      // Сounting the number of validationmessage.\n      setTimeout(function () {\n        assert.equal($validationFlexberryErrorLable.text().trim(), '', 'Flexberry file have value');\n        done();\n      }, 2000);\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-lookup-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test'], function (_executeValidationTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check operation lookup', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    // Open validation page.\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $validationField = Ember.$(Ember.$('.field')[8]);\n      var $validationFlexberryErrorLable = $validationField.children('.label');\n\n      // Check default validationmessage text.\n      assert.equal($validationFlexberryErrorLable.text().trim(), 'Master is required', 'Lookup have default value');\n\n      var $validationFlexberryLookupButton = Ember.$('.ui.button.ui-change')[0];\n\n      // Click lookup button.\n      Ember.run(function () {\n        $validationFlexberryLookupButton.click();\n      });\n\n      var done = assert.async();\n\n      // Waiting for the action complete.\n      setTimeout(function () {\n        assert.equal($validationFlexberryErrorLable.text().trim(), '', 'Lookup have value');\n        done();\n      }, 1000);\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test'], function (_executeValidationTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check complete all tests', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    // Open validation page.\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $validationFlexberryLookupButton = Ember.$('.ui.button.ui-change')[0];\n\n      // Click lookup button.\n      Ember.run(function () {\n        $validationFlexberryLookupButton.click();\n      });\n\n      var $validationFlexberryCheckboxs = Ember.$('.flexberry-checkbox');\n      var $validationFlexberryCheckbox = Ember.$($validationFlexberryCheckboxs[0]);\n      var $validationFlexberryOLVCheckbox = Ember.$($validationFlexberryCheckboxs[2]);\n\n      Ember.run(function () {\n        $validationFlexberryCheckbox.click();\n        $validationFlexberryOLVCheckbox.click();\n      });\n\n      var $validationFlexberryDropdown = Ember.$('.flexberry-dropdown');\n\n      Ember.run(function () {\n\n        // Open dropdown.\n        $validationFlexberryDropdown.click();\n        var $validationFlexberryDropdownMenu = $validationFlexberryDropdown.children('.menu');\n        var $validationFlexberryDropdownItems = $validationFlexberryDropdownMenu.children('.item');\n        var $validationFlexberryDropdownItem = Ember.$($validationFlexberryDropdownItems[0]);\n\n        // Select item\n        $validationFlexberryDropdownItem.click();\n      });\n\n      var $validationFlexberryTextboxs = Ember.$('.flexberry-textbox');\n      var $validationFlexberryTextbox1 = Ember.$($validationFlexberryTextboxs[0]);\n      var $validationFlexberryTextbox2 = Ember.$($validationFlexberryTextboxs[1]);\n      var $validationFlexberryOLVTextbox1 = Ember.$($validationFlexberryTextboxs[2]);\n      var $validationFlexberryOLVTextbox2 = Ember.$($validationFlexberryTextboxs[3]);\n      var $validationFlexberryTextarea = Ember.$('.flexberry-textarea');\n\n      var $validationFlexberryTextboxInner1 = $validationFlexberryTextbox1.children('input');\n      var $validationFlexberryTextboxInner2 = $validationFlexberryTextbox2.children('input');\n      var $validationFlexberryOLVTextboxInner1 = $validationFlexberryOLVTextbox1.children('input');\n      var $validationFlexberryOLVTextboxInner2 = $validationFlexberryOLVTextbox2.children('input');\n      var $validationFlexberryTextAreaInner = $validationFlexberryTextarea.children('textarea');\n\n      // Insert text in textbox and textarea.\n      Ember.run(function () {\n        $validationFlexberryTextboxInner1[0].value = '1';\n        $validationFlexberryTextboxInner1.change();\n        $validationFlexberryTextboxInner2[0].value = '12345';\n        $validationFlexberryTextboxInner2.change();\n        $validationFlexberryTextAreaInner.val('1');\n        $validationFlexberryTextAreaInner.change();\n        $validationFlexberryOLVTextboxInner1[0].value = '1';\n        $validationFlexberryOLVTextboxInner1.change();\n        $validationFlexberryOLVTextboxInner2[0].value = '12345';\n        $validationFlexberryOLVTextboxInner2.change();\n      });\n\n      var $validationFlexberryFileAddButton = Ember.$('.add.outline');\n\n      Ember.run(function () {\n        $validationFlexberryFileAddButton.click();\n      });\n\n      var done = assert.async();\n\n      // Сounting the number of validationmessage.\n      setTimeout(function () {\n        var $validationLablesContainer = Ember.$('.ember-view.ui.basic.label');\n        var $validationMessage = true;\n\n        for (var i = 0; i < 10; i++) {\n          if ($validationLablesContainer[i].textContent.trim() !== '') {\n            $validationMessage = false;\n          }\n        }\n\n        var $validationSixteenWide = Ember.$('.list');\n        var $validationLi = $validationSixteenWide.children('li');\n\n        // Сounting the number of validationmessage.\n        assert.equal($validationLi.length, 0, 'All components have default value in sixteenWide');\n\n        assert.ok($validationMessage, 'All components have correct value, All validationmessage disabled');\n        done();\n      }, 5000);\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-textarea-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test'], function (_executeValidationTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check operation textarea', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    // Open validation page.\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $validationField = Ember.$(Ember.$('.field')[4]);\n      var $validationFlexberryTextarea = Ember.$('.flexberry-textarea');\n      var $validationFlexberryTextboxInner = $validationFlexberryTextarea.children('textarea');\n      var $validationFlexberryErrorLable = $validationField.children('.label');\n\n      // Check default validationmessage text.\n      assert.equal($validationFlexberryErrorLable.text().trim(), 'Long text is required', 'Textarea have default value');\n\n      // Insert text in textarea.\n      Ember.run(function () {\n        $validationFlexberryTextboxInner.val('1');\n        $validationFlexberryTextboxInner.change();\n      });\n\n      // Validationmessage must be empty.\n      assert.equal($validationFlexberryErrorLable.text().trim(), '', 'Textarea have default value');\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-textbox-letter-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test'], function (_executeValidationTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check operation letter textbox', function (store, assert, app) {\n    assert.expect(4);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    // Open validation page.\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $validationField = Ember.$(Ember.$('.field')[3]);\n      var $validationFlexberryTextbox = $validationField.children('.flexberry-textbox');\n      var $validationFlexberryTextboxInner = $validationFlexberryTextbox.children('input');\n      var $validationFlexberryErrorLable = $validationField.children('.label');\n\n      // Check default validationmessage text.\n      assert.equal($validationFlexberryErrorLable.text().trim(), 'Text is required,Text length must be >= 5', 'letter textbox have default value');\n\n      // Insert text in textbox.\n      Ember.run(function () {\n        $validationFlexberryTextboxInner[0].value = '1';\n        $validationFlexberryTextboxInner.change();\n      });\n\n      // Check default validationmessage for text length <5 letter.\n      assert.equal($validationFlexberryErrorLable.text().trim(), 'Text length must be >= 5', 'letter textbox have < 5 letter');\n\n      // Insert text in textbox.\n      Ember.run(function () {\n        $validationFlexberryTextboxInner[0].value = '12345';\n        $validationFlexberryTextboxInner.change();\n      });\n\n      // Check default validationmessage for text length >5 letter.\n      assert.equal($validationFlexberryErrorLable.text().trim(), '', 'letter textbox have >= 5 letter');\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-textbox-numeric-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test'], function (_executeValidationTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check operation numeric textbox', function (store, assert, app) {\n    assert.expect(4);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    // Open validation page.\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $validationField = Ember.$(Ember.$('.field')[2]);\n      var $validationFlexberryTextbox = $validationField.children('.flexberry-textbox');\n      var $validationFlexberryTextboxInner = $validationFlexberryTextbox.children('input');\n      var $validationFlexberryErrorLable = $validationField.children('.label');\n\n      // Check default validationmessage text.\n      assert.equal($validationFlexberryErrorLable.text().trim(), 'Number is required,Number is invalid', 'Numeric textbox have default value');\n\n      // Insert text in textbox.\n      Ember.run(function () {\n        $validationFlexberryTextboxInner[0].value = '2';\n        $validationFlexberryTextboxInner.change();\n      });\n\n      // Check default validationmessage text for even numbers.\n      assert.equal($validationFlexberryErrorLable.text().trim(), 'Number must be an odd', 'Numeric textbox have even value');\n\n      // Insert text in textbox.\n      Ember.run(function () {\n        $validationFlexberryTextboxInner[0].value = '1';\n        $validationFlexberryTextboxInner.change();\n      });\n\n      // Check default validationmessage text for odd numbers.\n      assert.equal($validationFlexberryErrorLable.text().trim(), '', 'Numeric textbox have odd value');\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-textbox-unique-date-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test', 'ember-flexberry-data/utils/generate-unique-id'], function (_executeValidationTest, _generateUniqueId) {\n    'use strict';\n\n    (0, _executeValidationTest.executeTest)('check operation text+date unique', function (store, assert, _app) {\n        assert.expect(3);\n\n        var dateToSet = new Date(2012, 1, 12);\n\n        dateToSet.setHours(13);\n        dateToSet.setUTCHours(11);\n        dateToSet.setUTCMinutes(0);\n        dateToSet.setUTCSeconds(0);\n        dateToSet.setUTCMilliseconds(0);\n\n        var initTestData = function initTestData(createdRecordsPrefix) {\n            // Add records for deleting.\n            return Ember.RSVP.Promise.all([store.createRecord('ember-flexberry-dummy-suggestion-type', { name: createdRecordsPrefix + \"0\" }).save(), store.createRecord('ember-flexberry-dummy-application-user', {\n                name: createdRecordsPrefix + \"1\",\n                eMail: \"1\",\n                phone1: \"1\"\n            }).save()]).then(function (createdCustomRecords) {\n                return store.createRecord('ember-flexberry-dummy-suggestion', {\n                    id: '75434dbd-f00c-4fd9-8483-c35aa59a18c3',\n                    text: '12345',\n                    date: dateToSet,\n                    type: createdCustomRecords[0],\n                    author: createdCustomRecords[1],\n                    editor1: createdCustomRecords[1]\n                }).save();\n            });\n        };\n\n        Ember.run(function () {\n            var path = 'components-acceptance-tests/edit-form-validation/validation';\n            var done1 = assert.async();\n\n            initTestData('uniqueTest' + (0, _generateUniqueId.default)()).then(function (suggestion) {\n                // Open validation page.\n                visit(path);\n\n                andThen(function () {\n                    assert.equal(currentPath(), path);\n\n                    // text\n                    var $validationField = Ember.$(Ember.$('.field')[3]);\n                    var $validationFlexberryTextbox = $validationField.children('.flexberry-textbox');\n                    var $validationFlexberryTextboxInner = $validationFlexberryTextbox.children('input');\n                    var $validationFlexberryErrorLabel = $validationField.children('.label');\n\n                    // data\n                    var $validationDateField = Ember.$(Ember.$('.field')[5]);\n                    var $validationDate = Ember.$('.flexberry-simpledatetime', $validationDateField);\n                    var $validationDateFlatpickr = Ember.$('.flatpickr > input', $validationDate);\n                    var $validationDateFlatpickrCustom = Ember.$('input.custom-flatpickr', $validationDate);\n\n                    var done2 = assert.async();\n                    // Insert text and date in textbox.\n                    Ember.run(function () {\n                        $validationDateFlatpickr[0]._flatpickr.open();\n                        $validationDateFlatpickr[0]._flatpickr.setDate(new Date(2012, 1, 12));\n                        $validationDateFlatpickr[0]._flatpickr.close();\n                        $validationDateFlatpickrCustom.change();\n\n                        $validationFlexberryTextboxInner[0].value = '12345';\n                        $validationFlexberryTextboxInner.change();\n                    });\n\n                    wait().then(function () {\n                        // Check validationmessage for non-unique combination text+date.\n                        assert.equal($validationFlexberryErrorLabel.text().trim(), 'Combination of attributes (Text, Date) are not unique', 'Text+date combination must be non-unique');\n\n                        // Change date value.\n                        Ember.run(function () {\n                            $validationDateFlatpickr[0]._flatpickr.open();\n                            $validationDateFlatpickr[0]._flatpickr.setDate(new Date(2012, 1, 13));\n                            $validationDateFlatpickr[0]._flatpickr.close();\n                            $validationDateFlatpickrCustom.change();\n\n                            $validationFlexberryTextboxInner[0].value = '123456';\n                            $validationFlexberryTextboxInner.change();\n                        });\n\n                        var done3 = assert.async();\n\n                        wait().then(function () {\n                            // Check default validationmessage for text+date combination is unique.\n                            assert.equal($validationFlexberryErrorLabel.text().trim(), '', 'Text+date combination must be unique');\n\n                            var done5 = assert.async();\n\n                            suggestion.destroyRecord().then(function () {\n                                return done5();\n                            });\n\n                            done3();\n                        });\n                        done2();\n                    });\n                    done1();\n                });\n            });\n        });\n    });\n});","define('dummy/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/ember-i18n/test-helpers', ['ember-i18n/test-support/-private/t', 'ember-i18n/test-support/-private/assert-translation'], function (_t2, _assertTranslation2) {\n  'use strict';\n\n  // example usage: find(`.header:contains(${t('welcome_message')})`)\n  Ember.Test.registerHelper('t', function (app, key, interpolations) {\n    return (0, _t2.default)(app.__container__, key, interpolations);\n  });\n\n  // example usage: expectTranslation('.header', 'welcome_message');\n  Ember.Test.registerHelper('expectTranslation', function (app, element, key, interpolations) {\n    var text = (0, _t2.default)(app.__container__, key, interpolations);\n\n    (0, _assertTranslation2.default)(element, key, text);\n  });\n});","define('dummy/tests/helpers/ember-prop-types', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createComponent = createComponent;\n\n  var _slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n\n  var VERSION = Ember.VERSION;\n\n\n  /**\n   * Determine if we are on a version of Ember that includes Glimmer 2\n   * @returns {Boolean} whether or not we are on Glimmer 2\n   */\n  function isGlimmer2() {\n    var _VERSION$split = VERSION.split('.'),\n        _VERSION$split2 = _slicedToArray(_VERSION$split, 2),\n        major = _VERSION$split2[0],\n        minor = _VERSION$split2[1];\n\n    return parseInt(major) > 1 && parseInt(minor) > 9;\n  }\n\n  /**\n   * Programitcally instantiate instance of component class\n   * @param {Ember.Component} component - component class to instantiate\n   * @returns {Ember.Component} instance of component class\n   */\n  function createComponent(component) {\n    if (isGlimmer2()) {\n      return component.create({ renderer: {} });\n    }\n\n    return component.create();\n  }\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Ember.RSVP.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('dummy/tests/helpers/start-app', ['exports', 'dummy/app', 'dummy/config/environment', 'ember-flexberry/test-support'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes.autoboot = true;\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('dummy/tests/helpers/validate-properties', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.testValidPropertyValues = testValidPropertyValues;\n  exports.testInvalidPropertyValues = testInvalidPropertyValues;\n\n\n  var run = Ember.run;\n\n  function validateValues(object, propertyName, values, isTestForValid) {\n    var promise = null;\n    var validatedValues = [];\n\n    values.forEach(function (value) {\n      function handleValidation(errors) {\n        var hasErrors = object.get('errors.' + propertyName + '.firstObject');\n        if (hasErrors && !isTestForValid || !hasErrors && isTestForValid) {\n          validatedValues.push(value);\n        }\n      }\n\n      run(object, 'set', propertyName, value);\n\n      var objectPromise = null;\n      run(function () {\n        objectPromise = object.validate().then(handleValidation, handleValidation);\n      });\n\n      // Since we are setting the values in a different run loop as we are validating them,\n      // we need to chain the promises so that they run sequentially. The wrong value will\n      // be validated if the promises execute concurrently\n      promise = promise ? promise.then(objectPromise) : objectPromise;\n    });\n\n    return promise.then(function () {\n      return validatedValues;\n    });\n  }\n\n  function testPropertyValues(propertyName, values, isTestForValid, context) {\n    var validOrInvalid = isTestForValid ? 'Valid' : 'Invalid';\n    var testName = validOrInvalid + ' ' + propertyName;\n\n    (0, _emberQunit.test)(testName, function (assert) {\n      var object = this.subject();\n\n      if (context && typeof context === 'function') {\n        context(object);\n      }\n\n      // Use QUnit.dump.parse so null and undefined can be printed as literal 'null' and\n      // 'undefined' strings in the assert message.\n      var valuesString = QUnit.dump.parse(values).replace(/\\n(\\s+)?/g, '').replace(/,/g, ', ');\n      var assertMessage = 'Expected ' + propertyName + ' to have ' + validOrInvalid.toLowerCase() + ' values: ' + valuesString;\n\n      return validateValues(object, propertyName, values, isTestForValid).then(function (validatedValues) {\n        assert.deepEqual(validatedValues, values, assertMessage);\n      });\n    });\n  }\n\n  function testValidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, true, context);\n  }\n\n  function testInvalidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, false, context);\n  }\n});","define('dummy/tests/integration/components/flexberry-checkbox-test', ['qunit', '@ember/test-helpers', 'ember-qunit'], function (_qunit, _testHelpers, _emberQunit) {\n  'use strict';\n\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  };\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('flexberry-checkbox', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('Component renders properly', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var $component, $checkboxInput, additioanlCssClasses;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n\n                assert.expect(15);\n\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"tLdNS8JB\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-checkbox\\\",null,[[\\\"caption\\\",\\\"class\\\"],[[22,[\\\"caption\\\"]],[22,[\\\"class\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component, it's inner <input>.\n                $component = Ember.$(this.element).children();\n                $checkboxInput = $component.children('input');\n\n                // Check wrapper <div>.\n\n                assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n                assert.strictEqual($component.hasClass('flexberry-checkbox'), true, 'Component\\'s container has \\'flexberry-checkbox\\' css-class');\n                assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n                assert.strictEqual($component.hasClass('checkbox'), true, 'Component\\'s wrapper has \\'checkbox\\' css-class');\n\n                // Check <input>.\n                assert.strictEqual($checkboxInput.length === 1, true, 'Component has inner <input>');\n                assert.strictEqual($checkboxInput.attr('type'), 'checkbox', 'Component\\'s inner <input> is of checkbox type');\n                assert.strictEqual($checkboxInput.hasClass('flexberry-checkbox-input'), true, 'Component\\'s inner checkbox <input> has flexberry-checkbox-input css-class');\n                assert.strictEqual($checkboxInput.hasClass('hidden'), true, 'Component\\'s inner checkbox <input> has \\'hidden\\' css-class');\n                assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked');\n\n                // Check wrapper's additional CSS-classes.\n                additioanlCssClasses = 'radio slider toggle';\n\n                this.set('class', additioanlCssClasses);\n\n                /* eslint-disable no-unused-vars */\n                Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n                  assert.strictEqual($component.hasClass(cssClassName), true, 'Component\\'s wrapper has additional css class \\'' + cssClassName + '\\'');\n                });\n                /* eslint-enable no-unused-vars */\n\n                this.set('class', '');\n                /* eslint-disable no-unused-vars */\n                Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n                  assert.strictEqual($component.hasClass(cssClassName), false, 'Component\\'s wrapper hasn\\'t additional css class \\'' + cssClassName + '\\'');\n                });\n                /* eslint-enable no-unused-vars */\n\n              case 19:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('Component renders it\\'s label properly', function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var $component, $checkboxLabel, label;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(5);\n\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"5uyuK0Iw\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-checkbox\\\",null,[[\\\"label\\\"],[[22,[\\\"label\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component, it's inner <label>.\n                $component = Ember.$(this.element).children();\n                $checkboxLabel = $component.children('label');\n\n                // Check <label>'s text.\n\n                assert.strictEqual($checkboxLabel.length === 1, true, 'Component has inner <label>');\n                assert.strictEqual($checkboxLabel.hasClass('flexberry-checkbox-label'), true, 'Component\\'s inner <label> has flexberry-checkbox-label css-class');\n                assert.strictEqual(Ember.$.trim($checkboxLabel.text()).length === 0, true, 'Component\\'s inner <label> is empty by default');\n\n                // Define some label & check <label>'s text again.\n                label = 'This is checkbox';\n\n                this.set('label', label);\n                assert.strictEqual(Ember.$.trim($checkboxLabel.text()) === label, true, 'Component\\'s inner <label> has text defined in component\\'s \\'label\\' property: \\'' + label + '\\'');\n\n                // Clean up defined label & check <label>'s text again.\n                label = null;\n                this.set('label', label);\n                assert.strictEqual(Ember.$.trim($checkboxLabel.text()).length === 0, true, 'Component\\'s inner <label> is empty if component\\'s \\'label\\' property is cleaned up');\n\n              case 14:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('Changes in checkbox causes changes in binded value', function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this = this;\n\n        var $component, $checkboxInput;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(9);\n\n                _context3.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"rdFET5ht\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-checkbox\\\",null,[[\\\"value\\\"],[[22,[\\\"flag\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component & it's inner <input>.\n                $component = Ember.$(this.element).children();\n                $checkboxInput = $component.children('input');\n\n                // Check component's initial state.\n\n                assert.strictEqual($component.hasClass('checked'), false, 'Component hasn\\'t css-class \\'checked\\' before first click');\n                assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked before first click');\n                assert.strictEqual(Ember.typeOf(this.get('flag')), 'undefined', 'Component\\'s binded value is \\'undefined\\' before first click');\n\n                // Imitate click on component (change it's state to checked) & check it's state again.\n                // Sometimes ember recognizes programmatical imitations of UI-events as asynchrony, so we should wrap them into run function.\n                Ember.run(function () {\n                  $component.click();\n                  assert.strictEqual($component.hasClass('checked'), true, 'Component has css-class \\'checked\\' after click');\n                  assert.strictEqual($checkboxInput.prop('checked'), true, 'Component\\'s inner checkbox <input> is checked after click');\n                  assert.strictEqual(_this.get('flag'), true, 'Component\\'s binded value is \\'true\\' after click');\n                });\n\n                // Imitate click on component again (change it's state to unchecked) & check it's state again.\n                // Sometimes ember recognizes programmatical imitations of UI-events as asynchrony, so we should wrap them into run function.\n                Ember.run(function () {\n                  $component.click();\n                  assert.strictEqual($component.hasClass('checked'), false, 'Component hasn\\'t css-class \\'checked\\' after second click');\n                  assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked after second click');\n                  assert.strictEqual(_this.get('flag'), false, 'Component\\'s binded value is \\'false\\' after second click');\n                });\n\n              case 10:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('Changes in in binded value causes changes in checkbox', function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var $component, $checkboxInput;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(7);\n\n                _context4.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"rdFET5ht\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-checkbox\\\",null,[[\\\"value\\\"],[[22,[\\\"flag\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component & it's inner <input>.\n                $component = this.$().children();\n                $checkboxInput = $component.children('input');\n\n                // Check component's initial state.\n\n                assert.strictEqual($component.hasClass('checked'), false, 'Component hasn\\'t css-class \\'checked\\' by default');\n                assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked by default');\n                assert.strictEqual(Ember.typeOf(this.get('flag')), 'undefined', 'Component\\'s binded value is \\'undefined\\' by default');\n\n                // Change binded value to 'true' & check component's state again (it must be checked).\n                this.set('flag', true);\n                assert.strictEqual($component.hasClass('checked'), true, 'Component has css-class \\'checked\\' after binded value changed to \\'true\\'');\n                assert.strictEqual($checkboxInput.prop('checked'), true, 'Component\\'s inner checkbox <input> is checked after binded value changed to \\'true\\'');\n\n                // Change binded value to 'false' & check component's state again (it must be unchecked).\n                this.set('flag', false);\n                assert.strictEqual($component.hasClass('checked'), false, 'Component hasn\\'t css-class \\'checked\\' after binded value changed to \\'false\\'');\n                assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked after binded value changed to \\'false\\'');\n\n              case 14:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('Component sends \\'onChange\\' action', function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var onCheckboxChangeEventObject, $component;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(2);\n\n                onCheckboxChangeEventObject = null;\n\n                this.set('onCheckboxChange', function (e) {\n                  onCheckboxChangeEventObject = e;\n                });\n\n                _context5.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Edl1IfMJ\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-checkbox\\\",null,[[\\\"value\\\",\\\"onChange\\\"],[[22,[\\\"flag\\\"]],[21,0,[\\\"onCheckboxChange\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component.\n                $component = this.element.querySelector('.flexberry-checkbox');\n\n                // Imitate click on component (change its state to checked) & check action's event object.\n\n                _context5.next = 8;\n                return (0, _testHelpers.click)($component);\n\n              case 8:\n                assert.strictEqual(onCheckboxChangeEventObject.checked, true, 'Component sends \\'onChange\\' action with \\'checked\\' property equals to \\'true\\' after first click');\n\n                // Imitate click on component again (change its state to unchecked) & check action's event object again.\n                _context5.next = 11;\n                return (0, _testHelpers.click)($component);\n\n              case 11:\n                assert.strictEqual(onCheckboxChangeEventObject.checked, false, 'Component sends \\'onChange\\' action with \\'checked\\' property equals to \\'false\\' after second click');\n\n              case 12:\n              case 'end':\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('Component works properly in readonly mode', function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var onCheckboxChangeEventObject, $component, $checkboxInput;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(11);\n\n                onCheckboxChangeEventObject = null;\n\n                this.set('onCheckboxChange', function (e) {\n                  onCheckboxChangeEventObject = e;\n                });\n\n                this.set('readonly', false);\n                this.set('flag', undefined);\n\n                _context6.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"R6l0lwEM\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-checkbox\\\",null,[[\\\"readonly\\\",\\\"value\\\",\\\"onChange\\\"],[[21,0,[\\\"readonly\\\"]],[21,0,[\\\"flag\\\"]],[21,0,[\\\"onCheckboxChange\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n\n                // Retrieve component & its inner <input>.\n                $component = this.element.querySelector(' .flexberry-checkbox');\n                $checkboxInput = $component.querySelector('input');\n\n                // Check component's initial state.\n\n                assert.strictEqual($component.classList.contains('read-only'), false, 'Component hasn\\'t css-class \\'read-only\\' by default');\n\n                // Enable readonly mode & check component's state again.\n                this.set('readonly', true);\n                assert.strictEqual($component.classList.contains('read-only'), true, 'Component has css-class \\'read-only\\' when readonly mode is enabled');\n\n                // Imitate click on component (try to change its state to checked) & check its state & action's event object.\n                _context6.next = 14;\n                return (0, _testHelpers.click)($component);\n\n              case 14:\n                assert.strictEqual(onCheckboxChangeEventObject, null, 'Component doesn\\'t send \\'onChange\\' action in readonly mode');\n                assert.strictEqual($component.classList.contains('checked'), false, 'Component hasn\\'t css-class \\'checked\\' after click in readonly mode');\n                assert.strictEqual($checkboxInput.checked, false, 'Component\\'s inner checkbox <input> isn\\'t checked after click in readonly mode');\n                assert.strictEqual(_typeof(this.get('flag')), 'undefined', 'Component\\'s binded value is still \\'undefined\\' after click in readonly mode');\n\n                // Disable readonly mode & check component's state again.\n                this.set('readonly', false);\n                assert.strictEqual($component.classList.contains('read-only'), false, 'Component hasn\\'t css-class \\'read-only\\' when readonly mode is disabled');\n\n                // Imitate click on component (try to change its state to checked) & check its state & action's event object.\n                _context6.next = 22;\n                return (0, _testHelpers.click)($component);\n\n              case 22:\n                assert.strictEqual(Ember.isNone(onCheckboxChangeEventObject), false, 'Component sends \\'onChange\\' action when readonly mode is disabled');\n                assert.strictEqual($component.classList.contains('checked'), true, 'Component has css-class \\'checked\\' after first click when readonly mode is disabled');\n                assert.strictEqual($checkboxInput.checked, true, 'Component\\'s inner checkbox <input> is checked after first click when readonly mode is disabled');\n                assert.strictEqual(this.get('flag'), true, 'Component\\'s binded value is equals to \\'true\\' after first click when readonly mode is disabled');\n\n              case 26:\n              case 'end':\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('Setting up classes in checkbox', function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        var checkClass, $component;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(6);\n\n                checkClass = 'radio slider toggle';\n\n                this.set('class', checkClass);\n                _context7.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"aF1xW7AU\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-checkbox\\\",null,[[\\\"value\\\",\\\"class\\\"],[[22,[\\\"flag\\\"]],[22,[\\\"class\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n\n                // Check component's initial state.\n\n                assert.strictEqual($component.hasClass('radio'), true, 'Component hasn\\'t css-class \\'radio\\' by default');\n                assert.strictEqual($component.hasClass('slider'), true, 'Component hasn\\'t css-class \\'slider\\' by default');\n                assert.strictEqual($component.hasClass('toggle'), true, 'Component hasn\\'t css-class \\'toggle\\' by default');\n\n                // Change binded value to 'true' & check component's state again (it must be checked).\n                this.set('flag', true);\n\n                // Check component's afther change state.\n                assert.strictEqual($component.hasClass('radio'), true, 'Component hasn\\'t css-class \\'radio\\' afther change');\n                assert.strictEqual($component.hasClass('slider'), true, 'Component hasn\\'t css-class \\'slider\\' afther change');\n                assert.strictEqual($component.hasClass('toggle'), true, 'Component hasn\\'t css-class \\'toggle\\' afther change');\n\n              case 13:\n              case 'end':\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/flexberry-ddau-checkbox-test', ['ember-flexberry/components/flexberry-ddau-checkbox', 'ember-flexberry/mixins/flexberry-ddau-checkbox-actions-handler', 'qunit', 'ember-qunit', '@ember/test-helpers'], function (_flexberryDdauCheckbox, _flexberryDdauCheckboxActionsHandler, _qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | flexberry-ddau-checkbox', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('Component renders properly', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var $component, $checkboxInput, $checkboxCaption, flexberryClassNames, checkboxCaptionText, additionalCssClasses;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(17);\n\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"bedsM4UF\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-ddau-checkbox\\\",null,[[\\\"caption\\\",\\\"class\\\"],[[22,[\\\"caption\\\"]],[22,[\\\"class\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component, it's inner <input> & <label>.\n                $component = this.element.children[0];\n                $checkboxInput = $component.querySelector('input');\n                $checkboxCaption = $component.querySelector('label');\n                flexberryClassNames = _flexberryDdauCheckbox.default.flexberryClassNames;\n\n                // Check wrapper <div>.\n\n                assert.strictEqual($component.tagName, 'DIV', 'Component\\'s wrapper is a <div>');\n                assert.ok($component.classList.contains(flexberryClassNames.wrapper), 'Component\\'s container has \\'' + flexberryClassNames.wrapper + '\\' css-class');\n                assert.ok($component.classList.contains('ui'), 'Component\\'s wrapper has \\'ui\\' css-class');\n                assert.ok($component.classList.contains('checkbox'), 'Component\\'s wrapper has \\'checkbox\\' css-class');\n\n                // Check <input>.\n                assert.strictEqual($checkboxInput !== null, true, 'Component has inner <input>');\n                assert.strictEqual($checkboxInput.type, 'checkbox', 'Component\\'s inner <input> is of checkbox type');\n                assert.ok($checkboxInput.classList.contains(flexberryClassNames.checkboxInput), 'Component\\'s inner checkbox <input> has \\'' + flexberryClassNames.checkboxInput + '\\' css-class');\n                assert.ok($checkboxInput.classList.contains('hidden'), 'Component\\'s inner checkbox <input> has \\'hidden\\' css-class');\n                assert.strictEqual($checkboxInput.checked, false, 'Component\\'s inner checkbox <input> isn\\'t checked');\n\n                // Check caption's <label>.\n                assert.strictEqual($checkboxCaption !== null, true, 'Component has inner <label>');\n                assert.ok($checkboxCaption.classList.contains(flexberryClassNames.checkboxCaption), 'Component\\'s inner <label> has \\'' + flexberryClassNames.checkboxCaption + '\\' css-class');\n                assert.strictEqual(Ember.$.trim($checkboxCaption.textContent).length === 0, true, 'Component\\'s inner <label> is empty by default');\n\n                checkboxCaptionText = 'Checkbox caption';\n\n                this.set('caption', checkboxCaptionText);\n                assert.strictEqual(Ember.$.trim($checkboxCaption.textContent), checkboxCaptionText, 'Component\\'s inner <label> text changes when component\\'s \\'caption\\' property changes');\n\n                // Check wrapper's additional CSS-classes.\n                additionalCssClasses = 'additional-css-class-name and-another-one';\n\n                this.set('class', additionalCssClasses);\n\n                Ember.A(additionalCssClasses.split(' ')).forEach(function (cssClassName) {\n                  assert.ok($component.classList.contains(cssClassName), 'Component\\'s wrapper has additional css class \\'' + cssClassName + '\\'');\n                });\n\n                this.set('class', '');\n                Ember.A(additionalCssClasses.split(' ')).forEach(function (cssClassName) {\n                  assert.notOk($component.classList.contains(cssClassName), 'Component\\'s wrapper hasn\\'t additional css class \\'' + cssClassName + '\\'');\n                });\n\n              case 27:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('Component invokes actions', function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var latestEventObjects, $component;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(3);\n\n                latestEventObjects = {\n                  change: null\n                };\n\n                // Bind component's action handlers.\n\n                this.set('actions', {\n                  onFlagChange: function onFlagChange(e) {\n                    latestEventObjects.change = e;\n                  }\n                });\n\n                _context2.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"rgT1ZVdB\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-ddau-checkbox\\\",null,[[\\\"change\\\"],[[26,\\\"action\\\",[[21,0,[]],\\\"onFlagChange\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component.\n                $component = this.element.children[0];\n\n\n                assert.strictEqual(latestEventObjects.change, null, 'Component\\'s \\'change\\' action wasn\\'t invoked before click');\n\n                // Imitate first click on component.\n                _context2.next = 9;\n                return (0, _testHelpers.click)($component);\n\n              case 9:\n                assert.notStrictEqual(latestEventObjects.change, null, 'Component\\'s \\'change\\' action was invoked after first click');\n\n                // Imitate second click on component.\n                latestEventObjects.change = null;\n                _context2.next = 13;\n                return (0, _testHelpers.click)($component);\n\n              case 13:\n                assert.notStrictEqual(latestEventObjects.change, null, 'Component\\'s \\'change\\' action was invoked after second click');\n\n              case 14:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('Component changes binded value (without \\'change\\' action handler)', function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(testAssert) {\n        var thrownExceptions, originalEmberAssert, $component, $checkboxInput;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // Mock Ember.assert method.\n                thrownExceptions = Ember.A();\n                originalEmberAssert = Ember.assert;\n\n                Ember.assert = function () {\n                  try {\n                    originalEmberAssert.apply(undefined, arguments);\n                  } catch (ex) {\n                    thrownExceptions.pushObject(ex);\n                  }\n                };\n\n                testAssert.expect(4);\n\n                this.set('flag', false);\n                _context3.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"RkoVMjZ5\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-ddau-checkbox\\\",null,[[\\\"value\\\"],[[22,[\\\"flag\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n\n                // Retrieve component & it's inner <input>.\n                $component = this.element.children[0];\n                $checkboxInput = $component.querySelector('input');\n\n                // Check component's initial state.\n\n                testAssert.strictEqual($checkboxInput.checked, false, 'Component\\'s inner checkbox <input> isn\\'t checked before click');\n\n                // Imitate click on component & check for exception.\n                _context3.next = 12;\n                return (0, _testHelpers.click)($component);\n\n              case 12:\n\n                // Check component's state after click (it should be changed).\n                testAssert.strictEqual($checkboxInput.checked, true, 'Component\\'s inner checkbox <input> is checked after click (without \\'change\\' action handler)');\n\n                // Check binded value state after click (it should be unchanged, because 'change' action handler is not defined).\n                testAssert.strictEqual(this.get('flag'), true, 'Component\\'s binded value changed (without \\'change\\' action handler)');\n\n                testAssert.strictEqual(thrownExceptions.length === 1 && /.*required.*change.*action.*not.*defined.*/gi.test(thrownExceptions[0].message), true, 'Component throws single exception if \\'change\\' action handler is not defined');\n\n                // Clean up after mock Ember.assert.\n                Ember.assert = originalEmberAssert;\n\n              case 16:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('Component changes binded value (with \\'change\\' action handler)', function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this = this;\n\n        var $component, $checkboxInput;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(7);\n\n                this.set('flag', false);\n\n                // Bind component's 'change' action handler.\n                this.set('actions', {\n                  onFlagChange: function onFlagChange(e) {\n                    assert.strictEqual(e.originalEvent.target.id, _this.element.querySelector('input').id);\n                    _this.set('flag', e.newValue);\n                  }\n                });\n\n                _context4.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"WVc54MPf\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-ddau-checkbox\\\",null,[[\\\"value\\\",\\\"change\\\"],[[22,[\\\"flag\\\"]],[26,\\\"action\\\",[[21,0,[]],\\\"onFlagChange\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component & it's inner <input>.\n                $component = this.element.children[0];\n                $checkboxInput = $component.querySelector('input');\n\n                // Check component's initial state.\n\n                assert.strictEqual($checkboxInput.checked, false, 'Component\\'s inner checkbox <input> isn\\'t checked before click');\n\n                // Make component checked.\n                _context4.next = 10;\n                return (0, _testHelpers.click)($component);\n\n              case 10:\n                assert.strictEqual($checkboxInput.checked, true, 'Component\\'s inner checkbox <input> is checked after click (with \\'change\\' action handler)');\n                assert.strictEqual(this.get('flag'), true, 'Component\\'s binded value changed (with \\'change\\' action handler)');\n\n                // Make component unchecked.\n                _context4.next = 14;\n                return (0, _testHelpers.click)($component);\n\n              case 14:\n                assert.strictEqual($checkboxInput.checked, false, 'Component\\'s inner checkbox <input> is unchecked after second click (with \\'change\\' action handler)');\n                assert.strictEqual(this.get('flag'), false, 'Component\\' binded value changed after second click (with \\'change\\' action handler)');\n\n              case 16:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('Component changes binded value (with \\'change\\' action handler from special mixin)', function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var $component, $checkboxInput;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(5);\n\n                this.set('flag', false);\n\n                // Bind component's 'change' action handler from specialized mixin.\n                this.set('actions', {\n                  onCheckboxChange: _flexberryDdauCheckboxActionsHandler.default.mixins[0].properties.actions.onCheckboxChange\n                });\n\n                _context5.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"RrZKXti+\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-ddau-checkbox\\\",null,[[\\\"value\\\",\\\"change\\\"],[[22,[\\\"flag\\\"]],[26,\\\"action\\\",[[21,0,[]],\\\"onCheckboxChange\\\",\\\"flag\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component & it's inner <input>.\n                $component = this.element.children[0];\n                $checkboxInput = $component.querySelector('input');\n\n                // Check component's initial state.\n\n                assert.strictEqual($checkboxInput.checked, false, 'Component\\'s inner checkbox <input> isn\\'t checked before click');\n\n                // Make component checked.\n                _context5.next = 10;\n                return (0, _testHelpers.click)($component);\n\n              case 10:\n                assert.strictEqual($checkboxInput.checked, true, 'Component\\'s inner checkbox <input> is checked after click (with \\'change\\' action handler from special mixin)');\n                assert.strictEqual(this.get('flag'), true, 'Component changed binded value (with \\'change\\' action handler from special mixin)');\n\n                // Make component unchecked.\n                _context5.next = 14;\n                return (0, _testHelpers.click)($component);\n\n              case 14:\n                assert.strictEqual($checkboxInput.checked, false, 'Component\\'s inner checkbox <input> is unchecked after second click (with \\'change\\' action handler from special mixin)');\n                assert.strictEqual(this.get('flag'), false, 'Component changed binded value after second click (with \\'change\\' action handler from special mixin)');\n\n              case 16:\n              case 'end':\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('Component works properly in readonly mode', function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var latestEventObjects, $component, $checkboxInput;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(9);\n\n                latestEventObjects = {\n                  change: null\n                };\n\n                // Bind component's action handlers.\n\n                this.set('actions', {\n                  onFlagChange: function onFlagChange(e) {\n                    latestEventObjects.change = e;\n                  }\n                });\n\n                // Render component in readonly mode.\n                this.set('flag', false);\n                this.set('readonly', true);\n                _context6.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"67FR1zrZ\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-ddau-checkbox\\\",null,[[\\\"value\\\",\\\"readonly\\\",\\\"change\\\"],[[22,[\\\"flag\\\"]],[22,[\\\"readonly\\\"]],[26,\\\"action\\\",[[21,0,[]],\\\"onFlagChange\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n\n                // Retrieve component & it's inner <input>.\n                $component = this.element.children[0];\n                $checkboxInput = $component.querySelector('input');\n\n                // Check component's initial state.\n\n                assert.strictEqual($checkboxInput.checked, false, 'Component\\'s inner checkbox <input> isn\\'t checked before click');\n\n                // Imitate click on component.\n                _context6.next = 12;\n                return (0, _testHelpers.click)($component);\n\n              case 12:\n\n                // Check after click state.\n                assert.strictEqual($checkboxInput.checked, false, 'Component\\'s inner checkbox <input> isn\\'t checked after click');\n                assert.strictEqual(latestEventObjects.change, null, 'Component doesn\\'t send \\'change\\' action in readonly mode');\n\n                // Disable readonly mode.\n                this.set('readonly', false);\n\n                // Imitate click on component.\n                _context6.next = 17;\n                return (0, _testHelpers.click)($component);\n\n              case 17:\n\n                // Check after click state.\n                assert.strictEqual($checkboxInput.checked, true, 'Component\\'s inner checkbox <input> is checked after click');\n                assert.notStrictEqual(latestEventObjects.change, null, 'Component send \\'change\\' action after readonly mode disabling');\n\n                latestEventObjects.change = null;\n\n                // Imitate click on component.\n                _context6.next = 22;\n                return (0, _testHelpers.click)($component);\n\n              case 22:\n\n                // Check after click state.\n                assert.strictEqual($checkboxInput.checked, false, 'Component\\'s inner checkbox <input> is unchecked after click');\n                assert.notStrictEqual(latestEventObjects.change, null, 'Component send \\'change\\' action after readonly mode disabling');\n\n                latestEventObjects.change = null;\n\n                // Enable readonly mode again.\n                this.set('readonly', true);\n\n                // Imitate click on component.\n                _context6.next = 28;\n                return (0, _testHelpers.click)($component);\n\n              case 28:\n\n                // Check after click state.\n                assert.strictEqual($checkboxInput.checked, false, 'Component\\'s inner checkbox <input> isn\\'t checked after click');\n                assert.strictEqual(latestEventObjects.change, null, 'Component doesn\\'t send \\'change\\' action in readonly mode');\n\n              case 30:\n              case 'end':\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/flexberry-dropdown-test', ['ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations', 'ember-qunit', '@ember/test-helpers'], function (_translations, _translations2, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var animationDuration = Ember.$.fn.dropdown.settings.duration + 100;\n\n  (0, _emberQunit.module)('Integration | Component | flexberry-dropdown', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    // Helper method to expand flexberry-dropdown.\n    var expandDropdown = function expandDropdown(options) {\n      options = options || {};\n\n      var $component = options.dropdown;\n      var $menu = $component.children('div.menu');\n\n      var callbacks = Ember.A(options.callbacks || []);\n\n      return new Ember.RSVP.Promise(function (resolve, reject) {\n\n        // Click on component to trigger expand animation.\n        Ember.run(function () {\n          $component.click();\n\n          // Set timeouts for possibly defined additional callbacks.\n          callbacks.forEach(function (callback) {\n            setTimeout(callback.callback, callback.timeout);\n          });\n\n          // Set timeout for end of expand animation.\n          setTimeout(function () {\n            if ($component.hasClass('active') && $component.hasClass('visible') && $menu.hasClass('visible')) {\n              resolve();\n            } else {\n              reject(new Error('flexberry-dropdown\\'s menu isn\\'t expanded'));\n            }\n          }, animationDuration);\n        });\n      });\n    };\n\n    // Helper method to select item with specified caption from already expanded flexberry-dropdown's menu.\n    var selectDropdownItem = function selectDropdownItem(options) {\n      options = options || {};\n\n      var $component = options.dropdown;\n      var $menu = $component.children('div.menu');\n\n      var itemCaption = options.itemCaption;\n      var callbacks = Ember.A(options.callbacks || []);\n\n      return new Ember.RSVP.Promise(function (resolve, reject) {\n\n        // To select some item, menu must be expanded.\n        if (!($component.hasClass('active') && $component.hasClass('visible') && $menu.hasClass('visible'))) {\n          reject(new Error('flexberry-dropdown\\'s menu isn\\'t expanded'));\n        }\n\n        // To select some item, menu must contain such item (with the specified caption).\n        var $item = Ember.$('.item:contains(' + itemCaption + ')', $menu);\n        if ($item.length === 0) {\n          reject(new Error('flexberry-dropdown\\'s menu doesn\\'t contain item with caption \\'' + itemCaption + '\\''));\n        }\n\n        // Click on item to select it & trigger collapse animation.\n        Ember.run(function () {\n          $item.click();\n\n          // Set timeouts for possibly defined additional callbacks.\n          callbacks.forEach(function (callback) {\n            setTimeout(callback.callback, callback.timeout);\n          });\n\n          // Set timeout for end of collapse animation.\n          setTimeout(function () {\n            if (!($component.hasClass('active') || $component.hasClass('visible') || $menu.hasClass('visible'))) {\n              resolve();\n            } else {\n              reject(new Error('flexberry-dropdown\\'s menu isn\\'t collapsed'));\n            }\n          }, animationDuration);\n        });\n      });\n    };\n\n    (0, _emberQunit.test)('it renders properly', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var $component, $dropdownIcon, $dropdownText, $dropdownMenu, additioanlCssClasses;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(14);\n\n                // Render component.\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"oYNzYx2F\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-dropdown\\\",null,[[\\\"class\\\"],[[22,[\\\"class\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $dropdownIcon = $component.children('i.icon');\n                $dropdownText = $component.children('div.text');\n                $dropdownMenu = $component.children('div.menu');\n\n                // Check wrapper <div>.\n\n                assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n                assert.strictEqual($component.hasClass('flexberry-dropdown'), true, 'Component\\'s wrapper has \\' flexberry-dropdown\\' css-class');\n                assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n                assert.strictEqual($component.hasClass('selection'), true, 'Component\\'s wrapper has \\'selection\\' css-class');\n                assert.strictEqual($component.hasClass('dropdown'), true, 'Component\\'s wrapper has \\'dropdown\\' css-class');\n                assert.strictEqual($dropdownIcon.hasClass('dropdown icon'), true, 'Component\\'s wrapper has \\'dropdown icon\\' css-class');\n                assert.strictEqual($dropdownText.hasClass('default text'), true, 'Component\\'s wrapper has \\'default text\\' css-class');\n                assert.strictEqual($dropdownMenu.hasClass('menu'), true, 'Component\\'s wrapper has \\'menu\\' css-class');\n\n                // Check wrapper's additional CSS-classes.\n                additioanlCssClasses = 'scrolling compact fluid';\n\n                this.set('class', additioanlCssClasses);\n                /* eslint-disable no-unused-vars */\n                Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n                  assert.strictEqual($component.hasClass(cssClassName), true, 'Component\\'s wrapper has additional css class \\'' + cssClassName + '\\'');\n                });\n                /* eslint-enable no-unused-vars */\n\n                // Clean up wrapper's additional CSS-classes.\n                this.set('class', '');\n                /* eslint-disable no-unused-vars */\n                Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n                  assert.strictEqual($component.hasClass(cssClassName), false, 'Component\\'s wrapper hasn\\'t additional css class \\'' + cssClassName + '\\'');\n                });\n                /* eslint-enable no-unused-vars */\n\n              case 20:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    (0, _emberQunit.test)('it renders i18n-ed placeholder', function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var $component, $dropdownText;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(2);\n                this.i18n = this.owner.lookup('service:i18n');\n\n                // Render component.\n                _context2.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"5bCPYce6\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"flexberry-dropdown\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $dropdownText = $component.children('div.default.text');\n\n                // Check <dropdown>'s placeholder.\n\n                assert.strictEqual(Ember.$.trim($dropdownText.text()), Ember.get(_translations.default, 'components.flexberry-dropdown.placeholder'), 'Component\\'s inner <dropdown>\\'s placeholder is equals to it\\'s default value from i18n locales/ru/translations');\n\n                // Change current locale to 'en' & check <dropdown>'s placeholder again.\n                this.set('i18n.locale', 'en');\n                assert.strictEqual(Ember.$.trim($dropdownText.text()), Ember.get(_translations2.default, 'components.flexberry-dropdown.placeholder'), 'Component\\'s inner <dropdown>\\'s placeholder is equals to it\\'s value from i18n locales/en/translations');\n\n              case 9:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    (0, _emberQunit.test)('it renders manually defined placeholder', function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var placeholder, $component, $dropdownText;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(2);\n\n                // Render component.\n                _context3.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"F/Gved3Y\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-dropdown\\\",null,[[\\\"placeholder\\\"],[[22,[\\\"placeholder\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Set <dropdown>'s placeholder' & render component.\n                placeholder = 'please type some text';\n\n                this.set('placeholder', placeholder);\n\n                // Retrieve component.\n                $component = this.$().children();\n                $dropdownText = $component.children('div.default.text');\n\n                // Check <dropdown>'s placeholder.\n\n                assert.strictEqual(Ember.$.trim($dropdownText.text()), placeholder);\n\n                // Change placeholder's value & check <dropdown>'s placeholder again.\n                placeholder = 'dropdown has no value';\n                this.set('placeholder', placeholder);\n                assert.strictEqual(Ember.$.trim($dropdownText.text()), placeholder);\n\n              case 11:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    (0, _emberQunit.test)('readonly mode works properly', function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var $component, $dropdownMenu;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(2);\n\n                // Render component.\n                _context4.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"2NTwYzij\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-dropdown\\\",null,[[\\\"readonly\\\"],[true]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $dropdownMenu = $component.children('div.menu');\n\n                // Activate readonly mode & check that readonly (disabled) attribute exists now & has value equals to 'readonly'.\n\n                assert.strictEqual($component.hasClass('disabled'), true, 'Component\\'s has readonly');\n\n                // Check that component is disabled.\n                /* eslint-disable no-unused-vars */\n                new Ember.RSVP.Promise(function (resolve, reject) {\n                  Ember.run(function () {\n                    $component.click();\n                  });\n\n                  Ember.run(function () {\n                    var animation = assert.async();\n                    setTimeout(function () {\n                      assert.strictEqual($dropdownMenu.hasClass('animating'), false, 'Component is not active');\n\n                      animation();\n                    }, animationDuration / 2);\n                  });\n                });\n                /* eslint-enable no-unused-vars */\n\n              case 7:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n\n    (0, _emberQunit.skip)('needChecksOnValue mode properly', function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var _this = this;\n\n        var exceptionHandler, itemsArray, newValue;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                exceptionHandler = Ember.Test.Adapter.exception;\n\n                Ember.Test.Adapter.exception = function (error) {\n                  throw error;\n                };\n\n                // Create array for testing.\n                itemsArray = ['Caption1', 'Caption2', 'Caption3'];\n\n                this.set('itemsArray', itemsArray);\n\n                // Render component.\n                _context5.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Qnk53n/N\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-dropdown\\\",null,[[\\\"value\\\",\\\"items\\\",\\\"needChecksOnValue\\\"],[[22,[\\\"value\\\"]],[22,[\\\"itemsArray\\\"]],[22,[\\\"needChecksOnValue\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n\n                // Change property binded to 'value' & check them.\n                this.set('needChecksOnValue', true);\n                newValue = 'Caption4';\n\n                // Check that errors handled properly by catching the exception.\n                // assert.throws(() => { this.set('value', newValue); }, new RegExp(newValue));\n\n                _context5.next = 10;\n                return assert.rejects(function () {\n                  _this.set('value', newValue);\n                });\n\n              case 10:\n\n                Ember.Test.Adapter.exception = exceptionHandler;\n\n              case 11:\n              case 'end':\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n\n    (0, _emberQunit.test)('dropdown with items represented by object renders properly', function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var itemsObject, $component, $dropdownMenu, $dropdownItem, itemsObjectKeys;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(3);\n\n                // Create objects for testing.\n                itemsObject = {\n                  item1: 'Caption1',\n                  item2: 'Caption2',\n                  item3: 'Caption3'\n                };\n\n                this.set('itemsObject', itemsObject);\n\n                // Render component.\n                _context6.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ry1dXV6N\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-dropdown\\\",null,[[\\\"items\\\"],[[22,[\\\"itemsObject\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $dropdownMenu = $component.children('div.menu');\n                $dropdownItem = $dropdownMenu.children('div.item');\n\n                // Check component's captions and objects.\n\n                itemsObjectKeys = Object.keys(itemsObject);\n\n                $dropdownItem.each(function (i) {\n                  var $item = Ember.$(this);\n                  var itemKey = itemsObjectKeys[i];\n\n                  // Check that the captions matches the objects.\n                  assert.strictEqual($item.attr('data-value'), itemKey, 'Component\\'s item\\'s сaptions matches the objects');\n                });\n\n              case 10:\n              case 'end':\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n\n    (0, _emberQunit.test)('dropdown with items represented by array renders properly', function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        var itemsArray, $component, $dropdownMenu, $dropdownItem;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(3);\n\n                // Create array for testing.\n                itemsArray = ['Caption1', 'Caption2', 'Caption3'];\n\n                this.set('itemsArray', itemsArray);\n\n                // Render component.\n                _context7.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"1OcXHyQc\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-dropdown\\\",null,[[\\\"items\\\"],[[22,[\\\"itemsArray\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $dropdownMenu = $component.children('div.menu');\n                $dropdownItem = $dropdownMenu.children('div.item');\n\n                // Check component's captions and array.\n\n                $dropdownItem.each(function (i) {\n                  var $item = Ember.$(this);\n\n                  // Check that the captions matches the array.\n                  assert.strictEqual($item.attr('data-value'), String(i), 'Component\\'s item\\'s сaptions matches the array');\n                });\n\n              case 9:\n              case 'end':\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n\n    (0, _emberQunit.test)('expand animation works properly', function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var itemsArray, $component, $dropdownMenu, asyncAnimationsCompleted;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(9);\n\n                // Create array for testing.\n                itemsArray = ['Caption1', 'Caption2', 'Caption3'];\n\n                this.set('itemsArray', itemsArray);\n\n                // Render component.\n                _context8.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"1OcXHyQc\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-dropdown\\\",null,[[\\\"items\\\"],[[22,[\\\"itemsArray\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $dropdownMenu = $component.children('div.menu');\n\n                // Check that component is collapsed by default.\n\n                assert.strictEqual($component.hasClass('active'), false, 'Component hasn\\'t class \\'active\\'');\n                assert.strictEqual($component.hasClass('visible'), false, 'Component hasn\\'t class \\'visible\\'');\n                assert.strictEqual($dropdownMenu.hasClass('visible'), false, 'Component\\'s menu hasn\\'t class \\'visible\\'');\n                assert.strictEqual($dropdownMenu.hasClass('hidden'), false, 'Component\\'s menu hasn\\'t class \\'hidden\\'');\n\n                asyncAnimationsCompleted = assert.async();\n\n                expandDropdown({\n                  dropdown: $component,\n                  callbacks: [{\n                    timeout: animationDuration / 2,\n                    callback: function callback() {\n\n                      // Check that component is animating now.\n                      assert.strictEqual($dropdownMenu.hasClass('animating'), true, 'Component has class \\'animating\\' during expand animation');\n                    }\n                  }]\n                }).then(function () {\n\n                  // Check that component is expanded now.\n                  assert.strictEqual($component.hasClass('active'), true, 'Component has class \\'active\\'');\n                  assert.strictEqual($component.hasClass('visible'), true, 'Component has class \\'visible\\'');\n                  assert.strictEqual($dropdownMenu.hasClass('visible'), true, 'Component\\'s menu has class \\'visible\\'');\n                  assert.strictEqual($dropdownMenu.hasClass('hidden'), false, 'Component\\'s menu hasn\\'t class \\'hidden\\'');\n                }).catch(function (e) {\n                  // Error output.\n                  assert.ok(false, e);\n                }).finally(function () {\n                  asyncAnimationsCompleted();\n                });\n\n              case 13:\n              case 'end':\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n\n    (0, _emberQunit.test)('collapse animation works properly', function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        var itemsArray, $component, $dropdownMenu, asyncAnimationsCompleted;\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(9);\n\n                // Create array for testing.\n                itemsArray = ['Caption1', 'Caption2', 'Caption3'];\n\n                this.set('itemsArray', itemsArray);\n\n                // Render component.\n                _context9.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"1OcXHyQc\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-dropdown\\\",null,[[\\\"items\\\"],[[22,[\\\"itemsArray\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $dropdownMenu = $component.children('div.menu');\n                asyncAnimationsCompleted = assert.async();\n\n                expandDropdown({\n                  dropdown: $component\n                }).then(function () {\n\n                  // Check that component is expanded now.\n                  assert.strictEqual($component.hasClass('active'), true, 'Component has class \\'active\\'');\n                  assert.strictEqual($component.hasClass('visible'), true, 'Component has class \\'visible\\'');\n                  assert.strictEqual($dropdownMenu.hasClass('visible'), true, 'Component\\'s menu has class \\'visible\\'');\n                  assert.strictEqual($dropdownMenu.hasClass('hidden'), false, 'Component\\'s menu hasn\\'t class \\'hidden\\'');\n\n                  // Collapse component.\n                  var itemCaption = itemsArray[1];\n                  return selectDropdownItem({\n                    dropdown: $component,\n                    itemCaption: itemCaption,\n                    callbacks: [{\n                      timeout: animationDuration / 2,\n                      callback: function callback() {\n\n                        // Check that component is animating now.\n                        assert.strictEqual($dropdownMenu.hasClass('animating'), true, 'Component has class \\'animating\\' during collapse animation');\n                      }\n                    }]\n                  });\n                }).then(function () {\n\n                  // Check that component is collapsed now.\n                  assert.strictEqual($component.hasClass('active'), false, 'Component hasn\\'t class \\'active\\'');\n                  assert.strictEqual($component.hasClass('visible'), false, 'Component hasn\\'t class \\'visible\\'');\n                  assert.strictEqual($dropdownMenu.hasClass('visible'), false, 'Component\\'s menu hasn\\'t class \\'visible\\'');\n                  assert.strictEqual($dropdownMenu.hasClass('hidden'), true, 'Component\\'s menu has class \\'hidden\\'');\n                }).catch(function (e) {\n                  // Error output.\n                  assert.ok(false, e);\n                }).finally(function () {\n                  asyncAnimationsCompleted();\n                });\n\n              case 9:\n              case 'end':\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n\n    (0, _emberQunit.test)('changes in inner <dropdown> causes changes in property binded to \\'value\\'', function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var _this2 = this;\n\n        var itemsArray, $component, $dropdownMenu, itemCaption, asyncAnimationsCompleted;\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(5);\n\n                // Create array for testing.\n                itemsArray = ['Caption1', 'Caption2', 'Caption3'];\n\n                this.set('itemsArray', itemsArray);\n                this.set('value', null);\n\n                // Render component.\n                _context10.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"f+1idt22\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-dropdown\\\",null,[[\\\"items\\\",\\\"value\\\"],[[22,[\\\"itemsArray\\\"]],[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $dropdownMenu = $component.children('div.menu');\n\n                // Caption of the item to be selected.\n\n                itemCaption = itemsArray[2];\n\n                // Select item & perform all necessary checks.\n\n                asyncAnimationsCompleted = assert.async();\n\n                expandDropdown({\n                  dropdown: $component\n                }).then(function () {\n\n                  // Select item & collapse component.\n                  return selectDropdownItem({\n                    dropdown: $component,\n                    itemCaption: itemCaption\n                  });\n                }).then(function () {\n                  var $selectedItems = $dropdownMenu.children('div.item.active.selected');\n                  var $selectedItem = Ember.$($selectedItems[0]);\n                  var $dropdownText = $component.children('div.text');\n\n                  // Check that specified item is selected now & it is the only one selected item.\n                  assert.strictEqual($selectedItems.length, 1, 'Only one component\\'s item is active');\n                  assert.strictEqual(Ember.$.trim($selectedItem.text()), itemCaption, 'Selected item\\'s caption is \\'' + itemCaption + '\\'');\n\n                  // Check that dropdown's text <div> has text equals to selected item's caption.\n                  assert.strictEqual($dropdownText.hasClass('default'), false, 'Component\\'s text <div> hasn\\'t class \\'default\\'');\n                  assert.strictEqual(Ember.$.trim($dropdownText.text()), itemCaption, 'Component\\'s text <div> has content equals to selected item \\'' + itemCaption + '\\'');\n\n                  // Check that related model's value binded to dropdown is equals to selected item's caption.\n                  assert.strictEqual(_this2.get('value'), itemCaption, 'Related model\\'s value binded to dropdown is \\'' + itemCaption + '\\'');\n                }).catch(function (e) {\n                  // Error output.\n                  assert.ok(false, e);\n                }).finally(function () {\n                  asyncAnimationsCompleted();\n                });\n\n              case 11:\n              case 'end':\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x10) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n\n    (0, _emberQunit.test)('changes in inner <dropdown> causes call to \\'onChange\\' action', function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        var itemsArray, onChangeHasBeenCalled, onChangeArgument, $component, itemCaption, asyncAnimationsCompleted;\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(2);\n\n                // Create array for testing.\n                itemsArray = ['Caption1', 'Caption2', 'Caption3'];\n\n                this.set('itemsArray', itemsArray);\n                this.set('value', null);\n\n                onChangeHasBeenCalled = false;\n                onChangeArgument = void 0;\n\n                this.set('onDropdownChange', function (e) {\n                  onChangeHasBeenCalled = true;\n                  onChangeArgument = e;\n                });\n\n                // Render component.\n                _context11.next = 9;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"d++hPR9O\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-dropdown\\\",null,[[\\\"value\\\",\\\"items\\\",\\\"onChange\\\"],[[22,[\\\"value\\\"]],[22,[\\\"itemsArray\\\"]],[21,0,[\\\"onDropdownChange\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 9:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n\n                // Caption of the item to be selected.\n\n                itemCaption = itemsArray[2];\n\n                // Select item & perform all necessary checks.\n\n                asyncAnimationsCompleted = assert.async();\n\n                expandDropdown({\n                  dropdown: $component\n                }).then(function () {\n\n                  // Select item & collapse component.\n                  return selectDropdownItem({\n                    dropdown: $component,\n                    itemCaption: itemCaption\n                  });\n                }).then(function () {\n\n                  // Check that 'onChange' action has been called.\n                  assert.strictEqual(onChangeHasBeenCalled, true, 'Component\\'s \\'onChange\\' action has been called');\n                  assert.strictEqual(onChangeArgument, itemCaption, 'Component\\'s \\'onChange\\' action has been called with \\'' + itemCaption + '\\' as argument');\n                }).catch(function (e) {\n                  // Error output.\n                  assert.ok(false, e);\n                }).finally(function () {\n                  asyncAnimationsCompleted();\n                });\n\n              case 13:\n              case 'end':\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x11) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/flexberry-edit-panel-test', ['ember-i18n/services/i18n', 'ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations', 'qunit', '@ember/test-helpers', 'ember-qunit'], function (_i18n, _translations, _translations2, _qunit, _testHelpers, _emberQunit) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | flexberry edit panel', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    hooks.beforeEach(function () {\n      // Register translations\n      this.owner.register('locale:ru/translations', _translations.default);\n      this.owner.register('locale:en/translations', _translations2.default);\n      this.owner.register('service:i18n', _i18n.default);\n\n      // Inject i18n service into all components\n      Ember.Component.reopen({\n        i18n: Ember.inject.service('i18n')\n      });\n\n      // Set language to English for tests\n      this.owner.lookup('service:i18n').set('locale', 'en');\n    });\n\n    // Helper method to check panel buttons.\n    var checkPanelButtons = function checkPanelButtons($panelButtons, panelButtons, assert) {\n      var isCustomButtons = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      $panelButtons.each(function (i) {\n        var $item = Ember.$(this);\n        var expectButton = panelButtons[i];\n        var buttonCaption = expectButton.text;\n        if (!isCustomButtons) {\n          buttonCaption = expectButton.text.string;\n        }\n\n        assert.strictEqual($item.prop('tagName'), 'BUTTON', 'Component\\'s button wrapper is a <button>');\n        assert.ok($item.hasClass('ui button'), 'Component\\'s button has \\'ui button\\' class');\n        assert.ok($item.hasClass(expectButton.class), 'Component\\'s button class is a ' + expectButton.class);\n        assert.strictEqual(Ember.$.trim($item.text()), buttonCaption, 'Component\\'s button caption is a ' + buttonCaption);\n\n        if (expectButton.class !== 'close-button') {\n          assert.strictEqual($item.attr('type'), expectButton.type, 'Components type is a ' + expectButton.type);\n        }\n      });\n    };\n\n    var panelButtons = [{\n      type: 'submit',\n      class: 'button-one-class',\n      disabled: false,\n      text: 'buttonOneCaption',\n      action: 'firstButtonClick'\n    }, {\n      type: 'submit',\n      class: 'button-two-class',\n      disabled: false,\n      text: 'buttonTwoCaption',\n      action: 'save'\n    }, {\n      type: 'submit',\n      class: 'button-three-class',\n      disabled: false,\n      text: 'buttonThreeCaption',\n      action: 'threeButtonClick'\n    }, {\n      type: 'submit',\n      class: 'button-four-class',\n      disabled: false,\n      text: 'buttonFourCaption',\n      action: 'save'\n    }, {\n      type: 'submit',\n      class: 'button-five-class',\n      disabled: true,\n      text: 'buttonFive',\n      action: 'save'\n    }];\n\n    (0, _qunit.test)('flexberry-edit-panel with default buttons renders properly', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var i18n, panelButtons, $component, $panelButtons;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(21);\n                i18n = this.owner.lookup('service:i18n');\n\n                // Create objects for testing.\n\n                panelButtons = [{\n                  type: 'submit',\n                  class: 'save-button',\n                  disabled: false,\n                  text: i18n.t('forms.edit-form.save-button-text'),\n                  action: 'save'\n                }, {\n                  type: 'submit',\n                  class: 'save-close-button',\n                  disabled: false,\n                  text: i18n.t('forms.edit-form.saveAndClose-button-text'),\n                  action: 'save'\n                }, {\n                  type: 'submit',\n                  class: 'save-del-button',\n                  disabled: false,\n                  text: i18n.t('forms.edit-form.delete-button-text'),\n                  action: 'save'\n                }];\n\n                this.set('panelButtons', panelButtons);\n\n                // Render component.\n                _context.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"mg1CiAIO\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-edit-panel\\\",null,[[\\\"showCloseButton\\\",\\\"deepMount\\\",\\\"buttons\\\"],[true,true,[22,[\\\"panelButtons\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n\n                panelButtons.push({\n                  class: 'close-button',\n                  text: i18n.t('forms.edit-form.close-button-text')\n                });\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n\n                // Check wrapper <div>.\n\n                assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n                assert.ok($component.hasClass('flexberry-edit-panel'), 'Component\\'s wrapper has \\'flexberry-edit-panel\\' css-class');\n\n                // Check component's buttons.\n                $panelButtons = $component.children('button');\n\n                checkPanelButtons($panelButtons, panelButtons, assert);\n\n              case 12:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('flexberry-edit-panel with custom buttons renders properly', function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var $component, $panelButtons, $menuButtons;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(24);\n\n                // Create objects for testing.\n                this.set('panelButtons', panelButtons);\n\n                // Render component.\n                _context2.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"nI2g1Tp+\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-edit-panel\\\",null,[[\\\"showCloseButton\\\",\\\"deepMount\\\",\\\"buttons\\\"],[false,true,[22,[\\\"panelButtons\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n\n                // Check wrapper <div>.\n\n                assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n                assert.ok($component.hasClass('flexberry-edit-panel'), 'Component\\'s wrapper has \\' flexberry-edit-panel\\' css-class');\n\n                // Check component's captions.\n                $panelButtons = $component.children('button');\n                $menuButtons = $component.children('ui dropdown.menu-buttons');\n\n                assert.strictEqual($panelButtons.length, panelButtons.length - 1, 'Component\\'s buttons');\n                assert.strictEqual($menuButtons.length, 0, 'Component\\'s dropdown');\n\n                checkPanelButtons($panelButtons, panelButtons, assert, true);\n\n              case 12:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('flexberry-edit-panel with custom buttons and dropdown renders properly', function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var $component, $panelButtons, $menuButtons, $menuItems, menuItems;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(20);\n\n                // Create objects for testing.\n                this.set('panelButtons', panelButtons);\n\n                Ember.$('.ember-application').width(360);\n\n                // Render component.\n                _context3.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"nI2g1Tp+\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-edit-panel\\\",null,[[\\\"showCloseButton\\\",\\\"deepMount\\\",\\\"buttons\\\"],[false,true,[22,[\\\"panelButtons\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n\n                // Check wrapper <div>.\n\n                assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n                assert.ok($component.hasClass('flexberry-edit-panel'), 'Component\\'s wrapper has \\' flexberry-edit-panel\\' css-class');\n\n                // Check component's captions.\n                $panelButtons = $component.children('button');\n                $menuButtons = $component.children('.ui.dropdown.menu-buttons');\n\n\n                assert.strictEqual($panelButtons.length, 2, 'Component\\'s buttons');\n                assert.strictEqual($menuButtons.length, 1, 'Component\\'s dropdown');\n\n                checkPanelButtons($panelButtons, panelButtons.slice(0, 2), assert, true);\n\n                $menuItems = $menuButtons.children('.button-dropdown-menu').children('.item');\n                menuItems = panelButtons.slice(2);\n\n                $menuItems.each(function (i) {\n                  var $item = Ember.$(this);\n                  var expectButton = menuItems[i];\n\n                  assert.strictEqual($item.prop('tagName'), 'DIV', 'Component\\'s button wrapper is a <div>');\n                  assert.ok($item.hasClass(expectButton.class), 'Component\\'s dropdown item class is a ' + expectButton.class);\n                  assert.strictEqual(Ember.$.trim($item.text()), expectButton.text, 'Component\\'s dropdown item caption is a ' + expectButton.text);\n                });\n\n              case 16:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('flexberry-edit-panel with custom buttons and dropdown actions', function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var $component, $panelButtons;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(1);\n\n                this.set('actions', {\n                  buttonClick: function buttonClick(className) {\n                    Ember.$('.button-two-class').addClass(className);\n                  }\n                });\n\n                panelButtons[0].action = 'firstButtonClick';\n                panelButtons[2].action = 'threeButtonClick';\n\n                // Create objects for testing.\n                this.set('panelButtons', panelButtons);\n\n                // Render component.\n                _context4.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"WsDqfyMd\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-edit-panel\\\",null,[[\\\"showCloseButton\\\",\\\"deepMount\\\",\\\"buttons\\\",\\\"firstButtonClick\\\"],[false,false,[22,[\\\"panelButtons\\\"]],[26,\\\"action\\\",[[21,0,[]],\\\"buttonClick\\\",\\\"first-button-clicked\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $panelButtons = $component.children('button');\n                _context4.next = 11;\n                return Ember.run(function () {\n                  $panelButtons[0].click();\n                });\n\n              case 11:\n\n                assert.ok(Ember.$('.button-two-class').hasClass('first-button-clicked'), 'Component has css-class \\'first-button-clicked\\' after click');\n\n              case 12:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/flexberry-error-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | flexberry-error', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('Component renders properly', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.set('error', new Error('Error, error, error...'));\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"jAayP0on\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-error\\\",null,[[\\\"error\\\",\\\"modalContext\\\"],[[22,[\\\"error\\\"]],\\\"body\\\"]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.ok(/Error, error, error.../.test(this.element.textContent), 'Error message is displayed correctly');\n\n              case 4:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/flexberry-field-test', ['ember-i18n/services/i18n', 'ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations', 'qunit', '@ember/test-helpers', 'ember-qunit'], function (_i18n, _translations, _translations2, _qunit, _testHelpers, _emberQunit) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | flexberry-field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    hooks.beforeEach(function () {\n      this.owner.register('locale:ru/translations', _translations.default);\n      this.owner.register('locale:en/translations', _translations2.default);\n      this.owner.register('service:i18n', _i18n.default);\n\n      this.i18n = this.owner.lookup('service:i18n');\n      Ember.Component.reopen({\n        i18n: Ember.inject.service('i18n')\n      });\n\n      // Set 'ru' as initial locale.\n      this.set('i18n.locale', 'ru');\n    });\n\n    (0, _qunit.test)('it renders properly', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var $component, $fieldTextbox, additioanlCssClasses;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(13);\n\n                // Render component.\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"IwKP+my/\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"class\\\"],[[22,[\\\"class\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $fieldTextbox = $component.children('div.flexberry-textbox');\n\n                // Check wrapper <div>.\n\n                assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n                assert.strictEqual($component.hasClass('flexberry-field'), true, 'Component\\'s wrapper has \\' flexberry-field\\' css-class');\n                assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n                assert.strictEqual($component.hasClass('field'), true, 'Component\\'s wrapper has \\'field\\' css-class');\n                assert.strictEqual($fieldTextbox.length === 1, true, 'Component has inner \\'flexberry-textbox\\'');\n\n                // Check wrapper's additional CSS-classes.\n                additioanlCssClasses = 'transparent mini huge error';\n\n                this.set('class', additioanlCssClasses);\n                /* eslint-disable no-unused-vars */\n                Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n                  assert.strictEqual($component.hasClass(cssClassName), true, 'Component\\'s wrapper has additional css class \\'' + cssClassName + '\\'');\n                });\n                /* eslint-enable no-unused-vars */\n\n                // Clean up wrapper's additional CSS-classes.\n                this.set('class', '');\n                /* eslint-disable no-unused-vars */\n                Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n                  assert.strictEqual($component.hasClass(cssClassName), false, 'Component\\'s wrapper hasn\\'t additional css class \\'' + cssClassName + '\\'');\n                });\n                /* eslint-enable no-unused-vars */\n\n              case 15:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('label mode works properly', function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var labelText;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(3);\n\n                // Render component.\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"/civMie0\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"class\\\",\\\"label\\\"],[[22,[\\\"class\\\"]],[22,[\\\"label\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Check that label attribute doesn't exist now.\n                this.set('label', null);\n                assert.strictEqual(this.get('label'), null, 'Component\\'s hasn\\'t inner <label>');\n\n                // Add text for label & check that label attribute exist.\n                labelText = 'Some text for label';\n\n                this.set('label', labelText);\n\n                assert.strictEqual(this.get('label'), labelText, 'Component has inner <label>');\n\n                // Check that label attribute doesn't exist now.\n                this.set('label', null);\n                assert.strictEqual(this.get('label'), null, 'Component\\'s hasn\\'t inner <label>');\n\n              case 10:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('readonly mode works properly', function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var $component, $fieldInput;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(3);\n\n                // Render component.\n                _context3.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"6FeqLNId\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"class\\\",\\\"readonly\\\"],[[22,[\\\"class\\\"]],[22,[\\\"readonly\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $fieldInput = Ember.$('.flexberry-textbox input', $component);\n\n                // Check that <input>'s readonly attribute doesn't exist yet.\n\n                assert.strictEqual(Ember.$.trim($fieldInput.attr('readonly')), '', 'Component\\'s inner <input> hasn\\'t readonly attribute by default');\n\n                // Activate readonly mode & check that <input>'s readonly attribute exists now & has value equals to 'readonly'.\n                this.set('readonly', true);\n\n                $fieldInput = Ember.$('.flexberry-textbox input', $component);\n                assert.strictEqual(Ember.$.trim($fieldInput.attr('readonly')), 'readonly', 'Component\\'s inner <input> has readonly attribute with value equals to \\'readonly\\'');\n\n                // Check that <input>'s readonly attribute doesn't exist now.\n                this.set('readonly', false);\n\n                $fieldInput = Ember.$('.flexberry-textbox input', $component);\n                assert.strictEqual(Ember.$.trim($fieldInput.attr('readonly')), '', 'Component\\'s inner <input> hasn\\'t readonly attribute');\n\n              case 12:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('readonly mode works properly with value', function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this = this;\n\n        var $component, $fieldInput, newValue;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(2);\n\n                // Set <input>'s value' & render component.\n                this.set('value', null);\n                this.set('readonly', true);\n                _context4.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"W9EvN/jF\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"readonly\\\",\\\"value\\\"],[[22,[\\\"readonly\\\"]],[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $fieldInput = Ember.$('.flexberry-textbox input', $component);\n\n\n                $fieldInput.on('change', function (e) {\n                  if (_this.get('readonly')) {\n                    e.stopPropagation();\n                    $fieldInput.val(null);\n                  }\n                });\n\n                newValue = 'New value';\n\n                $fieldInput.val(newValue);\n                $fieldInput.change();\n\n                // Check <input>'s value not changed.\n                assert.strictEqual(Ember.$.trim($fieldInput.val()), '', 'Component\\'s inner <input>\\'s value not changed');\n                assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to unchanged \\'value\\'');\n\n              case 13:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('click on field in readonly mode doesn\\'t change value & it\\'s type', function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var value, $component, $fieldInput;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(3);\n\n                // Set <input>'s value' & render component.\n                value = 123;\n\n                this.set('value', value);\n                _context5.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"kjfAAAZM\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"readonly\\\",\\\"value\\\"],[true,[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $fieldInput = Ember.$('.flexberry-textbox input', $component);\n\n\n                $fieldInput.click();\n                $fieldInput.change();\n\n                // Check <input>'s value not changed.\n                assert.strictEqual(Ember.$.trim($fieldInput.val()), '' + value, 'Component\\'s inner <input>\\'s value not changed');\n                assert.strictEqual(this.get('value'), value, 'Value binded to component\\'s \\'value\\' property is unchanged');\n                assert.strictEqual(Ember.typeOf(this.get('value')), 'number', 'Value binded to component\\'s \\'value\\' property is still number');\n\n              case 12:\n              case 'end':\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('it renders i18n-ed placeholder', function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var $component, $fieldInput;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(2);\n\n                // Render component.\n                _context6.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"SjI7NtQV\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"flexberry-field\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $fieldInput = Ember.$('.flexberry-textbox input', $component);\n\n                // Check <input>'s placeholder.\n\n                assert.strictEqual(Ember.$.trim($fieldInput.attr('placeholder')), Ember.get(_translations.default, 'components.flexberry-field.placeholder'), 'Component\\'s inner <input>\\'s placeholder is equals to it\\'s default value from i18n locales/ru/translations');\n\n                // Change current locale to 'en' & check <input>'s placeholder again.\n                _context6.next = 8;\n                return this.set('i18n.locale', 'en');\n\n              case 8:\n                assert.strictEqual(Ember.$.trim($fieldInput.attr('placeholder')), Ember.get(_translations2.default, 'components.flexberry-field.placeholder'), 'Component\\'s inner <input>\\'s placeholder is equals to it\\'s value from i18n locales/en/translations');\n\n              case 9:\n              case 'end':\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('it renders manually defined placeholder', function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        var $component, $fieldInput, placeholder;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(2);\n\n                // Set <input>'s placeholder' & render component.\n                _context7.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Qm8td5g4\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"placeholder\\\"],[[22,[\\\"placeholder\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $fieldInput = Ember.$('.flexberry-textbox input', $component);\n                placeholder = 'input is empty, please type some text';\n\n                this.set('placeholder', placeholder);\n\n                // Check <input>'s placeholder.\n                assert.strictEqual(Ember.$.trim($fieldInput.attr('placeholder')), placeholder, 'Component\\'s inner <input>\\'s placeholder is equals to manually defined value \\'' + placeholder + '\\'');\n\n                // Change placeholder's value & check <input>'s placeholder again.\n                placeholder = 'input has no value';\n                this.set('placeholder', placeholder);\n                assert.strictEqual(Ember.$.trim($fieldInput.attr('placeholder')), placeholder, 'Component\\'s inner <input>\\'s placeholder is equals to manually updated value \\'' + placeholder + '\\'');\n\n              case 11:\n              case 'end':\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('type mode works properly', function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var $component, $fieldInput;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"PemiHgzt\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"class\\\",\\\"type\\\"],[[22,[\\\"class\\\"]],[22,[\\\"type\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $fieldInput = Ember.$('.flexberry-textbox input', $component);\n\n                // Check that <input>'s type attribute 'text'.\n\n                this.set('type', 'text');\n                assert.strictEqual(Ember.$.trim($fieldInput.attr('type')), 'text', 'Component\\'s inner <input> type attribute \\'text\\'');\n\n                // Check that <input>'s type attribute 'number'.\n                this.set('type', 'number');\n                assert.strictEqual(Ember.$.trim($fieldInput.attr('type')), 'number', 'Component\\'s inner <input> type attribute \\'number\\'');\n\n                // Check that <input>'s type attribute 'password'.\n                this.set('type', 'password');\n                assert.strictEqual(Ember.$.trim($fieldInput.attr('type')), 'password', 'Component\\'s inner <input> type attribute \\'password\\'');\n\n                // Check that <input>'s type attribute 'color'.\n                this.set('type', 'color');\n                assert.strictEqual(Ember.$.trim($fieldInput.attr('type')), 'color', 'Component\\'s inner <input> type attribute \\'color\\'');\n\n                // Check that <input>'s type attribute 'button'.\n                this.set('type', 'button');\n                assert.strictEqual(Ember.$.trim($fieldInput.attr('type')), 'button', 'Component\\'s inner <input> type attribute \\'button\\'');\n\n                // Check that <input>'s type attribute 'hidden'.\n                this.set('type', 'hidden');\n                assert.strictEqual(Ember.$.trim($fieldInput.attr('type')), 'hidden', 'Component\\'s inner <input> type attribute \\'hidden\\'');\n\n              case 16:\n              case 'end':\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('changes in inner <input> causes changes in property binded to \\'value\\'', function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        var $component, $fieldInput, newValue;\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(4);\n\n                // Set <input>'s value' & render component.\n                this.set('value', null);\n                _context9.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"VmTtyhIv\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"value\\\"],[[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $fieldInput = Ember.$('.flexberry-textbox input', $component);\n\n                // Check <input>'s value & binded value for initial emptyness.\n\n                assert.strictEqual(Ember.$.trim($fieldInput.val()), '', 'Component\\'s inner <input>\\'s value is equals to \\'\\'');\n                assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to \\'value\\' is equals to null');\n\n                // Change <input>'s value (imitate situation when user typed something into component's <input>)\n                // & check them again ('change' event is needed to force bindings work).\n                newValue = 'Some text typed into field\\'s inner input';\n\n                $fieldInput.val(newValue);\n                $fieldInput.change();\n\n                assert.strictEqual(Ember.$.trim($fieldInput.val()), newValue, 'Component\\'s inner <input>\\'s value is equals to \\'' + newValue + '\\'');\n                assert.strictEqual(this.get('value'), newValue, 'Component\\'s property binded to \\'value\\' is equals to \\'' + newValue + '\\'');\n\n              case 13:\n              case 'end':\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('attribute maxlength rendered in html', function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var $component, $fieldInput;\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(1);\n\n                // Render component.\n                _context10.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"w2woXa5q\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"maxlength\\\"],[5]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $fieldInput = Ember.$('.flexberry-textbox input', $component);\n\n                // Check <input>'s maxlength attribute.\n\n                assert.strictEqual($fieldInput.attr('maxlength'), '5', 'Component\\'s inner <input>\\'s attribute maxlength rendered');\n\n              case 6:\n              case 'end':\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x10) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('changes in property binded to \\'value\\' causes changes in inner <input>', function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        var $component, $fieldInput, newValue;\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(4);\n\n                // Set <input>'s value' & render component.\n                this.set('value', null);\n                _context11.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"VmTtyhIv\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"value\\\"],[[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $fieldInput = Ember.$('.flexberry-textbox input', $component);\n\n                // Check <input>'s value & binded value for initial emptyness.\n\n                assert.strictEqual(Ember.$.trim($fieldInput.val()), '', 'Component\\'s inner <input>\\'s value is equals to \\'\\'');\n                assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to \\'value\\' is equals to null');\n\n                // Change property binded to 'value' & check them again.\n                newValue = 'Some text typed into field\\'s inner input';\n\n                this.set('value', newValue);\n\n                assert.strictEqual(Ember.$.trim($fieldInput.val()), newValue, 'Component\\'s inner <input>\\'s value is equals to \\'' + newValue + '\\'');\n                assert.strictEqual(this.get('value'), newValue, 'Component\\'s property binded to \\'value\\' is equals to \\'' + newValue + '\\'');\n\n              case 12:\n              case 'end':\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x11) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/flexberry-groupedit-test', ['qunit', 'ember-qunit', '@ember/test-helpers', 'ember-flexberry/services/user-settings', 'dummy/models/components-examples/flexberry-groupedit/shared/aggregator', 'dummy/models/ember-flexberry-dummy-suggestion', 'ember-flexberry/components/flexberry-base-component'], function (_qunit, _emberQunit, _testHelpers, _userSettings, _aggregator, _emberFlexberryDummySuggestion, _flexberryBaseComponent) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | flexberry-groupedit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    hooks.beforeEach(function () {\n      Ember.Component.reopen({\n        i18n: Ember.inject.service('i18n'),\n        userSettingsService: Ember.inject.service('user-settings')\n      });\n      _userSettings.default.reopen({\n        isUserSettingsServiceEnabled: false\n      });\n\n      this.owner.lookup('service:log').set('enabled', false);\n    });\n\n    hooks.afterEach(function () {\n      _flexberryBaseComponent.default.prototype.currentController = null;\n    });\n\n    (0, _qunit.test)('ember-groupedit element by default test', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var store, model, testComponentName, $component, $componentButtonAdd, $componentObjectListViewFirstCellAsterisk, $componentObjectListViewFirstCell, $flexberryCheckbox, $minusButton, $editMenuButton;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(9);\n                store = this.owner.lookup('service:store');\n                model = void 0;\n\n                Ember.run(function () {\n                  model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n                });\n\n                testComponentName = 'my-test-component-to-count-rerender';\n\n\n                this.set('proj', _aggregator.default.projections.get('AggregatorE'));\n                this.set('model', model);\n                this.set('componentName', testComponentName);\n                this.set('searchForContentChange', true);\n                _context.next = 11;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"/LNc+cH4\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\",\\\"showAsteriskInRow\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]],true]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 11:\n\n                // Add record.\n                $component = this.element.querySelector('.groupedit-toolbar');\n                $componentButtonAdd = $component.querySelector('.ui.button');\n                _context.next = 15;\n                return (0, _testHelpers.click)($componentButtonAdd);\n\n              case 15:\n                _context.next = 17;\n                return (0, _testHelpers.settled)();\n\n              case 17:\n                $componentObjectListViewFirstCellAsterisk = Ember.$('.asterisk', this.element);\n\n                // Check object-list-view <i>.\n\n                assert.strictEqual($componentObjectListViewFirstCellAsterisk.length, 1, 'Component has inner object-list-view-operations blocks');\n                assert.strictEqual($componentObjectListViewFirstCellAsterisk.prop('tagName'), 'I', 'Component\\'s inner component block is a <i>');\n                assert.ok($componentObjectListViewFirstCellAsterisk.hasClass('asterisk'), 'Component\\'s inner object-list-view has \\'asterisk\\' css-class');\n                assert.ok($componentObjectListViewFirstCellAsterisk.hasClass('small'), 'Component\\'s inner object-list-view has \\'small\\' css-class');\n                assert.ok($componentObjectListViewFirstCellAsterisk.hasClass('red'), 'Component\\'s inner object-list-view has \\'red\\' css-class');\n                assert.ok($componentObjectListViewFirstCellAsterisk.hasClass('icon'), 'Component\\'s inner object-list-view has \\'icon\\' css-class');\n\n                $componentObjectListViewFirstCell = Ember.$('.object-list-view-helper-column', this.element);\n                $flexberryCheckbox = Ember.$('.flexberry-checkbox', $componentObjectListViewFirstCell);\n\n\n                assert.ok($flexberryCheckbox.length, 'Component has flexberry-checkbox in first cell blocks');\n\n                $minusButton = Ember.$('.minus', $componentObjectListViewFirstCell);\n\n\n                assert.strictEqual($minusButton.length, 0, 'Component hasn\\'t delete button in first cell');\n\n                $editMenuButton = Ember.$('.button.right', this.element);\n\n\n                assert.strictEqual($editMenuButton.length, 0, 'Component hasn\\'t edit menu in last cell');\n\n              case 31:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('it renders', function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var store, model;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // Set any properties with this.set('myProperty', 'value');\n                // Handle any actions with this.on('myAction', function(val) { ... });\n                assert.expect(1);\n\n                store = this.owner.lookup('service:store');\n                model = void 0;\n\n                Ember.run(function () {\n                  model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n                });\n\n                this.set('proj', _aggregator.default.projections.get('AggregatorE'));\n                this.set('model', model);\n                _context2.next = 8;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"wU3hDn7c\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"modelProjection\\\",\\\"content\\\",\\\"componentName\\\"],[[22,[\\\"proj\\\"]],[22,[\\\"model\\\",\\\"details\\\"]],\\\"my-group-edit\\\"]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 8:\n                assert.ok(true);\n\n              case 9:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('it properly rerenders', function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this = this;\n\n        var store;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(5);\n                store = this.owner.lookup('service:store');\n\n\n                Ember.run(function () {\n                  var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n                  var testComponentName = 'my-test-component-to-count-rerender';\n\n                  _this.set('proj', _aggregator.default.projections.get('AggregatorE'));\n                  _this.set('model', model);\n                  _this.set('componentName', testComponentName);\n                  _this.set('searchForContentChange', true);\n                });\n\n                _context3.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"I3iZcFDs\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                assert.equal(this.element.querySelectorAll('.object-list-view tr').length, 2);\n\n                Ember.run(function () {\n                  var detailModel = _this.get('model.details');\n                  detailModel.addObject(store.createRecord('components-examples/flexberry-groupedit/shared/detail', { text: '1' }));\n                  detailModel.addObject(store.createRecord('components-examples/flexberry-groupedit/shared/detail', { text: '2' }));\n                });\n\n                _context3.next = 9;\n                return (0, _testHelpers.settled)();\n\n              case 9:\n                assert.equal(this.element.querySelectorAll('.object-list-view tr').length, 3);\n\n                Ember.run(function () {\n                  var detailModel = _this.get('model.details');\n                  detailModel.addObject(store.createRecord('components-examples/flexberry-groupedit/shared/detail', { text: '3' }));\n                });\n\n                _context3.next = 13;\n                return (0, _testHelpers.settled)();\n\n              case 13:\n                assert.equal(this.element.querySelectorAll('.object-list-view tr').length, 4);\n\n                Ember.run(function () {\n                  _this.get('model.details').get('firstObject').deleteRecord();\n                });\n\n                _context3.next = 17;\n                return (0, _testHelpers.settled)();\n\n              case 17:\n                assert.equal(this.element.querySelectorAll('.object-list-view tr').length, 3);\n\n                Ember.run(function () {\n                  _this.set('searchForContentChange', false);\n\n                  var detailModel = _this.get('model.details');\n                  detailModel.addObject(store.createRecord('components-examples/flexberry-groupedit/shared/detail', { text: '4' }));\n                });\n\n                _context3.next = 21;\n                return (0, _testHelpers.settled)();\n\n              case 21:\n                assert.equal(this.element.querySelectorAll('.object-list-view tr').length, 3);\n\n              case 22:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('it properly rerenders by default', function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var _this2 = this;\n\n        var store;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(72);\n\n                store = this.owner.lookup('service:store');\n\n\n                Ember.run(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n                  var model, testComponentName, $detailsAtributes, $detailsAtributesArray, $component, $componentGroupEditToolbar, $componentButtons, $componentButtonAdd, $componentButtonAddIcon, $componentButtonRemove, $componentButtonDefauldSetting, $componentButtonRemoveIcon, $componentListViewContainer, $componentJCLRgrips, $componentJCLRgrip, $componentJCLRgripFirst, $componentJCLRgripLast, $componentObjectListView, $componentObjectListViewThead, $componentObjectListViewTr, $componentObjectListViewThFirstCell, $componentObjectListViewThs, $componentObjectListViewTh, index, $componentObjectListViewThDiv, $componentObjectListViewThDivSpan, $componentObjectListViewBody, $componentObjectListViewTd, $componentObjectListViewTdInner;\n                  return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n                          testComponentName = 'my-test-component-to-count-rerender';\n\n\n                          _this2.set('proj', _aggregator.default.projections.get('AggregatorE'));\n                          _this2.set('model', model);\n                          _this2.set('componentName', testComponentName);\n                          _this2.set('searchForContentChange', true);\n                          _context4.next = 8;\n                          return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                            \"id\": \"bVRz/YCl\",\n                            \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n          \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                            \"meta\": {}\n                          }));\n\n                        case 8:\n\n                          assert.equal(Ember.$(_this2.element, '.object-list-view').find('tr').length, 2);\n\n                          $detailsAtributes = _this2.get('proj.attributes.details.attributes');\n                          $detailsAtributesArray = Object.keys($detailsAtributes);\n                          $component = Ember.$(_this2.element).children();\n                          $componentGroupEditToolbar = $component.children('.groupedit-toolbar');\n\n                          // Check groupedit-toolbar <div>.\n\n                          assert.strictEqual($componentGroupEditToolbar.length === 1, true, 'Component has inner groupedit-toolbar block');\n                          assert.strictEqual($componentGroupEditToolbar.prop('tagName'), 'DIV', 'Component\\'s inner component block is a <div>');\n                          assert.strictEqual($componentGroupEditToolbar.hasClass('ember-view'), true, 'Component\\'s inner groupedit-toolbar block has \\'ember-view\\' css-class');\n                          assert.strictEqual($componentGroupEditToolbar.hasClass('groupedit-toolbar'), true, 'Component inner has \\'groupedit-toolbar\\' css-class');\n\n                          $componentButtons = $componentGroupEditToolbar.children('.ui.button');\n\n                          // Check button count.\n\n                          assert.strictEqual($componentButtons.length === 3, true, 'Component has inner two button blocks');\n\n                          $componentButtonAdd = Ember.$($componentButtons[0]);\n\n                          // Check buttonAdd <button>.\n\n                          assert.strictEqual($componentButtonAdd.length === 1, true, 'Component has inner button block');\n                          assert.strictEqual($componentButtonAdd.prop('tagName'), 'BUTTON', 'Component\\'s inner groupedit block is a <button>');\n                          assert.strictEqual($componentButtonAdd.hasClass('ui'), true, 'Component\\'s inner groupedit block has \\'ui\\' css-class');\n                          assert.strictEqual($componentButtonAdd.hasClass('button'), true, 'Component\\'s inner groupedit block has \\'button\\' css-class');\n\n                          $componentButtonAddIcon = $componentButtonAdd.children('i');\n\n                          // Check buttonAddIcon <i>.\n\n                          assert.strictEqual($componentButtonAddIcon.length === 1, true, 'Component has inner button block');\n                          assert.strictEqual($componentButtonAddIcon.prop('tagName'), 'I', 'Component\\'s inner groupedit block is a <i>');\n                          assert.strictEqual($componentButtonAddIcon.hasClass('plus'), true, 'Component\\'s inner groupedit block has \\'plus\\' css-class');\n                          assert.strictEqual($componentButtonAddIcon.hasClass('icon'), true, 'Component\\'s inner groupedit block has \\'icon\\' css-class');\n\n                          $componentButtonRemove = Ember.$($componentButtons[1]);\n\n                          // Check buttonRemove <button>.\n\n                          assert.strictEqual($componentButtonRemove.length === 1, true, 'Component has inner button block');\n                          assert.strictEqual($componentButtonRemove.prop('tagName'), 'BUTTON', 'Component\\'s inner groupedit block is a <button>');\n                          assert.strictEqual($componentButtonRemove.hasClass('ui'), true, 'Component\\'s inner groupedit block has \\'ui\\' css-class');\n                          assert.strictEqual($componentButtonRemove.hasClass('button'), true, 'Component\\'s inner groupedit block has \\'button\\' css-class');\n                          assert.strictEqual($componentButtonRemove.hasClass('disabled'), true, 'Component\\'s inner groupedit block has \\'disabled\\' css-class');\n\n                          $componentButtonDefauldSetting = Ember.$($componentButtons[2]);\n\n                          // Check buttonRemove <button>.\n\n                          assert.strictEqual($componentButtonDefauldSetting.length === 1, true, 'Component has inner button block');\n                          assert.strictEqual($componentButtonDefauldSetting.prop('tagName'), 'BUTTON', 'Component\\'s inner groupedit block is a <button>');\n                          assert.strictEqual($componentButtonDefauldSetting.hasClass('ui'), true, 'Component\\'s inner groupedit block has \\'ui\\' css-class');\n                          assert.strictEqual($componentButtonDefauldSetting.hasClass('button'), true, 'Component\\'s inner groupedit block has \\'button\\' css-class');\n\n                          $componentButtonRemoveIcon = $componentButtonRemove.children('i');\n\n                          // Check componentButtonRemove <i>.\n\n                          assert.strictEqual($componentButtonRemoveIcon.length === 1, true, 'Component has inner button block');\n                          assert.strictEqual($componentButtonRemoveIcon.prop('tagName'), 'I', 'Component\\'s inner groupedit block is a <i>');\n                          assert.strictEqual($componentButtonRemoveIcon.hasClass('minus'), true, 'Component\\'s inner groupedit block has \\'minus\\' css-class');\n                          assert.strictEqual($componentButtonRemoveIcon.hasClass('icon'), true, 'Component\\'s inner groupedit block has \\'icon\\' css-class');\n\n                          $componentListViewContainer = $component.children('.object-list-view-container');\n\n                          // Check list-view-container <div>.\n\n                          assert.strictEqual($componentListViewContainer.length === 1, true, 'Component has inner list-view-container block');\n                          assert.strictEqual($componentListViewContainer.prop('tagName'), 'DIV', 'Component\\'s inner component block is a <div>');\n                          assert.strictEqual($componentListViewContainer.hasClass('ember-view'), true, 'Component\\'s inner list-view-container block has \\'ember-view\\' css-class');\n                          assert.strictEqual($componentListViewContainer.hasClass('object-list-view-container'), true, 'Component has \\'object-list-view-container\\' css-class');\n\n                          $componentJCLRgrips = $componentListViewContainer.children('.JCLRgrips');\n\n                          // Check JCLRgrips <div>.\n\n                          assert.strictEqual($componentJCLRgrips.length === 1, true, 'Component has inner JCLRgrips blocks');\n                          assert.strictEqual($componentJCLRgrips.prop('tagName'), 'DIV', 'Component\\'s inner component block is a <div>');\n                          assert.strictEqual($componentJCLRgrips.hasClass('JCLRgrips'), true, 'Component\\'s inner list-view-container block has \\'JCLRgrios\\' css-class');\n\n                          $componentJCLRgrip = $componentJCLRgrips.children('.JCLRgrip');\n\n                          // Check JCLRgrip <div>.\n\n                          assert.strictEqual($componentJCLRgrip.length === 7, true, 'Component has inner JCLRgrip blocks');\n\n                          $componentJCLRgripFirst = Ember.$($componentJCLRgrip[0]);\n\n                          // Check first JCLRgrip <div>.\n\n                          assert.strictEqual($componentJCLRgripFirst.prop('tagName'), 'DIV', 'Component\\'s inner component block is a <div>');\n                          assert.strictEqual($componentJCLRgripFirst.hasClass('JCLRgrip'), true, 'Component\\'s inner list-view-container block has \\'JCLRgrios\\' css-class');\n\n                          $componentJCLRgripLast = Ember.$($componentJCLRgrip[6]);\n\n                          // Check last JCLRgrip <div>.\n\n                          assert.strictEqual($componentJCLRgripLast.length === 1, true, 'Component has inner JCLRgrips blocks');\n                          assert.strictEqual($componentJCLRgripLast.prop('tagName'), 'DIV', 'Component\\'s inner component block is a <div>');\n                          assert.strictEqual($componentJCLRgripLast.hasClass('JCLRgrip'), true, 'Component\\'s inner list-view-container block has \\'JCLRgrios\\' css-class');\n                          assert.strictEqual($componentJCLRgripLast.hasClass('JCLRLastGrip'), true, 'Component\\'s inner list-view-container block has \\'JCLRLastGrip\\' css-class');\n\n                          $componentObjectListView = $componentListViewContainer.children('.object-list-view');\n\n                          // Check object-list-view <div>.\n\n                          assert.strictEqual($componentObjectListView.length === 1, true, 'Component has inner object-list-view blocks');\n                          assert.strictEqual($componentObjectListView.prop('tagName'), 'TABLE', 'Component\\'s inner component block is a <table>');\n                          assert.strictEqual($componentObjectListView.hasClass('object-list-view'), true, 'Component has \\'object-list-view\\' css-class');\n                          assert.strictEqual($componentObjectListView.hasClass('ui'), true, 'Component\\'s inner object-list-view block has \\'ui\\' css-class');\n                          assert.strictEqual($componentObjectListView.hasClass('unstackable'), true, 'Component\\'s inner object-list-view block has \\'unstackable\\' css-class');\n                          assert.strictEqual($componentObjectListView.hasClass('celled'), true, 'Component\\'s inner object-list-view block has \\'celled\\' css-class');\n                          assert.strictEqual($componentObjectListView.hasClass('striped'), false, 'Component\\'s inner object-list-view block has \\'striped\\' css-class');\n                          assert.strictEqual($componentObjectListView.hasClass('table'), true, 'Component\\'s inner object-list-view block has \\'table\\' css-class');\n                          assert.strictEqual($componentObjectListView.hasClass('fixed'), true, 'Component\\'s inner object-list-view block has \\'fixed\\' css-class');\n                          assert.strictEqual($componentObjectListView.hasClass('JColResizer'), true, 'Component\\'s inner object-list-view block has \\'JColResizer\\' css-class');\n                          assert.strictEqual($componentObjectListView.hasClass('rowClickable'), false, 'Component\\'s inner object-list-view block has \\'striped\\' css-class');\n\n                          $componentObjectListViewThead = $componentObjectListView.children('thead');\n                          $componentObjectListViewTr = $componentObjectListViewThead.children('tr');\n                          $componentObjectListViewThFirstCell = $componentObjectListViewTr.children('.object-list-view-operations');\n\n                          // Check object-list-view <th>.\n\n                          assert.strictEqual($componentObjectListViewThFirstCell.length === 1, true, 'Component has inner object-list-view-operations blocks');\n                          assert.strictEqual($componentObjectListViewThFirstCell.prop('tagName'), 'TH', 'Component\\'s inner component block is a <th>');\n                          assert.strictEqual($componentObjectListViewThFirstCell.hasClass('object-list-view-operations'), true, 'Component has \\'object-list-view-operations\\' css-class');\n                          assert.strictEqual($componentObjectListViewThFirstCell.hasClass('collapsing'), true, 'Component has \\'collapsing\\' css-class');\n\n                          $componentObjectListViewThs = $componentObjectListViewTr.children('.dt-head-left');\n\n                          // Check object-list-view <th>.\n\n                          assert.strictEqual($componentObjectListViewThs.length === 6, true, 'Component has inner object-list-view-operations blocks');\n\n                          $componentObjectListViewTh = Ember.$($componentObjectListViewThs[0]);\n\n                          // Check object-list-view <th>.\n\n                          assert.strictEqual($componentObjectListViewTh.length === 1, true, 'Component has inner object-list-view-operations blocks');\n                          assert.strictEqual($componentObjectListViewTh.prop('tagName'), 'TH', 'Component\\'s inner component block is a <th>');\n                          assert.strictEqual($componentObjectListViewTh.hasClass('dt-head-left'), true, 'Component has \\'object-list-view-operations\\' css-class');\n                          assert.strictEqual($componentObjectListViewTh.hasClass('me'), true, 'Component\\'s inner object-list-view-operations has \\'collapsing\\' css-class');\n                          assert.strictEqual($componentObjectListViewTh.hasClass('class'), true, 'Component\\'s inner object-list-view-operations has \\'collapsing\\' css-class');\n\n                          for (index = 0; index < 6; ++index) {\n                            assert.strictEqual($componentObjectListViewThs[index].innerText.trim().toLowerCase(), $detailsAtributesArray[index], 'title ok');\n                          }\n\n                          $componentObjectListViewThDiv = $componentObjectListViewTh.children('div');\n                          $componentObjectListViewThDivSpan = $componentObjectListViewThDiv.children('span');\n\n                          // Check object-list-view <span>.\n\n                          assert.strictEqual($componentObjectListViewThDivSpan.length === 1, true, 'Component has inner <span> blocks');\n\n                          $componentObjectListViewBody = $componentObjectListView.children('tbody');\n\n                          $componentObjectListViewTr = $componentObjectListViewBody.children('tr');\n                          $componentObjectListViewTd = $componentObjectListViewTr.children('td');\n                          $componentObjectListViewTdInner = $componentObjectListViewTd[0];\n\n                          // Check object-list-view <td>.\n\n                          assert.strictEqual($componentObjectListViewTd.length === 1, true, 'Component has inner object-list-view-operations blocks');\n                          assert.strictEqual($componentObjectListViewTd.prop('tagName'), 'TD', 'Component\\'s inner component block is a <th>');\n                          assert.strictEqual($componentObjectListViewTdInner.innerText, 'Нет данных', 'Component\\'s inner component block is a <th>');\n\n                        case 102:\n                        case 'end':\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4, _this2);\n                })));\n\n              case 3:\n              case 'end':\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('ember-grupedit placeholder test', function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        var _this3 = this;\n\n        var store;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                store = this.owner.lookup('service:store');\n\n\n                Ember.run(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n                  var model, testComponentName, tempText, $componentObjectListView, $componentObjectListViewBody;\n                  return regeneratorRuntime.wrap(function _callee6$(_context6) {\n                    while (1) {\n                      switch (_context6.prev = _context6.next) {\n                        case 0:\n                          model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n                          testComponentName = 'my-test-component-to-count-rerender';\n\n\n                          _this3.set('proj', _aggregator.default.projections.get('AggregatorE'));\n                          _this3.set('model', model);\n                          _this3.set('componentName', testComponentName);\n\n                          tempText = 'Temp text.';\n\n\n                          _this3.set('placeholder', tempText);\n                          _context6.next = 9;\n                          return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                            \"id\": \"1e9e0md9\",\n                            \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n          \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"placeholder\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"placeholder\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                            \"meta\": {}\n                          }));\n\n                        case 9:\n                          $componentObjectListView = Ember.$('.object-list-view');\n                          $componentObjectListViewBody = $componentObjectListView.children('tbody');\n\n\n                          assert.strictEqual($componentObjectListViewBody.text().trim(), tempText, 'Component has placeholder: ' + tempText);\n\n                        case 12:\n                        case 'end':\n                          return _context6.stop();\n                      }\n                    }\n                  }, _callee6, _this3);\n                })));\n\n              case 2:\n              case 'end':\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x5) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('ember-grupedit striped test', function (assert) {\n      var _this4 = this;\n\n      var store = this.owner.lookup('service:store');\n\n      Ember.run(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {\n        var model, testComponentName, $componentObjectListView;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n                testComponentName = 'my-test-component-to-count-rerender';\n\n\n                _this4.set('proj', _aggregator.default.projections.get('AggregatorE'));\n                _this4.set('model', model);\n                _this4.set('componentName', testComponentName);\n                _this4.set('searchForContentChange', true);\n                _context8.next = 8;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"AcclleE3\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n          \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\",\\\"tableStriped\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]],false]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 8:\n                $componentObjectListView = Ember.$('.object-list-view');\n\n                // Check object-list-view <div>.\n\n                assert.strictEqual($componentObjectListView.hasClass('striped'), false, 'Component\\'s inner object-list-view block has \\'striped\\' css-class');\n\n              case 10:\n              case 'end':\n                return _context8.stop();\n            }\n          }\n        }, _callee8, _this4);\n      })));\n    });\n\n    (0, _qunit.test)('ember-grupedit off defaultSettingsButton, createNewButton and deleteButton test', function (assert) {\n      var _this5 = this;\n\n      var store = this.owner.lookup('service:store');\n\n      Ember.run(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n        var model, testComponentName, $component, $componentButtons;\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n                testComponentName = 'my-test-component-to-count-rerender';\n\n\n                _this5.set('proj', _aggregator.default.projections.get('AggregatorE'));\n                _this5.set('model', model);\n                _this5.set('componentName', testComponentName);\n                _this5.set('searchForContentChange', true);\n                _context9.next = 8;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"69IvK+4F\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n          \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\",\\\"createNewButton\\\",\\\"deleteButton\\\",\\\"showCheckBoxInRow\\\",\\\"showAsteriskInRow\\\",\\\"defaultSettingsButton\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]],false,false,false,false,false]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 8:\n                $component = Ember.$(_this5.element).children();\n                $componentButtons = Ember.$('.ui.button', $component);\n\n\n                assert.strictEqual($componentButtons.length === 0, true, 'Component hasn\\'t inner two button blocks');\n\n              case 11:\n              case 'end':\n                return _context9.stop();\n            }\n          }\n        }, _callee9, _this5);\n      })));\n    });\n\n    (0, _qunit.test)('ember-grupedit allowColumnResize test', function (assert) {\n      var _this6 = this;\n\n      var store = this.owner.lookup('service:store');\n\n      Ember.run(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {\n        var model, testComponentName, $componentJCLRgrips, $componentObjectListView;\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n                testComponentName = 'my-test-component-to-count-rerender';\n\n\n                _this6.set('proj', _aggregator.default.projections.get('AggregatorE'));\n                _this6.set('model', model);\n                _this6.set('componentName', testComponentName);\n                _this6.set('searchForContentChange', true);\n                _context10.next = 8;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"pbY0rCnJ\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n          \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\",\\\"showEditMenuItemInRow\\\",\\\"allowColumnResize\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]],true,false]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 8:\n                $componentJCLRgrips = Ember.$(Ember.$('.JCLRgrips')[0]);\n\n                // Check JCLRgrips <div>.\n\n                assert.strictEqual($componentJCLRgrips.length === 0, true, 'Component hasn\\'t inner JCLRgrips blocks');\n\n                $componentObjectListView = Ember.$(Ember.$('.object-list-view')[0]);\n\n                // Check object-list-view <div>.\n\n                assert.strictEqual($componentObjectListView.hasClass('JColResizer'), false, 'Component\\'s inner object-list-view block hasn\\'t \\'JColResizer\\' css-class');\n\n              case 12:\n              case 'end':\n                return _context10.stop();\n            }\n          }\n        }, _callee10, _this6);\n      })));\n    });\n\n    (0, _qunit.test)('ember-grupedit showAsteriskInRow test', function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        var _this7 = this;\n\n        var store, $componentButtonAdd, $componentObjectListViewFirstCell;\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(1);\n                store = this.owner.lookup('service:store');\n\n\n                Ember.run(function () {\n                  var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n                  var testComponentName = 'my-test-component-to-count-rerender';\n\n                  _this7.set('proj', _aggregator.default.projections.get('AggregatorE'));\n                  _this7.set('model', model);\n                  _this7.set('componentName', testComponentName);\n                  _this7.set('searchForContentChange', true);\n                });\n\n                _context11.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Z9XTQZNp\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\",\\\"showAsteriskInRow\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]],false]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Add record.\n                $componentButtonAdd = this.element.querySelector('.ui.button');\n                _context11.next = 8;\n                return (0, _testHelpers.click)($componentButtonAdd);\n\n              case 8:\n                $componentObjectListViewFirstCell = this.element.querySelectorAll('.asterisk');\n\n                // Check object-list-view <i>.\n\n                assert.strictEqual($componentObjectListViewFirstCell.length === 0, true, 'Component has small red asterisk blocks');\n\n              case 10:\n              case 'end':\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x6) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('ember-grupedit showCheckBoxInRow test', function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        var _this8 = this;\n\n        var store, $componentButtonAdd, $flexberryCheckbox, $componentObjectListViewEditMenu;\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert.expect(2);\n                store = this.owner.lookup('service:store');\n\n\n                Ember.run(function () {\n                  var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n                  var testComponentName = 'my-test-component-to-count-rerender';\n\n                  _this8.set('proj', _aggregator.default.projections.get('AggregatorE'));\n                  _this8.set('model', model);\n                  _this8.set('componentName', testComponentName);\n                  _this8.set('searchForContentChange', true);\n                });\n\n                _context12.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"KKlXRzM7\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\",\\\"showCheckBoxInRow\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]],false]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Add record.\n                $componentButtonAdd = this.element.querySelector('.ui.button');\n                _context12.next = 8;\n                return (0, _testHelpers.click)($componentButtonAdd);\n\n              case 8:\n                $flexberryCheckbox = this.element.querySelectorAll('.flexberry-checkbox');\n\n\n                assert.strictEqual($flexberryCheckbox.length === 0, true, 'Component hasn\\'t flexberry-checkbox in first cell');\n\n                $componentObjectListViewEditMenu = this.element.querySelectorAll('.button.right.pointing');\n\n\n                assert.strictEqual($componentObjectListViewEditMenu.length === 0, true, 'Component hasn\\'t edit menu in last cell');\n\n              case 12:\n              case 'end':\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x7) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('it renders and checks the delete button', function () {\n      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {\n        var _this9 = this;\n\n        var store, $componentButtonAdd, $componentObjectListViewFirstCell, $minusButton;\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                assert.expect(1);\n                store = this.owner.lookup('service:store');\n\n\n                Ember.run(function () {\n                  var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n                  var testComponentName = 'my-test-component-to-count-rerender';\n\n                  _this9.set('proj', _aggregator.default.projections.get('AggregatorE'));\n                  _this9.set('model', model);\n                  _this9.set('componentName', testComponentName);\n                  _this9.set('searchForContentChange', true);\n                });\n\n                _context13.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y9WWHMdO\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\",\\\"showDeleteButtonInRow\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]],true]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                $componentButtonAdd = this.element.querySelector('.ui.button');\n                _context13.next = 8;\n                return (0, _testHelpers.click)($componentButtonAdd);\n\n              case 8:\n                $componentObjectListViewFirstCell = this.element.querySelectorAll('.object-list-view-helper-column');\n                $minusButton = $componentObjectListViewFirstCell[0].querySelectorAll('.minus');\n\n\n                assert.strictEqual($minusButton.length === 1, true, 'Component has delete button in first cell');\n\n              case 11:\n              case 'end':\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      return function (_x8) {\n        return _ref14.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('ember-grupedit showEditMenuItemInRow test', function () {\n      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {\n        var _this10 = this;\n\n        var store, $componentButtonAdd, $editMenuButton, $editMenuItem, $editMenuItemIcon, $editMenuItemSpan;\n        return regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                assert.expect(6);\n                store = this.owner.lookup('service:store');\n\n\n                Ember.run(function () {\n                  var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n                  var testComponentName = 'my-test-component-to-count-rerender';\n\n                  _this10.set('proj', _aggregator.default.projections.get('AggregatorE'));\n                  _this10.set('model', model);\n                  _this10.set('componentName', testComponentName);\n                  _this10.set('searchForContentChange', true);\n                });\n\n                _context14.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"seAsRGdp\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\",\\\"showEditMenuItemInRow\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]],true]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                $componentButtonAdd = this.element.querySelector('.ui.button');\n                _context14.next = 8;\n                return (0, _testHelpers.click)($componentButtonAdd);\n\n              case 8:\n                $editMenuButton = this.element.querySelector('.button.right.pointing');\n                $editMenuItem = $editMenuButton.querySelectorAll('.item');\n\n\n                assert.strictEqual($editMenuItem.length === 1, true, 'Component has edit menu item in last cell');\n\n                $editMenuItemIcon = $editMenuItem[0].querySelector('.edit');\n\n\n                assert.strictEqual($editMenuItemIcon !== null, true, 'Component has only edit menu item in last cell');\n                assert.strictEqual($editMenuItemIcon.tagName, 'I', 'Component\\'s inner component block is a <i>');\n                assert.strictEqual($editMenuItemIcon.classList.contains('edit'), true, 'Component\\'s inner object-list-view has \\'edit\\' css-class');\n                assert.strictEqual($editMenuItemIcon.classList.contains('icon'), true, 'Component\\'s inner object-list-view has \\'icon\\' css-class');\n\n                $editMenuItemSpan = $editMenuItem[0].querySelector('span');\n\n                assert.strictEqual($editMenuItemSpan.textContent.trim(), 'Редактировать запись', 'Component has edit menu item in last cell');\n\n              case 18:\n              case 'end':\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      return function (_x9) {\n        return _ref15.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('ember-grupedit showDeleteMenuItemInRow test', function () {\n      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {\n        var _this11 = this;\n\n        var store, $componentButtonAdd, $editMenuButton, $editMenuItem, $editMenuItemIcon, $editMenuItemSpan;\n        return regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                assert.expect(6);\n                store = this.owner.lookup('service:store');\n\n\n                Ember.run(function () {\n                  var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n                  var testComponentName = 'my-test-component-to-count-rerender';\n\n                  _this11.set('proj', _aggregator.default.projections.get('AggregatorE'));\n                  _this11.set('model', model);\n                  _this11.set('componentName', testComponentName);\n                  _this11.set('searchForContentChange', true);\n                });\n\n                _context15.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"GHq3vlJI\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\",\\\"showDeleteMenuItemInRow\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]],true]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                $componentButtonAdd = this.element.querySelector('.ui.button');\n                _context15.next = 8;\n                return (0, _testHelpers.click)($componentButtonAdd);\n\n              case 8:\n                $editMenuButton = this.element.querySelector('.button.right.pointing');\n                $editMenuItem = $editMenuButton.querySelectorAll('.item');\n\n\n                assert.strictEqual($editMenuItem.length === 1, true, 'Component has delete menu item in last cell');\n\n                $editMenuItemIcon = $editMenuItem[0].querySelector('.trash');\n\n\n                assert.strictEqual($editMenuItemIcon !== null, true, 'Component has only edit menu item in last cell');\n                assert.strictEqual($editMenuItemIcon.tagName, 'I', 'Component\\'s inner component block is a <i>');\n                assert.strictEqual($editMenuItemIcon.classList.contains('trash'), true, 'Component\\'s inner object-list-view has \\'trash\\' css-class');\n                assert.strictEqual($editMenuItemIcon.classList.contains('icon'), true, 'Component\\'s inner object-list-view has \\'icon\\' css-class');\n\n                $editMenuItemSpan = $editMenuItem[0].querySelector('span');\n\n                assert.strictEqual($editMenuItemSpan.textContent.trim(), 'Удалить запись', 'Component has delete menu item in last cell');\n\n              case 18:\n              case 'end':\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      return function (_x10) {\n        return _ref16.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('ember-grupedit showEditMenuItemInRow and showDeleteMenuItemInRow test', function () {\n      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {\n        var _this12 = this;\n\n        var store, $componentButtonAdd, $editMenuButton, $editMenuItem, $editMenuItemIcon;\n        return regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                assert.expect(11);\n                store = this.owner.lookup('service:store');\n\n\n                Ember.run(function () {\n                  var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n                  var testComponentName = 'my-test-component-to-count-rerender';\n\n                  _this12.set('proj', _aggregator.default.projections.get('AggregatorE'));\n                  _this12.set('model', model);\n                  _this12.set('componentName', testComponentName);\n                  _this12.set('searchForContentChange', true);\n                });\n                _context16.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"6/8KAsTI\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\",\\\"showEditMenuItemInRow\\\",\\\"showDeleteMenuItemInRow\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]],true,true]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                $componentButtonAdd = this.element.querySelector('.ui.button');\n                _context16.next = 8;\n                return (0, _testHelpers.click)($componentButtonAdd);\n\n              case 8:\n                $editMenuButton = this.element.querySelectorAll('.button.right.pointing');\n                $editMenuItem = this.element.querySelectorAll('.item', $editMenuButton);\n\n\n                assert.strictEqual($editMenuItem.length === 2, true, 'Component has edit menu and delete menu item in last cell');\n\n                $editMenuItemIcon = $editMenuItem[0].querySelector('.edit');\n\n                assert.ok($editMenuItemIcon, 'Component has edit menu item in last cell');\n                assert.strictEqual($editMenuItemIcon.tagName, 'I', 'Component\\'s inner component block is a <i>');\n                assert.ok($editMenuItemIcon.classList.contains('edit'), 'Component\\'s inner object-list-view has \\'edit\\' css-class');\n                assert.ok($editMenuItemIcon.classList.contains('icon'), 'Component\\'s inner object-list-view has \\'icon\\' css-class');\n\n                $editMenuItemIcon = $editMenuItem[1].querySelector('.trash');\n                assert.ok($editMenuItemIcon, 'Component has delete menu item in last cell');\n                assert.strictEqual($editMenuItemIcon.tagName, 'I', 'Component\\'s inner component block is a <i>');\n                assert.ok($editMenuItemIcon.classList.contains('trash'), 'Component\\'s inner object-list-view has \\'trash\\' css-class');\n                assert.ok($editMenuItemIcon.classList.contains('icon'), 'Component\\'s inner object-list-view has \\'icon\\' css-class');\n\n                assert.strictEqual($editMenuItem[0].querySelector('span').textContent.trim(), 'Редактировать запись', 'Component has edit menu item in last cell');\n                assert.strictEqual($editMenuItem[1].querySelector('span').textContent.trim(), 'Удалить запись', 'Component has delete menu item in last cell');\n\n              case 23:\n              case 'end':\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      return function (_x11) {\n        return _ref17.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('ember-grupedit rowClickable test', function () {\n      var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {\n        var _this13 = this;\n\n        var store, $componentObjectListView;\n        return regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                store = this.owner.lookup('service:store');\n\n\n                Ember.run(function () {\n                  var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n                  var testComponentName = 'my-test-component-to-count-rerender';\n\n                  _this13.set('proj', _aggregator.default.projections.get('AggregatorE'));\n                  _this13.set('model', model);\n                  _this13.set('componentName', testComponentName);\n                  _this13.set('searchForContentChange', true);\n                });\n\n                _context17.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"G/bwSCG0\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\",\\\"rowClickable\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]],true]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                $componentObjectListView = Ember.$('.object-list-view');\n\n                // Check object-list-view <div>.\n\n                assert.strictEqual($componentObjectListView.hasClass('selectable'), true, 'Component\\'s inner object-list-view block has \\'selectable\\' css-class');\n\n              case 6:\n              case 'end':\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      return function (_x12) {\n        return _ref18.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('ember-grupedit buttonClass test', function () {\n      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {\n        var _this14 = this;\n\n        var store, tempButtonClass, $componentButtonAdd;\n        return regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                store = this.owner.lookup('service:store');\n                tempButtonClass = 'temp button class';\n\n\n                Ember.run(function () {\n                  var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n                  var testComponentName = 'my-test-component-to-count-rerender';\n\n                  _this14.set('proj', _aggregator.default.projections.get('AggregatorE'));\n                  _this14.set('model', model);\n                  _this14.set('componentName', testComponentName);\n                  _this14.set('buttonClass', tempButtonClass);\n                });\n\n                _context18.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"htLUA7Ap\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"rowClickable\\\",\\\"buttonClass\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],true,[22,[\\\"buttonClass\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                $componentButtonAdd = Ember.$(Ember.$('.ui.button')[0]);\n\n\n                assert.strictEqual($componentButtonAdd.hasClass(tempButtonClass), true, 'Button has class ' + tempButtonClass);\n\n              case 7:\n              case 'end':\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      return function (_x13) {\n        return _ref19.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('ember-grupedit customTableClass test', function () {\n      var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(assert) {\n        var _this15 = this;\n\n        var store, myCustomTableClass, $componentObjectListView;\n        return regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                store = this.owner.lookup('service:store');\n                myCustomTableClass = 'tempcustomTableClass';\n\n\n                Ember.run(function () {\n                  var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n                  var testComponentName = 'my-test-component-to-count-rerender';\n\n                  _this15.set('proj', _aggregator.default.projections.get('AggregatorE'));\n                  _this15.set('model', model);\n                  _this15.set('componentName', testComponentName);\n                  _this15.set('customTableClass', myCustomTableClass);\n                });\n\n                _context19.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"i9Orxd/y\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"rowClickable\\\",\\\"customTableClass\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],true,[22,[\\\"customTableClass\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                $componentObjectListView = Ember.$('.object-list-view');\n\n\n                assert.strictEqual($componentObjectListView.hasClass(myCustomTableClass), true, 'Table has class ' + myCustomTableClass);\n\n              case 7:\n              case 'end':\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      return function (_x14) {\n        return _ref20.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('ember-grupedit orderable test', function () {\n      var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(assert) {\n        var _this16 = this;\n\n        var store, $componentObjectListView, $componentObjectListViewTh, $componentOlvFirstHead, $componentOlvFirstDiv, $orderIcon;\n        return regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                assert.expect(1);\n                store = this.owner.lookup('service:store');\n\n\n                Ember.run(function () {\n                  var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n                  var testComponentName = 'my-test-component-to-count-rerender';\n\n                  _this16.set('proj', _aggregator.default.projections.get('AggregatorE'));\n                  _this16.set('model', model);\n                  _this16.set('componentName', testComponentName);\n                  _this16.set('orderable', true);\n                });\n\n                _context20.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"HoxVG+Rh\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"orderable\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"orderable\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                $componentObjectListView = this.element.querySelector('.object-list-view');\n                $componentObjectListViewTh = $componentObjectListView.querySelectorAll('thead tr th');\n                $componentOlvFirstHead = $componentObjectListViewTh[1];\n                _context20.next = 10;\n                return (0, _testHelpers.click)($componentOlvFirstHead);\n\n              case 10:\n                $componentOlvFirstDiv = $componentOlvFirstHead.querySelector('div');\n                $orderIcon = $componentOlvFirstDiv.querySelector('div');\n\n\n                assert.strictEqual(!!$orderIcon, true, 'Table has order');\n\n              case 13:\n              case 'end':\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      return function (_x15) {\n        return _ref21.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('ember-grupedit menuInRowAdditionalItems without standart element test', function () {\n      var _ref22 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(assert) {\n        var _this17 = this;\n\n        var store, $addButton, componentOLVMenu, componentOLVMenuItem, componentOLVMenuItemIcon;\n        return regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                assert.expect(4);\n                store = this.owner.lookup('service:store');\n\n\n                Ember.run(function () {\n                  var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n                  var testComponentName = 'my-test-component-to-count-rerender';\n                  var tempMenuInRowAdditionalItems = [{\n                    icon: 'remove icon',\n                    title: 'Temp menu item',\n                    actionName: 'tempAction'\n                  }];\n\n                  _this17.set('proj', _aggregator.default.projections.get('AggregatorE'));\n                  _this17.set('model', model);\n                  _this17.set('componentName', testComponentName);\n                  _this17.set('menuInRowAdditionalItems', tempMenuInRowAdditionalItems);\n                });\n\n                _context21.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"M3K8nyz0\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"menuInRowAdditionalItems\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"menuInRowAdditionalItems\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Add record.\n                $addButton = this.element.querySelector('.ui.button');\n                _context21.next = 8;\n                return (0, _testHelpers.click)($addButton);\n\n              case 8:\n                componentOLVMenu = this.element.querySelector('.button.right');\n                componentOLVMenuItem = componentOLVMenu.querySelectorAll('.item');\n\n\n                assert.strictEqual(componentOLVMenuItem.length === 1, true, 'Component OLVMenuItem has only adding item');\n                assert.strictEqual(componentOLVMenuItem[0].textContent.trim(), 'Temp menu item', 'Component OLVMenuItem text is \\'Temp menu item\\'');\n\n                componentOLVMenuItemIcon = componentOLVMenuItem[0].querySelector('.icon');\n\n\n                assert.strictEqual(componentOLVMenuItemIcon.classList.contains('icon'), true, 'Component OLVMenuItemIcon has class icon');\n                assert.strictEqual(componentOLVMenuItemIcon.classList.contains('remove'), true, 'Component OLVMenuItemIcon has class remove');\n\n              case 15:\n              case 'end':\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      return function (_x16) {\n        return _ref22.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('ember-grupedit menuInRowAdditionalItems with standart element test', function () {\n      var _ref23 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(assert) {\n        var _this18 = this;\n\n        var store, $addButton, componentOLVMenu, componentOLVMenuItem;\n        return regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                store = this.owner.lookup('service:store');\n\n\n                Ember.run(function () {\n                  var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n                  var testComponentName = 'my-test-component-to-count-rerender';\n                  var tempMenuInRowAdditionalItems = [{\n                    icon: 'remove icon',\n                    title: 'Temp menu item',\n                    actionName: 'tempAction'\n                  }];\n\n                  _this18.set('proj', _aggregator.default.projections.get('AggregatorE'));\n                  _this18.set('model', model);\n                  _this18.set('componentName', testComponentName);\n                  _this18.set('menuInRowAdditionalItems', tempMenuInRowAdditionalItems);\n                });\n\n                _context22.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"0gq0ZWUa\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"menuInRowAdditionalItems\\\",\\\"showEditMenuItemInRow\\\",\\\"showDeleteMenuItemInRow\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"menuInRowAdditionalItems\\\"]],true,true]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                $addButton = this.element.querySelector('.ui.button');\n                _context22.next = 7;\n                return (0, _testHelpers.click)($addButton);\n\n              case 7:\n                componentOLVMenu = this.element.querySelector('.button.right');\n                componentOLVMenuItem = componentOLVMenu.querySelectorAll('.item');\n\n\n                assert.strictEqual(componentOLVMenuItem.length === 3, true, 'Component OLVMenuItem has standart and adding items');\n\n              case 10:\n              case 'end':\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      return function (_x17) {\n        return _ref23.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('ember-grupedit model projection test', function () {\n      var _ref24 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(assert) {\n        var _this19 = this;\n\n        var store, componentOLV, componentOLVThead;\n        return regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                store = this.owner.lookup('service:store');\n\n\n                Ember.run(function () {\n                  var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n                  var testComponentName = 'my-test-component-to-count-rerender';\n\n                  _this19.set('proj', _aggregator.default.projections.get('ConfigurateRowView'));\n                  _this19.set('model', model);\n                  _this19.set('componentName', testComponentName);\n                });\n\n                _context23.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"os+LRmZK\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                componentOLV = Ember.$('.object-list-view');\n                componentOLVThead = componentOLV.children('thead').children('tr').children('th');\n\n\n                assert.strictEqual(componentOLVThead.length === 3, true, 'Component has \\'ConfigurateRowView\\' projection');\n\n              case 7:\n              case 'end':\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      return function (_x18) {\n        return _ref24.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('ember-grupedit main model projection test', function () {\n      var _ref25 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24(assert) {\n        var _this20 = this;\n\n        var store, valueMainModelProjection, $componentObjectListView, $componentObjectListViewTh, $componentOlvFirstHead;\n        return regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                store = this.owner.lookup('service:store');\n                valueMainModelProjection = void 0;\n\n                Ember.run(function () {\n                  var model = store.createRecord('ember-flexberry-dummy-suggestion');\n                  var testComponentName = 'my-test-component-to-count-rerender';\n                  valueMainModelProjection = model.get('i18n').t('models.ember-flexberry-dummy-suggestion.projections.SuggestionMainModelProjectionTest.userVotes.voteType.__caption__');\n\n                  _this20.set('proj', _emberFlexberryDummySuggestion.default.projections.get('SuggestionMainModelProjectionTest'));\n                  _this20.set('model', model);\n                  _this20.set('componentName', testComponentName);\n                });\n\n                _context24.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Fzime7cI\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"componentName\\\",\\\"content\\\",\\\"modelProjection\\\",\\\"mainModelProjection\\\"],[[22,[\\\"componentName\\\"]],[22,[\\\"model\\\",\\\"userVotes\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"userVotes\\\"]],[22,[\\\"proj\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                $componentObjectListView = Ember.$('.object-list-view');\n                $componentObjectListViewTh = $componentObjectListView.children('thead').children('tr').children('th');\n                $componentOlvFirstHead = $componentObjectListViewTh[1];\n\n\n                assert.strictEqual($componentOlvFirstHead.innerText === valueMainModelProjection.toString(), true, 'Header has text \\'Vote type\\'');\n\n              case 9:\n              case 'end':\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      return function (_x19) {\n        return _ref25.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/flexberry-lookup-test', ['qunit', '@ember/test-helpers', 'ember-qunit'], function (_qunit, _testHelpers, _emberQunit) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | flexberry-lookup', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    hooks.beforeEach(function () {\n      this.owner.lookup('service:log').set('enabled', false);\n    });\n\n    (0, _qunit.test)('component renders properly', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var $component, $lookupFluid, $lookupInput, $lookupButtonPreview, $lookupButtonChoose, $lookupButtonClear, $lookupButtonClearIcon;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(31);\n\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"aeis502A\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-lookup\\\",null,[[\\\"placeholder\\\"],[\\\"(тестовое значение)\\\"]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component, it's inner <input>.\n                $component = this.$().children();\n                $lookupFluid = $component.children('.fluid');\n                $lookupInput = $lookupFluid.children('.lookup-field');\n                $lookupButtonPreview = $lookupFluid.children('.ui-preview');\n                $lookupButtonChoose = $lookupFluid.children('.ui-change');\n                $lookupButtonClear = $lookupFluid.children('.ui-clear');\n                $lookupButtonClearIcon = $lookupButtonClear.children('.remove');\n\n                // Check wrapper <flexberry-lookup>.\n\n                assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s title block is a <div>');\n                assert.strictEqual($component.hasClass('flexberry-lookup'), true, 'Component\\'s container has \\'flexberry-lookup\\' css-class');\n                assert.strictEqual($component.hasClass('ember-view'), true, 'Component\\'s wrapper has \\'ember-view\\' css-class');\n\n                // Check wrapper <fluid>.\n                assert.strictEqual($lookupFluid.length === 1, true, 'Component has inner title block');\n                assert.strictEqual($lookupFluid.prop('tagName'), 'DIV', 'Component\\'s title block is a <div>');\n                assert.strictEqual($lookupFluid.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n                assert.strictEqual($lookupFluid.hasClass('fluid'), true, 'Component\\'s wrapper has \\'fluid\\' css-class');\n                assert.strictEqual($lookupFluid.hasClass('action'), true, 'Component\\'s wrapper has \\'action\\' css-class');\n                assert.strictEqual($lookupFluid.hasClass('input'), true, 'Component\\'s container has \\'input\\' css-class');\n\n                // Check <input>.\n                assert.strictEqual($lookupInput.length === 1, true, 'Component has inner title block');\n                assert.strictEqual($lookupInput.prop('tagName'), 'INPUT', 'Component\\'s wrapper is a <input>');\n                assert.strictEqual($lookupInput.hasClass('lookup-field'), true, 'Component\\'s title block has \\'lookup-field\\' css-class');\n                assert.strictEqual($lookupInput.hasClass('ember-view'), true, 'Component\\'s title block has \\'ember-view\\' css-class');\n                assert.strictEqual($lookupInput.hasClass('ember-text-field'), true, 'Component\\'s title block has \\'ember-text-field\\' css-class');\n                assert.equal($lookupInput.attr('placeholder'), '(тестовое значение)', 'Component\\'s container has \\'input\\' css-class');\n\n                // Check <preview button>.\n                assert.strictEqual($lookupButtonPreview.length === 0, true, 'Component has inner title block');\n\n                // Check <choose button>.\n                assert.strictEqual($lookupButtonChoose.length === 1, true, 'Component has inner title block');\n                assert.strictEqual($lookupButtonChoose.prop('tagName'), 'BUTTON', 'Component\\'s title block is a <button>');\n                assert.strictEqual($lookupButtonChoose.hasClass('ui'), true, 'Component\\'s container has \\'ui\\' css-class');\n                assert.strictEqual($lookupButtonChoose.hasClass('ui-change'), true, 'Component\\'s container has \\'ui-change\\' css-class');\n                assert.strictEqual($lookupButtonChoose.hasClass('button'), true, 'Component\\'s container has \\'button\\' css-class');\n                assert.equal($lookupButtonChoose.attr('title'), 'Выбрать');\n\n                // Check <clear button>.\n                assert.strictEqual($lookupButtonClear.length === 1, true, 'Component has inner title block');\n                assert.strictEqual($lookupButtonClear.prop('tagName'), 'BUTTON', 'Component\\'s title block is a <button>');\n                assert.strictEqual($lookupButtonClear.hasClass('ui'), true, 'Component\\'s container has \\'ui\\' css-class');\n                assert.strictEqual($lookupButtonClear.hasClass('ui-clear'), true, 'Component\\'s container has \\'ui-clear\\' css-class');\n                assert.strictEqual($lookupButtonClear.hasClass('button'), true, 'Component\\'s container has \\'button\\' css-class');\n\n                // Check <clear button icon>\n                assert.strictEqual($lookupButtonClearIcon.length === 1, true, 'Component has inner title block');\n                assert.strictEqual($lookupButtonClearIcon.prop('tagName'), 'I', 'Component\\'s title block is a <i>');\n                assert.strictEqual($lookupButtonClearIcon.hasClass('remove'), true, 'Component\\'s container has \\'remove\\' css-class');\n                assert.strictEqual($lookupButtonClearIcon.hasClass('icon'), true, 'Component\\'s container has \\'icon\\' css-class');\n\n              case 41:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('component with readonly renders properly', function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var $component, $lookupFluid, $lookupButtonChoose, $lookupButtonClear;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(2);\n\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"NhaYr0BL\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-lookup\\\",null,[[\\\"readonly\\\"],[true]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component, it's inner <input>.\n                $component = this.$().children();\n                $lookupFluid = $component.children('.fluid');\n                $lookupButtonChoose = $lookupFluid.children('.ui-change');\n                $lookupButtonClear = $lookupFluid.children('.ui-clear');\n\n                // Check <choose button>.\n\n                assert.strictEqual($lookupButtonChoose.hasClass('disabled'), true, 'Component\\'s container has \\'disabled\\' css-class');\n\n                // Check <clear button>.\n                assert.strictEqual($lookupButtonClear.hasClass('disabled'), true, 'Component\\'s container has \\'disabled\\' css-class');\n\n              case 9:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('component with choose-text and remove-text properly', function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var $component, $lookupFluid, $lookupButtonChoose, $lookupButtonClear;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(2);\n                this.set('tempTextChoose', 'TempText1');\n                this.set('tempTextRemove', 'TempText2');\n\n                _context3.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"I6I6NEqZ\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-lookup\\\",null,[[\\\"chooseText\\\",\\\"removeText\\\"],[[22,[\\\"tempTextChoose\\\"]],[22,[\\\"tempTextRemove\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                $component = this.$().children();\n                $lookupFluid = $component.children('.fluid');\n                $lookupButtonChoose = $lookupFluid.children('.ui-change');\n                $lookupButtonClear = $lookupFluid.children('.ui-clear');\n\n                // Check <choose button>.\n\n                assert.equal($lookupButtonChoose.text().trim(), 'TempText1');\n\n                // Check <clear button>.\n                assert.equal($lookupButtonClear.text().trim(), 'TempText2');\n\n              case 11:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.skip)('component mode consistency', function (assert) {\n      var _this = this;\n\n      var checkErrMsg = function checkErrMsg(err, str) {\n        var msg = Ember.isNone(err.message) ? '' : err.message;\n        return msg.includes(str);\n      };\n\n      assert.expect(3);\n\n      // Check if both 'autocomplete' and 'dropdown' flags enabled cause an error.\n      assert.throws(function () {\n        _this.render(Ember.HTMLBars.template({\n          \"id\": \"vD1UAARV\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-lookup\\\",null,[[\\\"autocomplete\\\",\\\"dropdown\\\"],[true,true]]],false]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n      }, function (err) {\n        return checkErrMsg(err, 'flags \\'autocomplete\\' and \\'dropdown\\' enabled');\n      }, 'Both \\'autocomplete\\' and \\'dropdown\\' flags enabled cause an error.');\n\n      // Check if both 'dropdown' flag enabled and the block form definition cause an error.\n      assert.throws(function () {\n        _this.render(Ember.HTMLBars.template({\n          \"id\": \"4F1JIEt3\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"flexberry-lookup\\\",null,[[\\\"dropdown\\\"],[true]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n      }, function (err) {\n        return checkErrMsg(err, 'flag \\'dropdown\\' enabled and the block form definition');\n      }, 'Both \\'dropdown\\' flag enabled and the block form definition cause an error.');\n\n      // Check if both 'autocomplete' flag enabled and the block form definition cause an error.\n      assert.throws(function () {\n        _this.render(Ember.HTMLBars.template({\n          \"id\": \"ITGiIAqK\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"flexberry-lookup\\\",null,[[\\\"autocomplete\\\"],[true]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n      }, function (err) {\n        return checkErrMsg(err, 'flag \\'autocomplete\\' enabled and the block form definition');\n      }, 'Both \\'autocomplete\\' flag enabled and the block form definition cause an error.');\n    });\n\n    (0, _qunit.test)('autocomplete doesn\\'t send data-requests in readonly mode', function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var _this2 = this;\n\n        var store, ajaxMethodHasBeenCalled, originalAjaxMethod, asyncOperationsCompleted, $component, $componentInput;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(1);\n\n                store = this.owner.lookup('service:store');\n\n                // Override store.query method.\n\n                ajaxMethodHasBeenCalled = false;\n                originalAjaxMethod = Ember.$.ajax;\n\n                Ember.$.ajax = function () {\n                  ajaxMethodHasBeenCalled = true;\n\n                  return originalAjaxMethod.apply(this, arguments);\n                };\n\n                asyncOperationsCompleted = assert.async();\n\n\n                this.set('actions.showLookupDialog', function () {});\n                this.set('actions.removeLookupValue', function () {});\n\n                _context5.next = 10;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"t6Fqi2rh\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-lookup\\\",null,[[\\\"value\\\",\\\"relatedModel\\\",\\\"relationName\\\",\\\"projection\\\",\\\"displayAttributeName\\\",\\\"title\\\",\\\"choose\\\",\\\"remove\\\",\\\"readonly\\\",\\\"autocomplete\\\"],[[22,[\\\"model\\\",\\\"parent\\\"]],[22,[\\\"model\\\"]],\\\"parent\\\",\\\"SuggestionTypeL\\\",\\\"name\\\",\\\"Parent\\\",[26,\\\"action\\\",[[21,0,[]],\\\"showLookupDialog\\\"],null],[26,\\\"action\\\",[[21,0,[]],\\\"removeLookupValue\\\"],null],true,true]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 10:\n\n                // Retrieve component.\n                $component = this.$();\n                $componentInput = Ember.$('input', $component);\n\n\n                Ember.run(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n                  var testPromise;\n                  return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          _this2.set('model', store.createRecord('ember-flexberry-dummy-suggestion-type', {\n                            name: 'TestTypeName'\n                          }));\n\n                          testPromise = new Ember.RSVP.Promise(function (resolve) {\n                            ajaxMethodHasBeenCalled = false;\n\n                            // Imitate focus on component, which can cause async data-requests.\n                            (0, _testHelpers.focus)($componentInput);\n\n                            // Wait for some time which can pass after focus, before possible async data-request will be sent.\n                            Ember.run.later(function () {\n                              resolve();\n                            }, 300);\n                          });\n                          _context4.next = 4;\n                          return testPromise;\n\n                        case 4:\n\n                          // Check that store.query hasn't been called after focus.\n                          assert.strictEqual(ajaxMethodHasBeenCalled, false, '$.ajax hasn\\'t been called after click on autocomplete lookup in readonly mode');\n\n                          // Restore original method.\n                          Ember.$.ajax = originalAjaxMethod;\n\n                          asyncOperationsCompleted();\n\n                        case 7:\n                        case 'end':\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4, _this2);\n                })));\n\n              case 13:\n              case 'end':\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('preview button renders properly', function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var _this3 = this;\n\n        var store, $component, $lookupFluid;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(11);\n\n                store = this.owner.lookup('service:store');\n                _context6.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"yfTeYiZT\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-lookup\\\",null,[[\\\"value\\\",\\\"relationName\\\",\\\"projection\\\",\\\"displayAttributeName\\\",\\\"title\\\",\\\"showPreviewButton\\\",\\\"previewFormRoute\\\"],[[22,[\\\"model\\\"]],\\\"parent\\\",\\\"SuggestionTypeL\\\",\\\"name\\\",\\\"Parent\\\",true,\\\"ember-flexberry-dummy-suggestion-type-edit\\\"]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n\n                // Retrieve component.\n                $component = this.$().children();\n                $lookupFluid = $component.children('.fluid');\n\n\n                assert.strictEqual($lookupFluid.children('.ui-preview').length === 0, true, 'Component has inner title block');\n\n                Ember.run(function () {\n                  _this3.set('model', store.createRecord('ember-flexberry-dummy-suggestion-type', {\n                    name: 'TestTypeName'\n                  }));\n\n                  var $lookupButtonPreview = $lookupFluid.children('.ui-preview');\n                  var $lookupButtonPreviewIcon = $lookupButtonPreview.children('.eye');\n\n                  assert.strictEqual($lookupButtonPreview.length === 1, true, 'Component has inner title block');\n                  assert.strictEqual($lookupButtonPreview.prop('tagName'), 'BUTTON', 'Component\\'s title block is a <button>');\n                  assert.strictEqual($lookupButtonPreview.hasClass('ui'), true, 'Component\\'s container has \\'ui\\' css-class');\n                  assert.strictEqual($lookupButtonPreview.hasClass('ui-preview'), true, 'Component\\'s container has \\'ui-preview\\' css-class');\n                  assert.strictEqual($lookupButtonPreview.hasClass('button'), true, 'Component\\'s container has \\'button\\' css-class');\n                  assert.equal($lookupButtonPreview.attr('title'), 'Просмотр');\n\n                  assert.strictEqual($lookupButtonPreviewIcon.length === 1, true, 'Component has inner title block');\n                  assert.strictEqual($lookupButtonPreviewIcon.prop('tagName'), 'I', 'Component\\'s title block is a <i>');\n                  assert.strictEqual($lookupButtonPreviewIcon.hasClass('eye'), true, 'Component\\'s container has \\'eye\\' css-class');\n                  assert.strictEqual($lookupButtonPreviewIcon.hasClass('icon'), true, 'Component\\'s container has \\'icon\\' css-class');\n                });\n\n              case 8:\n              case 'end':\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x5) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('preview button view previewButtonClass and previewText properly', function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var _this4 = this;\n\n        var store;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(3);\n\n                store = this.owner.lookup('service:store');\n\n\n                Ember.run(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n                  var $component, $lookupFluid, $lookupButtonPreview;\n                  return regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          _this4.set('model', store.createRecord('ember-flexberry-dummy-suggestion-type', {\n                            name: 'TestTypeName'\n                          }));\n\n                          _this4.set('previewButtonClass', 'previewButtonClassTest');\n                          _this4.set('previewText', 'previewTextTest');\n\n                          _context7.next = 5;\n                          return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                            \"id\": \"qXjDh8Be\",\n                            \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-lookup\\\",null,[[\\\"value\\\",\\\"relationName\\\",\\\"projection\\\",\\\"displayAttributeName\\\",\\\"title\\\",\\\"showPreviewButton\\\",\\\"previewFormRoute\\\",\\\"previewButtonClass\\\",\\\"previewText\\\"],[[22,[\\\"model\\\"]],\\\"parent\\\",\\\"SuggestionTypeL\\\",\\\"name\\\",\\\"Parent\\\",true,\\\"ember-flexberry-dummy-suggestion-type-edit\\\",[22,[\\\"previewButtonClass\\\"]],[22,[\\\"previewText\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                            \"meta\": {}\n                          }));\n\n                        case 5:\n\n                          // Retrieve component.\n                          $component = _this4.$().children();\n                          $lookupFluid = $component.children('.fluid');\n                          $lookupButtonPreview = $lookupFluid.children('.ui-preview');\n\n\n                          assert.strictEqual($lookupButtonPreview.length === 1, true, 'Component has inner title block');\n                          assert.strictEqual($lookupButtonPreview.hasClass('previewButtonClassTest'), true, 'Component\\'s container has \\'previewButtonClassTest\\' css-class');\n                          assert.equal($lookupButtonPreview.text().trim(), 'previewTextTest');\n\n                        case 11:\n                        case 'end':\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7, _this4);\n                })));\n\n              case 3:\n              case 'end':\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x6) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('preview with readonly renders properly', function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var _this5 = this;\n\n        var store;\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(1);\n\n                store = this.owner.lookup('service:store');\n\n\n                Ember.run(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n                  var $component, $lookupFluid, $lookupButtonPreview;\n                  return regeneratorRuntime.wrap(function _callee9$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          _this5.set('model', store.createRecord('ember-flexberry-dummy-suggestion-type', {\n                            name: 'TestTypeName'\n                          }));\n\n                          _context9.next = 3;\n                          return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                            \"id\": \"ASa0a1tB\",\n                            \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-lookup\\\",null,[[\\\"value\\\",\\\"relationName\\\",\\\"projection\\\",\\\"displayAttributeName\\\",\\\"title\\\",\\\"showPreviewButton\\\",\\\"previewFormRoute\\\",\\\"readonly\\\"],[[22,[\\\"model\\\"]],\\\"parent\\\",\\\"SuggestionTypeL\\\",\\\"name\\\",\\\"Parent\\\",true,\\\"ember-flexberry-dummy-suggestion-type-edit\\\",true]]],false]],\\\"hasEval\\\":false}\",\n                            \"meta\": {}\n                          }));\n\n                        case 3:\n\n                          // Retrieve component.\n                          $component = _this5.$().children();\n                          $lookupFluid = $component.children('.fluid');\n                          $lookupButtonPreview = $lookupFluid.children('.ui-preview');\n\n\n                          assert.strictEqual($lookupButtonPreview.hasClass('disabled'), false, 'Component\\'s container has not \\'disabled\\' css-class');\n\n                        case 7:\n                        case 'end':\n                          return _context9.stop();\n                      }\n                    }\n                  }, _callee9, _this5);\n                })));\n\n              case 3:\n              case 'end':\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x7) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('autocompleteDirection adds no css-class if autocompleteDirection is not defined', function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        var _this6 = this;\n\n        var store, $resultAutocomplete, $lookupField, done;\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                store = this.owner.lookup('service:store');\n\n\n                Ember.run(function () {\n                  Ember.set(_this6, 'model', store.createRecord('ember-flexberry-dummy-suggestion', {\n                    name: 'TestTypeName'\n                  }));\n                });\n\n                _context11.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"uHHrrnWy\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-lookup\\\",null,[[\\\"value\\\",\\\"relationName\\\",\\\"projection\\\",\\\"displayAttributeName\\\",\\\"title\\\",\\\"autocomplete\\\",\\\"relatedModel\\\",\\\"relationName\\\"],[[22,[\\\"model\\\",\\\"type\\\"]],\\\"parent\\\",\\\"SettingLookupExampleView\\\",\\\"name\\\",\\\"Parent\\\",true,[22,[\\\"model\\\"]],\\\"type\\\"]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                $resultAutocomplete = this.element.querySelector('div.results');\n\n                assert.ok($resultAutocomplete, 'Component has autocomplete window.');\n                assert.notOk($resultAutocomplete.classList.contains('visible'), 'Autocomplete window is not visible until we start typing.');\n\n                $lookupField = this.element.querySelector('input.lookup-field');\n                _context11.next = 10;\n                return (0, _testHelpers.fillIn)($lookupField, 'g');\n\n              case 10:\n                done = assert.async();\n\n                Ember.run.later(function () {\n                  assert.ok($resultAutocomplete.classList.contains('visible'), 'Autocomplete window is now visible.');\n                  assert.notOk($resultAutocomplete.classList.contains('upward'), 'Autocomplete window has no extra class.');\n                  done();\n                }, 5000);\n\n              case 12:\n              case 'end':\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x8) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('autocompleteDirection adds css-class if autocompleteDirection is defined as upward', function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {\n        var _this7 = this;\n\n        var store, $resultAutocomplete, $lookupField, asyncOperationsCompleted;\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                store = this.owner.lookup('service:store');\n                _context13.next = 3;\n                return Ember.run(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {\n                  return regeneratorRuntime.wrap(function _callee12$(_context12) {\n                    while (1) {\n                      switch (_context12.prev = _context12.next) {\n                        case 0:\n                          Ember.set(_this7, 'model', store.createRecord('ember-flexberry-dummy-suggestion', {\n                            name: 'TestTypeName'\n                          }));\n\n                          Ember.set(_this7, 'autocompleteDirection', undefined);\n                          _context12.next = 4;\n                          return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                            \"id\": \"ls1XENGr\",\n                            \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-lookup\\\",null,[[\\\"value\\\",\\\"relationName\\\",\\\"projection\\\",\\\"displayAttributeName\\\",\\\"title\\\",\\\"autocomplete\\\",\\\"autocompleteDirection\\\",\\\"relatedModel\\\",\\\"relationName\\\"],[[22,[\\\"model\\\",\\\"type\\\"]],\\\"parent\\\",\\\"SettingLookupExampleView\\\",\\\"name\\\",\\\"Parent\\\",true,\\\"upward\\\",[22,[\\\"model\\\"]],\\\"type\\\"]]],false]],\\\"hasEval\\\":false}\",\n                            \"meta\": {}\n                          }));\n\n                        case 4:\n                        case 'end':\n                          return _context12.stop();\n                      }\n                    }\n                  }, _callee12, _this7);\n                })));\n\n              case 3:\n                $resultAutocomplete = this.element.querySelector('div.results');\n\n                assert.equal($resultAutocomplete !== null, true, 'Component has autocomplete window.');\n                assert.equal($resultAutocomplete.classList.contains('visible'), false, 'Autocomplete window is not visible until we start typing.');\n\n                $lookupField = this.element.querySelector('input.lookup-field');\n                _context13.next = 9;\n                return (0, _testHelpers.fillIn)($lookupField, 'g');\n\n              case 9:\n                asyncOperationsCompleted = assert.async();\n\n                Ember.run.later(function () {\n                  asyncOperationsCompleted();\n                  assert.equal($resultAutocomplete.classList.contains('visible'), true, 'Autocomplete window is now visible.');\n                  assert.equal($resultAutocomplete.classList.contains('upward'), true, 'Autocomplete window has extra class.');\n                }, 5000);\n\n              case 11:\n              case 'end':\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      return function (_x9) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('autocompleteDirection adds no css-class if autocompleteDirection is defined as downward', function () {\n      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {\n        var _this8 = this;\n\n        var store, $resultAutocomplete, $lookupField, asyncOperationsCompleted;\n        return regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                store = this.owner.lookup('service:store');\n\n\n                Ember.run(function () {\n                  Ember.set(_this8, 'model', store.createRecord('ember-flexberry-dummy-suggestion', {\n                    name: 'TestTypeName'\n                  }));\n                });\n\n                _context14.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"GkKVSGQ7\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-lookup\\\",null,[[\\\"value\\\",\\\"relationName\\\",\\\"projection\\\",\\\"displayAttributeName\\\",\\\"title\\\",\\\"autocomplete\\\",\\\"autocompleteDirection\\\",\\\"relatedModel\\\",\\\"relationName\\\"],[[22,[\\\"model\\\",\\\"type\\\"]],\\\"parent\\\",\\\"SettingLookupExampleView\\\",\\\"name\\\",\\\"Parent\\\",true,\\\"downward\\\",[22,[\\\"model\\\"]],\\\"type\\\"]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                $resultAutocomplete = this.element.querySelector('div.results');\n\n                assert.equal($resultAutocomplete !== null, true, 'Component has autocomplete window.');\n                assert.equal($resultAutocomplete.classList.contains('visible'), false, 'Autocomplete window is not visible until we start typing.');\n\n                $lookupField = this.element.querySelector('input.lookup-field');\n\n                (0, _testHelpers.fillIn)($lookupField, 'g');\n\n                asyncOperationsCompleted = assert.async();\n\n                Ember.run.later(function () {\n                  asyncOperationsCompleted();\n                  assert.equal($resultAutocomplete.classList.contains('visible'), true, 'Autocomplete window is now visible.');\n                  assert.equal($resultAutocomplete.classList.contains('upward'), false, 'Autocomplete window has no extra class.');\n                }, 5000);\n\n              case 11:\n              case 'end':\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      return function (_x10) {\n        return _ref15.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/flexberry-sidebar-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | flexberry-sidebar', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"GqM6eeCw\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"flexberry-sidebar\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n                assert.equal(this.element.textContent.trim(), '', 'Component renders with no content');\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"36BhARa1\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\" \\\"],[4,\\\"flexberry-sidebar\\\",null,null,{\\\"statements\\\":[[0,\\\" text \\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                assert.equal(this.element.textContent.trim(), 'text', 'Component renders with content');\n\n              case 6:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/flexberry-simpledatetime-test', ['qunit', 'ember-i18n/services/i18n', 'ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations', '@ember/test-helpers', 'ember-qunit'], function (_qunit, _i18n, _translations, _translations2, _testHelpers, _emberQunit) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | flexberry-simpledatetime', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    hooks.beforeEach(function () {\n      this.owner.register('locale:ru/translations', _translations.default);\n      this.owner.register('locale:en/translations', _translations2.default);\n      this.owner.register('service:i18n', _i18n.default);\n\n      // Injecting i18n service into the test context\n      this.i18n = this.owner.lookup('service:i18n');\n\n      Ember.Component.reopen({\n        i18n: Ember.inject.service('i18n')\n      });\n\n      // Set 'ru' as the initial locale\n      this.i18n.set('locale', 'ru');\n    });\n\n    (0, _qunit.test)('it renders', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"W16NdrYS\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"flexberry-simpledatetime\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n                assert.ok(true);\n\n              case 3:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('render with type before value', function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var typeName, componentInput, calendar;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n                typeName = 'date';\n\n                this.set('type', typeName);\n\n                // Render component.\n                _context2.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"/FqBGfvC\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-simpledatetime\\\",null,[[\\\"type\\\",\\\"value\\\"],[[22,[\\\"type\\\"]],[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component.\n                componentInput = this.element.querySelector('.custom-flatpickr');\n\n                // Click on component to open calendar.\n\n                _context2.next = 8;\n                return (0, _testHelpers.click)(componentInput);\n\n              case 8:\n                calendar = document.querySelector('.flatpickr-calendar');\n\n                // Check calendar.\n\n                assert.strictEqual(calendar.classList.contains('flatpickr-calendar'), true, 'Component\\'s wrapper has \\' flatpickr-calendar\\' css-class');\n\n              case 10:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('render with type afther value', function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var typeName, $component, $componentInput, $calendar;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(1);\n                typeName = 'date';\n\n                this.set('type', typeName);\n\n                // Render component.\n                _context3.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"/qKq9/d4\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-simpledatetime\\\",null,[[\\\"value\\\",\\\"type\\\"],[[22,[\\\"value\\\"]],[22,[\\\"type\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component.\n                $component = Ember.$(this.element);\n                $componentInput = Ember.$('.flatpickr-input.custom-flatpickr', $component);\n\n                // Click on component to open calendar.\n\n                $componentInput.click();\n\n                $calendar = Ember.$('.flatpickr-calendar');\n\n                // Check calendar.\n\n                assert.strictEqual($calendar.hasClass('flatpickr-calendar'), true, 'Component\\'s wrapper has \\' flatpickr-calendar\\' css-class');\n\n              case 10:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('properly init value by input', function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this = this;\n\n        var typeName, $component, $componentInput;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(1);\n                typeName = 'date';\n\n                Ember.set(this, 'type', typeName);\n                Ember.set(this, 'dateValue', undefined);\n\n                // Render component.\n                _context4.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"+0TUL6Ps\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-simpledatetime\\\",null,[[\\\"type\\\",\\\"value\\\"],[[22,[\\\"type\\\"]],[22,[\\\"dateValue\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n\n                // Retrieve component.\n                $component = Ember.$(this.element);\n                $componentInput = Ember.$('.custom-flatpickr', $component);\n\n\n                Ember.run(function () {\n                  $componentInput.val('01.01.2022');\n                  $componentInput.change();\n                  assert.equal(Ember.get(_this, 'dateValue').toISOString().split('T')[0], '2022-01-01');\n                });\n\n              case 9:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/flexberry-sitemap-searchbar-test', ['qunit', 'ember-i18n/services/i18n', 'ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations', '@ember/test-helpers', 'ember-qunit'], function (_qunit, _i18n, _translations, _translations2, _testHelpers, _emberQunit) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var app = void 0;\n\n  (0, _qunit.module)('Integration | Component | flexberry-sitemap-searchbar', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    hooks.beforeEach(function () {\n      this.owner.register('locale:ru/translations', _translations.default);\n      this.owner.register('locale:en/translations', _translations2.default);\n      this.owner.register('service:i18n', _i18n.default);\n\n      this.i18n = this.owner.lookup('service:i18n');\n\n      Ember.Component.reopen({\n        i18n: Ember.inject.service('i18n')\n      });\n      // Set 'ru' as initial locale.\n      this.i18n.set('locale', 'ru');\n\n      /**\n        @description Application sitemap.\n        @property sitemap\n        @type Object\n      */\n\n      this._sitemap = function () {\n        var i18n = this.get('i18n');\n\n        return {\n          nodes: [{\n            link: 'index',\n            caption: i18n.t('forms.application.sitemap.index.caption'),\n            title: i18n.t(_translations.default, 'forms.application.sitemap.index.title'),\n            children: null\n          }, {\n            link: null,\n            caption: i18n.t('forms.application.sitemap.application.caption'),\n            title: i18n.t('forms.application.sitemap.application.title'),\n            children: [{\n              link: 'ember-flexberry-dummy-application-user-list',\n              caption: i18n.t('forms.application.sitemap.application.application-users.caption'),\n              title: i18n.t('forms.application.sitemap.application.application-users.title'),\n              children: null\n            }, {\n              link: 'ember-flexberry-dummy-localization-list',\n              caption: i18n.t('forms.application.sitemap.application.localizations.caption'),\n              title: i18n.t('forms.application.sitemap.application.localizations.title'),\n              children: null\n            }, {\n              link: 'ember-flexberry-dummy-suggestion-list',\n              caption: i18n.t('forms.application.sitemap.application.suggestions.caption'),\n              title: i18n.t('forms.application.sitemap.application.suggestions.title'),\n              children: null\n            }, {\n              link: 'ember-flexberry-dummy-suggestion-type-list',\n              caption: i18n.t('forms.application.sitemap.application.suggestion-types.caption'),\n              title: i18n.t('forms.application.sitemap.application.suggestion-types.title'),\n              children: null\n            }, {\n              link: 'ember-flexberry-dummy-multi-list',\n              caption: i18n.t('forms.application.sitemap.application.multi.caption'),\n              title: i18n.t('forms.application.sitemap.application.multi.title'),\n              children: null\n            }, {\n              link: 'ember-flexberry-dummy-suggestion-file-list',\n              caption: i18n.t('forms.application.sitemap.application.suggestion-file.caption'),\n              title: i18n.t('forms.application.sitemap.application.suggestion-file.title'),\n              children: null\n            }]\n          }, {\n            link: null,\n            caption: i18n.t('forms.application.sitemap.log-service-examples.caption'),\n            title: i18n.t('forms.application.sitemap.log-service-examples.title'),\n            children: [{\n              link: 'i-i-s-caseberry-logging-objects-application-log-l',\n              caption: i18n.t('forms.application.sitemap.log-service-examples.application-log.caption'),\n              title: i18n.t('forms.application.sitemap.log-service-examples.application-log.title'),\n              children: null\n            }, {\n              link: 'log-service-examples/settings-example',\n              caption: i18n.t('forms.application.sitemap.log-service-examples.settings-example.caption'),\n              title: i18n.t('forms.application.sitemap.log-service-examples.settings-example.title'),\n              children: null\n            }, {\n              link: 'log-service-examples/clear-log-form',\n              caption: i18n.t('forms.application.sitemap.log-service-examples.clear-log-form.caption'),\n              title: i18n.t('forms.application.sitemap.log-service-examples.clear-log-form.title'),\n              children: null\n            }]\n          }, {\n            link: null,\n            caption: i18n.t('forms.application.sitemap.lock.caption'),\n            title: i18n.t('forms.application.sitemap.lock.caption'),\n            children: [{\n              link: 'new-platform-flexberry-services-lock-list',\n              caption: i18n.t('forms.application.sitemap.lock.title'),\n              title: i18n.t('forms.application.sitemap.lock.title'),\n              children: null\n            }]\n          }, {\n            link: null,\n            caption: i18n.t('forms.application.sitemap.components-examples.caption'),\n            title: i18n.t('forms.application.sitemap.components-examples.title'),\n            children: [{\n              link: null,\n              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-button.caption'),\n              title: i18n.t('forms.application.sitemap.components-examples.flexberry-button.title'),\n              children: [{\n                link: 'components-examples/flexberry-button/settings-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-button.settings-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-button.settings-example.title'),\n                children: null\n              }]\n            }, {\n              link: null,\n              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-checkbox.caption'),\n              title: i18n.t('forms.application.sitemap.components-examples.flexberry-checkbox.title'),\n              children: [{\n                link: 'components-examples/flexberry-checkbox/settings-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-checkbox.settings-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-checkbox.settings-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-checkbox/three-state-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-checkbox.three-state-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-checkbox.three-state-example.title'),\n                children: null\n              }]\n            }, {\n              link: null,\n              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-ddau-checkbox.caption'),\n              title: i18n.t('forms.application.sitemap.components-examples.flexberry-ddau-checkbox.title'),\n              children: [{\n                link: 'components-examples/flexberry-ddau-checkbox/settings-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-ddau-checkbox.settings-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-ddau-checkbox.settings-example.title'),\n                children: null\n              }]\n            }, {\n              link: null,\n              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.caption'),\n              title: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.title'),\n              children: [{\n                link: 'components-examples/flexberry-dropdown/settings-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.settings-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.settings-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-dropdown/conditional-render-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.conditional-render-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.conditional-render-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-dropdown/empty-value-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.empty-value-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.empty-value-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-dropdown/items-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.items-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.items-example.title'),\n                children: null\n              }]\n            }, {\n              link: null,\n              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-field.caption'),\n              title: i18n.t('forms.application.sitemap.components-examples.flexberry-field.title'),\n              children: [{\n                link: 'components-examples/flexberry-field/settings-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-field.settings-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-field.settings-example.title'),\n                children: null\n              }]\n            }, {\n              link: null,\n              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-file.caption'),\n              title: i18n.t('forms.application.sitemap.components-examples.flexberry-file.title'),\n              children: [{\n                link: 'components-examples/flexberry-file/settings-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-file.settings-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-file.settings-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-file/flexberry-file-in-modal',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-file.flexberry-file-in-modal.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-file.flexberry-file-in-modal.title'),\n                children: null\n              }]\n            }, {\n              link: null,\n              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.caption'),\n              title: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.title'),\n              children: [{\n                link: 'components-examples/flexberry-groupedit/model-update-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.model-update-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.model-update-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-groupedit/custom-buttons-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.custom-buttons-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.custom-buttons-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-groupedit/settings-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.settings-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.settings-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-groupedit/configurate-row-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.configurate-row-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.configurate-row-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-groupedit-with-lookup-with-computed-atribute',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.groupedit-with-lookup-with-computed-atribute.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.groupedit-with-lookup-with-computed-atribute.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-readonly-columns-by-configurate-row-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.readonly-columns-by-configurate-row-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.readonly-columns-by-configurate-row-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-groupedit/field-readonly-status-depend-on-another-field-value',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.field-readonly-status-depend-on-another-field-value.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.field-readonly-status-depend-on-another-field-value.title'),\n                children: null\n              }]\n            }, {\n              link: null,\n              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.caption'),\n              title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.title'),\n              children: [{\n                link: 'components-examples/flexberry-lookup/settings-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.settings-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.settings-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-lookup/customizing-window-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.customizing-window-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.customizing-window-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-lookup/hierarchy-olv-in-lookup-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.hierarchy-olv-in-lookup-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.hierarchy-olv-in-lookup-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-lookup/limit-function-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.limit-function-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.limit-function-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.limit-function-through-dynamic-properties-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.limit-function-through-dynamic-properties-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-lookup/lookup-block-form-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.lookup-block-form-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.lookup-block-form-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-lookup/lookup-in-modal',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.lookup-in-modal.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.lookup-in-modal.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-lookup/dropdown-mode-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.dropdown-mode-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.dropdown-mode-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-lookup/default-ordering-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.default-ordering-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.default-ordering-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-lookup/autocomplete-order-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.autocomplete-order-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.autocomplete-order-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-list',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.compute-autocomplete.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.compute-autocomplete.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-lookup/numeric-autocomplete',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.numeric-autocomplete.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.numeric-autocomplete.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-lookup/autofill-by-limit-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.autofill-by-limit-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.autofill-by-limit-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-lookup/user-settings-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.user-settings-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.user-settings-example.title'),\n                children: null\n              }]\n            }, {\n              link: null,\n              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-menu.caption'),\n              title: i18n.t('forms.application.sitemap.components-examples.flexberry-menu.title'),\n              children: [{\n                link: 'components-examples/flexberry-menu/settings-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-menu.settings-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-menu.settings-example.title'),\n                children: null\n              }]\n            }, {\n              link: null,\n              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.caption'),\n              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.title'),\n              children: [{\n                link: 'components-examples/flexberry-objectlistview/limit-function-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.limit-function-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.limit-function-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-objectlistview/inheritance-models',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.inheritance-models.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.inheritance-models.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-objectlistview/settings-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.settings-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.settings-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-objectlistview/toolbar-custom-buttons-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-objectlistview/on-edit-form',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.on-edit-form.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.on-edit-form.title')\n              }, {\n                link: 'components-examples/flexberry-objectlistview/list-on-editform',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.list-on-editform.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.list-on-editform.title')\n              }, {\n                link: 'components-examples/flexberry-objectlistview/custom-filter',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.custom-filter.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.custom-filter.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-objectlistview/edit-form-with-detail-list',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.edit-form-with-detail-list.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.edit-form-with-detail-list.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-objectlistview/hierarchy-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.hierarchy-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.hierarchy-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-objectlistview/hierarchy-paging-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.hierarchy-paging-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.hierarchy-paging-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-objectlistview/configurate-rows',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.configurate-rows.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.configurate-rows.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-objectlistview/downloading-files-from-olv-list',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.downloading-files-from-olv-list.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.downloading-files-from-olv-list.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-objectlistview/selected-rows',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.selected-rows.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.selected-rows.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-objectlistview/object-list-view-resize',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.object-list-view-resize.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.object-list-view-resize.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-list',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.return-from-ediform.title'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.return-from-ediform.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-objectlistview/lock-services-editor-view-list',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.lock-services-editor-view-list.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.lock-services-editor-view-list.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-objectlistview/limited-text-size-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.limited-text-size-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.limited-text-size-example.title'),\n                children: null\n              }]\n            }, {\n              link: null,\n              caption: 'flexberry-simpleolv',\n              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.title'),\n              children: [{\n                link: 'components-examples/flexberry-simpleolv/limit-function-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.limit-function-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.limit-function-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-simpleolv/settings-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.settings-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.settings-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-simpleolv/toolbar-custom-buttons-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-simpleolv/on-edit-form',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.on-edit-form.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.on-edit-form.title')\n              }, {\n                link: 'components-examples/flexberry-simpleolv/custom-filter',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.custom-filter.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.custom-filter.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-simpleolv/configurate-rows',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.configurate-rows.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.configurate-rows.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-simpleolv/selected-rows',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.selected-rows.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.selected-rows.title'),\n                children: null\n              }]\n            }, {\n              link: null,\n              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-simpledatetime.caption'),\n              title: i18n.t('forms.application.sitemap.components-examples.flexberry-simpledatetime.title'),\n              children: [{\n                link: 'components-examples/flexberry-simpledatetime/settings-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-simpledatetime.settings-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-simpledatetime.settings-example.title'),\n                children: null\n              }]\n            }, {\n              link: null,\n              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-text-cell.caption'),\n              title: i18n.t('forms.application.sitemap.components-examples.flexberry-text-cell.title'),\n              children: [{\n                link: 'components-examples/flexberry-text-cell/settings-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-text-cell.settings-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-text-cell.settings-example.title'),\n                children: null\n              }]\n            }, {\n              link: null,\n              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-textarea.caption'),\n              title: i18n.t('forms.application.sitemap.components-examples.flexberry-textarea.title'),\n              children: [{\n                link: 'components-examples/flexberry-textarea/settings-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-textarea.settings-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-textarea.settings-example.title'),\n                children: null\n              }]\n            }, {\n              link: null,\n              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-textbox.caption'),\n              title: i18n.t('forms.application.sitemap.components-examples.flexberry-textbox.title'),\n              children: [{\n                link: 'components-examples/flexberry-textbox/settings-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-textbox.settings-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-textbox.settings-example.title'),\n                children: null\n              }]\n            }, {\n              link: null,\n              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-toggler.caption'),\n              title: i18n.t('forms.application.sitemap.components-examples.flexberry-toggler.title'),\n              children: [{\n                link: 'components-examples/flexberry-toggler/settings-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-toggler.settings-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-toggler.settings-example.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-toggler/settings-example-inner',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-toggler.settings-example-inner.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-toggler.settings-example-inner.title'),\n                children: null\n              }, {\n                link: 'components-examples/flexberry-toggler/ge-into-toggler-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-toggler.ge-into-toggler-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-toggler.ge-into-toggler-example.title'),\n                children: null\n              }]\n            }, {\n              link: null,\n              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-tree.caption'),\n              title: i18n.t('forms.application.sitemap.components-examples.flexberry-tree.title'),\n              children: [{\n                link: 'components-examples/flexberry-tree/settings-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.flexberry-tree.settings-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.flexberry-tree.settings-example.title'),\n                children: null\n              }]\n            }, {\n              link: null,\n              caption: i18n.t('forms.application.sitemap.components-examples.ui-message.caption'),\n              title: i18n.t('forms.application.sitemap.components-examples.ui-message.title'),\n              children: [{\n                link: 'components-examples/ui-message/settings-example',\n                caption: i18n.t('forms.application.sitemap.components-examples.ui-message.settings-example.caption'),\n                title: i18n.t('forms.application.sitemap.components-examples.ui-message.settings-example.title'),\n                children: null\n              }]\n            }]\n          }, {\n            link: null,\n            caption: i18n.t('forms.application.sitemap.integration-examples.caption'),\n            title: i18n.t('forms.application.sitemap.integration-examples.title'),\n            children: [{\n              link: null,\n              caption: i18n.t('forms.application.sitemap.integration-examples.edit-form.caption'),\n              title: i18n.t('forms.application.sitemap.integration-examples.edit-form.title'),\n              children: [{\n                link: 'integration-examples/edit-form/readonly-mode',\n                caption: i18n.t('forms.application.sitemap.integration-examples.edit-form.readonly-mode.caption'),\n                title: i18n.t('forms.application.sitemap.integration-examples.edit-form.readonly-mode.title'),\n                children: null\n              }, {\n                link: 'integration-examples/edit-form/validation',\n                caption: i18n.t('forms.application.sitemap.integration-examples.edit-form.validation.caption'),\n                title: i18n.t('forms.application.sitemap.integration-examples.edit-form.validation.title'),\n                children: null\n              }]\n            }, {\n              link: null,\n              caption: i18n.t('forms.application.sitemap.integration-examples.odata-examples.caption'),\n              title: i18n.t('forms.application.sitemap.integration-examples.odata-examples.title'),\n              children: [{\n                link: null,\n                caption: i18n.t('forms.application.sitemap.integration-examples.odata-examples.get-masters.caption'),\n                title: i18n.t('forms.application.sitemap.integration-examples.odata-examples.get-masters.title'),\n                children: [{\n                  link: 'integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-l',\n                  caption: i18n.t('forms.application.sitemap.integration-examples.odata-examples.get-masters.sotrudnik.caption'),\n                  title: i18n.t('forms.application.sitemap.integration-examples.odata-examples.get-masters.sotrudnik.title'),\n                  children: null\n                }, {\n                  link: 'integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-l',\n                  caption: i18n.t('forms.application.sitemap.integration-examples.odata-examples.get-masters.departament.caption'),\n                  title: i18n.t('forms.application.sitemap.integration-examples.odata-examples.get-masters.departament.title'),\n                  children: null\n                }, {\n                  link: 'integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-l',\n                  caption: i18n.t('forms.application.sitemap.integration-examples.odata-examples.get-masters.vid-departamenta.caption'),\n                  title: i18n.t('forms.application.sitemap.integration-examples.odata-examples.get-masters.vid-departamenta.title'),\n                  children: null\n                }]\n              }]\n            }]\n          }, {\n            link: null,\n            caption: i18n.t('forms.application.sitemap.user-setting-forms.caption'),\n            title: i18n.t('forms.application.sitemap.user-setting-forms.title'),\n            children: [{\n              link: 'user-setting-forms/user-setting-delete',\n              caption: i18n.t('forms.application.sitemap.user-setting-forms.user-setting-delete.caption'),\n              title: i18n.t('forms.application.sitemap.user-setting-forms.user-setting-delete.title'),\n              children: null\n            }]\n          }]\n        };\n      },\n      /**\n        Array of search objects.\n         @property sitemap\n        @type Array\n      */\n      this.set('sitemap', []);\n    });\n\n    (0, _qunit.test)('it renders properly', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var $component, results, value, $input, notFoundMsg;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.set('sitemap', this._sitemap().nodes);\n                assert.expect(8);\n\n                _context.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"GB+qPpQF\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-sitemap-searchbar\\\",null,[[\\\"sitemap\\\"],[[22,[\\\"sitemap\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n\n                assert.equal(this.element.textContent.trim(), '');\n\n                // Retrieve component.\n                $component = this.element.querySelector('.sitemap-searchbar.ui.search');\n\n                $component.firstElementChild.click();\n                results = $component.querySelector('.sitemap-search-results-list');\n\n\n                assert.notEqual(results.children.length, 0);\n\n                value = this.get('i18n').t('forms.application.sitemap.lock.caption');\n                $input = $component.querySelector('.ember-text-field');\n                _context.next = 13;\n                return (0, _testHelpers.fillIn)($input, value);\n\n              case 13:\n                _context.next = 15;\n                return (0, _testHelpers.settled)();\n\n              case 15:\n                assert.equal($input.value, value);\n                assert.equal(results.children.length, 1);\n                assert.equal(results.querySelector('.flexberry-toggler-caption').innerHTML, value);\n\n                value = 'sfnesjgbsnsrf';\n                _context.next = 21;\n                return (0, _testHelpers.fillIn)($input, value);\n\n              case 21:\n                _context.next = 23;\n                return (0, _testHelpers.settled)();\n\n              case 23:\n                assert.equal($input.value, value);\n                assert.equal(results.children.length, 1);\n                notFoundMsg = this.get('i18n').t('components.flexberry-sitemap-searchbar.notFoundMsg');\n\n                assert.equal(results.querySelector('.header').innerText, notFoundMsg);\n\n              case 27:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/flexberry-sitemap-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | flexberry-sitemap', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders and works', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"P0xSfbWL\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"flexberry-sitemap\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n                assert.equal(Ember.$(this.element).text().trim(), '', 'Empty sitemap, empty result.');\n\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Mlx1ZH4t\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"flexberry-sitemap\\\",null,null,{\\\"statements\\\":[[0,\\\"    template block text \\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\" \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                assert.equal(Ember.$(this.element).text().trim(), '', 'Block params not used.');\n                // this.set('sitemap', {\n                //   nodes: [\n                //     {\n                //       caption: 'Superheroes',\n                //       children: [\n                //         { link: 'superman', caption: 'Superman' },\n                //         { link: 'ironman', caption: 'Ironman' },\n                //       ],\n                //     },\n                //   ],\n                // });\n                // this.render(hbs`{{flexberry-sitemap sitemap=sitemap}}`);\n                // assert.equal(this.$('.title-item-menu:visible').text().trim(), 'Superheroes', 'Menu is closed.');\n                // this.$('.title-item-menu:visible').click();\n                // assert.equal(this.$('.title-item-menu:visible').text().trim().replace(/\\s+/g, ''), 'SuperheroesSupermanIronman', 'Menu is open.');\n\n              case 6:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/flexberry-tab-bar-test', ['qunit', '@ember/test-helpers', 'ember-qunit'], function (_qunit, _testHelpers, _emberQunit) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | flexberry-tab-bar', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders properly', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var $component, $menu, $dropdown;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(5);\n\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"7FcjR76m\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-tab-bar\\\",null,[[\\\"isOverflowedTabs\\\"],[true]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $menu = $component.children('div.menu');\n                $dropdown = $component.children('div.dropdown');\n\n                // Check wrapper <div>.\n\n                assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n                assert.strictEqual($component.hasClass('flexberry-tab-bar'), true, 'Component\\'s wrapper has \\' flexberry-tab-bar\\' css-class');\n                assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n                assert.strictEqual($menu.hasClass('menu'), true, 'Component\\'s wrapper has \\'menu\\' css-class');\n                assert.strictEqual($dropdown.hasClass('dropdown link item'), true, 'Component\\'s wrapper has \\'dropdown icon\\' css-class');\n\n              case 11:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('it renders items', function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var items, $component, $menu, $dropdownMenu, $menuItems, $dropdownItems;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(10);\n\n                items = [{ selector: 'tab1', caption: 'Tab №1', active: true }, { selector: 'tab2', caption: 'Tab №2' }, { selector: 'tab3', caption: 'Tab №3' }, { selector: 'tab4', caption: 'Tab №4' }, { selector: 'tab5', caption: 'Tab №5' }];\n\n                this.set('items', items);\n\n                _context2.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"0MHg8qRj\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-tab-bar\\\",null,[[\\\"items\\\",\\\"isOverflowedTabs\\\"],[[22,[\\\"items\\\"]],true]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $menu = $component.children('div.menu');\n                $dropdownMenu = $component.children('div.dropdown').children('div.menu');\n                $menuItems = $menu.children('button.item');\n                $dropdownItems = $dropdownMenu.children('button.item');\n\n                // Check component's captions and array.\n\n                $menuItems.each(function (i) {\n                  var $item = Ember.$(this);\n\n                  // Check that the captions matches the array.\n                  assert.strictEqual($item.attr('data-tab'), 'tab' + (i + 1), 'Component\\'s item\\'s сaptions matches the array');\n                });\n\n                $dropdownItems.each(function (i) {\n                  var $item = Ember.$(this);\n\n                  // Check that the captions matches the array.\n                  assert.strictEqual($item.attr('data-tab'), 'tab' + (i + 1), 'Component\\'s item\\'s сaptions matches the array');\n                });\n\n              case 12:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('tabs are switched in menu and in dropdown list', function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var items, $component, $menu, $dropdown, $itemMenu, $itemDropdown;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(4);\n\n                items = [{ selector: 'tab1', caption: 'Tab №1', active: true }, { selector: 'tab2', caption: 'Tab №2' }, { selector: 'tab3', caption: 'Tab №3' }, { selector: 'tab4', caption: 'Tab №4' }, { selector: 'tab5', caption: 'Tab №5' }, { selector: 'tab6', caption: 'Tab №6' }, { selector: 'tab7', caption: 'Tab №7' }, { selector: 'tab8', caption: 'Tab №8' }, { selector: 'tab9', caption: 'Tab №9' }, { selector: 'tab10', caption: 'Tab №10' }, { selector: 'tab11', caption: 'Tab №11' }, { selector: 'tab12', caption: 'Tab №12' }, { selector: 'tab13', caption: 'Tab №13' }, { selector: 'tab14', caption: 'Tab №14' }, { selector: 'tab15', caption: 'Tab №15' }];\n\n                this.set('items', items);\n\n                _context3.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"qgP2Cmmi\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-tab-bar\\\",null,[[\\\"items\\\",\\\"isOverflowedTabs\\\"],[[22,[\\\"items\\\"]],true]]],false],[0,\\\"\\\\n      \\\"],[6,\\\"div\\\"],[10,\\\"class\\\",\\\"ui bottom attached tab active segment\\\"],[10,\\\"data-tab\\\",\\\"tab1\\\"],[8],[0,\\\"\\\\n        \\\"],[6,\\\"h4\\\"],[8],[0,\\\"Tab №1\\\"],[9],[0,\\\"\\\\n      \\\"],[9],[0,\\\"\\\\n      \\\"],[6,\\\"div\\\"],[10,\\\"class\\\",\\\"ui bottom attached tab segment\\\"],[10,\\\"data-tab\\\",\\\"tab2\\\"],[8],[0,\\\"\\\\n        \\\"],[6,\\\"h4\\\"],[8],[0,\\\"Tab №2\\\"],[9],[0,\\\"\\\\n      \\\"],[9],[0,\\\"\\\\n      \\\"],[6,\\\"div\\\"],[10,\\\"class\\\",\\\"ui bottom attached tab segment\\\"],[10,\\\"data-tab\\\",\\\"tab3\\\"],[8],[0,\\\"\\\\n        \\\"],[6,\\\"h4\\\"],[8],[0,\\\"Tab №3\\\"],[9],[0,\\\"\\\\n      \\\"],[9],[0,\\\"\\\\n      \\\"],[6,\\\"div\\\"],[10,\\\"class\\\",\\\"ui bottom attached tab segment\\\"],[10,\\\"data-tab\\\",\\\"tab4\\\"],[8],[0,\\\"\\\\n        \\\"],[6,\\\"h4\\\"],[8],[0,\\\"Tab №4\\\"],[9],[0,\\\"\\\\n      \\\"],[9],[0,\\\"\\\\n      \\\"],[6,\\\"div\\\"],[10,\\\"class\\\",\\\"ui bottom attached tab segment\\\"],[10,\\\"data-tab\\\",\\\"tab5\\\"],[8],[0,\\\"\\\\n        \\\"],[6,\\\"h4\\\"],[8],[0,\\\"Tab №5\\\"],[9],[0,\\\"\\\\n      \\\"],[9],[0,\\\"\\\\n      \\\"],[6,\\\"div\\\"],[10,\\\"class\\\",\\\"ui bottom attached tab segment\\\"],[10,\\\"data-tab\\\",\\\"tab6\\\"],[8],[0,\\\"\\\\n        \\\"],[6,\\\"h4\\\"],[8],[0,\\\"Tab №6\\\"],[9],[0,\\\"\\\\n      \\\"],[9],[0,\\\"\\\\n      \\\"],[6,\\\"div\\\"],[10,\\\"class\\\",\\\"ui bottom attached tab segment\\\"],[10,\\\"data-tab\\\",\\\"tab7\\\"],[8],[0,\\\"\\\\n        \\\"],[6,\\\"h4\\\"],[8],[0,\\\"Tab №7\\\"],[9],[0,\\\"\\\\n      \\\"],[9],[0,\\\"\\\\n      \\\"],[6,\\\"div\\\"],[10,\\\"class\\\",\\\"ui bottom attached tab segment\\\"],[10,\\\"data-tab\\\",\\\"tab8\\\"],[8],[0,\\\"\\\\n        \\\"],[6,\\\"h4\\\"],[8],[0,\\\"Tab №8\\\"],[9],[0,\\\"\\\\n      \\\"],[9],[0,\\\"\\\\n      \\\"],[6,\\\"div\\\"],[10,\\\"class\\\",\\\"ui bottom attached tab segment\\\"],[10,\\\"data-tab\\\",\\\"tab9\\\"],[8],[0,\\\"\\\\n        \\\"],[6,\\\"h4\\\"],[8],[0,\\\"Tab №9\\\"],[9],[0,\\\"\\\\n      \\\"],[9],[0,\\\"\\\\n      \\\"],[6,\\\"div\\\"],[10,\\\"class\\\",\\\"ui bottom attached tab segment\\\"],[10,\\\"data-tab\\\",\\\"tab10\\\"],[8],[0,\\\"\\\\n        \\\"],[6,\\\"h4\\\"],[8],[0,\\\"Tab №10\\\"],[9],[0,\\\"\\\\n      \\\"],[9],[0,\\\"\\\\n      \\\"],[6,\\\"div\\\"],[10,\\\"class\\\",\\\"ui bottom attached tab segment\\\"],[10,\\\"data-tab\\\",\\\"tab11\\\"],[8],[0,\\\"\\\\n        \\\"],[6,\\\"h4\\\"],[8],[0,\\\"Tab №11\\\"],[9],[0,\\\"\\\\n      \\\"],[9],[0,\\\"\\\\n      \\\"],[6,\\\"div\\\"],[10,\\\"class\\\",\\\"ui bottom attached tab segment\\\"],[10,\\\"data-tab\\\",\\\"tab12\\\"],[8],[0,\\\"\\\\n        \\\"],[6,\\\"h4\\\"],[8],[0,\\\"Tab №12\\\"],[9],[0,\\\"\\\\n      \\\"],[9],[0,\\\"\\\\n      \\\"],[6,\\\"div\\\"],[10,\\\"class\\\",\\\"ui bottom attached tab segment\\\"],[10,\\\"data-tab\\\",\\\"tab13\\\"],[8],[0,\\\"\\\\n        \\\"],[6,\\\"h4\\\"],[8],[0,\\\"Tab №13\\\"],[9],[0,\\\"\\\\n      \\\"],[9],[0,\\\"\\\\n      \\\"],[6,\\\"div\\\"],[10,\\\"class\\\",\\\"ui bottom attached tab segment\\\"],[10,\\\"data-tab\\\",\\\"tab14\\\"],[8],[0,\\\"\\\\n        \\\"],[6,\\\"h4\\\"],[8],[0,\\\"Tab №14\\\"],[9],[0,\\\"\\\\n      \\\"],[9],[0,\\\"\\\\n      \\\"],[6,\\\"div\\\"],[10,\\\"class\\\",\\\"ui bottom attached tab segment\\\"],[10,\\\"data-tab\\\",\\\"tab15\\\"],[8],[0,\\\"\\\\n        \\\"],[6,\\\"h4\\\"],[8],[0,\\\"Tab №15\\\"],[9],[0,\\\"\\\\n      \\\"],[9],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $menu = $component.children('div.menu');\n                $dropdown = $component.children('div.dropdown');\n\n                // To select some item, menu must contain such item (with the specified caption).\n\n                $itemMenu = Ember.$('.item:contains(' + this.get('items')[1].caption + ')', $menu);\n                $itemDropdown = Ember.$('.item:contains(' + this.get('items')[1].caption + ')', $dropdown);\n\n                // Click on item to select it.\n\n                Ember.run(function () {\n                  $itemMenu.click();\n                  assert.strictEqual($itemMenu.hasClass('active'), true, 'Component\\'s tab has \\'active\\' css-class');\n                  assert.strictEqual($itemDropdown.hasClass('active'), true, 'Component\\'s tab has \\'active\\' css-class');\n                });\n\n                // To select some item, menu must contain such item (with the specified caption).\n                $itemMenu = Ember.$('.item:contains(' + this.get('items')[2].caption + ')', $menu);\n                $itemDropdown = Ember.$('.item:contains(' + this.get('items')[2].caption + ')', $dropdown);\n\n                // Click on item to select it.\n                Ember.run(function () {\n                  $dropdown.click();\n                  $itemDropdown.click();\n                  assert.strictEqual($itemMenu.hasClass('active'), true, 'Component\\'s tab has \\'active\\' css-class');\n                  assert.strictEqual($itemDropdown.hasClass('active selected'), true, 'Component\\'s tab has \\'active\\' css-class');\n                });\n\n              case 14:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/flexberry-textarea-test', ['ember-i18n/services/i18n', 'ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations', 'qunit', '@ember/test-helpers', 'ember-qunit'], function (_i18n, _translations, _translations2, _qunit, _testHelpers, _emberQunit) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | flexberry-textarea', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    hooks.beforeEach(function () {\n      this.owner.register('locale:ru/translations', _translations.default);\n      this.owner.register('locale:en/translations', _translations2.default);\n      this.owner.register('service:i18n', _i18n.default);\n\n      this.i18n = this.owner.lookup('service:i18n');\n      Ember.Component.reopen({\n        i18n: Ember.inject.service('i18n')\n      });\n\n      // Set 'ru' as initial locale.\n      this.set('i18n.locale', 'ru');\n    });\n\n    (0, _qunit.test)('it renders properly', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var $component, additioanlCssClasses;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(10);\n\n                // Render component.\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Wgbr2/S5\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\"],[[22,[\\\"class\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n\n                // Check wrapper <div>.\n\n                assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n                assert.strictEqual($component.hasClass('flexberry-textarea'), true, 'Component\\'s wrapper has \\' flexberry-textarea\\' css-class');\n                assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n                assert.strictEqual($component.hasClass('input'), true, 'Component\\'s wrapper has \\'input\\' css-class');\n\n                // Check wrapper's additional CSS-classes.\n                additioanlCssClasses = 'fluid mini huge';\n\n                this.set('class', additioanlCssClasses);\n                /* eslint-disable no-unused-vars */\n                Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n                  assert.strictEqual($component.hasClass(cssClassName), true, 'Component\\'s wrapper has additional css class \\'' + cssClassName + '\\'');\n                });\n                /* eslint-enable no-unused-vars */\n\n                // Clean up wrapper's additional CSS-classes.\n                this.set('class', '');\n                /* eslint-disable no-unused-vars */\n                Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n                  assert.strictEqual($component.hasClass(cssClassName), false, 'Component\\'s wrapper hasn\\'t additional css class \\'' + cssClassName + '\\'');\n                });\n                /* eslint-enable no-unused-vars */\n\n              case 13:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('readonly mode works properly', function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var $component, $textareaInput;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(3);\n\n                // Render component.\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"K2qcPsaA\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"readonly\\\"],[[22,[\\\"class\\\"]],[22,[\\\"readonly\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textareaInput = $component.children('textarea');\n\n                // Check that <textarea>'s readonly attribute doesn't exist yet.\n\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('readonly')), '', 'Component\\'s inner <textarea> hasn\\'t readonly attribute');\n\n                // Activate readonly mode & check that <textarea>'s readonly attribute exists now & has value equals to 'readonly'.\n                this.set('readonly', true);\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('readonly')), 'readonly', 'Component\\'s inner <textarea> has readonly attribute with value equals to \\'readonly\\'');\n\n                // Check that <textarea>'s readonly attribute doesn't exist now.\n                this.set('readonly', false);\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('readonly')), '', 'Component\\'s inner <textarea> hasn\\'t readonly attribute');\n\n              case 10:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('readonly mode works properly with value', function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this = this;\n\n        var $component, $textareaInput, newValue;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(2);\n\n                // Set <textarea>'s value' & render component.\n                this.set('value', null);\n                this.set('readonly', true);\n                _context3.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"qq/ZSFhm\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"readonly\\\",\\\"value\\\"],[[22,[\\\"readonly\\\"]],[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textareaInput = $component.children('textarea');\n\n\n                $textareaInput.on('change', function (e) {\n                  if (_this.get('readonly')) {\n                    e.stopPropagation();\n                    $textareaInput.val(null);\n                  }\n                });\n\n                newValue = 'New value';\n\n                $textareaInput.val(newValue);\n                $textareaInput.change();\n\n                // Check <textarea>'s value not changed.\n                assert.strictEqual(Ember.$.trim($textareaInput.val()), '', 'Component\\'s inner <textarea>\\'s value not changed');\n                assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to unchanged \\'value\\'');\n\n              case 13:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('it renders i18n-ed placeholder', function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var $component, $textareaInput;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(2);\n\n                // Render component.\n                _context4.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"tz1yXvrh\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"flexberry-textarea\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textareaInput = $component.children('textarea');\n\n                // Check <textarea>'s placeholder.\n\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('placeholder')), Ember.get(_translations.default, 'components.flexberry-textarea.placeholder'), 'Component\\'s inner <textarea>\\'s placeholder is equals to it\\'s default value from i18n locales/ru/translations');\n\n                // Change current locale to 'en' & check <textarea>'s placeholder again.\n                this.set('i18n.locale', 'en');\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('placeholder')), Ember.get(_translations2.default, 'components.flexberry-textarea.placeholder'), 'Component\\'s inner <textarea>\\'s placeholder is equals to it\\'s value from i18n locales/en/translations');\n\n              case 8:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('it renders manually defined placeholder', function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var placeholder, $component, $textareaInput;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(2);\n\n                // Set <textarea>'s placeholder' & render component.\n                placeholder = 'textarea is empty, please type some text';\n\n                this.set('placeholder', placeholder);\n                _context5.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"RweRkPSr\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"placeholder\\\"],[[22,[\\\"placeholder\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textareaInput = $component.children('textarea');\n\n                // Check <textarea>'s placeholder.\n\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('placeholder')), placeholder, 'Component\\'s inner <textarea>\\'s placeholder is equals to manually defined value \\'' + placeholder + '\\'');\n\n                // Change placeholder's value & check <textarea>'s placeholder again.\n                placeholder = 'textarea has no value';\n                this.set('placeholder', placeholder);\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('placeholder')), placeholder, 'Component\\'s inner <textarea>\\'s placeholder is equals to manually updated value \\'' + placeholder + '\\'');\n\n              case 11:\n              case 'end':\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('required mode works properly', function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var $component, $textareaInput;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(3);\n\n                // Render component.\n                _context6.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"P0+F1REW\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"required\\\"],[[22,[\\\"class\\\"]],[22,[\\\"required\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textareaInput = $component.children('textarea');\n\n                // Check that <textarea>'s required attribute doesn't exist yet.\n\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('required')), '', 'Component\\'s inner <textarea> hasn\\'t required attribute');\n\n                // Activate required mode & check that <textarea>'s required attribute exists now & has value equals to 'required'.\n                this.set('required', true);\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('required')), 'required', 'Component\\'s inner <textarea> has required attribute with value equals to \\'required\\'');\n\n                // Check that <textarea>'s required attribute doesn't exist now.\n                this.set('required', false);\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('required')), '', 'Component\\'s inner <textarea> hasn\\'t required attribute');\n\n              case 10:\n              case 'end':\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('disabled mode works properly', function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        var $component, $textareaInput;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(3);\n\n                // Render component.\n                _context7.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"AOcMLYEP\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"disabled\\\"],[[22,[\\\"class\\\"]],[22,[\\\"disabled\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textareaInput = $component.children('textarea');\n\n                // Check that <textarea>'s disabled attribute doesn't exist yet.\n\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('disabled')), '', 'Component\\'s inner <textarea> hasn\\'t disabled attribute');\n\n                // Activate disabled mode & check that <textarea>'s disabled attribute exists now & has value equals to 'disabled'.\n                this.set('disabled', true);\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('disabled')), 'disabled', 'Component\\'s inner <textarea> has disabled attribute with value equals to \\'disabled\\'');\n\n                // Check that <textarea>'s disabled attribute doesn't exist now.\n                this.set('disabled', false);\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('disabled')), '', 'Component\\'s inner <textarea> hasn\\'t disabled attribute');\n\n              case 10:\n              case 'end':\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('autofocus mode works properly', function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var $component, $textareaInput;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(3);\n\n                // Render component.\n                _context8.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"xLt1DUdr\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"autofocus\\\"],[[22,[\\\"class\\\"]],[22,[\\\"autofocus\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textareaInput = $component.children('textarea');\n\n                // Check that <textarea>'s autofocus attribute doesn't exist yet.\n\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('autofocus')), '', 'Component\\'s inner <textarea> hasn\\'t autofocus attribute');\n\n                // Activate autofocus mode & check that <textarea>'s autofocus attribute exists now & has value equals to 'autofocus'.\n                this.set('autofocus', true);\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('autofocus')), 'autofocus', 'Component\\'s inner <textarea> has autofocus attribute with value equals to \\'autofocus\\'');\n\n                // Check that <textarea>'s autofocus attribute doesn't exist now.\n                this.set('autofocus', false);\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('autofocus')), '', 'Component\\'s inner <textarea> hasn\\'t autofocus attribute');\n\n              case 10:\n              case 'end':\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('spellcheck mode works properly', function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        var $component, $textareaInput;\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(3);\n\n                // Render component.\n                _context9.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Vq4KEuUS\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"spellcheck\\\"],[[22,[\\\"class\\\"]],[22,[\\\"spellcheck\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textareaInput = $component.children('textarea');\n\n                // Check that <textarea>'s spellcheck attribute doesn't exist yet.\n\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('spellcheck')), '', 'Component\\'s inner <textarea> hasn\\'t spellcheck attribute');\n\n                // Activate spellcheck mode & check that <textarea>'s spellcheck attribute exists now & has value equals to 'spellcheck'.\n                this.set('spellcheck', true);\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('spellcheck')), 'true', 'Component\\'s inner <textarea> has spellcheck attribute with value equals to \\'spellcheck\\'');\n\n                // Check that <textarea>'s spellcheck attribute doesn't exist now.\n                this.set('spellcheck', false);\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('spellcheck')), 'false', 'Component\\'s inner <textarea> hasn\\'t spellcheck attribute');\n\n              case 10:\n              case 'end':\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('wrap mode works properly', function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var $component, $textareaInput;\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(4);\n\n                // Render component.\n                _context10.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"hhUAsNKD\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"wrap\\\"],[[22,[\\\"class\\\"]],[22,[\\\"wrap\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textareaInput = $component.children('textarea');\n\n                // Check that <textarea>'s wrap attribute 'soft'.\n\n                this.set('wrap', 'soft');\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('wrap')), 'soft', 'Component\\'s inner <textarea> wrap attribute \\'soft\\'');\n\n                // Check that <textarea>'s wrap attribute 'hard'.\n                this.set('wrap', 'hard');\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('wrap')), 'hard', 'Component\\'s inner <textarea> wrap attribute \\'hard\\'');\n\n                // Check that <textarea>'s wrap attribute 'soft'.\n                this.set('wrap', 'soft');\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('wrap')), 'soft', 'Component\\'s inner <textarea> wrap attribute \\'soft\\'');\n\n                // Check that <textarea>'s wrap attribute 'off'.\n                this.set('wrap', 'off');\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('wrap')), 'off', 'Component\\'s inner <textarea> wrap attribute \\'off\\'');\n\n              case 13:\n              case 'end':\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x10) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('rows mode works properly', function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        var $component, $textareaInput, defaultRowsCount, rowsValue;\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(2);\n\n                // Render component.\n                _context11.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"py1xI1wP\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"rows\\\"],[[22,[\\\"class\\\"]],[22,[\\\"rows\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textareaInput = $component.children('textarea');\n\n                // Retrieve default rows count for current browser.\n\n                defaultRowsCount = $textareaInput.prop('rows');\n\n                // Generate random rows count >= 2.\n\n                rowsValue = Math.floor(Math.random() * 10) + 2;\n\n                // Check that <textarea>'s rows attribute is equals to specified value.\n\n                this.set('rows', rowsValue);\n                assert.strictEqual($textareaInput.prop('rows'), rowsValue, 'Component\\'s inner <textarea>\\'s value \\'rows\\' is equals to ' + rowsValue);\n\n                // Check that <textarea>'s rows count is switched to default value.\n                this.set('rows', null);\n                assert.strictEqual($textareaInput.prop('rows'), defaultRowsCount, 'Component\\'s inner <textarea>\\'s rows count is switched to default value');\n\n              case 11:\n              case 'end':\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x11) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('cols mode works properly', function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        var $component, $textareaInput, defaultColsCount, colsValue;\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert.expect(2);\n\n                // Render component.\n                _context12.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"CGpxkJex\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"cols\\\"],[[22,[\\\"class\\\"]],[22,[\\\"cols\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textareaInput = $component.children('textarea');\n\n                // Retrieve default rows count for current browser.\n\n                defaultColsCount = $textareaInput.prop('cols');\n\n                // Generate random cols count >= 20.\n\n                colsValue = Math.floor(Math.random() * 10) + 20;\n\n                // Check that <textarea>'s cols attribute is equals to specified value.\n\n                this.set('cols', colsValue);\n                assert.strictEqual($textareaInput.prop('cols'), colsValue, 'Component\\'s inner <textarea>\\'s value \\'cols\\' is equals to ' + colsValue);\n\n                // Check that <textarea>'s cols count is switched to default value.\n                this.set('cols', null);\n                assert.strictEqual($textareaInput.prop('cols'), defaultColsCount, 'Component\\'s inner <textarea> hasn\\'t value cols attribute');\n\n              case 11:\n              case 'end':\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x12) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('maxlength mode works properly', function () {\n      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {\n        var $component, $textareaInput, maxlengthValue;\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                assert.expect(2);\n\n                // Render component.\n                _context13.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"uGg5RJZ1\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"maxlength\\\"],[[22,[\\\"class\\\"]],[22,[\\\"maxlength\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textareaInput = $component.children('textarea');\n\n                //Generate a random value 'maxlength' and convert to a string.\n\n                maxlengthValue = '' + Math.floor(Math.random() * 10);\n\n                // Check that <textarea>'s maxlength attribute.\n\n                this.set('maxlength', maxlengthValue);\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('maxlength')), maxlengthValue, 'Component\\'s inner <textarea>\\'s value \\'maxlength\\' is equals to \\'' + maxlengthValue + '\\'');\n\n                // Check that <textarea>'s hasn\\'t value maxlength attribute.\n                this.set('maxlength', null);\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('maxlength')), '', 'Component\\'s inner <textarea> hasn\\'t value maxlength attribute');\n\n              case 10:\n              case 'end':\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      return function (_x13) {\n        return _ref14.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('selectionStart mode works properly', function () {\n      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {\n        var $component, $textareaInput, newValue, selectionStartValue, $this, done;\n        return regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                assert.expect(2);\n\n                // Render component.\n                _context14.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"l0ulxOle\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"selectionStart\\\"],[[22,[\\\"class\\\"]],[22,[\\\"selectionStart\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textareaInput = $component.children('textarea');\n\n                // Change <textarea>'s value (imitate situation when user typed something into component's <textarea>)\n                // & check them again ('change' event is needed to force bindings work).\n\n                newValue = 'Some text typed into textarea';\n\n                $textareaInput.val(newValue);\n                $textareaInput.change();\n\n                //Generate a random value 'selectionStart' and convert to a string.\n                selectionStartValue = Math.floor(Math.random() * 10 + 1);\n                $this = this;\n\n                // This timeout  is correcting problem with selectionStart in Mozila Firefox.\n\n                done = assert.async();\n\n                setTimeout(function () {\n                  $this.set('selectionStart', selectionStartValue);\n                  assert.strictEqual($textareaInput.prop('selectionStart'), selectionStartValue, 'Component\\'s inner <textarea>\\'s value \\'selectionStart\\' is equals to \\'' + selectionStartValue + '\\'');\n\n                  // Check that <textarea>'s hasn\\'t value maxlength attribute.\n                  $this.set('selectionStart', null);\n                  assert.strictEqual(Ember.$.trim($textareaInput.attr('selectionStart')), '', 'Component\\'s inner <textarea> hasn\\'t value selectionStart attribute');\n                  done();\n                }, 10);\n\n              case 12:\n              case 'end':\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      return function (_x14) {\n        return _ref15.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('selectionEnd mode works properly', function () {\n      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {\n        var $component, $textareaInput, newValue, selectionEndValue;\n        return regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                assert.expect(2);\n\n                // Render component.\n                _context15.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"zCgy2lRV\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"selectionEnd\\\"],[[22,[\\\"class\\\"]],[22,[\\\"selectionEnd\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textareaInput = $component.children('textarea');\n\n                // Change <textarea>'s value (imitate situation when user typed something into component's <textarea>)\n                // & check them again ('change' event is needed to force bindings work).\n\n                newValue = 'Some text typed into textarea';\n\n                $textareaInput.val(newValue);\n                $textareaInput.change();\n\n                //Generate a random value 'selectionEnd' and convert to a string.\n                selectionEndValue = Math.floor(Math.random() * 10 + 1);\n\n                // Check that <textarea>'s selectionEnd attribute.\n\n                this.set('selectionEnd', selectionEndValue);\n                assert.strictEqual($textareaInput.prop('selectionEnd'), selectionEndValue, 'Component\\'s inner <textarea>\\'s value \\'selectionEnd\\' is equals to \\'' + selectionEndValue + '\\'');\n\n                // Check that <textarea>'s hasn\\'t value maxlength attribute.\n                this.set('selectionEnd', null);\n                assert.strictEqual(Ember.$.trim($textareaInput.attr('selectionEnd')), '', 'Component\\'s inner <textarea> hasn\\'t value selectionEnd attribute');\n\n              case 13:\n              case 'end':\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      return function (_x15) {\n        return _ref16.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('selectionDirection mode works properly', function () {\n      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {\n        var $component, $textareaInput;\n        return regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                assert.expect(1);\n\n                // Render component.\n                _context16.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"hfB/KRiF\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"selectionDirection\\\"],[[22,[\\\"class\\\"]],[22,[\\\"selectionDirection\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textareaInput = $component.children('textarea');\n\n                // Check that <textarea>'s hasn\\'t value selectionDirection attribute.\n\n                this.set('selectionDirection', null);\n                assert.strictEqual($textareaInput.attr('selectionDirection'), undefined, 'Component\\'s inner <textarea> hasn\\'t value selectionDirection attribute');\n\n              case 7:\n              case 'end':\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      return function (_x16) {\n        return _ref17.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('changes in inner <textarea> causes changes in property binded to \\'value\\'', function () {\n      var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {\n        var $component, $textareaInput, newValue;\n        return regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                assert.expect(4);\n\n                // Set <textarea>'s value' & render component.\n                this.set('value', null);\n                _context17.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"tacx7sgL\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"value\\\"],[[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textareaInput = $component.children('textarea');\n\n                // Check <textarea>'s value & binded value for initial emptyness.\n\n                assert.strictEqual(Ember.$.trim($textareaInput.val()), '', 'Component\\'s inner <textarea>\\'s value is equals to \\'\\'');\n                assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to \\'value\\' is equals to null');\n\n                // Change <textarea>'s value (imitate situation when user typed something into component's <textarea>)\n                // & check them again ('change' event is needed to force bindings work).\n                newValue = 'Some text typed into textareas inner <textarea>';\n\n                $textareaInput.val(newValue);\n                $textareaInput.change();\n\n                assert.strictEqual(Ember.$.trim($textareaInput.val()), newValue, 'Component\\'s inner <textarea>\\'s value is equals to \\'' + newValue + '\\'');\n                assert.strictEqual(this.get('value'), newValue, 'Component\\'s property binded to \\'value\\' is equals to \\'' + newValue + '\\'');\n\n              case 13:\n              case 'end':\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      return function (_x17) {\n        return _ref18.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('changes in property binded to \\'value\\' causes changes in inner <textarea>', function () {\n      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {\n        var $component, $textareaInput, newValue;\n        return regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                assert.expect(4);\n\n                // Set <textarea>'s value' & render component.\n                this.set('value', null);\n                _context18.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"tacx7sgL\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"value\\\"],[[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textareaInput = $component.children('textarea');\n\n                // Check <textarea>'s value & binded value for initial emptyness.\n\n                assert.strictEqual(Ember.$.trim($textareaInput.val()), '', 'Component\\'s inner <textarea>\\'s value is equals to \\'\\'');\n                assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to \\'value\\' is equals to null');\n\n                // Change property binded to 'value' & check them again.\n                newValue = 'Some text typed into textareas inner <textarea>';\n\n                this.set('value', newValue);\n\n                assert.strictEqual(Ember.$.trim($textareaInput.val()), newValue, 'Component\\'s inner <textarea>\\'s value is equals to \\'' + newValue + '\\'');\n                assert.strictEqual(this.get('value'), newValue, 'Component\\'s property binded to \\'value\\' is equals to \\'' + newValue + '\\'');\n\n              case 12:\n              case 'end':\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      return function (_x18) {\n        return _ref19.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/flexberry-textbox-test', ['ember-i18n/services/i18n', 'ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations', 'qunit', '@ember/test-helpers', 'ember-qunit'], function (_i18n, _translations, _translations2, _qunit, _testHelpers, _emberQunit) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | flexberry-textbox', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    hooks.beforeEach(function () {\n      this.owner.register('locale:ru/translations', _translations.default);\n      this.owner.register('locale:en/translations', _translations2.default);\n      this.owner.register('service:i18n', _i18n.default);\n\n      this.i18n = this.owner.lookup('service:i18n');\n      Ember.Component.reopen({\n        i18n: Ember.inject.service('i18n')\n      });\n\n      // Set 'ru' as initial locale.\n      this.i18n.set('locale', 'ru');\n    });\n\n    (0, _qunit.test)('it renders properly', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var $component, $textboxInput, additioanlCssClasses;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(16);\n\n                // Render component.\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Sid7vGdE\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textbox\\\",null,[[\\\"class\\\"],[[22,[\\\"class\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textboxInput = $component.children('input');\n\n                // Check wrapper <div>.\n\n                assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n                assert.strictEqual($component.hasClass('flexberry-textbox'), true, 'Component\\'s wrapper has \\' flexberry-textbox\\' css-class');\n                assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n                assert.strictEqual($component.hasClass('input'), true, 'Component\\'s wrapper has \\'input\\' css-class');\n\n                // Check <input>.\n                assert.strictEqual($textboxInput.length === 1, true, 'Component has inner <input>');\n                assert.strictEqual($textboxInput.attr('type'), 'text', 'Component\\'s inner <input> is of text type');\n\n                // Check wrapper's additional CSS-classes.\n                additioanlCssClasses = 'fluid transparent mini huge error';\n\n                this.set('class', additioanlCssClasses);\n                /* eslint-disable no-unused-vars */\n                Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n                  assert.strictEqual($component.hasClass(cssClassName), true, 'Component\\'s wrapper has additional css class \\'' + cssClassName + '\\'');\n                });\n                /* eslint-enable no-unused-vars */\n\n                // Clean up wrapper's additional CSS-classes.\n                this.set('class', '');\n                /* eslint-disable no-unused-vars */\n                Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n                  assert.strictEqual($component.hasClass(cssClassName), false, 'Component\\'s wrapper hasn\\'t additional css class \\'' + cssClassName + '\\'');\n                });\n                /* eslint-enable no-unused-vars */\n\n              case 16:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('class changes through base-component\\'s dynamic properties works properly', function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var initialClass, anotherClass, dynamicProperties, $component;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(6);\n\n                initialClass = 'class1 class2';\n                anotherClass = 'firstClass secondClass';\n                dynamicProperties = {\n                  class: initialClass\n                };\n\n\n                this.set('dynamicProperties', dynamicProperties);\n\n                _context2.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"noJykwNh\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[1,[26,\\\"flexberry-textbox\\\",null,[[\\\"dynamicProperties\\\"],[[22,[\\\"dynamicProperties\\\"]]]]],false],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                $component = Ember.$(this.element).children();\n\n\n                assert.strictEqual($component.hasClass('class1'), true, 'Component\\'s container has \\'class1\\' css-class');\n                assert.strictEqual($component.hasClass('class2'), true, 'Component\\'s container has \\'class2\\' css-class');\n\n                Ember.set(dynamicProperties, 'class', anotherClass);\n                assert.strictEqual($component.hasClass('class1'), false, 'Component\\'s container hasn\\'t \\'class1\\' css-class');\n                assert.strictEqual($component.hasClass('class2'), false, 'Component\\'s container hasn\\'t \\'class2\\' css-class');\n                assert.strictEqual($component.hasClass('firstClass'), true, 'Component\\'s container has \\'firstClass\\' css-class');\n                assert.strictEqual($component.hasClass('secondClass'), true, 'Component\\'s container has \\'secondClass\\' css-class');\n\n              case 15:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('readonly mode works properly', function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var $component, $textboxInput;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(3);\n\n                // Render component.\n                _context3.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"z7/lVeUo\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textbox\\\",null,[[\\\"class\\\",\\\"readonly\\\"],[[22,[\\\"class\\\"]],[22,[\\\"readonly\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textboxInput = $component.children('input');\n\n                // Check that <input>'s readonly attribute doesn't exist yet.\n\n                assert.strictEqual(Ember.$.trim($textboxInput.attr('readonly')), '', 'Component\\'s inner <input> hasn\\'t readonly attribute');\n\n                // Activate readonly mode & check that <input>'s readonly attribute exists now & has value equals to 'readonly'.\n                this.set('readonly', true);\n\n                $textboxInput = $component.children('input');\n                assert.strictEqual(Ember.$.trim($textboxInput.attr('readonly')), 'readonly', 'Component\\'s inner <input> has readonly attribute with value equals to \\'readonly\\'');\n\n                // Check that <input>'s readonly attribute doesn't exist now.\n                this.set('readonly', false);\n\n                $textboxInput = $component.children('input');\n                assert.strictEqual(Ember.$.trim($textboxInput.attr('readonly')), '', 'Component\\'s inner <input> hasn\\'t readonly attribute');\n\n              case 12:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('readonly mode works properly with value', function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this = this;\n\n        var $component, $textboxInput, newValue;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(2);\n\n                // Set <input>'s value' & render component.\n                this.set('value', null);\n                this.set('readonly', true);\n                _context4.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"LPWkt6eT\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textbox\\\",null,[[\\\"readonly\\\",\\\"value\\\"],[[22,[\\\"readonly\\\"]],[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textboxInput = $component.children('input');\n\n\n                $textboxInput.on('change', function (e) {\n                  if (_this.get('readonly')) {\n                    e.stopPropagation();\n                    $textboxInput.val(null);\n                  }\n                });\n\n                newValue = 'New value';\n\n                $textboxInput.val(newValue);\n                $textboxInput.change();\n\n                // Check <input>'s value not changed.\n                assert.strictEqual(Ember.$.trim($textboxInput.val()), '', 'Component\\'s inner <input>\\'s value not changed');\n                assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to unchanged \\'value\\'');\n\n              case 13:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('click on textbox in readonly mode doesn\\'t change value & it\\'s type', function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var value, $component, $textboxInput;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(3);\n\n                // Set <input>'s value' & render component.\n                value = 123;\n\n                this.set('value', value);\n                _context5.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"uEXOATyP\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textbox\\\",null,[[\\\"readonly\\\",\\\"value\\\"],[true,[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textboxInput = $component.children('input');\n\n\n                $textboxInput.click();\n                $textboxInput.change();\n\n                // Check <input>'s value not changed.\n                assert.strictEqual(Ember.$.trim($textboxInput.val()), '' + value, 'Component\\'s inner <input>\\'s value not changed');\n                assert.strictEqual(this.get('value'), value, 'Value binded to component\\'s \\'value\\' property is unchanged');\n                assert.strictEqual(Ember.typeOf(this.get('value')), 'number', 'Value binded to component\\'s \\'value\\' property is still number');\n\n              case 12:\n              case 'end':\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('it renders i18n-ed placeholder', function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var $component, $textboxInput;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(2);\n\n                // Render component.\n                _context6.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"2FwbsAq3\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"flexberry-textbox\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textboxInput = $component.children('input');\n\n                // Check <input>'s placeholder.\n\n                assert.strictEqual(Ember.$.trim($textboxInput.attr('placeholder')), Ember.get(_translations.default, 'components.flexberry-textbox.placeholder'), 'Component\\'s inner <input>\\'s placeholder is equals to it\\'s default value from i18n locales/ru/translations');\n\n                // Change current locale to 'en' & check <input>'s placeholder again.\n                this.set('i18n.locale', 'en');\n                assert.strictEqual(Ember.$.trim($textboxInput.attr('placeholder')), Ember.get(_translations2.default, 'components.flexberry-textbox.placeholder'), 'Component\\'s inner <input>\\'s placeholder is equals to it\\'s value from i18n locales/en/translations');\n\n              case 8:\n              case 'end':\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('it renders manually defined placeholder', function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        var placeholder, $component, $textboxInput;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(2);\n\n                // Set <input>'s placeholder' & render component.\n                placeholder = 'Input is empty, please type some text';\n\n                this.set('placeholder', placeholder);\n                _context7.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"LO/PMoJH\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textbox\\\",null,[[\\\"placeholder\\\"],[[22,[\\\"placeholder\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textboxInput = $component.children('input');\n\n                // Check <input>'s placeholder.\n\n                assert.strictEqual(Ember.$.trim($textboxInput.attr('placeholder')), placeholder, 'Component\\'s inner <input>\\'s placeholder is equals to manually defined value \\'' + placeholder + '\\'');\n\n                // Change placeholder's value & check <input>'s placeholder again.\n                placeholder = 'Input has no value';\n                this.set('placeholder', placeholder);\n                assert.strictEqual(Ember.$.trim($textboxInput.attr('placeholder')), placeholder, 'Component\\'s inner <input>\\'s placeholder is equals to manually updated value \\'' + placeholder + '\\'');\n\n              case 11:\n              case 'end':\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('changes in inner <input> causes changes in property binded to \\'value\\'', function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var $component, $textboxInput, newValue;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(4);\n\n                // Set <input>'s value' & render component.\n                this.set('value', null);\n                _context8.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"dT+OH+YL\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textbox\\\",null,[[\\\"value\\\"],[[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textboxInput = $component.children('input');\n\n                // Check <input>'s value & binded value for initial emptyness.\n\n                assert.strictEqual(Ember.$.trim($textboxInput.val()), '', 'Component\\'s inner <input>\\'s value is equals to \\'\\'');\n                assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to \\'value\\' is equals to null');\n\n                // Change <input>'s value (imitate situation when user typed something into component's <input>)\n                // & check them again ('change' event is needed to force bindings work).\n                newValue = 'Some text typed into textboxes inner <input>';\n\n                $textboxInput.val(newValue);\n                $textboxInput.change();\n\n                assert.strictEqual(Ember.$.trim($textboxInput.val()), newValue, 'Component\\'s inner <input>\\'s value is equals to \\'' + newValue + '\\'');\n                assert.strictEqual(this.get('value'), newValue, 'Component\\'s property binded to \\'value\\' is equals to \\'' + newValue + '\\'');\n\n              case 13:\n              case 'end':\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('attribute maxlength rendered in html', function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        var $component, $fieldInput;\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(1);\n\n                // Render component.\n                _context9.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"w2woXa5q\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"maxlength\\\"],[5]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $fieldInput = Ember.$('.flexberry-textbox input', $component);\n\n                // Check <input>'s maxlength attribute.\n\n                assert.strictEqual($fieldInput.attr('maxlength'), '5', 'Component\\'s inner <input>\\'s attribute maxlength rendered');\n\n              case 6:\n              case 'end':\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('changes in property binded to \\'value\\' causes changes in inner <input>', function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var $component, $textboxInput, newValue;\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(4);\n\n                // Set <input>'s value' & render component.\n                this.set('value', null);\n                _context10.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"dT+OH+YL\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textbox\\\",null,[[\\\"value\\\"],[[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $textboxInput = $component.children('input');\n\n                // Check <input>'s value & binded value for initial emptyness.\n\n                assert.strictEqual(Ember.$.trim($textboxInput.val()), '', 'Component\\'s inner <input>\\'s value is equals to \\'\\'');\n                assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to \\'value\\' is equals to null');\n\n                // Change property binded to 'value' & check them again.\n                newValue = 'Some text typed into textboxes inner <input>';\n\n                this.set('value', newValue);\n\n                assert.strictEqual(Ember.$.trim($textboxInput.val()), newValue, 'Component\\'s inner <input>\\'s value is equals to \\'' + newValue + '\\'');\n                assert.strictEqual(this.get('value'), newValue, 'Component\\'s property binded to \\'value\\' is equals to \\'' + newValue + '\\'');\n\n              case 12:\n              case 'end':\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x10) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/flexberry-toggler-test', ['qunit', '@ember/test-helpers', 'ember-qunit'], function (_qunit, _testHelpers, _emberQunit) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var animationDuration = Ember.$.fn.accordion.settings.duration + 100;\n\n  (0, _qunit.module)('Integration | Component | flexberry toggler', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    // Common expand/collapse test method.\n    var expandCollapseTogglerWithStateChecks = function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert, captions) {\n        var endFunction, content, caption, expandedCaption, collapsedCaption, $component, $componentTitle, $componentCaption, $componentContent, expandAnimationCompleted;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(10);\n                endFunction = assert.async();\n                content = 'Toggler\\'s content';\n\n\n                captions = captions || {};\n                caption = captions.caption || '';\n                expandedCaption = captions.expandedCaption || caption;\n                collapsedCaption = captions.collapsedCaption || caption;\n\n\n                this.set('content', content);\n                this.set('caption', caption);\n                this.set('expandedCaption', expandedCaption);\n                this.set('collapsedCaption', collapsedCaption);\n\n                _context.next = 13;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"fGEpwkOh\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"flexberry-toggler\\\",null,[[\\\"caption\\\",\\\"expandedCaption\\\",\\\"collapsedCaption\\\"],[[22,[\\\"caption\\\"]],[22,[\\\"expandedCaption\\\"]],[22,[\\\"collapsedCaption\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[20,\\\"content\\\"],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 13:\n\n                // Retrieve component, it's inner <input>.\n                $component = Ember.$(this.element).children();\n                $componentTitle = $component.children('div .title');\n                $componentCaption = $componentTitle.children('span');\n                $componentContent = $component.children('div .content');\n\n                // Check that component is collapsed by default.\n\n                assert.strictEqual($componentTitle.hasClass('active'), false);\n                assert.strictEqual($componentContent.hasClass('active'), false);\n                assert.strictEqual(Ember.$.trim($componentCaption.text()), collapsedCaption);\n\n                /* eslint-disable no-unused-vars */\n                expandAnimationCompleted = new Ember.RSVP.Promise(function (resolve, reject) {\n                  // Try to expand component.\n                  // Semantic UI will start asynchronous animation after click, so we need run function here.\n                  Ember.run(function () {\n                    $componentTitle.click();\n                  });\n\n                  // Check that component is animating now.\n                  assert.strictEqual($componentContent.hasClass('animating'), true);\n\n                  // Wait for expand animation to be completed & check component's state.\n                  Ember.run(function () {\n                    var animationCompleted = assert.async();\n                    setTimeout(function () {\n                      // Check that component is expanded now.\n                      assert.strictEqual($componentTitle.hasClass('active'), true);\n                      assert.strictEqual($componentContent.hasClass('active'), true);\n                      assert.strictEqual(Ember.$.trim($componentCaption.text()), expandedCaption);\n\n                      // Tell to test method that asynchronous operation completed.\n                      animationCompleted();\n\n                      // Resolve 'expandAnimationCompleted' promise.\n                      resolve();\n                    }, animationDuration);\n                  });\n                });\n                /* eslint-enable no-unused-vars */\n\n                // Wait for expand animation to be completed (when resolve will be called inside previous timeout).\n                // Then try to collapse component.\n\n                expandAnimationCompleted.then(function () {\n                  // Semantic UI will start asynchronous animation after click, so we need run function here.\n                  Ember.run(function () {\n                    $componentTitle.click();\n                  });\n\n                  // Wait for collapse animation to be completed & check component's state.\n                  Ember.run(function () {\n                    var animationCompleted = assert.async();\n                    setTimeout(function () {\n                      // Check that component is expanded now.\n                      assert.strictEqual($componentTitle.hasClass('active'), false);\n                      assert.strictEqual($componentContent.hasClass('active'), false);\n                      assert.strictEqual(Ember.$.trim($componentCaption.text()), collapsedCaption);\n\n                      animationCompleted();\n                      endFunction();\n                    }, animationDuration);\n                  });\n                });\n\n              case 22:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function expandCollapseTogglerWithStateChecks(_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    (0, _qunit.test)('component renders properly', function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var $component, $togglerTitle, $togglerIcon, $togglerCaption, $togglerContent, additioanlCssClasses;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(22);\n\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"6yrbjMAe\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"flexberry-toggler\\\",null,[[\\\"class\\\"],[[22,[\\\"class\\\"]]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component, it's inner <input>.\n                $component = Ember.$(this.element).children();\n                $togglerTitle = $component.children('.title');\n                $togglerIcon = $togglerTitle.children('i');\n                $togglerCaption = $togglerTitle.children('span');\n                $togglerContent = $component.children('.content');\n\n                // Check wrapper.\n\n                assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n                assert.strictEqual($component.hasClass('flexberry-toggler'), true, 'Component\\'s wrapper has \\'flexberry-toggler\\' css-class');\n                assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n                assert.strictEqual($component.hasClass('accordion'), true, 'Component\\'s wrapper has \\'accordion\\' css-class');\n                assert.strictEqual($component.hasClass('fluid'), true, 'Component\\'s wrapper has \\'fluid\\' css-class');\n\n                // Check title's <div>.\n                assert.strictEqual($togglerTitle.length === 1, true, 'Component has inner title block');\n                assert.strictEqual($togglerTitle.prop('tagName'), 'DIV', 'Component\\'s inner title block is a <div>');\n                assert.strictEqual($togglerTitle.hasClass('title'), true, 'Component\\'s inner title block has \\'title\\' css-class');\n\n                // Check title's icon <i>.\n                assert.strictEqual($togglerIcon.length === 1, true, 'Component\\'s title has icon block');\n                assert.strictEqual($togglerIcon.prop('tagName'), 'I', 'Component\\'s icon block is a <i>');\n                assert.strictEqual($togglerIcon.hasClass('dropdown icon'), true, 'Component\\'s icon block has \\'dropdown icon\\' css-class');\n\n                // Check title's caption <span>.\n                assert.strictEqual($togglerCaption.length === 1, true, 'Component has inner caption block');\n                assert.strictEqual($togglerCaption.prop('tagName'), 'SPAN', 'Component\\'s caption block is a <span>');\n                assert.strictEqual($togglerCaption.hasClass('flexberry-toggler-caption'), true, 'Component\\'s caption block has \\'flexberry-toggler-caption\\' css-class');\n\n                // Check content's <div>.\n                assert.strictEqual($togglerContent.length === 1, true, 'Component has inner content block');\n                assert.strictEqual($togglerContent.prop('tagName'), 'DIV', 'Component\\'s content block is a <div>');\n                assert.strictEqual($togglerContent.hasClass('content'), true, 'Component\\'s content block has \\'content\\' css-class');\n                assert.strictEqual($togglerContent.hasClass('flexberry-toggler-content'), true, 'Component\\'s content block has \\'flexberry-toggler-content\\' css-class');\n\n                // Check component's additional CSS-classes.\n                additioanlCssClasses = 'firstClass secondClass';\n\n                this.set('class', additioanlCssClasses);\n\n                /* eslint-disable no-unused-vars */\n                Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n                  assert.strictEqual($component.hasClass(cssClassName), true, 'Component\\'s wrapper has additional css class \\'' + cssClassName + '\\'');\n                });\n                /* eslint-enable no-unused-vars */\n\n                this.set('class', '');\n                /* eslint-disable no-unused-vars */\n                Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n                  assert.strictEqual($component.hasClass(cssClassName), false, 'Component\\'s wrapper hasn\\'t additional css class \\'' + cssClassName + '\\'');\n                });\n                /* eslint-enable no-unused-vars */\n\n              case 31:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('component\\'s icon can be customized', function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var $component, $togglerTitle, $togglerIcon, defaultIconClass, iconClass;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(2);\n\n                _context3.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"NWQn5fLd\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"flexberry-toggler\\\",null,[[\\\"iconClass\\\"],[[22,[\\\"iconClass\\\"]]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component, it's inner <input>.\n                $component = Ember.$(this.element).children();\n                $togglerTitle = $component.children('.title');\n                $togglerIcon = $togglerTitle.children('i');\n\n                // Change default icon class.\n\n                defaultIconClass = 'dropdown icon';\n\n                assert.strictEqual($togglerIcon.attr('class'), defaultIconClass, 'Component\\'s icon is \\'dropdown icon\\' by default');\n\n                // Change icon class & check again.\n                iconClass = 'marker icon';\n\n                this.set('iconClass', iconClass);\n                assert.strictEqual($togglerIcon.attr('class'), iconClass, 'Component\\'s icon is \\'dropdown icon\\' by default');\n\n              case 11:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('component expands/collapses with defined \\'expandedCaption\\' & \\'collapsedCaption\\'', function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                expandCollapseTogglerWithStateChecks.call(this, assert, {\n                  expandedCaption: 'Toggler\\'s expanded caption',\n                  collapsedCaption: 'Toggler\\'s collapsed caption'\n                });\n\n              case 1:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('component expands/collapses with defined \\'caption\\' & \\'collapsedCaption\\'', function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                expandCollapseTogglerWithStateChecks.call(this, assert, {\n                  caption: 'Toggler\\'s caption',\n                  collapsedCaption: 'Toggler\\'s collapsed caption'\n                });\n\n              case 1:\n              case 'end':\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x6) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('component expands/collapses with defined \\'caption\\' & \\'expandedCaption\\'', function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                expandCollapseTogglerWithStateChecks.call(this, assert, {\n                  caption: 'Toggler\\'s caption',\n                  expandedCaption: 'Toggler\\'s expanded caption'\n                });\n\n              case 1:\n              case 'end':\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x7) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('component expands/collapses with only \\'caption\\' defined', function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                expandCollapseTogglerWithStateChecks.call(this, assert, {\n                  caption: 'Toggler\\'s caption'\n                });\n\n              case 1:\n              case 'end':\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x8) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('component expands/collapses with only \\'expandedCaption\\' defined', function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                expandCollapseTogglerWithStateChecks.call(this, assert, {\n                  expandedCaption: 'Toggler\\'s expanded caption'\n                });\n\n              case 1:\n              case 'end':\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x9) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('component expands/collapses with only \\'collapsedCaption\\' defined', function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                expandCollapseTogglerWithStateChecks.call(this, assert, {\n                  collapsedCaption: 'Toggler\\'s collapsed caption'\n                });\n\n              case 1:\n              case 'end':\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x10) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('component expands/collapses without defined captions', function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                expandCollapseTogglerWithStateChecks.call(this, assert, {});\n\n              case 1:\n              case 'end':\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x11) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('changes in \\'expanded\\' property causes changing of component\\'s expand/collapse state', function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        var content, collapsedCaption, expandedCaption, $component, $togglerTitle, $togglerCaption, $togglerContent;\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(9);\n\n                content = 'Toggler\\'s content';\n                collapsedCaption = 'Toggler\\'s collapsed caption';\n                expandedCaption = 'Toggler\\'s expanded caption';\n\n\n                this.set('content', content);\n                this.set('collapsedCaption', collapsedCaption);\n                this.set('expandedCaption', expandedCaption);\n\n                _context11.next = 9;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"/TOWlvq6\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"flexberry-toggler\\\",null,[[\\\"expanded\\\",\\\"collapsedCaption\\\",\\\"expandedCaption\\\"],[[22,[\\\"expanded\\\"]],[22,[\\\"collapsedCaption\\\"]],[22,[\\\"expandedCaption\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[20,\\\"content\\\"],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 9:\n\n                // Retrieve component, it's inner <input>.\n                $component = Ember.$(this.element).children();\n                $togglerTitle = $component.children('.title');\n                $togglerCaption = $togglerTitle.children('span');\n                $togglerContent = $component.children('.content');\n\n                // Check that component is collapsed by default.\n\n                assert.strictEqual($togglerTitle.hasClass('active'), false);\n                assert.strictEqual($togglerContent.hasClass('active'), false);\n                assert.strictEqual(Ember.$.trim($togglerCaption.text()), collapsedCaption);\n\n                // Expand & check that component is expanded.\n                this.set('expanded', true);\n                assert.strictEqual($togglerTitle.hasClass('active'), true);\n                assert.strictEqual($togglerContent.hasClass('active'), true);\n                assert.strictEqual(Ember.$.trim($togglerCaption.text()), expandedCaption);\n\n                // Collapse & check that component is collapsed.\n                this.set('expanded', false);\n                assert.strictEqual($togglerTitle.hasClass('active'), false);\n                assert.strictEqual($togglerContent.hasClass('active'), false);\n                assert.strictEqual(Ember.$.trim($togglerCaption.text()), collapsedCaption);\n\n              case 24:\n              case 'end':\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x12) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('disabled animation', function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"avZqVM95\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"flexberry-toggler\\\",null,[[\\\"caption\\\",\\\"duration\\\"],[\\\"Click me!\\\",0]],{\\\"statements\\\":[[0,\\\"        Hello!\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n\n                assert.notOk(Ember.$('.flexberry-toggler .content', this.element).hasClass('active'));\n\n                Ember.$('.flexberry-toggler .title', this.element).click();\n\n                assert.ok(Ember.$('.flexberry-toggler .content', this.element).hasClass('active'));\n\n              case 5:\n              case 'end':\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x13) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('loong animation speed', function () {\n      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {\n        var _this = this;\n\n        var done;\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                assert.expect(3);\n                done = assert.async();\n                _context13.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ynPZAHdf\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"flexberry-toggler\\\",null,[[\\\"caption\\\",\\\"duration\\\"],[\\\"Click me!\\\",750]],{\\\"statements\\\":[[0,\\\"        Hello!\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n\n                Ember.$('.flexberry-toggler .title', this.element).click();\n\n                assert.ok(Ember.$('.flexberry-toggler .content', this.element).hasClass('animating'));\n                Ember.run.later(function () {\n                  assert.ok(Ember.$('.flexberry-toggler .content', _this.element).hasClass('animating'));\n                }, 500);\n                Ember.run.later(function () {\n                  assert.notOk(Ember.$('.flexberry-toggler .content', _this.element).hasClass('animating'));\n                  done();\n                }, 1000);\n\n              case 8:\n              case 'end':\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      return function (_x14) {\n        return _ref14.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('Components property hasShadow works properly', function () {\n      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {\n        return regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                this.set('hasShadow', true);\n                _context14.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"arWOV+qJ\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"flexberry-toggler\\\",null,[[\\\"caption\\\",\\\"hasShadow\\\"],[\\\"Click me!\\\",[22,[\\\"hasShadow\\\"]]]],{\\\"statements\\\":[[0,\\\"      Hello!\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                assert.ok(Ember.$('.flexberry-toggler', this.element).hasClass('has-shadow'));\n                this.set('hasShadow', false);\n                assert.notOk(Ember.$('.flexberry-toggler', this.element).hasClass('has-shadow'));\n\n              case 6:\n              case 'end':\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      return function (_x15) {\n        return _ref15.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('Components property hasBorder works properly', function () {\n      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {\n        return regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                this.set('hasBorder', true);\n                _context15.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"fW21tvQd\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"flexberry-toggler\\\",null,[[\\\"caption\\\",\\\"hasBorder\\\"],[\\\"Click me!\\\",[22,[\\\"hasBorder\\\"]]]],{\\\"statements\\\":[[0,\\\"      Hello!\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                assert.ok(Ember.$('.flexberry-toggler', this.element).hasClass('has-border'));\n                this.set('hasBorder', false);\n                assert.notOk(Ember.$('.flexberry-toggler', this.element).hasClass('has-border'));\n\n              case 6:\n              case 'end':\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      return function (_x16) {\n        return _ref16.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/flexberry-validationmessage-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | flexberry-validationmessage', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders and works', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"F4BP9WHG\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-validationmessage\\\",null,[[\\\"error\\\",\\\"color\\\",\\\"pointing\\\"],[[22,[\\\"error\\\"]],[22,[\\\"color\\\"]],[22,[\\\"pointing\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n\n                [undefined, null, '', []].forEach(function (error) {\n                  _this.set('error', error);\n                  assert.ok(Ember.$('.ui.label', _this.element).is(':hidden'), 'Component is hidden if no error.');\n                });\n\n                this.set('error', 'This is error.');\n                assert.ok(Ember.$('.ui.label', this.element).is(':visible'), 'Component is visible if there errors.');\n                assert.equal(Ember.$(this.element).text().trim(), 'This is error.', 'Component shows error.');\n\n                this.set('error', ['First error.', 'Second error.']);\n                assert.equal(Ember.$(this.element).text().trim(), 'First error.,Second error.', 'Component shows all errors.');\n\n                assert.notOk(Ember.$('.ui.label', this.element).hasClass('red'), 'Override default color with undefined value.');\n                assert.notOk(Ember.$('.ui.label', this.element).hasClass('pointing'), 'Override default pointing with undefined value.');\n\n                this.set('color', 'pink');\n                this.set('pointing', 'left pointing');\n                assert.ok(Ember.$('.ui.label', this.element).hasClass('pink'), 'Color works through CSS class.');\n                assert.ok(Ember.$('.ui.label', this.element).hasClass('left'), 'Pointing works through CSS class.');\n\n                _context.next = 16;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"dJ7ABynb\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"flexberry-validationmessage\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 16:\n                assert.ok(Ember.$('.ui.label', this.element).hasClass('red'), 'Default color \\'red\\'.');\n                assert.ok(Ember.$('.ui.label', this.element).hasClass('pointing'), 'Default pointing \\'pointing\\'.');\n\n              case 18:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/flexberry-validationsummary-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | flexberry-validationsummary', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders and works', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var errors;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"T3lhr2lq\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-validationsummary\\\",null,[[\\\"errors\\\",\\\"color\\\",\\\"header\\\"],[[22,[\\\"errors\\\"]],[22,[\\\"color\\\"]],[22,[\\\"header\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n                errors = this.set('errors', Ember.A());\n\n                assert.ok(Ember.$('.ui.message', this.element).is(':hidden'), 'Component is hidden if no errors.');\n\n                Ember.run(function () {\n                  errors.pushObject('Validation error.');\n                });\n                assert.ok(Ember.$('.ui.message', this.element).is(':visible'), 'Component is visible if there errors.');\n                assert.ok(Ember.$(this.element).text().trim(), 'Validation error.', 'Component shows errors at added.');\n\n                this.set('header', 'Validation errors');\n                assert.ok(/Validation errors\\s*/.test(Ember.$(this.element).text().trim()), 'Component has a header.');\n\n                assert.notOk(Ember.$('.ui.label', this.element).hasClass('red'), 'Override default color with undefined value.');\n\n                this.set('color', 'blue');\n                assert.ok(Ember.$('.ui.message', this.element).hasClass('blue'), 'Color works through CSS class.');\n\n                _context.next = 14;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"B1HkP5Uq\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"flexberry-validationsummary\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 14:\n                assert.ok(Ember.$('.ui.message', this.element).hasClass('red'), 'Default color \\'red\\'.');\n\n              case 15:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/flexberry/validation-summary-test', ['ember-qunit', '@ember/test-helpers'], function (_emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  // eslint-disable-next-line ember/no-test-module-for\n  (0, _emberQunit.module)('Integration | Component | flexberry/validation-summary', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _emberQunit.test)('it renders and works', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var errors;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"3kxUpfxq\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry/validation-summary\\\",null,[[\\\"errors\\\",\\\"color\\\",\\\"header\\\"],[[22,[\\\"errors\\\"]],[22,[\\\"color\\\"]],[22,[\\\"header\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n                errors = this.set('errors', Ember.A());\n\n                assert.ok(Ember.$('.ui.message', this.element).is(':hidden'), 'Component is hidden if no errors.');\n\n                Ember.run(function () {\n                  errors.pushObject('Validation error.');\n                });\n\n                assert.ok(Ember.$('.ui.message', this.element).is(':visible'), 'Component is visible if there errors.');\n                assert.ok(Ember.$(this.element).text().trim(), 'Validation error.', 'Component shows errors at added.');\n\n                this.set('header', 'Validation errors');\n                assert.ok(/Validation errors\\s*/.test(Ember.$(this.element).text().trim()), 'Component has a header.');\n\n                assert.notOk(Ember.$('.ui.label', this.element).hasClass('red'), 'Override default color with undefined value.');\n\n                this.set('color', 'blue');\n                assert.ok(Ember.$('.ui.message', this.element).hasClass('blue'), 'Color works through CSS class.');\n\n                // eslint-disable-next-line ember/no-test-this-render, hbs/check-hbs-template-literals\n                _context.next = 14;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"yfUE937g\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"flexberry/validation-summary\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 14:\n\n                assert.ok(Ember.$('.ui.message', this.element).hasClass('red'), 'Default color \\'red\\'.');\n\n              case 15:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/form-load-time-tracker-test', ['ember-i18n/services/i18n', 'qunit', '@ember/test-helpers', 'ember-qunit'], function (_i18n, _qunit, _testHelpers, _emberQunit) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var formLoadTimeTracker = Ember.Service.extend({\n    loadTime: 1.0000,\n    renderTime: 2.0000\n  });\n\n  (0, _qunit.module)('Integration | Component | form load time tracker', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    hooks.beforeEach(function () {\n      this.owner.register('service:form-load-time-tracker', formLoadTimeTracker);\n      this.owner.register('service:i18n', _i18n.default);\n\n      this.i18n = this.owner.lookup('service:i18n');\n      Ember.Component.reopen({\n        i18n: Ember.inject.service('i18n')\n      });\n\n      this.formLoadTimeTracker = this.owner.lookup('service:form-load-time-tracker');\n\n      // Set 'ru' as initial locale.\n      this.set('i18n.locale', 'ru');\n    });\n\n    (0, _qunit.test)('it renders', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var i18n, loadTimeText, renderTimeText;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                i18n = this.get('i18n');\n                loadTimeText = i18n.t('components.form-load-time-tracker.load-time');\n                renderTimeText = i18n.t('components.form-load-time-tracker.render-time');\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"fiSH9ohk\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"form-load-time-tracker\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                assert.equal(Ember.$(this.element).text().trim(), loadTimeText + ': 1\\n' + renderTimeText + ': 2');\n\n                _context.next = 8;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"DtXIWqiD\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"form-load-time-tracker\\\",null,null,{\\\"statements\\\":[[0,\\\"Yield here!\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 8:\n                assert.equal(Ember.$(this.element).text().trim(), loadTimeText + ': 1\\n' + renderTimeText + ': 2\\nYield here!');\n\n              case 9:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/groupedit-toolbar-test', ['qunit', '@ember/test-helpers', 'ember-qunit'], function (_qunit, _testHelpers, _emberQunit) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | groupedit toolbar', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(2);\n\n                // Set any properties with this.set('myProperty', 'value');\n                // Handle any actions with this.on('myAction', function(val) { ... });\n\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"nz9cvBqP\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"groupedit-toolbar\\\",null,[[\\\"componentName\\\"],[\\\"someName\\\"]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                assert.equal(Ember.$(this.element).text().trim(), '');\n\n                // Template block usage:\n                _context.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ur+KOHkF\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"groupedit-toolbar\\\",null,[[\\\"componentName\\\"],[\\\"someName\\\"]],{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n\n                //Component does not support template block usage.\n                assert.equal(Ember.$(this.element).text().trim(), '');\n\n              case 7:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/modal-dialog-test', ['qunit', 'ember-qunit', '@ember/test-helpers', 'ember-test-helpers/wait'], function (_qunit, _emberQunit, _testHelpers, _wait) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | modal-dialog', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    hooks.beforeEach(function () {\n      var _this = this;\n\n      this.set('settings', { detachable: false });\n      this.set('created', false);\n      this.set('createdConsumer', function () {\n        _this.set('created', true);\n      });\n      Ember.Test.registerWaiter(this, function () {\n        return _this.get('created');\n      });\n    });\n\n    hooks.afterEach(function () {\n      this.$('.flexberry-modal').modal('hide dimmer');\n    });\n\n    (0, _qunit.test)('it renders', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"XDcwlAZ9\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"modal-dialog\\\",null,[[\\\"settings\\\",\\\"created\\\"],[[22,[\\\"settings\\\"]],[22,[\\\"createdConsumer\\\"]]]],{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n                return _context.abrupt('return', (0, _wait.default)().then(function () {\n                  assert.equal(_this2.$('.content').text().trim(), 'template block text');\n                }));\n\n              case 3:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('it should not show actions div if no buttons visible', function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"H61BBgsL\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"modal-dialog\\\",null,[[\\\"settings\\\",\\\"created\\\",\\\"useOkButton\\\",\\\"useCloseButton\\\"],[[22,[\\\"settings\\\"]],[22,[\\\"createdConsumer\\\"]],false,false]],{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n                return _context2.abrupt('return', (0, _wait.default)().then(function () {\n                  assert.equal(_this3.$('.actions').length, 0);\n                }));\n\n              case 3:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/object-list-view-test', ['qunit', 'ember-qunit', '@ember/test-helpers', 'dummy/tests/helpers/start-app', 'dummy/models/components-examples/flexberry-groupedit/shared/aggregator', 'ember-flexberry/services/user-settings'], function (_qunit, _emberQunit, _testHelpers, _startApp, _aggregator, _userSettings) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var App = void 0;\n\n  (0, _qunit.module)('Integration | Component | object-list-view', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    hooks.beforeEach(function () {\n      App = (0, _startApp.default)();\n      Ember.Component.reopen({\n        i18n: Ember.inject.service('i18n'),\n        userSettingsService: Ember.inject.service('user-settings')\n      });\n\n      _userSettings.default.reopen({\n        isUserSettingsServiceEnabled: false\n      });\n\n      // Just take it and turn it off...\n      App.__container__.lookup('service:log').set('enabled', false);\n    });\n\n    (0, _qunit.test)('columns renders', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        var store;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                store = this.owner.lookup('service:store');\n\n\n                Ember.run(function () {\n                  var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n\n                  _this.set('proj', _aggregator.default.projections.get('AggregatorE'));\n                  _this.set('model', model);\n                });\n\n                _context.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"+3YaJXBg\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"object-list-view\\\",null,[[\\\"modelProjection\\\",\\\"content\\\",\\\"componentName\\\"],[[21,0,[\\\"proj\\\"]],[21,0,[\\\"model\\\",\\\"details\\\"]],\\\"someName\\\"]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.notEqual(this.element.textContent.trim(), '');\n\n              case 5:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/olv-filter-interval-test', ['ember-qunit', '@ember/test-helpers'], function (_emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _emberQunit.module)('Integration | Component | olv-filter-interval', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _emberQunit.test)('it renders', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZGoM5/ro\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"olv-filter-interval\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n                assert.equal(Ember.$(this.element).text().trim(), '');\n\n              case 3:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/integration/components/ui-message-test', ['qunit', '@ember/test-helpers', 'ember-qunit'], function (_qunit, _testHelpers, _emberQunit) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | ui-message', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders properly', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var $component;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(2);\n\n                // Render component.\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"QST815LZ\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"ui-message\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n\n                // Check wrapper <div>.\n\n                assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n                assert.strictEqual($component.hasClass('message'), true, 'Component\\'s wrapper has \\' message\\' css-class');\n\n              case 6:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('size renders properly', function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this = this;\n\n        var $component, sizeTypes;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(8);\n\n                // Render component.\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"YtPrj2kZ\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"size\\\"],[[22,[\\\"size\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n\n                // Check component's syze's types.\n\n                sizeTypes = Ember.A(['small', 'large', 'huge', 'massive']);\n                /* eslint-disable no-unused-vars */\n\n                sizeTypes.forEach(function (sizeCssClassName, index) {\n                  _this.set('size', sizeCssClassName);\n                  assert.strictEqual($component.hasClass(sizeCssClassName), true, 'Component\\'s wrapper has size css-class \\'' + sizeCssClassName + '\\'');\n                });\n                /* eslint-enable no-unused-vars */\n\n                this.set('size', '');\n                /* eslint-disable no-unused-vars */\n                sizeTypes.forEach(function (sizeCssClassName, index) {\n                  assert.strictEqual($component.hasClass(sizeCssClassName), false, 'Component\\'s wrapper hasn\\'t size css-class \\'' + sizeCssClassName + '\\'');\n                });\n                /* eslint-enable no-unused-vars */\n\n              case 8:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('type renders properly', function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this2 = this;\n\n        var $component, typeCssClasses;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(12);\n\n                // Render component.\n                _context3.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"+dL3UPGt\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"type\\\"],[[22,[\\\"type\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n\n                // Check component's type's CSS-classes.\n\n                typeCssClasses = Ember.A(['warning', 'info', 'positive', 'success', 'negative', 'error']);\n                /* eslint-disable no-unused-vars */\n\n                typeCssClasses.forEach(function (typeCssClassName, index) {\n                  _this2.set('type', typeCssClassName);\n                  assert.strictEqual($component.hasClass(typeCssClassName), true, 'Component\\'s wrapper has type css-class \\'' + typeCssClassName + '\\'');\n                });\n                /* eslint-enable no-unused-vars */\n\n                this.set('type', '');\n                /* eslint-disable no-unused-vars */\n                typeCssClasses.forEach(function (typeCssClassName, index) {\n                  assert.strictEqual($component.hasClass(typeCssClassName), false, 'Component\\'s wrapper hasn\\'t type css-class \\'' + typeCssClassName + '\\'');\n                });\n                /* eslint-enable no-unused-vars */\n\n              case 8:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('color renders properly', function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this3 = this;\n\n        var $component, colorCssClasses;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(24);\n\n                // Render component.\n                _context4.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Gpe4jVFk\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"color\\\"],[[22,[\\\"color\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n\n                // Check component's color's CSS-classes.\n\n                colorCssClasses = Ember.A(['red', 'orange', 'yellow', 'olive', 'green', 'teal', 'blue', 'violet', 'purple', 'pink', 'brown', 'black']);\n                /* eslint-disable no-unused-vars */\n\n                colorCssClasses.forEach(function (colorCssClassName, index) {\n                  _this3.set('color', colorCssClassName);\n                  assert.strictEqual($component.hasClass(colorCssClassName), true, 'Component\\'s wrapper has color css-class \\'' + colorCssClassName + '\\'');\n                });\n                /* eslint-enable no-unused-vars */\n\n                this.set('color', '');\n                /* eslint-disable no-unused-vars */\n                colorCssClasses.forEach(function (colorCssClassName, index) {\n                  assert.strictEqual($component.hasClass(colorCssClassName), false, 'Component\\'s wrapper hasn\\'t color css-class \\'' + colorCssClassName + '\\'');\n                });\n                /* eslint-enable no-unused-vars */\n\n              case 8:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('floating renders properly', function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var $component;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(3);\n\n                // Render component.\n                _context5.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"D889f8Ys\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"floating\\\"],[[22,[\\\"floating\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n\n                // Check wrapper <div>.\n\n                assert.strictEqual($component.hasClass('floating'), false, 'Component\\'s wrapper hasn\\'t \\'floating\\' css-class');\n\n                this.set('floating', true);\n                assert.strictEqual($component.hasClass('floating'), true, 'Component\\'s wrapper has \\'floating\\' css-class');\n\n                this.set('floating', false);\n                assert.strictEqual($component.hasClass('floating'), false, 'Component\\'s wrapper hasn\\'t \\'floating\\' css-class');\n\n              case 9:\n              case 'end':\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('attached renders properly', function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var $component;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(3);\n\n                // Render component.\n                _context6.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"+iRwRmSZ\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"attached\\\"],[[22,[\\\"attached\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n\n                // Check wrapper <div>.\n\n                assert.strictEqual($component.hasClass('attached'), false, 'Component\\'s wrapper hasn\\'t \\'attached\\' css-class');\n\n                this.set('attached', true);\n                assert.strictEqual($component.hasClass('attached'), true, 'Component\\'s wrapper has \\'attached\\' css-class');\n\n                this.set('attached', false);\n                assert.strictEqual($component.hasClass('attached'), false, 'Component\\'s wrapper hasn\\'t \\'attached\\' css-class');\n\n              case 9:\n              case 'end':\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('visible renders properly', function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        var $component, $closeableIcon;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(3);\n\n                // Render component.\n                _context7.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ugsdBNVe\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"visible\\\",\\\"closeable\\\"],[[22,[\\\"visible\\\"]],true]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $closeableIcon = $component.children('i');\n\n                // Component is visible.\n\n                assert.strictEqual($component.hasClass('hidden'), false, 'Component\\'s wrapper hasn\\'t css-class \\'hidden\\'');\n\n                // The component is hidden by the Close button.\n                Ember.run(function () {\n                  $closeableIcon.click();\n                });\n\n                assert.strictEqual($component.hasClass('hidden'), true, 'Component\\'s wrapper has css-class \\'hidden\\'');\n\n                // Component is visible again.\n                this.set('visible', true);\n                assert.strictEqual($component.hasClass('hidden'), false, 'Component\\'s wrapper hasn\\'t css-class \\'hidden\\'');\n\n              case 10:\n              case 'end':\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('closeable renders properly', function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var $component, $closeableIcon;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(2);\n\n                // Render component.\n                _context8.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"UaYYereD\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"closeable\\\"],[true]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $closeableIcon = $component.children('i');\n\n\n                assert.strictEqual($closeableIcon.hasClass('close'), true, 'Component\\'s close icon has css-class \\'close\\'');\n                assert.strictEqual($closeableIcon.hasClass('icon'), true, 'Component\\'s wrapper has css-class \\'icon\\'');\n\n              case 7:\n              case 'end':\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('caption & massage renders properly', function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        var $component, $captionText, $massageText;\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(3);\n\n                // Render component.\n                _context9.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Frieyj9C\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"caption\\\",\\\"message\\\"],[\\\"My caption\\\",\\\"My message\\\"]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $captionText = $component.children('div');\n                $massageText = $component.children('p');\n\n\n                assert.strictEqual($captionText.hasClass('header'), true, 'Component\\'s caption block has \\'header\\' css-class');\n                assert.strictEqual(Ember.$.trim($captionText.text()), 'My caption', 'Component\\'s caption is right');\n                assert.strictEqual(Ember.$.trim($massageText.text()), 'My message', 'Component\\'s message is right');\n\n              case 9:\n              case 'end':\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('icon renders properly', function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var $component, $messageIcon, $captionDiv, $captionText, $massageText;\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(7);\n\n                // Render component.\n                _context10.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"5DlouAdb\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"icon\\\",\\\"caption\\\",\\\"message\\\"],[\\\"icon paw\\\",\\\"My caption\\\",\\\"My message\\\"]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $messageIcon = $component.children('i');\n                $captionDiv = $component.children('div.content');\n                $captionText = $captionDiv.children('div.header');\n                $massageText = $captionDiv.children('p');\n\n\n                assert.strictEqual($component.hasClass('icon'), true, 'Component\\'s wrapper has \\'icon\\' css-class');\n                assert.strictEqual($messageIcon.hasClass('paw'), true, 'Component\\'s icon has \\'paw\\' css-class');\n                assert.strictEqual($messageIcon.hasClass('icon'), true, 'Component\\'s icon has \\'icon\\' css-class');\n                assert.strictEqual($captionDiv.hasClass('content'), true, 'Component\\'s content block has \\'content\\' css-class');\n                assert.strictEqual($captionText.hasClass('header'), true, 'Component\\'s caption block has \\'header\\' css-class');\n                assert.strictEqual(Ember.$.trim($captionText.text()), 'My caption', 'Component\\'s caption is right');\n                assert.strictEqual(Ember.$.trim($massageText.text()), 'My message', 'Component\\'s message is right');\n\n              case 15:\n              case 'end':\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x10) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('component sends \\'onHide\\' action', function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        var messageClose, $component, $closeableIcon;\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(3);\n\n                messageClose = false;\n\n                this.set('onClose', function () {\n                  messageClose = true;\n                });\n\n                // Render component.\n                _context11.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"sU3JXbyJ\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"closeable\\\",\\\"onHide\\\"],[true,[21,0,[\\\"onClose\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n                $closeableIcon = $component.children('i');\n\n                // The component is visible.\n\n                assert.strictEqual($component.hasClass('hidden'), false, 'Component\\'s wrapper has\\'t css-class \\'hidden\\'');\n\n                // The component is hidden by the Close button.\n                Ember.run(function () {\n                  var done = assert.async();\n                  $closeableIcon.click();\n                  setTimeout(function () {\n                    assert.strictEqual(messageClose, true, 'Component closed');\n                    assert.strictEqual($component.hasClass('hidden'), true, 'Component\\'s wrapper has css-class \\'hidden\\'');\n                    done();\n                  }, 50);\n                });\n\n              case 9:\n              case 'end':\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x11) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n\n    (0, _qunit.test)('component sends \\'onShow\\' action', function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        var messageVisible, $component;\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert.expect(4);\n\n                messageVisible = false;\n\n                this.set('onVisible', function () {\n                  messageVisible = true;\n                });\n\n                // Render component.\n                _context12.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"XuKSUvAZ\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"closeable\\\",\\\"visible\\\",\\\"onShow\\\"],[true,[22,[\\\"visible\\\"]],[21,0,[\\\"onVisible\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                // Retrieve component.\n                $component = Ember.$(this.element).children();\n\n                // The component is hidden.\n\n                this.set('visible', false);\n                assert.strictEqual(messageVisible, false, 'Component is not visible');\n                assert.strictEqual($component.hasClass('hidden'), true, 'Component\\'s wrapper has css-class \\'hidden\\'');\n\n                // The component is visible.\n                this.set('visible', true);\n                assert.strictEqual(messageVisible, true, 'Component is visible');\n                assert.strictEqual($component.hasClass('hidden'), false, 'Component\\'s wrapper hasn\\'t css-class \\'hidden\\'');\n\n              case 12:\n              case 'end':\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x12) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/tests/test-helper', ['dummy/app', 'dummy/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('dummy/tests/unit/adapters/application-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('ApplicationAdapter', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var adapter = this.owner.lookup('adapter:application');\n      assert.ok(adapter);\n    });\n  });\n});","define('dummy/tests/unit/controllers/application-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:application');\n      assert.ok(controller);\n    });\n  });\n});","define('dummy/tests/unit/controllers/detail-edit-form-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | detail edit form', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var _this = this;\n\n      var controller = void 0;\n      Ember.run(function () {\n        controller = _this.owner.lookup('controller:detail-edit-form');\n      });\n\n      assert.ok(controller);\n    });\n  });\n});","define('dummy/tests/unit/controllers/edit-form-test', ['ember-data', 'qunit', 'ember-qunit', 'dummy/tests/helpers/start-app'], function (_emberData, _qunit, _emberQunit, _startApp) {\n  'use strict';\n\n  var App;\n\n  (0, _qunit.module)('Unit | Controller | edit form', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    hooks.beforeEach(function () {\n      App = (0, _startApp.default)();\n    });\n\n    hooks.afterEach(function () {\n      Ember.run(App, 'destroy');\n      Ember.$.mockjax.clear();\n    });\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var _this = this;\n\n      var controller = void 0;\n      Ember.run(function () {\n        controller = _this.owner.lookup('controller:edit-form');\n      });\n      assert.ok(controller);\n    });\n\n    (0, _qunit.test)('save hasMany relationships recursively', function (assert) {\n      var _this3 = this;\n\n      var savedRecords = [];\n\n      var TestModel = _emberData.default.Model.extend({\n        save: function save() {\n          var _this2 = this;\n\n          return new Ember.RSVP.Promise(function (resolve) {\n            savedRecords.push(_this2);\n            resolve(_this2);\n          });\n        }\n      });\n\n      var Model1 = TestModel.extend({\n        hasManyModel2: _emberData.default.hasMany('model2')\n      });\n\n      var Model2 = TestModel.extend({\n        hasManyModel3: _emberData.default.hasMany('model3')\n      });\n\n      var Model3 = TestModel.extend({});\n\n      App.register('model:model1', Model1);\n      App.register('model:model2', Model2);\n      App.register('model:model3', Model3);\n\n      var controller = void 0;\n      var store = void 0;\n      Ember.run(function () {\n        controller = _this3.owner.lookup('controller:edit-form');\n        store = App.__container__.lookup('service:store');\n      });\n\n      Ember.run(function () {\n        var record = store.createRecord('model1');\n        var model21 = store.createRecord('model2');\n        var model22 = store.createRecord('model2');\n        record.get('hasManyModel2').pushObjects([model21, model22]);\n        var model31 = store.createRecord('model3');\n        model22.get('hasManyModel3').pushObjects([model31]);\n\n        controller.set('model', record);\n        controller._saveHasManyRelationships(record).then(function () {\n          assert.equal(savedRecords[0], model21);\n          assert.equal(savedRecords[1], model22);\n          assert.equal(savedRecords[2], model31);\n        });\n      });\n    });\n  });\n});","define('dummy/tests/unit/controllers/flexberry-file-view-dialog-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | edit form', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:flexberry-file-view-dialog');\n      assert.ok(controller);\n    });\n  });\n});","define('dummy/tests/unit/controllers/list-form-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | list form', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:list-form');\n      assert.ok(controller);\n    });\n  });\n});","define('dummy/tests/unit/controllers/lookup-dialog-test', ['qunit', 'ember-qunit', 'sinon'], function (_qunit, _emberQunit, _sinon) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | lookup dialog', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:lookup-dialog');\n      assert.ok(controller);\n    });\n\n    (0, _qunit.test)('it shold set selected record to saveTo.propName of saveTo.model', function (assert) {\n      var model = Ember.Object.extend({ makeDirty: function makeDirty() {} }).create();\n      var reloadContext = {\n        send: function send(name, options) {\n          var modelToLookup = options.modelToLookup;\n          var relationName = options.relationName;\n          var newRelationValue = options.newRelationValue;\n\n          modelToLookup.set(relationName, newRelationValue);\n          modelToLookup.makeDirty();\n        }\n      };\n      var saveTo = {\n        model: model,\n        propName: 'testProperty',\n        updateLookupAction: 'updateLookupAction',\n        componentContext: reloadContext\n      };\n\n      var controller = this.owner.lookup('controller:lookup-dialog');\n\n      controller.set('saveTo', saveTo);\n\n      _sinon.default.stub(model, 'makeDirty');\n      _sinon.default.stub(controller, '_closeModalDialog');\n\n      var master = Ember.Object.create();\n\n      controller.send('objectListViewRowClick', master);\n\n      assert.equal(model.get('testProperty'), master);\n    });\n  });\n});","define('dummy/tests/unit/controllers/new-platform-flexberry-services-lock-list-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | new-platform-flexberry-services-lock-list', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:new-platform-flexberry-services-lock-list');\n      assert.ok(controller);\n    });\n  });\n});","define('dummy/tests/unit/helpers/readonly-cell-test', ['dummy/helpers/readonly-cell', 'qunit'], function (_readonlyCell, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | readonly cell', function () {\n    (0, _qunit.test)('it works', function (assert) {\n      Ember.run(function () {\n        var result = (0, _readonlyCell.readonlyCell)([['test'], 'test', false]);\n        assert.ok(result);\n      });\n    });\n  });\n});","define('dummy/tests/unit/initializers/i18n-test', ['dummy/initializers/i18n', 'qunit'], function (_i18n, _qunit) {\n  'use strict';\n\n  var application = void 0;\n\n  (0, _qunit.module)('Unit | Initializer | i18n', function (hooks) {\n    hooks.beforeEach(function () {\n      Ember.run(function () {\n        application = Ember.Application.create();\n        application.deferReadiness();\n      });\n    });\n\n    (0, _qunit.test)('it works', function (assert) {\n      _i18n.default.initialize(application);\n\n      // you would normally confirm the results of the initializer here\n      assert.ok(true);\n    });\n  });\n});","define('dummy/tests/unit/initializers/render-perf-logger-test', ['dummy/initializers/render-perf-logger', 'qunit'], function (_renderPerfLogger, _qunit) {\n  'use strict';\n\n  var application = void 0;\n\n  (0, _qunit.module)('Unit | Initializer | render perf logger', function (hooks) {\n    hooks.beforeEach(function () {\n      Ember.run(function () {\n        application = Ember.Application.create();\n        application.deferReadiness();\n      });\n    });\n\n    (0, _qunit.test)('it works', function (assert) {\n      _renderPerfLogger.default.initialize(application);\n\n      // you would normally confirm the results of the initializer here\n      assert.ok(true);\n    });\n  });\n});","define('dummy/tests/unit/instance-initializers/i18n-test', ['ember-flexberry/instance-initializers/i18n', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (_i18n, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  var application = void 0;\n  var appInstance = void 0;\n  var fakeLocale = void 0;\n\n  (0, _qunit.module)('Unit | Instance Initializer | i18n', function (hooks) {\n    hooks.beforeEach(function () {\n      application = (0, _startApp.default)();\n      appInstance = application.buildInstance();\n\n      // Just take it and turn it off...\n      appInstance.lookup('service:log').set('enabled', false);\n\n      // Set 'fake-locale' as default i18n-service locale.\n      var i18n = appInstance.lookup('service:i18n');\n      fakeLocale = 'fake-locale';\n      i18n.set('locale', fakeLocale);\n    });\n\n    hooks.afterEach(function () {\n      (0, _destroyApp.default)(appInstance);\n      (0, _destroyApp.default)(application);\n    });\n\n    (0, _qunit.test)('Configures i18n service for locale', function (assert) {\n      Ember.run(function () {\n        assert.expect(2);\n\n        var i18n = appInstance.lookup('service:i18n');\n        var ENV = appInstance.factoryFor('config:environment').class;\n        var defaultLocale = (ENV.i18n || {}).defaultLocale;\n\n        assert.strictEqual(i18n.get('locale'), fakeLocale, 'Default i18n-service locale is \\'' + fakeLocale + '\\'');\n\n        var currentLocale = defaultLocale ? defaultLocale : window.navigator.languages ? window.navigator.languages[0] : window.navigator.language || window.navigator.userLanguage;\n\n        var locales = appInstance.lookup('controller:application').get('locales');\n        if (!locales || Ember.typeOf(locales) !== 'array' || locales.indexOf(currentLocale) === -1 || Ember.isBlank(currentLocale)) {\n          currentLocale = 'en';\n        }\n\n        _i18n.default.initialize(appInstance);\n\n        assert.strictEqual(i18n.get('locale'), currentLocale, 'Current i18n-service locale is \\'' + currentLocale + '\\'');\n      });\n    });\n  });\n});","define('dummy/tests/unit/instance-initializers/lock-test', ['dummy/instance-initializers/lock', 'qunit', 'dummy/tests/helpers/destroy-app'], function (_lock, _qunit, _destroyApp) {\n  'use strict';\n\n  var application = void 0;\n  var appInstance = void 0;\n\n  (0, _qunit.module)('Unit | Instance Initializer | lock', function (hooks) {\n    hooks.beforeEach(function () {\n      Ember.run(function () {\n        application = Ember.Application.create();\n        appInstance = application.buildInstance();\n      });\n    });\n\n    hooks.afterEach(function () {\n      Ember.run(appInstance, 'destroy');\n      (0, _destroyApp.default)(application);\n    });\n\n    (0, _qunit.test)('it works', function (assert) {\n      (0, _lock.initialize)(appInstance);\n\n      // you would normally confirm the results of the initializer here\n      assert.ok(true);\n    });\n  });\n});","define('dummy/tests/unit/instance-initializers/moment-test', ['ember-flexberry/instance-initializers/moment', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (_moment, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  var application = void 0;\n  var appInstance = void 0;\n  var defaultLocale = void 0;\n  var defaultFormat = void 0;\n\n  (0, _qunit.module)('Unit | Instance Initializer | moment', function (hooks) {\n    hooks.beforeEach(function () {\n      application = (0, _startApp.default)();\n      appInstance = application.buildInstance();\n\n      // Run instance-initializer.\n      _moment.default.initialize(appInstance);\n\n      // Set 'en' as default locale.\n      var i18n = appInstance.lookup('service:i18n');\n      defaultLocale = 'en';\n      i18n.set('locale', defaultLocale);\n\n      // Set 'DD.MM.YYYY' as default date format.\n      var moment = appInstance.lookup('service:moment');\n      defaultFormat = 'DD.MM.YYYY';\n      moment.set('defaultFormat', defaultFormat);\n    });\n\n    hooks.afterEach(function () {\n      (0, _destroyApp.default)(appInstance);\n      (0, _destroyApp.default)(application);\n    });\n\n    (0, _qunit.test)('Changes in i18n-service locale causes same changes in moment-service & in global moment object', function (assert) {\n      assert.expect(4);\n\n      var i18n = appInstance.lookup('service:i18n');\n      var moment = appInstance.lookup('service:moment');\n\n      assert.strictEqual(moment.get('locale'), defaultLocale, 'Initial locale in moment service is equals to \\'' + defaultLocale + '\\'');\n      assert.strictEqual(window.moment.locale(), defaultLocale, 'Initial locale in window.moment object is equals to \\'' + defaultLocale + '\\'');\n\n      var newLocale = 'ru';\n      i18n.set('locale', newLocale);\n\n      assert.strictEqual(moment.get('locale'), newLocale, 'Initial locale in moment service is equals to \\'' + newLocale + '\\'');\n      assert.strictEqual(window.moment.locale(), newLocale, 'Initial locale in window.moment object is equals to \\'' + newLocale + '\\'');\n    });\n\n    (0, _qunit.test)('Changes in moment-service default format causes same changes in global moment object', function (assert) {\n      assert.expect(4);\n\n      var moment = appInstance.lookup('service:moment');\n\n      assert.strictEqual(moment.get('defaultFormat'), defaultFormat, 'Initial locale in moment service is equals to \\'' + defaultFormat + '\\'');\n      assert.strictEqual(window.moment.defaultFormat, defaultFormat, 'Initial locale in window.moment object is equals to \\'' + defaultFormat + '\\'');\n\n      var newDefaultFormat = 'MMMM Do YYYY, h:mm:ss a';\n      moment.set('defaultFormat', newDefaultFormat);\n\n      assert.strictEqual(moment.get('defaultFormat'), newDefaultFormat, 'Initial locale in moment service is equals to \\'' + newDefaultFormat + '\\'');\n      assert.strictEqual(window.moment.defaultFormat, newDefaultFormat, 'Initial locale in window.moment object is equals to \\'' + newDefaultFormat + '\\'');\n    });\n  });\n});","define('dummy/tests/unit/mixins/dynamic-actions-test', ['ember-flexberry/mixins/dynamic-actions', 'ember-flexberry/objects/dynamic-action', 'qunit'], function (_dynamicActions, _dynamicAction, _qunit) {\n  'use strict';\n\n  function _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  }\n\n  var ComponentWithDynamicActionsMixin = Ember.Component.extend(_dynamicActions.default, {});\n\n  (0, _qunit.module)('Unit | Mixin | dynamic-actions mixin', function () {\n    (0, _qunit.test)('Mixin throws assertion failed exception if specified \\'dynamicActions\\' is not array', function (assert) {\n      var wrongDynamicActionsArray = Ember.A([1, true, false, 'some string', {}, function () {}, new Date(), new RegExp()]);\n\n      assert.expect(wrongDynamicActionsArray.length);\n\n      wrongDynamicActionsArray.forEach(function (wrongDynamicActions) {\n        var component = ComponentWithDynamicActionsMixin.create({\n          attrs: {},\n          dynamicActions: wrongDynamicActions,\n          renderer: {}\n        });\n\n        try {\n          component.sendDynamicAction('someAction');\n        } catch (ex) {\n          assert.strictEqual(/wrong\\s*type\\s*of\\s*.*dynamicActions.*/gi.test(ex.message), true, 'Throws assertion failed exception if specified \\'dynamicActions\\' property is \\'' + Ember.typeOf(wrongDynamicActions) + '\\'');\n        }\n      });\n    });\n\n    (0, _qunit.test)('Mixin throws assertion failed exception if one of specified \\'dynamicActions\\' has wrong \\'on\\' property', function (assert) {\n      var wrongOnPropertiesArray = Ember.A([1, true, false, {}, [], function () {}, new Date(), new RegExp()]);\n\n      assert.expect(wrongOnPropertiesArray.length);\n\n      wrongOnPropertiesArray.forEach(function (wrongOnProperty) {\n        var component = ComponentWithDynamicActionsMixin.create({\n          attrs: {},\n          dynamicActions: Ember.A([_dynamicAction.default.create({\n            on: wrongOnProperty,\n            actionHandler: null,\n            actionName: null,\n            actionContext: null,\n            actionArguments: null\n          })]),\n          renderer: {}\n        });\n\n        try {\n          component.sendDynamicAction('someAction');\n        } catch (ex) {\n          assert.strictEqual(/wrong\\s*type\\s*of\\s*.*on.*/gi.test(ex.message), true, 'Throws assertion failed exception if one of specified \\'dynamicActions\\' has \\'on\\' property of wrong type \\'' + Ember.typeOf(wrongOnProperty) + '\\'');\n        }\n      });\n    });\n\n    (0, _qunit.test)('Mixin throws assertion failed exception if one of specified \\'dynamicActions\\' has wrong \\'actionHandler\\' property', function (assert) {\n      var wrongActionHandlersArray = Ember.A([1, true, false, 'some string', {}, [], new Date(), new RegExp()]);\n\n      assert.expect(wrongActionHandlersArray.length);\n\n      wrongActionHandlersArray.forEach(function (wrongActionHandler) {\n        var component = ComponentWithDynamicActionsMixin.create({\n          attrs: {},\n          dynamicActions: Ember.A([_dynamicAction.default.create({\n            on: 'someAction',\n            actionHandler: wrongActionHandler,\n            actionName: null,\n            actionContext: null,\n            actionArguments: null\n          })]),\n          renderer: {}\n        });\n\n        try {\n          component.sendDynamicAction('someAction');\n        } catch (ex) {\n          assert.strictEqual(/wrong\\s*type\\s*of\\s*.*actionHandler.*/gi.test(ex.message), true, 'Throws assertion failed exception if one of specified \\'dynamicActions\\' has \\'actionHandler\\' property of wrong type \\'' + Ember.typeOf(wrongActionHandler) + '\\'');\n        }\n      });\n    });\n\n    (0, _qunit.test)('Mixin throws assertion failed exception if one of specified \\'dynamicActions\\' has wrong \\'actionName\\' property', function (assert) {\n      var wrongActionNamesArray = Ember.A([1, true, false, {}, [], function () {}, new Date(), new RegExp()]);\n\n      assert.expect(wrongActionNamesArray.length);\n\n      wrongActionNamesArray.forEach(function (wrongActionName) {\n        var component = ComponentWithDynamicActionsMixin.create({\n          attrs: {},\n          dynamicActions: Ember.A([_dynamicAction.default.create({\n            on: 'someAction',\n            actionHandler: null,\n            actionName: wrongActionName,\n            actionContext: null,\n            actionArguments: null\n          })]),\n          renderer: {}\n        });\n\n        try {\n          component.sendDynamicAction('someAction');\n        } catch (ex) {\n          assert.strictEqual(/wrong\\s*type\\s*of\\s*.*actionName.*/gi.test(ex.message), true, 'Throws assertion failed exception if one of specified \\'dynamicActions\\' has \\'actionName\\' property of wrong type \\'' + Ember.typeOf(wrongActionName) + '\\'');\n        }\n      });\n    });\n\n    (0, _qunit.test)('Mixin throws assertion failed exception if one of specified \\'dynamicActions\\' has defined \\'actionName\\', but' + ' wrong \\'actionContext\\' property (without \\'send\\' method)', function (assert) {\n      var wrongActionContextsArray = Ember.A([null, 1, true, false, {}, [], function () {}, new Date(), new RegExp(), { send: function send() {} }]);\n\n      // Assertion shouldn't be send for last object containing 'send' method,\n      // that's why length - 1.\n      assert.expect(wrongActionContextsArray.length - 1);\n\n      wrongActionContextsArray.forEach(function (wrongActionContext) {\n        var component = ComponentWithDynamicActionsMixin.create({\n          attrs: {},\n          dynamicActions: Ember.A([_dynamicAction.default.create({\n            on: 'someAction',\n            actionHandler: null,\n            actionName: 'onSomeAction',\n            actionContext: wrongActionContext,\n            actionArguments: null\n          })]),\n          renderer: {}\n        });\n\n        try {\n          component.sendDynamicAction('someAction');\n        } catch (ex) {\n          assert.strictEqual(/method\\s*.*send.*\\s*.*actionContext.*/gi.test(ex.message), true, 'Throws assertion failed exception if one of specified \\'dynamicActions\\' has defined \\'actionName\\', ' + 'but wrong \\'actionContext\\' property (without \\'send\\' method)');\n        }\n      });\n    });\n\n    (0, _qunit.test)('Mixin throws assertion failed exception if one of specified \\'dynamicActions\\' has wrong \\'actionArguments\\' property', function (assert) {\n      var wrongActionArgumentsArray = Ember.A([1, true, false, 'some string', {}, function () {}, new Date(), new RegExp()]);\n\n      assert.expect(wrongActionArgumentsArray.length);\n\n      wrongActionArgumentsArray.forEach(function (wrongActionArguments) {\n        var component = ComponentWithDynamicActionsMixin.create({\n          attrs: {},\n          dynamicActions: Ember.A([_dynamicAction.default.create({\n            on: 'someAction',\n            actionHandler: null,\n            actionName: null,\n            actionContext: null,\n            actionArguments: wrongActionArguments\n          })]),\n          renderer: {}\n        });\n\n        try {\n          component.sendDynamicAction('someAction');\n        } catch (ex) {\n          assert.strictEqual(/wrong\\s*type\\s*of\\s*.*actionArguments.*/gi.test(ex.message), true, 'Throws assertion failed exception if one of specified \\'dynamicActions\\' has \\'actionArguments\\' property of wrong type \\'' + Ember.typeOf(wrongActionArguments) + '\\'');\n        }\n      });\n    });\n\n    (0, _qunit.test)('Mixin does\\'t break it\\'s owner\\'s standard \\'sendAction\\' logic', function (assert) {\n      assert.expect(1);\n\n      var component = ComponentWithDynamicActionsMixin.create({\n        attrs: {},\n        dynamicActions: Ember.A([_dynamicAction.default.create({\n          on: 'someAction',\n          actionHandler: null,\n          actionName: null,\n          actionContext: null,\n          actionArguments: null\n        })]),\n        renderer: {}\n      });\n\n      var someActionHandlerHasBeenCalled = false;\n      component.attrs.someAction = function () {\n        someActionHandlerHasBeenCalled = true;\n      };\n\n      component.sendDynamicAction('someAction');\n\n      assert.strictEqual(someActionHandlerHasBeenCalled, true, 'Component still normally triggers proper action handlers (binded explicitly with ember API, not with dynamic actions)');\n    });\n\n    (0, _qunit.test)('Mixin triggers specified \\'dynamicActions\\' handlers (\\'actionHandler\\' callbacks only) ' + 'if \\'actionContext\\' isn\\'t specified', function (assert) {\n      assert.expect(10);\n\n      var someActionDynamicHandlerHasBeenCalled = false;\n      var someAnotherActionDynamicHandlerHasBeenCalled = false;\n      var someActionAgainDynamicHandlerHasBeenCalled = false;\n\n      var component = ComponentWithDynamicActionsMixin.create({\n        attrs: {},\n        dynamicActions: Ember.A([_dynamicAction.default.create({\n          on: 'someAction',\n          actionHandler: function actionHandler() {\n            someActionDynamicHandlerHasBeenCalled = true;\n          },\n          actionName: null,\n          actionContext: null,\n          actionArguments: null\n        }), _dynamicAction.default.create({\n          on: 'someAnotherAction',\n          actionHandler: function actionHandler() {\n            someAnotherActionDynamicHandlerHasBeenCalled = true;\n          },\n          actionName: null,\n          actionContext: null,\n          actionArguments: null\n        }), _dynamicAction.default.create({\n          on: 'someAction',\n          actionHandler: function actionHandler() {\n            someActionAgainDynamicHandlerHasBeenCalled = true;\n          },\n          actionName: null,\n          actionContext: null,\n          actionArguments: null\n        })]),\n        renderer: {}\n      });\n\n      var someActionHandlerHasBeenCalled = false;\n      component.attrs.someAction = function () {\n        someActionHandlerHasBeenCalled = true;\n      };\n\n      var someAnotherActionHandlerHasBeenCalled = false;\n      component.attrs.someAnotherAction = function () {\n        someAnotherActionHandlerHasBeenCalled = true;\n      };\n\n      component.sendDynamicAction('someAction');\n      assert.strictEqual(someActionHandlerHasBeenCalled, true, 'Component still normally triggers proper action handlers (binded explicitly with ember API, not with dynamic actions)');\n      assert.strictEqual(someAnotherActionHandlerHasBeenCalled, false, 'Component still normally doesn\\'t trigger proper action handlers ' + '(binded explicitly with ember API, not with dynamic actions) for yet unsended actions');\n\n      assert.strictEqual(someActionDynamicHandlerHasBeenCalled, true, 'Component triggers specified in dynamic action \\'actionHandler\\' for component\\'s \\'someAction\\'');\n      assert.strictEqual(someAnotherActionDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded to yet unsended \\'someAnotherAction\\'');\n      assert.strictEqual(someActionAgainDynamicHandlerHasBeenCalled, true, 'Component triggers specified in dynamic action another \\'actionHandler\\' for component\\'s \\'someAction\\'');\n\n      someActionHandlerHasBeenCalled = false;\n      someAnotherActionHandlerHasBeenCalled = false;\n      someAnotherActionDynamicHandlerHasBeenCalled = false;\n      someActionDynamicHandlerHasBeenCalled = false;\n      someActionAgainDynamicHandlerHasBeenCalled = false;\n\n      component.sendDynamicAction('someAnotherAction');\n      assert.strictEqual(someActionHandlerHasBeenCalled, false, 'Component still normally doesn\\'t trigger proper action handlers ' + '(binded explicitly with ember API, not with dynamic actions) for yet unsended actions');\n      assert.strictEqual(someAnotherActionHandlerHasBeenCalled, true, 'Component still normally triggers proper action handlers (binded explicitly with ember API, not with dynamic actions)');\n\n      assert.strictEqual(someActionDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded to yet unsended \\'someAction\\'');\n      assert.strictEqual(someAnotherActionDynamicHandlerHasBeenCalled, true, 'Component triggers specified in dynamic action \\'actionHandler\\' for component\\'s \\'anotherAction\\'');\n      assert.strictEqual(someActionAgainDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded to yet unsended \\'someAction\\'');\n    });\n\n    (0, _qunit.test)('Mixin triggers all specified \\'dynamicActions\\' handlers (callbacks & normal actions) on given context', function (assert) {\n      assert.expect(22);\n\n      var someActionControllersHandlerHasBeenCalled = false;\n      var someActionControllersHandlerContext = null;\n\n      var someAnoterActionControllersHandlerHasBeenCalled = false;\n      var someAnotherActionControllersHandlerContext = null;\n\n      var someActionAgainControllersHandlerHasBeenCalled = false;\n      var someActionAgainControllersHandlerContext = null;\n\n      var controller = Ember.Controller.extend({\n        actions: {\n          onSomeAction: function onSomeAction() {\n            someActionControllersHandlerHasBeenCalled = true;\n            someActionControllersHandlerContext = this;\n          },\n\n          onSomeAnotherAction: function onSomeAnotherAction() {\n            someAnoterActionControllersHandlerHasBeenCalled = true;\n            someAnotherActionControllersHandlerContext = this;\n          },\n\n          onSomeActionAgain: function onSomeActionAgain() {\n            someActionAgainControllersHandlerHasBeenCalled = true;\n            someActionAgainControllersHandlerContext = this;\n          }\n        }\n      }).create();\n\n      var someActionDynamicHandlerHasBeenCalled = false;\n      var someActionDynamicHandlerContext = null;\n\n      var someAnotherActionDynamicHandlerHasBeenCalled = false;\n      var someAnotherActionDynamicHandlerContext = null;\n\n      var someActionAgainDynamicHandlerHasBeenCalled = false;\n      var someActionAgainDynamicHandlerContext = null;\n\n      var component = ComponentWithDynamicActionsMixin.create({\n        attrs: {},\n        dynamicActions: Ember.A([_dynamicAction.default.create({\n          on: 'someAction',\n          actionHandler: function actionHandler() {\n            someActionDynamicHandlerHasBeenCalled = true;\n            someActionDynamicHandlerContext = this;\n          },\n          actionName: 'onSomeAction',\n          actionContext: controller,\n          actionArguments: null\n        }), _dynamicAction.default.create({\n          on: 'someAnotherAction',\n          actionHandler: function actionHandler() {\n            someAnotherActionDynamicHandlerHasBeenCalled = true;\n            someAnotherActionDynamicHandlerContext = this;\n          },\n          actionName: 'onSomeAnotherAction',\n          actionContext: controller,\n          actionArguments: null\n        }), _dynamicAction.default.create({\n          on: 'someAction',\n          actionHandler: function actionHandler() {\n            someActionAgainDynamicHandlerHasBeenCalled = true;\n            someActionAgainDynamicHandlerContext = this;\n          },\n          actionName: 'onSomeActionAgain',\n          actionContext: controller,\n          actionArguments: null\n        })]),\n        renderer: {}\n      });\n\n      var someActionHandlerHasBeenCalled = false;\n      component.attrs.someAction = function () {\n        someActionHandlerHasBeenCalled = true;\n      };\n\n      var someAnotherActionHandlerHasBeenCalled = false;\n      component.attrs.someAnotherAction = function () {\n        someAnotherActionHandlerHasBeenCalled = true;\n      };\n\n      component.sendDynamicAction('someAction');\n      assert.strictEqual(someActionHandlerHasBeenCalled, true, 'Component still normally triggers proper action handlers (binded explicitly with ember API, not with dynamic actions)');\n      assert.strictEqual(someAnotherActionHandlerHasBeenCalled, false, 'Component still normally doesn\\'t trigger proper action handlers ' + '(binded explicitly with ember API, not with dynamic actions) for yet unsended actions');\n\n      assert.strictEqual(someActionDynamicHandlerHasBeenCalled, true, 'Component triggers specified in dynamic action \\'actionHandler\\' for component\\'s \\'someAction\\'');\n      assert.strictEqual(someActionDynamicHandlerContext, controller, 'Component triggers specified in dynamic action \\'actionHandler\\' for ' + 'component\\'s \\'someAction\\' with specified \\'actionContext\\'');\n      assert.strictEqual(someAnotherActionDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded to ' + 'yet unsended \\'someAnotherAction\\'');\n      assert.strictEqual(someActionAgainDynamicHandlerHasBeenCalled, true, 'Component triggers specified in dynamic action another \\'actionHandler\\' for component\\'s \\'someAction\\'');\n      assert.strictEqual(someActionAgainDynamicHandlerContext, controller, 'Component triggers specified in dynamic action \\'actionHandler\\' for ' + 'component\\'s \\'someAction\\' with specified \\'actionContext\\'');\n\n      assert.strictEqual(someActionControllersHandlerHasBeenCalled, true, 'Component triggers on given \\'actionContext\\' action with specified \\'actionName\\' for component\\'s \\'someAction\\'');\n      assert.strictEqual(someActionControllersHandlerContext, controller, 'Component triggers on given \\'actionContext\\' action with specified \\'actionName\\' for ' + 'component\\'s \\'someAction\\' with specified \\'actionContext\\'');\n      assert.strictEqual(someAnotherActionDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded to yet unsended \\'someAnotherAction\\'');\n      assert.strictEqual(someActionAgainControllersHandlerHasBeenCalled, true, 'Component triggers on given \\'actionContext\\' action with specified \\'actionName\\' for component\\'s \\'someAction\\'');\n      assert.strictEqual(someActionAgainControllersHandlerContext, controller, 'Component triggers on given \\'actionContext\\' action with specified \\'actionName\\' for ' + 'component\\'s \\'someAction\\' with specified \\'actionContext\\'');\n\n      someActionHandlerHasBeenCalled = false;\n      someAnotherActionHandlerHasBeenCalled = false;\n\n      someActionDynamicHandlerHasBeenCalled = false;\n      someActionDynamicHandlerContext = null;\n\n      someAnotherActionDynamicHandlerHasBeenCalled = false;\n      someAnotherActionDynamicHandlerContext = null;\n\n      someActionAgainDynamicHandlerHasBeenCalled = false;\n      someActionAgainDynamicHandlerContext = null;\n\n      someActionControllersHandlerHasBeenCalled = false;\n      someActionControllersHandlerContext = null;\n\n      someAnoterActionControllersHandlerHasBeenCalled = false;\n      someAnotherActionControllersHandlerContext = null;\n\n      someActionAgainControllersHandlerHasBeenCalled = false;\n      someActionAgainControllersHandlerContext = null;\n\n      component.sendDynamicAction('someAnotherAction');\n      assert.strictEqual(someActionHandlerHasBeenCalled, false, 'Component still normally doesn\\'t trigger proper action handlers ' + '(binded explicitly with ember API, not with dynamic actions) for yet unsended actions');\n      assert.strictEqual(someAnotherActionHandlerHasBeenCalled, true, 'Component still normally triggers proper action handlers ' + '(binded explicitly with ember API, not with dynamic actions)');\n\n      assert.strictEqual(someActionDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded to yet unsended \\'someAction\\'');\n      assert.strictEqual(someAnotherActionDynamicHandlerHasBeenCalled, true, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded to yet unsended \\'someAnotherAction\\'');\n      assert.strictEqual(someAnotherActionDynamicHandlerContext, controller, 'Component triggers specified in dynamic action \\'actionHandler\\' for ' + 'component\\'s \\'someAnotherAction\\' with specified \\'actionContext\\'');\n      assert.strictEqual(someActionAgainDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded ' + 'to yet unsended \\'someAction\\'');\n\n      assert.strictEqual(someActionControllersHandlerHasBeenCalled, false, 'Component doesn\\'t trigger on given \\'actionContext\\' action with specified \\'actionName\\' binded ' + 'to yet unsended \\'someAction\\'');\n      assert.strictEqual(someAnoterActionControllersHandlerHasBeenCalled, true, 'Component triggers on given \\'actionContext\\' action with specified \\'actionName\\' for ' + 'component\\'s \\'someAnotherAction\\'');\n      assert.strictEqual(someAnotherActionControllersHandlerContext, controller, 'Component triggers on given \\'actionContext\\' action with specified \\'actionName\\' for ' + 'component\\'s \\'someAnotherAction\\' with specified \\'actionContext\\'');\n      assert.strictEqual(someActionAgainControllersHandlerHasBeenCalled, false, 'Component doesn\\'t trigger on given \\'actionContext\\' action with specified \\'actionName\\' binded to ' + 'yet unsended \\'someAction\\'');\n    });\n\n    (0, _qunit.test)('Mixin works properly with \\'dynamicActions\\' added/removed after component initialization', function (assert) {\n      assert.expect(8);\n\n      // Define component without any dynamic actions.\n      var dynamicActions = Ember.A();\n      var component = ComponentWithDynamicActionsMixin.create({\n        attrs: {},\n        dynamicActions: dynamicActions,\n        renderer: {}\n      });\n\n      // Define controller.\n      var someActionControllersHandlerHasBeenCalled = false;\n      var someActionControllersHandlerContext = null;\n      var controller = Ember.Controller.extend({\n        actions: {\n          onSomeAction: function onSomeAction() {\n            someActionControllersHandlerHasBeenCalled = true;\n            someActionControllersHandlerContext = this;\n          }\n        }\n      }).create();\n\n      // Define dynamic action.\n      var someActionDynamicHandlerHasBeenCalled = false;\n      var someActionDynamicHandlerContext = null;\n      var someDynamicAction = _dynamicAction.default.create({\n        on: 'someAction',\n        actionHandler: function actionHandler() {\n          someActionDynamicHandlerHasBeenCalled = true;\n          someActionDynamicHandlerContext = this;\n        },\n        actionName: 'onSomeAction',\n        actionContext: controller,\n        actionArguments: null\n      });\n\n      var someActionHandlerHasBeenCalled = false;\n      component.attrs.someAction = function () {\n        someActionHandlerHasBeenCalled = true;\n      };\n\n      // Add defined dynamic action to a component after it has been already initialized.\n      dynamicActions.pushObject(someDynamicAction);\n\n      // Check that all handlers were called with expected context.\n      component.sendDynamicAction('someAction');\n      assert.strictEqual(someActionHandlerHasBeenCalled, true, 'Component still normally triggers proper action handlers (binded explicitly with ember API, not with dynamic actions)');\n      assert.strictEqual(someActionDynamicHandlerHasBeenCalled, true, 'Component triggers specified in added dynamic action \\'actionHandler\\' for component\\'s \\'someAction\\'');\n      assert.strictEqual(someActionDynamicHandlerContext, controller, 'Component triggers specified in added dynamic action \\'actionHandler\\' for ' + 'component\\'s \\'someAction\\' with specified \\'actionContext\\'');\n      assert.strictEqual(someActionControllersHandlerHasBeenCalled, true, 'Component triggers on added dynamic action\\'s \\'actionContext\\' action with specified \\'actionName\\' for ' + 'component\\'s \\'someAction\\'');\n      assert.strictEqual(someActionControllersHandlerContext, controller, 'Component triggers on added dynamic action\\'s \\'actionContext\\' action with specified \\'actionName\\' for ' + 'component\\'s \\'someAction\\' with specified \\'actionContext\\'');\n\n      someActionHandlerHasBeenCalled = false;\n      someActionDynamicHandlerHasBeenCalled = false;\n      someActionDynamicHandlerContext = false;\n      someActionControllersHandlerHasBeenCalled = false;\n      someActionControllersHandlerContext = false;\n\n      // Remove defined dynamic action to a component after it has been already initialized.\n      dynamicActions.removeObject(someDynamicAction);\n      component.sendDynamicAction('someAction');\n      assert.strictEqual(someActionHandlerHasBeenCalled, true, 'Component still normally triggers proper action handlers (binded explicitly with ember API, not with dynamic actions)');\n      assert.strictEqual(someActionDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in removed dynamic action \\'actionHandler\\' for component\\'s \\'someAction\\'');\n      assert.strictEqual(someActionControllersHandlerHasBeenCalled, false, 'Component doesn\\'t trigger on removed dynamic action\\'s \\'actionContext\\' action with specified \\'actionName\\' for ' + 'component\\'s \\'someAction\\'');\n    });\n\n    (0, _qunit.test)('Mixin adds specified in \\'dynamicActions\\' \\'actionArguments\\' to the beginning of handler\\'s arguments array', function (assert) {\n      assert.expect(3);\n\n      var dynamicActionArguments = Ember.A(['firstDynamicArgument', 'secondDynamicArgument']);\n\n      var someActionHandlerArguments = null;\n      var someActionDynamicHandlerArguments = null;\n      var someActionDynamicControllersHandlerArguments = null;\n\n      var controller = Ember.Controller.extend({\n        actions: {\n          onSomeAction: function onSomeAction() {\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            someActionDynamicControllersHandlerArguments = Ember.A(args);\n          }\n        }\n      }).create();\n\n      var component = ComponentWithDynamicActionsMixin.create({\n        attrs: {},\n        dynamicActions: Ember.A([_dynamicAction.default.create({\n          on: 'someAction',\n          actionHandler: function actionHandler() {\n            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n\n            someActionDynamicHandlerArguments = Ember.A(args);\n          },\n          actionName: 'onSomeAction',\n          actionContext: controller,\n          actionArguments: dynamicActionArguments\n        })]),\n        renderer: {}\n      });\n\n      component.attrs.someAction = function () {\n        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        someActionHandlerArguments = Ember.A(args);\n      };\n\n      // Check that all handlers were called with expected arguments.\n      var originalActionArguments = Ember.A(['firstOriginalArgument', 'secondOriginalArgument']);\n      component.sendDynamicAction.apply(component, ['someAction'].concat(_toConsumableArray(originalActionArguments)));\n      assert.strictEqual(someActionHandlerArguments[0] === originalActionArguments[0] && someActionHandlerArguments[1] === originalActionArguments[1], true, 'Component\\'s original action handler doesn\\'t contain additional \\'actionArguments\\' from \\'dynamicActions\\' (only original arguments)');\n      assert.strictEqual(someActionDynamicHandlerArguments[0] === dynamicActionArguments[0] && someActionDynamicHandlerArguments[1] === dynamicActionArguments[1] && someActionDynamicHandlerArguments[2] === originalActionArguments[0] && someActionDynamicHandlerArguments[3] === originalActionArguments[1], true, 'Component\\'s dynamic action handler contains additional \\'actionArguments\\' from \\'dynamicActions\\'');\n      assert.strictEqual(someActionDynamicControllersHandlerArguments[0] === dynamicActionArguments[0] && someActionDynamicControllersHandlerArguments[1] === dynamicActionArguments[1] && someActionDynamicControllersHandlerArguments[2] === originalActionArguments[0] && someActionDynamicControllersHandlerArguments[3] === originalActionArguments[1], true, 'Action handler with specified \\'actionName\\' contains additional \\'actionArguments\\' from \\'dynamicActions\\'');\n    });\n\n    (0, _qunit.test)('Mixin doesn\\'t trigger component\\'s inner method if outer action handler is not defined', function (assert) {\n      assert.expect(2);\n\n      var component = ComponentWithDynamicActionsMixin.create({\n        attrs: {},\n        renderer: {}\n      });\n\n      var innerSomeActionHasBeenCalled = false;\n      component.someAction = function () {\n        innerSomeActionHasBeenCalled = true;\n      };\n\n      component.sendDynamicAction('someAction');\n      assert.strictEqual(innerSomeActionHasBeenCalled, false, 'Component doesn\\'t trigger inner \\'someAction\\' method');\n\n      var outerSomeActionHasBeenCalled = false;\n      component.attrs.someAction = function () {\n        outerSomeActionHasBeenCalled = true;\n      };\n\n      component.sendDynamicAction('someAction');\n      assert.strictEqual(outerSomeActionHasBeenCalled && !innerSomeActionHasBeenCalled, true, 'Component trigger\\'s outer \\'someAction\\' handler');\n    });\n  });\n});","define('dummy/tests/unit/mixins/dynamic-properties-test', ['ember-flexberry/mixins/dynamic-properties', 'qunit'], function (_dynamicProperties, _qunit) {\n  'use strict';\n\n  var ClassWithDynamicPropertiesMixin = Ember.Object.extend(_dynamicProperties.default, {});\n\n  (0, _qunit.module)('Unit | Mixin | dynamic-properties mixin', function () {\n    (0, _qunit.test)('Mixin throws assertion failed exception if specified \\'dynamicProperties\\' property is not an \\'object\\' or an \\'instance\\'', function (assert) {\n      var wrongDynamicPropertiesArray = Ember.A([1, true, false, 'some string', [], function () {}, new Date(), new RegExp()]);\n\n      assert.expect(wrongDynamicPropertiesArray.length);\n\n      wrongDynamicPropertiesArray.forEach(function (wrongDynamicProperties) {\n        try {\n          ClassWithDynamicPropertiesMixin.create({ dynamicProperties: wrongDynamicProperties });\n        } catch (ex) {\n          assert.strictEqual(/wrong\\s*type\\s*of\\s*.*dynamicProperties.*/gi.test(ex.message), true, 'Throws assertion failed exception if specified \\'dynamicProperties\\' property is \\'' + Ember.typeOf(wrongDynamicProperties) + '\\'');\n        }\n      });\n    });\n\n    (0, _qunit.test)('Mixin assignes it\\'s owner\\'s properties form the specified \\'dynamicProperties\\'', function (assert) {\n      assert.expect(1);\n\n      var propertyValue = 'MyValue';\n      var dynamicProperties = { property: propertyValue };\n      var mixinOwner = ClassWithDynamicPropertiesMixin.create({ dynamicProperties: dynamicProperties });\n\n      assert.strictEqual(mixinOwner.get('property'), propertyValue, 'Owner\\'s properties are equals to related \\'dynamicProperties\\'');\n    });\n\n    (0, _qunit.test)('Mixin changes it\\'s owner\\'s properties (when something changes inside related \\'dynamicProperties\\')', function (assert) {\n      assert.expect(2);\n\n      var propertyValue = 'MyValue';\n      var dynamicProperties = { property: propertyValue };\n      var mixinOwner = ClassWithDynamicPropertiesMixin.create({ dynamicProperties: dynamicProperties });\n\n      assert.strictEqual(mixinOwner.get('property'), propertyValue, 'Owner\\'s properties are equals to related \\'dynamicProperties\\'');\n\n      var propertyChangedValue = 'MyChangedValue';\n      Ember.set(dynamicProperties, 'property', propertyChangedValue);\n\n      assert.strictEqual(mixinOwner.get('property'), propertyChangedValue, 'Owner\\'s properties changes when values inside \\'dynamicProperties\\' changes');\n    });\n\n    (0, _qunit.test)('Mixin removes old & adds new owner\\'s properties (when reference to whole \\'dynamicProperties\\' object changes)', function (assert) {\n      assert.expect(22);\n\n      var propertyValue = 'MyProperty';\n      var anotherPropertyValue = 'MyAnotherProperty';\n      var dynamicProperties = { property: propertyValue, anotherProperty: anotherPropertyValue };\n\n      var usualPropertyValue = 'MyUsualProperty';\n\n      var mixinOwner = ClassWithDynamicPropertiesMixin.create({\n        usualProperty: usualPropertyValue,\n        dynamicProperties: dynamicProperties\n      });\n\n      assert.strictEqual(mixinOwner.get('usualProperty'), usualPropertyValue, 'Owner\\'s \\'usualProperty\\' is equals to it\\'s initially defined value');\n      assert.strictEqual(mixinOwner.get('property'), propertyValue, 'Owner\\'s \\'property\\' is equals to related dynamicProperty');\n      assert.strictEqual(mixinOwner.get('anotherProperty'), anotherPropertyValue, 'Owner\\'s \\'anotherProperty\\' is equals to related dynamicProperty');\n\n      var ownerPropertiesNames = Ember.A(Object.keys(mixinOwner));\n      assert.strictEqual(ownerPropertiesNames.includes('usualProperty'), true, 'Owner\\'s properties keys contains \\'usualProperty\\'');\n      assert.strictEqual(ownerPropertiesNames.includes('property'), true, 'Owner\\'s properties keys contains \\'property\\'');\n      assert.strictEqual(ownerPropertiesNames.includes('anotherProperty'), true, 'Owner\\'s properties keys contains \\'anotherProperty\\'');\n\n      var newPropertyValue = 'MyNewProperty';\n      var newAnotherPropertyValue = 'MyNewAnotherProperty';\n      var newDynamicProperties = { newProperty: newPropertyValue, newAnotherProperty: newAnotherPropertyValue };\n      mixinOwner.set('dynamicProperties', newDynamicProperties);\n\n      assert.strictEqual(mixinOwner.get('usualProperty'), usualPropertyValue, 'Owner\\'s \\'usualProperty\\' is equals to it\\'s initially defined value (after change of whole \\'dynamicProperties\\' object)');\n      assert.strictEqual(Ember.typeOf(mixinOwner.get('property')), 'undefined', 'Owner\\'s \\'property\\' is undefined (after change of whole \\'dynamicProperties\\' object)');\n      assert.strictEqual(Ember.typeOf(mixinOwner.get('anotherProperty')), 'undefined', 'Owner\\'s \\'anotherProperty\\' is undefined (after change of whole \\'dynamicProperties\\' object)');\n      assert.strictEqual(mixinOwner.get('newProperty'), newPropertyValue, 'Owner\\'s \\'newProperty\\' is equals to related dynamicProperty (after change of whole \\'dynamicProperties\\' object)');\n      assert.strictEqual(mixinOwner.get('newAnotherProperty'), newAnotherPropertyValue, 'Owner\\'s \\'newAnotherProperty\\' is equals to related dynamicProperty (after change of whole \\'dynamicProperties\\' object)');\n\n      ownerPropertiesNames = Ember.A(Object.keys(mixinOwner));\n      assert.strictEqual(ownerPropertiesNames.includes('usualProperty'), true, 'Owner\\'s properties keys contains \\'usualProperty\\' (after change of whole \\'dynamicProperties\\' object)');\n      assert.strictEqual(ownerPropertiesNames.includes('property'), false, 'Owner\\'s properties keys doesn\\'t contains \\'property\\' (after change of whole \\'dynamicProperties\\' object)');\n      assert.strictEqual(ownerPropertiesNames.includes('anotherProperty'), false, 'Owner\\'s properties keys doesn\\'t contains \\'anotherProperty\\' (after change of whole \\'dynamicProperties\\' object)');\n      assert.strictEqual(ownerPropertiesNames.includes('newProperty'), true, 'Owner\\'s properties keys contains \\'newProperty\\' (after change of whole \\'dynamicProperties\\' object)');\n      assert.strictEqual(ownerPropertiesNames.includes('newAnotherProperty'), true, 'Owner\\'s properties keys contains \\'newAnotherProperty\\' (after change of whole \\'dynamicProperties\\' object)');\n\n      mixinOwner.set('dynamicProperties', null);\n      assert.strictEqual(mixinOwner.get('usualProperty'), usualPropertyValue, 'Owner\\'s \\'usualProperty\\' is equals to it\\'s initially defined value (after change of whole \\'dynamicProperties\\' object to null)');\n      assert.strictEqual(Ember.typeOf(mixinOwner.get('newProperty')), 'undefined', 'Owner\\'s \\'newProperty\\' is undefined (after change of whole \\'dynamicProperties\\' object to null)');\n      assert.strictEqual(Ember.typeOf(mixinOwner.get('newAnotherProperty')), 'undefined', 'Owner\\'s \\'newAnotherProperty\\' is undefined (after change of whole \\'dynamicProperties\\' object to null)');\n\n      ownerPropertiesNames = Ember.A(Object.keys(mixinOwner));\n      assert.strictEqual(ownerPropertiesNames.includes('usualProperty'), true, 'Owner\\'s properties keys contains \\'usualProperty\\' (after change of whole \\'dynamicProperties\\' object to null)');\n      assert.strictEqual(ownerPropertiesNames.includes('newProperty'), false, 'Owner\\'s properties keys doesn\\'t contains \\'newProperty\\' (after change of whole \\'dynamicProperties\\' object to null)');\n      assert.strictEqual(ownerPropertiesNames.includes('newAnotherProperty'), false, 'Owner\\'s properties keys doesn\\'t contains \\'newAnotherProperty\\' (after change of whole \\'dynamicProperties\\' object to null)');\n    });\n\n    (0, _qunit.test)('Mixin removes assigned \\'dynamicProperties\\' before owner will be destroyed', function (assert) {\n      assert.expect(12);\n\n      var propertyValue = 'MyProperty';\n      var anotherPropertyValue = 'MyAnotherProperty';\n      var dynamicProperties = { property: propertyValue, anotherProperty: anotherPropertyValue };\n\n      var usualPropertyValue = 'MyUsualProperty';\n\n      var mixinOwner = ClassWithDynamicPropertiesMixin.create({\n        usualProperty: usualPropertyValue,\n        dynamicProperties: dynamicProperties\n      });\n\n      assert.strictEqual(mixinOwner.get('usualProperty'), usualPropertyValue, 'Owner\\'s \\'usualProperty\\' is equals to it\\'s initially defined value');\n      assert.strictEqual(mixinOwner.get('property'), propertyValue, 'Owner\\'s \\'property\\' is equals to related dynamicProperty');\n      assert.strictEqual(mixinOwner.get('anotherProperty'), anotherPropertyValue, 'Owner\\'s \\'anotherProperty\\' is equals to related dynamicProperty');\n\n      var ownerPropertiesNames = Ember.A(Object.keys(mixinOwner));\n      assert.strictEqual(ownerPropertiesNames.includes('usualProperty'), true, 'Owner\\'s properties keys contains \\'usualProperty\\'');\n      assert.strictEqual(ownerPropertiesNames.includes('property'), true, 'Owner\\'s properties keys contains \\'property\\'');\n      assert.strictEqual(ownerPropertiesNames.includes('anotherProperty'), true, 'Owner\\'s properties keys contains \\'anotherProperty\\'');\n\n      mixinOwner.willDestroy();\n\n      assert.strictEqual(mixinOwner.get('usualProperty'), usualPropertyValue, 'Owner\\'s \\'usualProperty\\' is equals to it\\'s initially defined value (after change of whole \\'dynamicProperties\\' object)');\n      assert.strictEqual(Ember.typeOf(mixinOwner.get('property')), 'undefined', 'Owner\\'s \\'property\\' is undefined (after change of whole \\'dynamicProperties\\' object)');\n      assert.strictEqual(Ember.typeOf(mixinOwner.get('anotherProperty')), 'undefined', 'Owner\\'s \\'anotherProperty\\' is undefined (after change of whole \\'dynamicProperties\\' object)');\n\n      ownerPropertiesNames = Ember.A(Object.keys(mixinOwner));\n      assert.strictEqual(ownerPropertiesNames.includes('usualProperty'), true, 'Owner\\'s properties keys contains \\'usualProperty\\'');\n      assert.strictEqual(ownerPropertiesNames.includes('property'), false, 'Owner\\'s properties keys doesn\\'t contains \\'property\\'');\n      assert.strictEqual(ownerPropertiesNames.includes('anotherProperty'), false, 'Owner\\'s properties keys doesn\\'t contains \\'anotherProperty\\'');\n    });\n  });\n});","define('dummy/tests/unit/mixins/errorable-route-test', ['ember-flexberry/mixins/errorable-route', 'qunit'], function (_errorableRoute, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | errorable route', function () {\n    (0, _qunit.test)('it works', function (assert) {\n      var ErrorableRouteObject = Ember.Object.extend(_errorableRoute.default);\n      var subject = ErrorableRouteObject.create();\n      assert.ok(subject);\n    });\n  });\n});","define('dummy/tests/unit/mixins/flexberry-file-controller-test', ['ember-flexberry/mixins/flexberry-file-controller', 'qunit'], function (_flexberryFileController, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | flexberry file controller', function () {\n    (0, _qunit.test)('it works', function (assert) {\n      var FlexberryFileControllerObject = Ember.Object.extend(_flexberryFileController.default);\n      var subject = FlexberryFileControllerObject.create();\n      assert.ok(subject);\n    });\n  });\n});","define('dummy/tests/unit/mixins/flexberry-groupedit-route-test', ['ember-flexberry/mixins/flexberry-groupedit-route', 'qunit'], function (_flexberryGroupeditRoute, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | flexberry groupedit route', function () {\n    (0, _qunit.test)('it works', function (assert) {\n      var FlexberryGroupeditRouteObject = Ember.Object.extend(_flexberryGroupeditRoute.default);\n      var subject = FlexberryGroupeditRouteObject.create();\n      assert.ok(subject);\n    });\n  });\n});","define('dummy/tests/unit/mixins/lock-route-test', ['ember-flexberry/mixins/lock-route', 'qunit'], function (_lockRoute, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | lock-route', function () {\n    (0, _qunit.test)('it works', function (assert) {\n      assert.expect(3);\n      var done = assert.async();\n      var EditFormRoute = Ember.Route.extend(_lockRoute.default);\n      var route = EditFormRoute.create();\n      Ember.run(function () {\n        assert.ok(route, 'Route created.');\n        Ember.RSVP.all([route.openReadOnly().then(function (answer) {\n          assert.ok(answer, 'Default \\'openReadOnly\\' === \\'true\\'.');\n        }), route.unlockObject().then(function (answer) {\n          assert.ok(answer, 'Default \\'unlockObject\\' === \\'true\\'.');\n        })]).then(done);\n      });\n    });\n  });\n});","define('dummy/tests/unit/mixins/modal-application-route-test', ['ember-flexberry/mixins/modal-application-route', 'qunit'], function (_modalApplicationRoute, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | modal application route mixin', function () {\n    (0, _qunit.test)('it works', function (assert) {\n      var ModalApplicationRouteObject = Ember.Object.extend(_modalApplicationRoute.default);\n      var subject = ModalApplicationRouteObject.create();\n      assert.ok(subject);\n    });\n  });\n});","define('dummy/tests/unit/mixins/multi-list-controller-test', ['ember-flexberry/mixins/multi-list-controller', 'qunit'], function (_multiListController, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | multi list controller', function () {\n    (0, _qunit.test)('it works', function (assert) {\n      var MultiListControllerObject = Ember.Object.extend(_multiListController.default);\n      var subject = MultiListControllerObject.create();\n      assert.ok(subject);\n    });\n  });\n});","define('dummy/tests/unit/mixins/multi-list-model-edit-test', ['ember-flexberry/mixins/multi-list-model-edit', 'qunit'], function (_multiListModelEdit, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | multi list model edit', function () {\n    (0, _qunit.test)('it works', function (assert) {\n      var MultiListModelEditObject = Ember.Object.extend(_multiListModelEdit.default);\n      var subject = MultiListModelEditObject.create();\n      assert.ok(subject);\n    });\n  });\n});","define('dummy/tests/unit/mixins/multi-list-model-test', ['ember-flexberry/mixins/multi-list-model', 'qunit'], function (_multiListModel, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | multi list model', function () {\n    (0, _qunit.test)('it works', function (assert) {\n      var MultiListModelObject = Ember.Object.extend(_multiListModel.default);\n      var subject = MultiListModelObject.create();\n      assert.ok(subject);\n    });\n  });\n});","define('dummy/tests/unit/mixins/multi-list-route-test', ['ember-flexberry/mixins/multi-list-route', 'qunit'], function (_multiListRoute, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | multi list route', function () {\n    (0, _qunit.test)('it works', function (assert) {\n      var MultiListRouteObject = Ember.Object.extend(_multiListRoute.default);\n      var subject = MultiListRouteObject.create();\n      assert.ok(subject);\n    });\n  });\n});","define('dummy/tests/unit/mixins/paginated-controller-test', ['ember-flexberry/mixins/paginated-controller', 'qunit'], function (_paginatedController, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | paginated controller mixin', function () {\n    (0, _qunit.test)('it works', function (assert) {\n      var PaginatedControllerObject = Ember.Object.extend(_paginatedController.default);\n      var subject = PaginatedControllerObject.create();\n      assert.ok(subject);\n    });\n  });\n});","define('dummy/tests/unit/mixins/paginated-route-test', ['ember-flexberry/mixins/paginated-route', 'qunit'], function (_paginatedRoute, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | paginated route mixin', function () {\n    (0, _qunit.test)('it works', function (assert) {\n      var PaginatedRouteObject = Ember.Object.extend(_paginatedRoute.default);\n      var subject = PaginatedRouteObject.create();\n      assert.ok(subject);\n    });\n  });\n});","define('dummy/tests/unit/mixins/predicate-from-filters-test', ['ember-flexberry/mixins/predicate-from-filters', 'qunit'], function (_predicateFromFilters, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | predicate from filters', function () {\n    (0, _qunit.test)('it works', function (assert) {\n      var PredicateFromFiltersObject = Ember.Object.extend(_predicateFromFilters.default);\n      var subject = PredicateFromFiltersObject.create();\n      assert.ok(subject);\n    });\n  });\n});","define('dummy/tests/unit/mixins/reload-list-mixin-test', ['ember-data', 'ember-flexberry/mixins/reload-list-mixin', 'qunit', 'dummy/tests/helpers/start-app', 'ember-flexberry-data/models/model', 'ember-flexberry-data/utils/attributes', 'ember-flexberry-data/serializers/odata', 'ember-flexberry-data/query/predicate'], function (_emberData, _reloadListMixin, _qunit, _startApp, _model, _attributes, _odata, _predicate) {\n  'use strict';\n\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  };\n\n  (0, _qunit.module)('Unit | Mixin | reload list mixin', function () {\n    (0, _qunit.test)('it works', function (assert) {\n      var ReloadListMixinObject = Ember.Object.extend(_reloadListMixin.default);\n      var subject = ReloadListMixinObject.create();\n      assert.ok(subject);\n    });\n\n    (0, _qunit.test)('it properly generates simple filter predicate', function (assert) {\n      var Model = _model.default.extend({\n        firstName: _emberData.default.attr('string')\n      });\n\n      Model.defineProjection('EmployeeE', 'employeeTest', {\n        firstName: (0, _attributes.attr)()\n      });\n\n      var modelSerializer = _odata.default.extend({});\n      var projection = Ember.get(Model, 'projections').EmployeeE;\n\n      var app = (0, _startApp.default)();\n\n      app.register('model:employeeTest', Model);\n      app.register('serializer:employeeTest', modelSerializer);\n      var store = app.__container__.lookup('service:store');\n\n      var ReloadListMixinObject = Ember.Object.extend(_reloadListMixin.default);\n      var objectInstance = ReloadListMixinObject.create();\n      objectInstance.store = store;\n\n      var result = objectInstance._getFilterPredicate(projection, { filter: 'test' });\n      var resultUndefined = objectInstance._getFilterPredicate(projection, { filter: undefined });\n      var resultEmpty = objectInstance._getFilterPredicate(projection, { filter: '' });\n      Ember.run(app, 'destroy');\n\n      assert.equal(typeof result === 'undefined' ? 'undefined' : _typeof(result), 'object');\n      assert.equal(result.constructor, _predicate.StringPredicate);\n      assert.equal(result.attributePath, 'firstName');\n      assert.equal(result.containsValue, 'test');\n\n      assert.equal(resultUndefined, null);\n      assert.equal(resultEmpty, null);\n    });\n\n    (0, _qunit.test)('it properly generates complex filter predicate', function (assert) {\n      var Model0 = _model.default.extend({\n        firstName: _emberData.default.attr('string'),\n        lastName: _emberData.default.attr('string'),\n        dateField: _emberData.default.attr('date'),\n        numberField: _emberData.default.attr('number')\n      });\n\n      var app = (0, _startApp.default)();\n      app.register('model:employeeTest2', Model0);\n\n      var Model = _model.default.extend({\n        firstName: _emberData.default.attr('string'),\n        lastName: _emberData.default.attr('string'),\n        dateField: _emberData.default.attr('date'),\n        numberField: _emberData.default.attr('number'),\n        masterField: _emberData.default.belongsTo('employeeTest2', { inverse: null, async: false })\n      });\n\n      app.register('model:employeeTest', Model);\n\n      Model.defineProjection('EmployeeE', 'employeeTest', {\n        firstName: (0, _attributes.attr)(),\n        lastName: (0, _attributes.attr)(),\n        dateField: (0, _attributes.attr)(),\n        numberField: (0, _attributes.attr)(),\n        reportsTo: (0, _attributes.belongsTo)('employeeTest2', 'Reports To', {\n          firstName: (0, _attributes.attr)('Reports To - First Name', {\n            hidden: true\n          })\n        }, {\n          displayMemberPath: 'firstName'\n        })\n      });\n\n      var modelSerializer = _odata.default.extend({});\n      var modelSerializer0 = _odata.default.extend({});\n      var projection = Ember.get(Model, 'projections').EmployeeE;\n\n      app.register('serializer:employeeTest2', modelSerializer0);\n      app.register('serializer:employeeTest', modelSerializer);\n      var store = app.__container__.lookup('service:store');\n\n      var ReloadListMixinObject = Ember.Object.extend(_reloadListMixin.default);\n      var objectInstance = ReloadListMixinObject.create();\n      objectInstance.store = store;\n      var result = objectInstance._getFilterPredicate(projection, { filter: '123' });\n      Ember.run(app, 'destroy');\n\n      assert.equal(typeof result === 'undefined' ? 'undefined' : _typeof(result), 'object');\n      assert.equal(result.constructor, _predicate.ComplexPredicate);\n      assert.equal(result.condition, 'or');\n\n      // It counts only string fields.\n      assert.equal(result.predicates.length, 4);\n      assert.equal(result.predicates[0].constructor, _predicate.StringPredicate);\n      assert.equal(result.predicates[0].attributePath, 'firstName');\n      assert.equal(result.predicates[0].containsValue, '123');\n      assert.equal(result.predicates[2].constructor, _predicate.SimplePredicate);\n      assert.equal(result.predicates[2].attributePath, 'numberField');\n      assert.equal(result.predicates[2].operator, 'eq');\n      assert.equal(result.predicates[2].value, '123');\n      assert.equal(result.predicates[3].constructor, _predicate.StringPredicate);\n      assert.equal(result.predicates[3].attributePath, 'reportsTo.firstName');\n      assert.equal(result.predicates[3].containsValue, '123');\n    });\n  });\n});","define('dummy/tests/unit/mixins/sortable-controller-test', ['ember-flexberry/mixins/sortable-controller', 'qunit'], function (_sortableController, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | sortable controller mixin', function () {\n    (0, _qunit.test)('it works', function (assert) {\n      var SortableControllerObject = Ember.Object.extend(_sortableController.default);\n      var subject = SortableControllerObject.create();\n      assert.ok(subject);\n    });\n  });\n});","define('dummy/tests/unit/mixins/sortable-route-test', ['ember-flexberry/mixins/sortable-route', 'qunit'], function (_sortableRoute, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | sortable route mixin', function () {\n    (0, _qunit.test)('it works', function (assert) {\n      var SortableRouteObject = Ember.Object.extend(_sortableRoute.default);\n      var subject = SortableRouteObject.create();\n      assert.ok(subject);\n    });\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-flexberry-user-setting-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | new-platform-flexberry-flexberry-user-setting', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var store = this.owner.lookup('service:store');\n      var model = Ember.run(function () {\n        return store.createRecord('new-platform-flexberry-flexberry-user-setting', {});\n      });\n      assert.ok(model);\n    });\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-services-lock-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | new-platform-flexberry-services-lock', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var store = this.owner.lookup('service:store');\n      var model = Ember.run(function () {\n        return store.createRecord('new-platform-flexberry-services-lock', {});\n      });\n      assert.ok(model);\n    });\n  });\n});","define('dummy/tests/unit/routes/application-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:application');\n      assert.ok(route);\n    });\n  });\n});","define('dummy/tests/unit/routes/edit-form-new-test', ['ember-flexberry/routes/edit-form-new', 'ember-flexberry-data/models/model', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (_editFormNew, _model, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  var app = void 0;\n  var getConfiguredTestRoute = function getConfiguredTestRoute(modelCurrentNotSaved, modelSelectedDetail) {\n    var route = _editFormNew.default.create();\n\n    var model = _model.default;\n    model.defineProjection('testProjection', 'test-model');\n    var detailInteractionServiceMock = Ember.Object.create({\n      modelCurrentNotSaved: !Ember.isNone(modelCurrentNotSaved) && modelCurrentNotSaved ? model : null,\n      modelSelectedDetail: !Ember.isNone(modelSelectedDetail) && modelSelectedDetail ? model : null\n    });\n\n    var store = app.__container__.lookup('service:store');\n    app.register('model:test-model', model);\n\n    route.set('store', store);\n    route.set('modelName', 'test-model');\n    route.set('prototypeProjection', 'testProjection');\n    route.set('flexberryDetailInteractionService', detailInteractionServiceMock);\n\n    return route;\n  };\n\n  (0, _qunit.module)('Unit | Route | edit form new', function (hooks) {\n    hooks.beforeEach(function () {\n      app = (0, _startApp.default)();\n    });\n\n    hooks.afterEach(function () {\n      (0, _destroyApp.default)(app);\n    });\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = _editFormNew.default.create();\n      assert.ok(route);\n    });\n\n    (0, _qunit.test)('return model as Promise main', function (assert) {\n      var route = getConfiguredTestRoute();\n\n      assert.ok(route);\n      Ember.run(function () {\n        var record = route.model({}, { queryParams: {} });\n        assert.equal(record instanceof Ember.RSVP.Promise, true);\n      });\n    });\n\n    (0, _qunit.test)('return model as Promise modelCurrentNotSaved', function (assert) {\n      var route = getConfiguredTestRoute(true);\n\n      assert.ok(route);\n      Ember.run(function () {\n        var record = route.model({}, { queryParams: {} });\n        assert.equal(record instanceof Ember.RSVP.Promise, true);\n      });\n    });\n\n    (0, _qunit.test)('return model as Promise modelSelectedDetail', function (assert) {\n      var route = getConfiguredTestRoute(false, true);\n\n      assert.ok(route);\n      Ember.run(function () {\n        var record = route.model({}, { queryParams: {} });\n        assert.equal(record instanceof Ember.RSVP.Promise, true);\n      });\n    });\n\n    (0, _qunit.test)('return model as Promise prototypeId', function (assert) {\n      var route = getConfiguredTestRoute();\n\n      assert.ok(route);\n      Ember.run(function () {\n        var record = route.model({}, { queryParams: { prototypeId: 'test-id' } });\n        assert.equal(record instanceof Ember.RSVP.Promise, true);\n      });\n    });\n  });\n});","define('dummy/tests/unit/routes/edit-form-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | edit form', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:edit-form');\n      assert.ok(route);\n    });\n  });\n});","define('dummy/tests/unit/routes/list-form-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | list form', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:list-form');\n      assert.ok(route);\n    });\n  });\n});","define('dummy/tests/unit/routes/new-platform-flexberry-services-lock-list-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | new-platform-flexberry-services-lock-list', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:new-platform-flexberry-services-lock-list');\n      assert.ok(route);\n    });\n  });\n});","define('dummy/tests/unit/routes/projected-model-form-test', ['qunit', 'ember-qunit', 'ember-flexberry/routes/projected-model-form'], function (_qunit, _emberQunit, _projectedModelForm) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | projected model form', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = _projectedModelForm.default.create();\n      assert.ok(route);\n    });\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-services-lock-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Serializer | new-platform-flexberry-services-lock', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it serializes records', function (assert) {\n      var store = this.owner.lookup('service:store');\n      var record = Ember.run(function () {\n        return store.createRecord('new-platform-flexberry-services-lock', {});\n      });\n      var serializedRecord = record.serialize();\n\n      assert.ok(serializedRecord);\n    });\n  });\n});","define('dummy/tests/unit/services/app-state-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | app-state', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists and works', function (assert) {\n      var service = this.owner.lookup('service:app-state');\n\n      assert.throws(function () {\n        service.set('state', 'invalid');\n      });\n      assert.equal(service.get('state'), '', 'By default is empty string.');\n\n      service.loading();\n      assert.equal(service.get('state'), 'loading', 'Change to \\'loading\\'.');\n\n      service.success();\n      assert.equal(service.get('state'), 'success', 'Change to \\'success\\'.');\n\n      service.error();\n      assert.equal(service.get('state'), 'error', 'Change to \\'error\\'.');\n\n      service.warning();\n      assert.equal(service.get('state'), 'warning', 'Change to \\'warning\\'.');\n\n      service.reset();\n      assert.equal(service.get('state'), '', 'Reset to the default value.');\n    });\n  });\n});","define('dummy/tests/unit/services/compatibility-validations-test', ['qunit', 'ember-validations/validators/local/absence', 'ember-validations/validators/local/acceptance', 'ember-validations/validators/local/confirmation', 'ember-validations/validators/local/exclusion', 'ember-validations/validators/local/format', 'ember-validations/validators/local/inclusion', 'ember-validations/validators/local/length', 'ember-validations/validators/local/numericality', 'ember-validations/validators/local/presence', 'ember-flexberry/services/compatibility-validations', 'dummy/tests/helpers/start-app'], function (_qunit, _absence, _acceptance, _confirmation, _exclusion, _format, _inclusion, _length, _numericality, _presence, _compatibilityValidations, _startApp) {\n  'use strict';\n\n  var get = Ember.get;\n\n\n  (0, _qunit.module)('Unit | Service | compatibility-validations', function () {\n    (0, _qunit.test)('it works', function (assert) {\n      var app = (0, _startApp.default)();\n      var service = _compatibilityValidations.default.create(app.__container__.ownerInjection());\n      var cache = get(service, 'cache');\n\n      assert.ok(cache.absence === _absence.default);\n      assert.ok(cache.acceptance === _acceptance.default);\n      assert.ok(cache.confirmation === _confirmation.default);\n      assert.ok(cache.exclusion === _exclusion.default);\n      assert.ok(cache.format === _format.default);\n      assert.ok(cache.inclusion === _inclusion.default);\n      assert.ok(cache.length === _length.default);\n      assert.ok(cache.numericality === _numericality.default);\n      assert.ok(cache.presence === _presence.default);\n    });\n  });\n});","define('dummy/tests/unit/services/detail-interaction-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | detail interaction', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var service = this.owner.lookup('service:detail-interaction');\n      assert.ok(service);\n    });\n  });\n});","define('dummy/tests/unit/services/device-test', ['qunit', 'ember-qunit', 'sinon', 'ember-flexberry/services/device'], function (_qunit, _emberQunit, _sinon, _device) {\n  'use strict';\n\n  /* eslint-disable-next-line qunit/no-global-module-test */ // https://github.com/platinumazure/eslint-plugin-qunit/issues/75\n  (0, _qunit.module)('Unit | Service | device', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    hooks.beforeEach(function () {\n      _sinon.default.stub(Ember, 'getOwner').returns({ application: { deviceService: {} } });\n    });\n\n    hooks.afterEach(function () {\n      // eslint-disable-next-line ember/new-module-imports\n      Ember.getOwner.restore();\n    });\n\n    /* eslint-disable-next-line qunit/no-global-module-test */\n    (0, _qunit.test)('device service isMobile work', function (assert) {\n      var service = _device.default.create();\n      var fakeMobile = _sinon.default.fake.returns(true);\n      service.mobile = fakeMobile;\n\n      assert.ok(service.isMobile());\n      assert.ok(fakeMobile.called);\n    });\n\n    /* eslint-disable-next-line qunit/no-global-module-test */\n    (0, _qunit.test)('device service isDesktop work', function (assert) {\n      var service = _device.default.create();\n      var fakeDesktop = _sinon.default.fake.returns(true);\n      service.desktop = fakeDesktop;\n\n      assert.ok(service.isDesktop());\n      assert.ok(fakeDesktop.called);\n    });\n\n    /* eslint-disable-next-line qunit/no-global-module-test */\n    (0, _qunit.test)('device service isTablet work', function (assert) {\n      var service = _device.default.create();\n      var fakeTablet = _sinon.default.fake.returns(true);\n      service.tablet = fakeTablet;\n\n      assert.ok(service.isTablet());\n      assert.ok(fakeTablet.called);\n    });\n\n    /* eslint-disable-next-line qunit/no-global-module-test */\n    (0, _qunit.test)('device service isTv work', function (assert) {\n      var service = _device.default.create();\n      var fakeTv = _sinon.default.fake.returns(true);\n      service.television = fakeTv;\n\n      assert.ok(service.isTv());\n      assert.ok(fakeTv.called);\n    });\n\n    /* eslint-disable-next-line qunit/no-global-module-test */\n    (0, _qunit.test)('device service pathPrefixes work Desktop', function (assert) {\n      var service = _device.default.create();\n      var fakeDesktop = _sinon.default.fake.returns(true);\n      service.desktop = fakeDesktop;\n\n      var pathPrefixes = service.pathPrefixes(false);\n\n      assert.equal(pathPrefixes.length, 0);\n      assert.ok(fakeDesktop.called);\n    });\n\n    /* eslint-disable-next-line qunit/no-global-module-test */\n    (0, _qunit.test)('device service pathPrefixes work Mobile', function (assert) {\n      var service = _device.default.create();\n      var fakeDesktop = _sinon.default.fake.returns(false);\n      var fakeMobile = _sinon.default.fake.returns(true);\n      var fakeTablet = _sinon.default.fake.returns(false);\n      var fakeTv = _sinon.default.fake.returns(false);\n      service.desktop = fakeDesktop;\n      service.mobile = fakeMobile;\n      service.tablet = fakeTablet;\n      service.tv = fakeTv;\n\n      var pathPrefixes = service.pathPrefixes(false);\n\n      assert.equal(pathPrefixes.length, 1);\n      assert.equal(pathPrefixes[0], 'mobile');\n      assert.ok(fakeDesktop.called);\n      assert.ok(fakeMobile.called);\n    });\n\n    /* eslint-disable-next-line qunit/no-global-module-test */\n    (0, _qunit.test)('device service pathPrefixes work Tablet', function (assert) {\n      var service = _device.default.create();\n      var fakeDesktop = _sinon.default.fake.returns(false);\n      var fakeMobile = _sinon.default.fake.returns(false);\n      var fakeTablet = _sinon.default.fake.returns(true);\n      var fakeTv = _sinon.default.fake.returns(false);\n      service.desktop = fakeDesktop;\n      service.mobile = fakeMobile;\n      service.tablet = fakeTablet;\n      service.tv = fakeTv;\n\n      var pathPrefixes = service.pathPrefixes(false);\n\n      assert.equal(pathPrefixes.length, 1);\n      assert.equal(pathPrefixes[0], 'mobile');\n      assert.ok(fakeDesktop.called);\n      assert.ok(fakeTablet.called);\n    });\n  });\n});","define('dummy/tests/unit/services/form-load-time-tracker-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | form load time tracker', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var service = this.owner.lookup('service:form-load-time-tracker');\n      assert.ok(service);\n    });\n  });\n});","define('dummy/tests/unit/services/log-test', ['ember-data', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app', 'dummy/config/environment'], function (_emberData, _qunit, _startApp, _destroyApp, _environment) {\n  'use strict';\n\n  var app = void 0; //TODO Import Module. Replace Ember.Logger, Ember.testing = false;\n\n  var adapter = void 0;\n  var saveModel = void 0;\n\n  (0, _qunit.module)('Unit | Service | log', function (hooks) {\n    hooks.beforeEach(function () {\n      app = (0, _startApp.default)();\n\n      adapter = Ember.Test.adapter;\n      Ember.Test.adapter = null;\n      Ember.testing = false;\n\n      saveModel = _emberData.default.Model.prototype.save;\n      _emberData.default.Model.prototype.save = function () {\n        return Ember.RSVP.resolve(this);\n      };\n    });\n\n    hooks.afterEach(function () {\n      Ember.Test.adapter = adapter;\n      Ember.testing = true;\n\n      _emberData.default.Model.prototype.save = saveModel;\n\n      (0, _destroyApp.default)(app);\n    });\n\n    (0, _qunit.skip)('error works properly', function (assert) {\n      var done = assert.async();\n      assert.expect(10);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = true;\n      logService.storeErrorMessages = true;\n      var errorMessage = 'The system generated an error';\n      var errorMachineName = location.hostname;\n      var errorAppDomainName = window.navigator.userAgent;\n      var errorProcessId = document.location.href;\n\n      logService.on('error', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('category')), 'ERROR');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('eventId')), '0');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('priority')), '1');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('machineName')), errorMachineName);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('appDomainName')), errorAppDomainName);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('processId')), errorProcessId);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('threadName')), _environment.default.modulePrefix);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('message')), errorMessage);\n        var formattedMessageIsOk = savedLogRecord.get('formattedMessage') === '';\n        assert.ok(formattedMessageIsOk);\n\n        done();\n      });\n\n      // Call to Ember.Logger.error.\n      Ember.run(function () {\n        Ember.Logger.error(errorMessage);\n      });\n    });\n\n    (0, _qunit.skip)('logService works properly when storeErrorMessages disabled', function (assert) {\n      var done = assert.async();\n      assert.expect(1);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = true;\n      logService.storeErrorMessages = false;\n      var errorMessage = 'The system generated an error';\n\n      logService.on('error', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        assert.notOk(savedLogRecord);\n\n        done();\n      });\n\n      // Call to Ember.Logger.error.\n      Ember.run(function () {\n        Ember.Logger.error(errorMessage);\n      });\n    });\n\n    (0, _qunit.skip)('logService for error works properly when it\\'s disabled', function (assert) {\n      var done = assert.async();\n      assert.expect(1);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = false;\n      logService.storeErrorMessages = true;\n      var errorMessage = 'The system generated an error';\n\n      logService.on('error', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        if (savedLogRecord) {\n          throw new Error('Log is disabled, DB isn\\'t changed');\n        } else {\n          assert.ok(true, 'Check log call, DB isn\\'t changed');\n        }\n\n        done();\n      });\n\n      // Call to Ember.Logger.error.\n      Ember.run(function () {\n        Ember.Logger.error(errorMessage);\n      });\n    });\n\n    (0, _qunit.skip)('warn works properly', function (assert) {\n      var done = assert.async();\n      assert.expect(10);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = true;\n      logService.storeWarnMessages = true;\n      var warnMessage = 'The system generated an warn';\n      var warnMachineName = location.hostname;\n      var warnAppDomainName = window.navigator.userAgent;\n      var warnProcessId = document.location.href;\n\n      logService.on('warn', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('category')), 'WARN');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('eventId')), '0');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('priority')), '2');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('machineName')), warnMachineName);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('appDomainName')), warnAppDomainName);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('processId')), warnProcessId);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('threadName')), _environment.default.modulePrefix);\n        var savedMessageContainsWarnMessage = savedLogRecord.get('message').indexOf(warnMessage) > -1;\n        assert.ok(savedMessageContainsWarnMessage);\n        var formattedMessageIsOk = savedLogRecord.get('formattedMessage') === '';\n        assert.ok(formattedMessageIsOk);\n\n        done();\n      });\n\n      // Call to warn.\n      Ember.run(function () {\n        (true && Ember.warn(warnMessage, false, { id: 'ember-flexberry-tests.log-test.warn-works-properly' }));\n      });\n    });\n\n    (0, _qunit.skip)('logService works properly when storeWarnMessages disabled', function (assert) {\n      var done = assert.async();\n      assert.expect(1);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = true;\n      logService.storeWarnMessages = false;\n      var warnMessage = 'The system generated an warn';\n\n      logService.on('warn', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        assert.notOk(savedLogRecord);\n\n        done();\n      });\n\n      // Call to warn.\n      Ember.run(function () {\n        (true && Ember.warn(warnMessage, false, { id: 'ember-flexberry-tests.log-test.warn-works-properly-when-store-warn-messages-is-disabled' }));\n      });\n    });\n\n    (0, _qunit.skip)('logService for warn works properly when it\\'s disabled', function (assert) {\n      var done = assert.async();\n      assert.expect(1);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = false;\n      logService.storeWarnMessages = true;\n      var warnMessage = 'The system generated an warn';\n\n      logService.on('warn', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        if (savedLogRecord) {\n          throw new Error('Log is disabled, DB isn\\'t changed');\n        } else {\n          assert.ok(true, 'Check log call, DB isn\\'t changed');\n        }\n\n        done();\n      });\n\n      // Call to warn.\n      Ember.run(function () {\n        (true && Ember.warn(warnMessage, false, { id: 'ember-flexberry-tests.log-test.warn-works-properly-when-log-service-is-disabled' }));\n      });\n    });\n\n    (0, _qunit.skip)('log works properly', function (assert) {\n      var done = assert.async();\n      assert.expect(10);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = true;\n      logService.storeLogMessages = true;\n      var logMessage = 'Logging log message';\n      var logMachineName = location.hostname;\n      var logAppDomainName = window.navigator.userAgent;\n      var logProcessId = document.location.href;\n\n      logService.on('log', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('category')), 'LOG');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('eventId')), '0');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('priority')), '3');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('machineName')), logMachineName);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('appDomainName')), logAppDomainName);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('processId')), logProcessId);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('threadName')), _environment.default.modulePrefix);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('message')), logMessage);\n        var formattedMessageIsOk = savedLogRecord.get('formattedMessage') === '';\n        assert.ok(formattedMessageIsOk);\n\n        done();\n      });\n\n      // Call to Ember.Logger.log.\n      Ember.run(function () {\n        Ember.Logger.log(logMessage);\n      });\n    });\n\n    (0, _qunit.skip)('logService works properly when storeLogMessages disabled', function (assert) {\n      var done = assert.async();\n      assert.expect(1);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = true;\n      logService.storeLogMessages = false;\n      var logMessage = 'Logging log message';\n\n      logService.on('log', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        assert.notOk(savedLogRecord);\n\n        done();\n      });\n\n      // Call to Ember.Logger.log.\n      Ember.run(function () {\n        Ember.Logger.log(logMessage);\n      });\n    });\n\n    (0, _qunit.skip)('logService for log works properly when it\\'s disabled', function (assert) {\n      var done = assert.async();\n      assert.expect(1);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = false;\n      logService.storeLogMessages = true;\n      var logMessage = 'Logging log message';\n\n      logService.on('log', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        if (savedLogRecord) {\n          throw new Error('Log is disabled, DB isn\\'t changed');\n        } else {\n          assert.ok(true, 'Check log call, DB isn\\'t changed');\n        }\n\n        done();\n      });\n\n      // Call to Ember.Logger.log.\n      Ember.run(function () {\n        Ember.Logger.log(logMessage);\n      });\n    });\n\n    (0, _qunit.skip)('info works properly', function (assert) {\n      var done = assert.async();\n      assert.expect(10);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = true;\n      logService.storeInfoMessages = true;\n      var infoMessage = 'Logging info message';\n      var infoMachineName = location.hostname;\n      var infoAppDomainName = window.navigator.userAgent;\n      var infoProcessId = document.location.href;\n\n      logService.on('info', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('category')), 'INFO');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('eventId')), '0');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('priority')), '4');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('machineName')), infoMachineName);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('appDomainName')), infoAppDomainName);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('processId')), infoProcessId);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('threadName')), _environment.default.modulePrefix);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('message')), infoMessage);\n        var formattedMessageIsOk = savedLogRecord.get('formattedMessage') === '';\n        assert.ok(formattedMessageIsOk);\n\n        done();\n      });\n\n      // Call to Ember.Logger.info.\n      Ember.run(function () {\n        Ember.Logger.info(infoMessage);\n      });\n    });\n\n    (0, _qunit.skip)('logService works properly when storeInfoMessages disabled', function (assert) {\n      var done = assert.async();\n      assert.expect(1);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = true;\n      logService.storeInfoMessages = false;\n      var infoMessage = 'Logging info message';\n\n      logService.on('info', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        assert.notOk(savedLogRecord);\n\n        done();\n      });\n\n      // Call to Ember.Logger.info.\n      Ember.run(function () {\n        Ember.Logger.info(infoMessage);\n      });\n    });\n\n    (0, _qunit.skip)('logService for info works properly when it\\'s disabled', function (assert) {\n      var done = assert.async();\n      assert.expect(1);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = false;\n      logService.storeInfoMessages = true;\n      var infoMessage = 'Logging info message';\n\n      logService.on('info', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        if (savedLogRecord) {\n          throw new Error('Log is disabled, DB isn\\'t changed');\n        } else {\n          assert.ok(true, 'Check log call, DB isn\\'t changed');\n        }\n\n        done();\n      });\n\n      // Call to Ember.Logger.info.\n      Ember.run(function () {\n        Ember.Logger.info(infoMessage);\n      });\n    });\n\n    (0, _qunit.skip)('debug works properly', function (assert) {\n      var done = assert.async();\n      assert.expect(10);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = true;\n      logService.storeDebugMessages = true;\n      var debugMessage = 'Logging debug message';\n      var debugMachineName = location.hostname;\n      var debugAppDomainName = window.navigator.userAgent;\n      var debugProcessId = document.location.href;\n\n      logService.on('debug', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('category')), 'DEBUG');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('eventId')), '0');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('priority')), '5');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('machineName')), debugMachineName);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('appDomainName')), debugAppDomainName);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('processId')), debugProcessId);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('threadName')), _environment.default.modulePrefix);\n        var savedMessageContainsDebugMessage = savedLogRecord.get('message').indexOf(debugMessage) > -1;\n        assert.ok(savedMessageContainsDebugMessage);\n        var formattedMessageIsOk = savedLogRecord.get('formattedMessage') === '';\n        assert.ok(formattedMessageIsOk);\n\n        done();\n      });\n\n      // Call to debug.\n      Ember.run(function () {\n        Ember.debug(debugMessage);\n      });\n    });\n\n    (0, _qunit.skip)('logService works properly when storeDebugMessages disabled', function (assert) {\n      var done = assert.async();\n      assert.expect(1);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = true;\n      logService.storeDebugMessages = false;\n      var debugMessage = 'Logging debug message';\n\n      logService.on('debug', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        assert.notOk(savedLogRecord);\n\n        done();\n      });\n\n      // Call to debug.\n      Ember.run(function () {\n        Ember.debug(debugMessage);\n      });\n    });\n\n    (0, _qunit.skip)('logService for debug works properly when it\\'s disabled', function (assert) {\n      var done = assert.async();\n      assert.expect(1);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = false;\n      logService.storeDebugMessages = true;\n      var debugMessage = 'Logging debug message';\n\n      logService.on('debug', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        if (savedLogRecord) {\n          throw new Error('Log is disabled, DB isn\\'t changed');\n        } else {\n          assert.ok(true, 'Check log call, DB isn\\'t changed');\n        }\n\n        done();\n      });\n\n      // Call to debug.\n      Ember.run(function () {\n        Ember.debug(debugMessage);\n      });\n    });\n\n    (0, _qunit.skip)('deprecate works properly', function (assert) {\n      var done = assert.async();\n      assert.expect(10);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = true;\n      logService.storeDeprecationMessages = true;\n      var deprecationMessage = 'The system generated an deprecation';\n      var deprecationMachineName = location.hostname;\n      var deprecationAppDomainName = window.navigator.userAgent;\n      var deprecationProcessId = document.location.href;\n\n      logService.on('deprecation', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('category')), 'DEPRECATION');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('eventId')), '0');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('priority')), '6');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('machineName')), deprecationMachineName);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('appDomainName')), deprecationAppDomainName);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('processId')), deprecationProcessId);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('threadName')), _environment.default.modulePrefix);\n        var savedMessageContainsDeprecationMessage = savedLogRecord.get('message').indexOf(deprecationMessage) > -1;\n        assert.ok(savedMessageContainsDeprecationMessage);\n        var formattedMessageIsOk = savedLogRecord.get('formattedMessage') === '';\n        assert.ok(formattedMessageIsOk);\n\n        done();\n      });\n\n      // Call to deprecate.\n      Ember.run(function () {\n        Ember.deprecate(deprecationMessage, false, { id: 'ember-flexberry-debug.feature-logger-deprecate-test', until: '0' });\n      });\n    });\n\n    (0, _qunit.skip)('logService works properly when storeDeprecationMessages disabled', function (assert) {\n      var done = assert.async();\n      assert.expect(1);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = true;\n      logService.storeDeprecationMessages = false;\n      var deprecationMessage = 'The system generated an deprecation';\n\n      logService.on('deprecation', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        assert.notOk(savedLogRecord);\n\n        done();\n      });\n\n      // Call to deprecate.\n      Ember.run(function () {\n        Ember.deprecate(deprecationMessage, false, { id: 'ember-flexberry-debug.feature-logger-deprecate-test', until: '0' });\n      });\n    });\n\n    (0, _qunit.skip)('logService for deprecate works properly when it\\'s disabled', function (assert) {\n      var done = assert.async();\n      assert.expect(1);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = false;\n      logService.storeDeprecationMessages = true;\n      var deprecationMessage = 'The system generated an deprecation';\n\n      logService.on('deprecation', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        if (savedLogRecord) {\n          throw new Error('Log is disabled, DB isn\\'t changed');\n        } else {\n          assert.ok(true, 'Check log call, DB isn\\'t changed');\n        }\n\n        done();\n      });\n\n      // Call to deprecate.\n      Ember.run(function () {\n        Ember.deprecate(deprecationMessage, false, { id: 'ember-flexberry-debug.feature-logger-deprecate-test', until: '0' });\n      });\n    });\n\n    (0, _qunit.skip)('assert works properly', function (testAssert) {\n      var done = testAssert.async();\n      testAssert.expect(10);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = true;\n      logService.storeErrorMessages = true;\n      var assertMessage = 'The system generated an error';\n      var assertMachineName = location.hostname;\n      var assertAppDomainName = window.navigator.userAgent;\n      var assertProcessId = document.location.href;\n\n      logService.on('error', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        testAssert.strictEqual(Ember.$.trim(savedLogRecord.get('category')), 'ERROR');\n        testAssert.strictEqual(Ember.$.trim(savedLogRecord.get('eventId')), '0');\n        testAssert.strictEqual(Ember.$.trim(savedLogRecord.get('priority')), '1');\n        testAssert.strictEqual(Ember.$.trim(savedLogRecord.get('machineName')), assertMachineName);\n        testAssert.strictEqual(Ember.$.trim(savedLogRecord.get('appDomainName')), assertAppDomainName);\n        testAssert.strictEqual(Ember.$.trim(savedLogRecord.get('processId')), assertProcessId);\n        testAssert.strictEqual(Ember.$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n        testAssert.strictEqual(Ember.$.trim(savedLogRecord.get('threadName')), _environment.default.modulePrefix);\n        var savedMessageContainsAssertMessage = savedLogRecord.get('message').indexOf(assertMessage) > -1;\n        testAssert.ok(savedMessageContainsAssertMessage);\n        var formattedMessageContainsAssertMessage = savedLogRecord.get('formattedMessage').indexOf(assertMessage) > -1;\n        testAssert.ok(formattedMessageContainsAssertMessage);\n\n        done();\n      });\n\n      // Call to assert.\n      Ember.run(function () {\n        (true && !(false) && Ember.assert(assertMessage, false));\n      });\n    });\n\n    (0, _qunit.skip)('logService works properly when storeErrorMessages for assert disabled', function (testAssert) {\n      var done = testAssert.async();\n      testAssert.expect(1);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = true;\n      logService.storeErrorMessages = false;\n      var assertMessage = 'The system generated an error';\n\n      logService.on('error', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        testAssert.notOk(savedLogRecord);\n\n        done();\n      });\n\n      // Call to assert.\n      Ember.run(function () {\n        (true && !(false) && Ember.assert(assertMessage, false));\n      });\n    });\n\n    (0, _qunit.skip)('logService for assert works properly when it\\'s disabled', function (testAssert) {\n      var done = testAssert.async();\n      testAssert.expect(1);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = false;\n      logService.storeErrorMessages = true;\n      var assertMessage = 'The system generated an error';\n\n      logService.on('error', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        if (savedLogRecord) {\n          throw new Error('Log is disabled, DB isn\\'t changed');\n        } else {\n          testAssert.ok(true, 'Check log call, DB isn\\'t changed');\n        }\n\n        done();\n      });\n\n      // Call to assert.\n      Ember.run(function () {\n        (true && !(false) && Ember.assert(assertMessage, false));\n      });\n    });\n\n    (0, _qunit.skip)('throwing exceptions logs properly', function (assert) {\n      var done = assert.async();\n      assert.expect(10);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = true;\n      logService.storeErrorMessages = true;\n      var errorMessage = 'The system thrown an exception';\n      var errorMachineName = location.hostname;\n      var errorAppDomainName = window.navigator.userAgent;\n      var errorProcessId = document.location.href;\n\n      logService.on('error', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('category')), 'ERROR');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('eventId')), '0');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('priority')), '1');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('machineName')), errorMachineName);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('appDomainName')), errorAppDomainName);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('processId')), errorProcessId);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('threadName')), _environment.default.modulePrefix);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('message')), errorMessage);\n        var formattedMessageContainsErrorMessage = savedLogRecord.get('formattedMessage').indexOf(errorMessage) > -1;\n        assert.ok(formattedMessageContainsErrorMessage);\n\n        done();\n      });\n\n      // Throwing an exception.\n      Ember.run(function () {\n        throw new Error(errorMessage);\n      });\n    });\n\n    (0, _qunit.skip)('logService works properly when storeErrorMessages for throw disabled', function (assert) {\n      var done = assert.async();\n      assert.expect(1);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = true;\n      logService.storeErrorMessages = false;\n      var errorMessage = 'The system thrown an exception';\n\n      logService.on('error', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        assert.notOk(savedLogRecord);\n\n        done();\n      });\n\n      // Throwing an exception.\n      Ember.run(function () {\n        throw new Error(errorMessage);\n      });\n    });\n\n    (0, _qunit.skip)('logService for throw works properly when it\\'s disabled', function (assert) {\n      var done = assert.async();\n      assert.expect(1);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = false;\n      logService.storeErrorMessages = true;\n      var errorMessage = 'The system thrown an exception';\n\n      logService.on('error', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        if (savedLogRecord) {\n          throw new Error('Log is disabled, DB isn\\'t changed');\n        } else {\n          assert.ok(true, 'Check log call, DB isn\\'t changed');\n        }\n\n        done();\n      });\n\n      // Throwing an exception.\n      Ember.run(function () {\n        throw new Error(errorMessage);\n      });\n    });\n\n    (0, _qunit.skip)('promise errors logs properly', function (assert) {\n      var done = assert.async();\n      assert.expect(10);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = true;\n      logService.storePromiseErrors = true;\n      logService.showPromiseErrors = false;\n      var promiseErrorMessage = 'Promise error';\n      var promiseMachineName = location.hostname;\n      var promiseAppDomainName = window.navigator.userAgent;\n      var promiseProcessId = document.location.href;\n\n      logService.on('promise', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('category')), 'PROMISE');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('eventId')), '0');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('priority')), '7');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('machineName')), promiseMachineName);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('appDomainName')), promiseAppDomainName);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('processId')), promiseProcessId);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('threadName')), _environment.default.modulePrefix);\n        assert.strictEqual(Ember.$.trim(savedLogRecord.get('message')), promiseErrorMessage);\n\n        var formattedMessageContainsPromiseErrorMessage = savedLogRecord.get('formattedMessage').indexOf(promiseErrorMessage) > -1;\n        assert.ok(formattedMessageContainsPromiseErrorMessage);\n\n        done();\n      });\n\n      // Throwing an exception.\n      Ember.run(function () {\n        Ember.RSVP.reject(promiseErrorMessage);\n      });\n    });\n\n    (0, _qunit.skip)('logService works properly when storePromiseErrors disabled', function (assert) {\n      var done = assert.async();\n      assert.expect(1);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = true;\n      logService.storePromiseErrors = false;\n      logService.showPromiseErrors = false;\n      var promiseErrorMessage = 'Promise error';\n\n      logService.on('promise', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        assert.notOk(savedLogRecord);\n\n        done();\n      });\n\n      // Throwing an exception.\n      Ember.run(function () {\n        Ember.RSVP.reject(promiseErrorMessage);\n      });\n    });\n\n    (0, _qunit.skip)('logService for promise works properly when it\\'s disabled', function (assert) {\n      var done = assert.async();\n      assert.expect(1);\n\n      // Get log-service instance & enable errors logging.\n      var logService = app.__container__.lookup('service:log');\n      logService.enabled = false;\n      logService.storePromiseErrors = true;\n      var promiseErrorMessage = 'Promise error';\n\n      logService.on('promise', this, function (savedLogRecord) {\n        // Check results asyncronously.\n        if (savedLogRecord) {\n          throw new Error('Log is disabled, DB isn\\'t changed');\n        } else {\n          assert.ok(true, 'Check log call, DB isn\\'t changed');\n        }\n\n        done();\n      });\n\n      // Throwing an exception.\n      Ember.run(function () {\n        Ember.RSVP.reject(promiseErrorMessage);\n      });\n    });\n  });\n});","define('dummy/tests/unit/services/objectlistview-events-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | objectlistview events', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var service = this.owner.lookup('service:objectlistview-events');\n      assert.ok(service);\n    });\n  });\n});","define('dummy/tests/unit/services/user-settings-test', ['qunit', 'sinon', 'ember-flexberry/services/user-settings'], function (_qunit, _sinon, _userSettings) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | userSettings', function (hooks) {\n    hooks.beforeEach(function () {\n      _sinon.default.stub(Ember, 'getOwner').returns({\n        resolveRegistration: function resolveRegistration() {\n          return { APP: { components: { flexberryObjectlistview: { defaultPerPage: 5 } } } };\n        },\n\n        factoryFor: function factoryFor() {\n          return { class: { APP: {} } };\n        }\n      });\n    });\n\n    hooks.afterEach(function () {\n      Ember.getOwner.restore();\n    });\n\n    (0, _qunit.test)('get the set perPage', function (assert) {\n      var service = _userSettings.default.create();\n      var fakeDBconnection = _sinon.default.fake.returns({ perPage: 11 }); // simulate input value\n      service.getCurrentUserSetting = fakeDBconnection; //mocking getCurrentUserSetting()\n\n      assert.equal(service.getCurrentPerPage(), 11, 'input PerPage value is correct');\n    });\n\n    (0, _qunit.test)('get the default perPage from user-settings', function (assert) {\n      var service = _userSettings.default.create();\n      var fakeDBconnection = _sinon.default.fake.returns(undefined); //no input value\n      service.getCurrentUserSetting = fakeDBconnection;\n\n      assert.equal(service.getCurrentPerPage(), 5, 'undefined PerPage value replaced with default');\n    });\n  });\n});","define('dummy/tests/unit/utils/cut-string-by-length-test', ['dummy/utils/cut-string-by-length', 'qunit'], function (_cutStringByLength, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Utility | cut string by length', function () {\n    (0, _qunit.test)('cut by length', function (assert) {\n      var result = (0, _cutStringByLength.default)('test string', 6);\n      assert.equal(result, 'test s...');\n\n      result = (0, _cutStringByLength.default)('test string', 20);\n      assert.equal(result, 'test string');\n\n      result = (0, _cutStringByLength.default)('test string', 0);\n      assert.equal(result, 'test string');\n\n      result = (0, _cutStringByLength.default)('test string', 3);\n      assert.equal(result, 'tes...');\n    });\n\n    (0, _qunit.test)('cut by spaces', function (assert) {\n      var result = (0, _cutStringByLength.default)('test string with spaces', 6, true);\n      assert.equal(result, 'test...');\n\n      result = (0, _cutStringByLength.default)('test string with spaces', 50, true);\n      assert.equal(result, 'test string with spaces');\n\n      result = (0, _cutStringByLength.default)('test string with spaces', 0, true);\n      assert.equal(result, 'test string with spaces');\n\n      result = (0, _cutStringByLength.default)('test string with spaces', 3, true);\n      assert.equal(result, 'tes...');\n\n      result = (0, _cutStringByLength.default)('test string with spaces', 18, true);\n      assert.equal(result, 'test string with...');\n\n      result = (0, _cutStringByLength.default)('test string with spaces', 12, true);\n      assert.equal(result, 'test string...');\n    });\n  });\n});","define('dummy/tests/unit/utils/deserialize-sorting-param-test', ['dummy/utils/deserialize-sorting-param', 'qunit'], function (_deserializeSortingParam, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Utility | deserialize sorting param', function () {\n    (0, _qunit.test)('it works', function (assert) {\n      var stringToDeserialize = '+type.name-moderated';\n      var result = (0, _deserializeSortingParam.default)(stringToDeserialize);\n      assert.ok(result);\n      assert.ok(Ember.isArray(result));\n      assert.equal(result.length, 2);\n      assert.equal(result[0].propName, 'type.name');\n      assert.equal(result[0].direction, 'asc');\n      assert.equal(result[1].propName, 'moderated');\n      assert.equal(result[1].direction, 'desc');\n    });\n\n    (0, _qunit.test)('empty param string', function (assert) {\n      var stringToDeserialize = '';\n      var result = (0, _deserializeSortingParam.default)(stringToDeserialize);\n      assert.ok(result);\n      assert.ok(Ember.isArray(result));\n      assert.equal(result.length, 0);\n    });\n  });\n});","define('dummy/tests/unit/utils/get-attr-locale-key-test', ['dummy/utils/get-attr-locale-key', 'qunit'], function (_getAttrLocaleKey, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Utility | get attr locale key', function () {\n    (0, _qunit.test)('get key', function (assert) {\n      var mainModelName = 'ember-flexberry-dummy-suggestion';\n      var projectionName = 'SuggestionE';\n      var bindingPath = 'address';\n      var result = (0, _getAttrLocaleKey.default)(mainModelName, projectionName, bindingPath);\n      assert.equal(result, 'models.' + mainModelName + '.projections.' + projectionName + '.' + bindingPath + '.__caption__');\n    });\n\n    (0, _qunit.test)('get key with relationship', function (assert) {\n      var mainModelName = 'ember-flexberry-dummy-suggestion';\n      var projectionName = 'SuggestionE';\n      var bindingPath = 'address';\n      var relationship = 'type';\n      var result = (0, _getAttrLocaleKey.default)(mainModelName, projectionName, bindingPath, relationship);\n      assert.equal(result, 'models.' + mainModelName + '.projections.' + projectionName + '.' + relationship + '.' + bindingPath + '.__caption__');\n    });\n  });\n});","define('dummy/tests/unit/utils/get-current-agregator-test', ['qunit', 'dummy/tests/helpers/start-app', 'dummy/utils/get-current-agregator'], function (_qunit, _startApp, _getCurrentAgregator) {\n  'use strict';\n\n  var App = void 0;\n\n  (0, _qunit.module)('Unit | Utility | get current agregator', function (hooks) {\n    hooks.beforeEach(function () {\n      App = (0, _startApp.default)();\n    });\n\n    hooks.afterEach(function () {\n      Ember.run(App, 'destroy');\n    });\n\n    (0, _qunit.test)('it works', function (assert) {\n      var detailInteractionService = App.__container__.lookup('service:detail-interaction');\n      var agregator = void 0;\n      Ember.run(function () {\n        agregator = App.__container__.lookup('service:store').createRecord('ember-flexberry-dummy-localization', { name: 'Localization' });\n      });\n\n      var agregatorsArray = Ember.A();\n      detailInteractionService.pushValue('modelCurrentAgregators', agregatorsArray, agregator);\n      var result = _getCurrentAgregator.default.call(agregator);\n      assert.ok(result);\n    });\n  });\n});","define('dummy/tests/unit/utils/get-projection-by-name-test', ['dummy/utils/get-projection-by-name', 'qunit'], function (_getProjectionByName, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Utility | get projection by name', function (hooks) {\n    (0, _qunit.test)('it works', function (assert) {\n      var store = {};\n      store.modelFor = function () {\n        return { projections: { testProjection: { success: true } } };\n      };\n\n      var result = (0, _getProjectionByName.default)('testProjection', 'testModel', store);\n      assert.ok(result && result.success);\n    });\n  });\n});","define('dummy/tests/unit/utils/need-save-current-agregator-test', ['qunit', 'dummy/tests/helpers/start-app', 'dummy/utils/need-save-current-agregator'], function (_qunit, _startApp, _needSaveCurrentAgregator) {\n  'use strict';\n\n  var App = void 0;\n\n  (0, _qunit.module)('Unit | Utility | need save current agregator', function (hooks) {\n    hooks.beforeEach(function () {\n      App = (0, _startApp.default)();\n      var offlineGlobals = App.__container__.lookup('service:offline-globals');\n      offlineGlobals.setOnlineAvailable(false);\n    });\n\n    hooks.afterEach(function () {\n      Ember.run(App, 'destroy');\n    });\n\n    (0, _qunit.test)('it works', function (assert) {\n      var agregator = void 0;\n      Ember.run(function () {\n        agregator = App.__container__.lookup('service:store').createRecord('ember-flexberry-dummy-localization', { name: 'Localization' });\n      });\n\n      var resultOk = _needSaveCurrentAgregator.default.call(agregator, agregator);\n      assert.ok(resultOk);\n\n      var resultNotOk = _needSaveCurrentAgregator.default.call(agregator);\n      assert.notOk(resultNotOk);\n    });\n  });\n});","define('dummy/tests/unit/utils/run-after-test', ['qunit', 'ember-flexberry/utils/run-after'], function (_qunit, _runAfter) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Utility | run-after', function () {\n    (0, _qunit.test)('possible condition', function (assert) {\n      var done = assert.async();\n\n      var counter = 0;\n      var condition = function condition() {\n        return ++counter === 5;\n      };\n\n      (0, _runAfter.default)(null, condition, function () {\n        assert.strictEqual(counter, 5, 'The \\'condition\\' is called five times.');\n        done();\n      });\n    });\n\n    (0, _qunit.test)('impossible condition', function (assert) {\n      var onerror = Ember.onerror;\n      var done = assert.async();\n\n      var error = void 0;\n      var counter = 0;\n      var conditionCalled = false;\n      Ember.onerror = function (e) {\n        error = e;\n      };\n\n      (0, _runAfter.default)(null, function () {\n        conditionCalled = true;\n        throw new Error('Impossible condition.');\n      }, function () {\n        return ++counter;\n      });\n\n      (0, _runAfter.default)(null, function () {\n        return conditionCalled;\n      }, function () {\n        Ember.onerror = onerror;\n\n        assert.strictEqual(counter, 0, 'The \\'handler\\' is not called.');\n        assert.strictEqual(error.message, 'Impossible condition.', 'Condition complete.');\n\n        done();\n      });\n    });\n\n    (0, _qunit.test)('validate context', function (assert) {\n      var done = assert.async();\n\n      var context = {};\n\n      var condition = function condition() {\n        assert.ok(this === context, 'The \\'condition\\' is called with correct context.');\n        return true;\n      };\n\n      var handler = function handler() {\n        assert.ok(this === context, 'The \\'handler\\' is called with correct context.');\n        done();\n      };\n\n      (0, _runAfter.default)(context, condition, handler);\n    });\n  });\n});","define('dummy/tests/unit/utils/serialize-sorting-param-test', ['dummy/utils/serialize-sorting-param', 'qunit'], function (_serializeSortingParam, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Utility | serialize sorting param', function () {\n    (0, _qunit.test)('it works', function (assert) {\n      var sortingObject = [{ propName: 'type.name', direction: 'asc' }, { propName: 'moderated', direction: 'desc' }];\n\n      var result = (0, _serializeSortingParam.default)(sortingObject);\n      assert.ok(result);\n      assert.equal(result, '+type.name-moderated');\n    });\n\n    (0, _qunit.test)('empty array', function (assert) {\n      var sortingObject = [];\n\n      var result = (0, _serializeSortingParam.default)(sortingObject, null);\n      assert.equal(result, null);\n    });\n  });\n});","define('dummy/tests/unit/utils/string-test', ['qunit', 'ember-flexberry/utils/string'], function (_qunit, _string) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Util | render-string', function () {\n    (0, _qunit.test)('Util is function', function (assert) {\n      assert.expect(1);\n\n      assert.strictEqual(Ember.typeOf(_string.render) === 'function', true, 'Imported \\'render-string\\' util is function');\n    });\n\n    (0, _qunit.test)('Util returns null for calls with unexpected arguments', function (assert) {\n      assert.expect(9);\n\n      assert.strictEqual((0, _string.render)(), null, 'Returns null for calls without arguments');\n\n      Ember.A([null, 1, true, false, {}, [], function () {}, new Date()]).forEach(function (wrongFirstArgument) {\n        assert.strictEqual((0, _string.render)(wrongFirstArgument), null, 'Returns null for calls with first argument not of string type');\n      });\n    });\n\n    (0, _qunit.test)('Util returns same string for calls with unexpected render arguments', function (assert) {\n      assert.expect(4);\n\n      var stringWithTemplates = 'I have {{ one }} dollar in my wallet, {{ two }} apples in my bag, and {{ three }} hours of free time';\n      assert.strictEqual((0, _string.render)(stringWithTemplates), stringWithTemplates, 'Returns same string for calls without render options');\n\n      assert.strictEqual((0, _string.render)(stringWithTemplates, { context: null }), stringWithTemplates, 'Returns same string for calls without render context');\n\n      assert.strictEqual((0, _string.render)(stringWithTemplates, { context: { 'ONE': 1, 'TWO': 2, 'THREE': 3 } }), stringWithTemplates, 'Returns same string for calls with context without templates-related keys');\n\n      assert.strictEqual((0, _string.render)(stringWithTemplates, { context: { 'one': 1, 'two': 2, 'three': 3 }, delimiters: ['<<', '>>'] }), stringWithTemplates, 'Returns same string for calls with unexpected delimiters');\n    });\n\n    (0, _qunit.test)('Util returns rendered string for calls with expected render arguments', function (assert) {\n      assert.expect(2);\n\n      var stringWithTemplatesAndDefaultDelimiters = 'I have {{ one }} dollar in my wallet, {{ two }} apples in my bag, and {{ three }} hours of free time';\n      assert.strictEqual((0, _string.render)(stringWithTemplatesAndDefaultDelimiters, { context: { 'one': 1, 'two': 2, 'three': 3 } }), 'I have 1 dollar in my wallet, 2 apples in my bag, and 3 hours of free time', 'Returns rendered string for calls with default delimiters');\n\n      var stringWithTemplatesAndCustomDelimiters = 'I have {% one %} dollar in my wallet, {% two %} apples in my bag, and {% three %} hours of free time';\n      assert.strictEqual((0, _string.render)(stringWithTemplatesAndCustomDelimiters, { context: { 'one': 1, 'two': 2, 'three': 3 }, delimiters: ['{%', '%}'] }), 'I have 1 dollar in my wallet, 2 apples in my bag, and 3 hours of free time', 'Returns rendered string for calls with custom delimiters');\n    });\n  });\n});","define('dummy/config/environment', [], function() {\n  var prefix = 'dummy';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsrdhznpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1bjlHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzhFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClxxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrjttDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtxplEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjxvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxrpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdrpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClhvrRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACprGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACztGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtcdyjhmvtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxnjrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACztiojGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClrmBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzliBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACltHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}