{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/acceptance/components/base-flexberry-lookup-test.js","dummy/tests/acceptance/components/flexberry-dropdown/flexberry-dropdown-conditional-render-test.js","dummy/tests/acceptance/components/flexberry-dropdown/flexberry-dropdown-empty-value-test.js","dummy/tests/acceptance/components/flexberry-groupedit-test.js","dummy/tests/acceptance/components/flexberry-groupedit/flexberry-groupedit-check-all-at-page-test.js","dummy/tests/acceptance/components/flexberry-groupedit/flexberry-groupedit-configurate-row-test.js","dummy/tests/acceptance/components/flexberry-groupedit/flexberry-groupedit-user-button-test.js","dummy/tests/acceptance/components/flexberry-lookup/change-component-lookup-test.js","dummy/tests/acceptance/components/flexberry-lookup/change-model-lookup-test.js","dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-actions-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-autocomplete-en-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-autocomplete-ru-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-autofill-by-limit-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-limit-function-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-preview-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-projection-test.js","dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-relation-name-test.js","dummy/tests/acceptance/components/flexberry-lookup/lookup-test-functions.js","dummy/tests/acceptance/components/flexberry-lookup/visiting-flexberry-lookup-autocomplete-test.js","dummy/tests/acceptance/components/flexberry-lookup/visiting-flexberry-lookup-dropdown-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/checkbox-at-editform-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-empty-filter-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-filter-by-enther-click-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-filter-render-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-filter-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-ge-filter-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-le-filter-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-like-filter-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-neq-filter-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-without-operation-filter-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-all-at-all-page-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-all-at-page-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-checked-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-column-config-save-button-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-configurate-row-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-date-format-moment-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-data-cancel-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-data-immediately-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-with-promise-data-cancel-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-with-promise-data-immediately-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-with-promise-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-button-in-row-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-button-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-edit-button-in-row-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-from-edit-form-with-queryparams-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-getCellComponent-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-goto-editform-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-limit-function-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-locales-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-open-newform-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-paging-dropdown-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-paging-navigation-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-select-record-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-by-computable-field-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-clear-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-with-default-setting-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-user-button-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-wrapper-projection-test.js","dummy/tests/acceptance/components/readonly-test/edit-form-readonly-test.js","dummy/tests/acceptance/edit-form-validation-test/execute-validation-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-base-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-checkbox-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-detail-delete-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-detail-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-dropdown-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-file-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-lookup-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-textarea-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-textbox-letter-test.js","dummy/tests/acceptance/edit-form-validation-test/validation-textbox-numeric-test.js","dummy/tests/app.lint-test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/ember-i18n/test-helpers.js","dummy/tests/helpers/ember-prop-types.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/start-app.js","dummy/tests/integration/components/flexberry-checkbox-test.js","dummy/tests/integration/components/flexberry-ddau-checkbox-test.js","dummy/tests/integration/components/flexberry-dropdown-test.js","dummy/tests/integration/components/flexberry-error-test.js","dummy/tests/integration/components/flexberry-field-test.js","dummy/tests/integration/components/flexberry-groupedit-test.js","dummy/tests/integration/components/flexberry-lookup-test.js","dummy/tests/integration/components/flexberry-sidebar-test.js","dummy/tests/integration/components/flexberry-simpledatetime-test.js","dummy/tests/integration/components/flexberry-sitemap-test.js","dummy/tests/integration/components/flexberry-textarea-test.js","dummy/tests/integration/components/flexberry-textbox-test.js","dummy/tests/integration/components/flexberry-toggler-test.js","dummy/tests/integration/components/flexberry-validationmessage-test.js","dummy/tests/integration/components/flexberry-validationsummary-test.js","dummy/tests/integration/components/form-load-time-tracker-test.js","dummy/tests/integration/components/groupedit-toolbar-test.js","dummy/tests/integration/components/modal-dialog-test.js","dummy/tests/integration/components/object-list-view-test.js","dummy/tests/integration/components/olv-filter-interval-test.js","dummy/tests/integration/components/ui-message-test.js","dummy/tests/test-helper.js","dummy/tests/tests.lint-test.js","dummy/tests/unit/adapters/application-test.js","dummy/tests/unit/controllers/application-test.js","dummy/tests/unit/controllers/detail-edit-form-test.js","dummy/tests/unit/controllers/edit-form-test.js","dummy/tests/unit/controllers/flexberry-file-view-dialog-test.js","dummy/tests/unit/controllers/list-form-test.js","dummy/tests/unit/controllers/lookup-dialog-test.js","dummy/tests/unit/controllers/new-platform-flexberry-services-lock-list-test.js","dummy/tests/unit/helpers/readonly-cell-test.js","dummy/tests/unit/initializers/i18n-test.js","dummy/tests/unit/initializers/render-perf-logger-test.js","dummy/tests/unit/instance-initializers/i18n-test.js","dummy/tests/unit/instance-initializers/lock-test.js","dummy/tests/unit/instance-initializers/moment-test.js","dummy/tests/unit/mixins/dynamic-actions-test.js","dummy/tests/unit/mixins/dynamic-properties-test.js","dummy/tests/unit/mixins/errorable-route-test.js","dummy/tests/unit/mixins/flexberry-file-controller-test.js","dummy/tests/unit/mixins/flexberry-groupedit-route-test.js","dummy/tests/unit/mixins/lock-route-test.js","dummy/tests/unit/mixins/modal-application-route-test.js","dummy/tests/unit/mixins/multi-list-controller-test.js","dummy/tests/unit/mixins/multi-list-model-edit-test.js","dummy/tests/unit/mixins/multi-list-model-test.js","dummy/tests/unit/mixins/multi-list-route-test.js","dummy/tests/unit/mixins/paginated-controller-test.js","dummy/tests/unit/mixins/paginated-route-test.js","dummy/tests/unit/mixins/predicate-from-filters-test.js","dummy/tests/unit/mixins/reload-list-mixin-test.js","dummy/tests/unit/mixins/sortable-controller-test.js","dummy/tests/unit/mixins/sortable-route-test.js","dummy/tests/unit/models/new-platform-flexberry-flexberry-user-setting-test.js","dummy/tests/unit/models/new-platform-flexberry-services-lock-test.js","dummy/tests/unit/routes/application-test.js","dummy/tests/unit/routes/edit-form-new-test.js","dummy/tests/unit/routes/edit-form-test.js","dummy/tests/unit/routes/list-form-test.js","dummy/tests/unit/routes/new-platform-flexberry-services-lock-list-test.js","dummy/tests/unit/routes/projected-model-form-test.js","dummy/tests/unit/serializers/new-platform-flexberry-services-lock-test.js","dummy/tests/unit/services/app-state-test.js","dummy/tests/unit/services/detail-interaction-test.js","dummy/tests/unit/services/form-load-time-tracker-test.js","dummy/tests/unit/services/log-test.js","dummy/tests/unit/services/objectlistview-events-test.js","dummy/tests/unit/utils/cut-string-by-length-test.js","dummy/tests/unit/utils/deserialize-sorting-param-test.js","dummy/tests/unit/utils/get-current-agregator-test.js","dummy/tests/unit/utils/get-projection-by-name-test.js","dummy/tests/unit/utils/need-save-current-agregator-test.js","dummy/tests/unit/utils/serialize-sorting-param-test.js","dummy/tests/unit/utils/string-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dummy/tests/acceptance/components/base-flexberry-lookup-test', ['qunit', 'dummy/tests/helpers/start-app', 'ember-flexberry-data/query/predicate', 'ember-flexberry-data/query/builder'], function (_qunit, _startApp, _predicate, _builder) {\n  'use strict';\n\n  var openLookupDialog = function openLookupDialog($lookup) {\n    return new Ember.RSVP.Promise(function (resolve, reject) {\n      var checkIntervalId = void 0;\n      var checkIntervalSucceed = false;\n      var checkInterval = 500;\n\n      var timeout = 4000;\n\n      var $lookupChooseButton = Ember.$('.ui-change', $lookup);\n\n      // Try to open lookup dialog.\n      Ember.run(function () {\n        $lookupChooseButton.click();\n      });\n\n      // Wait for lookup dialog to be opened & data loaded.\n      Ember.run(function () {\n        checkIntervalId = window.setInterval(function () {\n          var $lookupDialog = Ember.$('.flexberry-modal');\n          var $records = Ember.$('.content table.object-list-view tbody tr', $lookupDialog);\n          if ($records.length === 0) {\n            // Data isn't loaded yet.\n            return;\n          }\n\n          // Data is loaded.\n          // Stop interval & resolve promise.\n          window.clearInterval(checkIntervalId);\n          checkIntervalSucceed = true;\n\n          resolve($lookupDialog);\n        }, checkInterval);\n      });\n\n      // Set wait timeout.\n      Ember.run(function () {\n        window.setTimeout(function () {\n          if (checkIntervalSucceed) {\n            return;\n          }\n\n          // Time is out.\n          // Stop intervals & reject promise.\n          window.clearInterval(checkIntervalId);\n          reject('flexberry-lookup load data operation is timed out');\n        }, timeout);\n      });\n    });\n  };\n\n  var chooseRecordInLookupDialog = function chooseRecordInLookupDialog($lookupDialog, recordIndex) {\n    return new Ember.RSVP.Promise(function (resolve, reject) {\n      var checkIntervalId = void 0;\n      var checkIntervalSucceed = false;\n      var checkInterval = 500;\n\n      var timeout = 4000;\n\n      var $records = Ember.$('.content table.object-list-view tbody tr', $lookupDialog);\n      var $choosedRecord = Ember.$($records[recordIndex]);\n\n      // Try to choose record in the lookup dialog.\n      Ember.run(function () {\n        // Inside object-list-views component click actions are available only if cell in row has been clicked.\n        // Click on whole row wont take an effect.\n        var $choosedRecordFirstCell = Ember.$(Ember.$('td', $choosedRecord)[1]);\n        $choosedRecordFirstCell.click();\n\n        // Click on modal-dialog close icon.\n        // Сrutch correcting irregular bug\n        var $modelDilogClose = Ember.$('.close.icon');\n        $modelDilogClose.click();\n      });\n\n      // Wait for lookup dialog to be closed.\n      Ember.run(function () {\n        checkIntervalId = window.setInterval(function () {\n          if (!$lookupDialog.hasClass('hidden')) {\n            // Dialog is still opened.\n            return;\n          }\n\n          // Dialog is closed.\n          // Stop interval & resolve promise.\n          window.clearInterval(checkIntervalId);\n          checkIntervalSucceed = true;\n\n          resolve();\n        }, checkInterval);\n      });\n\n      // Set wait timeout.\n      Ember.run(function () {\n        window.setTimeout(function () {\n          if (checkIntervalSucceed) {\n            return;\n          }\n\n          // Time is out.\n          // Stop intervals & reject promise.\n          window.clearInterval(checkIntervalId);\n          reject('flexberry-lookup choose record operation is timed out');\n        }, timeout);\n      });\n    });\n  };\n\n  var app = void 0;\n  var latestReceivedRecords = void 0;\n\n  (0, _qunit.module)('Acceptance | flexberry-lookup-base', {\n    beforeEach: function beforeEach() {\n      // Start application.\n      app = (0, _startApp.default)();\n\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = app.__container__.lookup('controller:application');\n      applicationController.set('isInAcceptanceTestMode', true);\n\n      // Override store.query method to receive & remember records which will be requested by lookup dialog.\n      var store = app.__container__.lookup('service:store');\n      var originalQueryMethod = store.query;\n      store.query = function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        // Call original method & remember returned records.\n        return originalQueryMethod.apply(this, args).then(function (records) {\n          latestReceivedRecords = records.toArray();\n\n          return records;\n        });\n      };\n    },\n    afterEach: function afterEach() {\n      // Remove semantic ui modal dialog's dimmer.\n      Ember.$('body .ui.dimmer.modals').remove();\n\n      // Destroy application.\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('changes in component\\'s value causes changes in related model\\'s specified \\'belongsTo\\' relation', function (assert) {\n    visit('components-acceptance-tests/flexberry-lookup/base-operations');\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var model = Ember.get(controller, 'model');\n      var relationName = Ember.get(controller, 'relationName');\n      var displayAttributeName = Ember.get(controller, 'displayAttributeName');\n\n      var $lookup = Ember.$('.flexberry-lookup');\n      var $lookupInput = Ember.$('input', $lookup);\n      assert.strictEqual($lookupInput.val(), '', 'lookup display value is empty by default');\n\n      // Wait for lookup dialog to be opened, choose first record & check component's state.\n      var asyncOperationsCompleted = assert.async();\n      openLookupDialog($lookup).then(function ($lookupDialog) {\n        assert.ok($lookupDialog);\n\n        // Lookup dialog successfully opened & data is loaded.\n        // Try to choose first loaded record.\n        return chooseRecordInLookupDialog($lookupDialog, 0);\n      }).then(function () {\n        // First loaded record chosen successfully.\n        // Check that chosen record is now set to related model's 'belongsTo' relation.\n        var chosenRecord = model.get(relationName);\n        var expectedRecord = latestReceivedRecords[0];\n        assert.strictEqual(chosenRecord, expectedRecord, 'chosen record is set to model\\'s \\'' + relationName + '\\' relation as expected');\n\n        var chosenRecordDisplayAttribute = chosenRecord.get(displayAttributeName);\n        assert.strictEqual($lookupInput.val(), chosenRecordDisplayAttribute, 'lookup display value is equals to chosen record\\'s \\'' + displayAttributeName + '\\' attribute');\n      }).catch(function (reason) {\n        // Error output.\n        assert.ok(false, reason);\n      }).finally(function () {\n        asyncOperationsCompleted();\n      });\n    });\n  });\n\n  (0, _qunit.test)('changes in model\\'s value causes changes in component\\'s specified \\'belongsTo\\' model', function (assert) {\n    assert.expect(2);\n    visit('components-acceptance-tests/flexberry-lookup/base-operations');\n    andThen(function () {\n\n      var $lookup = Ember.$('.flexberry-lookup');\n      var $lookupInput = Ember.$('input', $lookup);\n      assert.strictEqual($lookupInput.val() === '', true, 'lookup display value is empty by default');\n\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var model = Ember.get(controller, 'model');\n      var store = app.__container__.lookup('service:store');\n      var suggestionType = void 0;\n\n      // Create limit for query.\n      var query = new _builder.default(store).from('ember-flexberry-dummy-suggestion-type').selectByProjection('SettingLookupExampleView');\n\n      // Load olv data.\n      store.query('ember-flexberry-dummy-suggestion-type', query.build()).then(function (suggestionTypes) {\n\n        var suggestionTypesArr = suggestionTypes.toArray();\n\n        suggestionType = suggestionTypesArr.objectAt(0);\n      }).then(function () {\n\n        // Change data in the model.\n        model.set('type', suggestionType);\n\n        var done = assert.async();\n\n        setTimeout(function () {\n          $lookupInput = Ember.$('input', $lookup);\n          assert.strictEqual($lookupInput.val() === suggestionType.get('name'), true, 'lookup display value isn\\'t empty');\n          done();\n        }, 100);\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-lookup limit function test', function (assert) {\n\n    visit('components-acceptance-tests/flexberry-lookup/settings-example-limit-function');\n\n    andThen(function () {\n      assert.equal(currentURL(), 'components-acceptance-tests/flexberry-lookup/settings-example-limit-function');\n\n      var $limitFunctionButton = Ember.$('.limitFunction');\n      var $lookupChouseButton = Ember.$('.ui-change');\n\n      Ember.run(function () {\n        $limitFunctionButton.click();\n        $lookupChouseButton.click();\n      });\n\n      var store = app.__container__.lookup('service:store');\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var limitType = controller.limitType;\n      var queryPredicate = new _predicate.StringPredicate('name').contains(limitType);\n\n      // Create limit for query.\n      var query = new _builder.default(store).from('ember-flexberry-dummy-suggestion-type').selectByProjection('SettingLookupExampleView').where(queryPredicate);\n\n      // Load olv data.\n      store.query('ember-flexberry-dummy-suggestion-type', query.build()).then(function (suggestionTypes) {\n\n        var suggestionTypesArr = suggestionTypes.toArray();\n        var suggestionModelLength = suggestionTypesArr.length;\n\n        var done = assert.async();\n\n        Ember.run(function () {\n          setTimeout(function () {\n            var $lookupSearch = Ember.$('.content table.object-list-view');\n            var $lookupSearchThead = $lookupSearch.children('tbody');\n            var $lookupSearchTr = $lookupSearchThead.children('tr');\n            var $lookupRows = $lookupSearchTr.children('td');\n            var $suggestionTableLength = $lookupSearchTr.length;\n\n            assert.expect(2 + $suggestionTableLength);\n\n            assert.strictEqual(suggestionModelLength >= $suggestionTableLength, true, 'Сorrect number of values restrictions limiting function');\n\n            // Сomparison data in the model and olv table.\n            for (var i = 0; i < $suggestionTableLength; i++) {\n              var suggestionType = suggestionTypesArr.objectAt(i);\n              var suggestionTypeName = suggestionType.get('name');\n\n              var $cell = Ember.$($lookupRows[3 * i + 1]);\n              var $cellDiv = $cell.children('div');\n              var $cellText = $cellDiv.text().trim();\n\n              assert.strictEqual(suggestionTypeName === $cellText, true, 'Сorrect data at lookup\\'s olv');\n            }\n\n            done();\n          }, 2000);\n        });\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-lookup actions test', function (assert) {\n    assert.expect(5);\n\n    var controller = void 0;\n    Ember.run(function () {\n      controller = app.__container__.lookup('controller:components-acceptance-tests/flexberry-lookup/settings-example-actions');\n    });\n\n    // Remap remove action.\n    var $onRemoveData = void 0;\n    Ember.set(controller, 'actions.externalRemoveAction', function (actual) {\n      $onRemoveData = actual;\n      assert.notEqual($onRemoveData, undefined, 'Component sends \\'remove\\' action after first click');\n      assert.strictEqual($onRemoveData.relationName, 'type', 'Component sends \\'remove\\' with actual relationName');\n    });\n\n    // Remap chose action.\n    var $onChooseData = void 0;\n    Ember.set(controller, 'actions.externalChooseAction', function (actual) {\n      $onChooseData = actual;\n      assert.notEqual($onChooseData, undefined, 'Component sends \\'choose\\' action after first click');\n      assert.strictEqual($onChooseData.componentName, 'flexberry-lookup', 'Component sends \\'choose\\' with actual componentName');\n      assert.strictEqual($onChooseData.projection, 'SettingLookupExampleView', 'Component sends \\'choose\\' with actual projection');\n    });\n\n    visit('components-acceptance-tests/flexberry-lookup/settings-example-actions');\n    andThen(function () {\n      var $lookupButtouChoose = Ember.$('.ui-change');\n      var $lookupButtouRemove = Ember.$('.ui-clear');\n\n      Ember.run(function () {\n        $lookupButtouChoose.click();\n        $lookupButtouRemove.click();\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-lookup relation name test', function (assert) {\n    assert.expect(1);\n    visit('components-acceptance-tests/flexberry-lookup/settings-example-relation-name');\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var relationName = Ember.get(controller, 'relationName');\n      assert.strictEqual(relationName, 'Temp relation name', 'relationName: \\'' + relationName + '\\' as expected');\n    });\n  });\n\n  (0, _qunit.test)('flexberry-lookup projection test', function (assert) {\n    assert.expect(2);\n\n    visit('components-acceptance-tests/flexberry-lookup/settings-example-projection');\n\n    andThen(function () {\n      assert.equal(currentURL(), 'components-acceptance-tests/flexberry-lookup/settings-example-projection');\n\n      var $lookupButtouChoose = Ember.$('.ui-change');\n\n      // Click choose button.\n      Ember.run(function () {\n        $lookupButtouChoose.click();\n      });\n\n      Ember.run(function () {\n        var done = assert.async();\n        setTimeout(function () {\n\n          var $lookupSearch = Ember.$('.content table.object-list-view');\n          var $lookupSearchThead = $lookupSearch.children('thead');\n          var $lookupSearchTr = $lookupSearchThead.children('tr');\n          var $lookupHeaders = $lookupSearchTr.children('th');\n\n          // Check count at table header.\n          assert.strictEqual($lookupHeaders.length === 3, true, 'Component has SuggestionTypeE projection');\n\n          done();\n        }, 1000);\n      });\n    });\n  });\n\n  (0, _qunit.test)('visiting flexberry-lookup dropdown', function (assert) {\n    assert.expect(13);\n\n    visit('components-acceptance-tests/flexberry-lookup/settings-example-dropdown');\n\n    andThen(function () {\n\n      assert.equal(currentURL(), 'components-acceptance-tests/flexberry-lookup/settings-example-dropdown');\n\n      // Retrieve component, it's inner <input>.\n      var $lookupSearch = Ember.$('.lookup-field');\n      var $lookupButtonChoose = Ember.$('.ui-change');\n      var $lookupButtonClear = Ember.$('.lookup-remove-button');\n\n      assert.strictEqual($lookupSearch.length === 0, true, 'Component has n\\'t flexberry-lookup');\n      assert.strictEqual($lookupButtonChoose.length === 0, true, 'Component has n\\'t button choose');\n      assert.strictEqual($lookupButtonClear.length === 0, true, 'Component has n\\'t button remove');\n\n      // Retrieve component, it's inner <input>.\n      var $dropdown = Ember.$('.flexberry-dropdown.search.selection');\n      var $dropdownSearch = $dropdown.children('.search');\n      var $dropdownIcon = $dropdown.children('.dropdown.icon');\n      var $dropdownMenu = $dropdown.children('.menu');\n      var $deopdownText = $dropdown.children('.text');\n\n      assert.strictEqual($dropdown.length === 1, true, 'Component has class flexberry-dropdown');\n      assert.strictEqual($dropdown.hasClass('search'), true, 'Component\\'s wrapper has \\'search\\' css-class');\n      assert.strictEqual($dropdown.hasClass('selection'), true, 'Component\\'s wrapper has \\'selection\\' css-class');\n      assert.strictEqual($dropdown.hasClass('ember-view'), true, 'Component\\'s wrapper has \\'ember-view\\' css-class');\n      assert.strictEqual($dropdown.hasClass('dropdown'), true, 'Component\\'s wrapper has \\'dropdown\\' css-class');\n\n      assert.strictEqual($dropdownSearch.length === 1, true, 'Component has class search');\n\n      assert.strictEqual($dropdownIcon.length === 1, true, 'Component has class dropdown and icon');\n\n      assert.strictEqual($deopdownText.length === 1, true, 'Component has class text');\n\n      assert.strictEqual($dropdownMenu.length === 1, true, 'Component has class menu');\n    });\n  });\n\n  (0, _qunit.test)('visiting flexberry-lookup autocomplete', function (assert) {\n    assert.expect(5);\n\n    visit('components-acceptance-tests/flexberry-lookup/settings-example-autocomplete');\n\n    andThen(function () {\n\n      assert.equal(currentURL(), 'components-acceptance-tests/flexberry-lookup/settings-example-autocomplete');\n\n      var $lookup = Ember.$('.flexberry-lookup');\n\n      assert.strictEqual($lookup.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n      assert.strictEqual($lookup.hasClass('search'), true, 'Component\\'s wrapper has \\'search\\' css-class');\n\n      var $lookupField = Ember.$('.lookup-field');\n\n      assert.strictEqual($lookupField.hasClass('prompt'), true, 'Component\\'s wrapper has \\'prompt\\' css-class');\n\n      var $result = Ember.$('.result');\n\n      assert.strictEqual($result.length === 1, true, 'Component has inner class \\'result\\'');\n    });\n  });\n\n  (0, _qunit.test)('flexberry-lookup limit function through dynamic properties test', function (assert) {\n\n    var path = 'components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example';\n\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentURL(), path);\n\n      var $limitFunctionButton1 = Ember.$('.firstLimitFunction');\n      var $limitFunctionButton2 = Ember.$('.secondLimitFunction');\n      var $clearLimitFunctionButton = Ember.$('.clearLimitFunction');\n      var limitFunction1 = void 0;\n      var limitFunction2 = void 0;\n\n      var store = app.__container__.lookup('service:store');\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n\n      // Create limit for query.\n      var query = new _builder.default(store).from('ember-flexberry-dummy-suggestion-type').selectByProjection('SettingLookupExampleView').top(2);\n\n      // Load olv data.\n      store.query('ember-flexberry-dummy-suggestion-type', query.build()).then(function (suggestionTypes) {\n        var suggestionTypesArr = suggestionTypes.toArray();\n        limitFunction1 = suggestionTypesArr.objectAt(0).get('name');\n        limitFunction2 = suggestionTypesArr.objectAt(1).get('name');\n      }).then(function () {\n\n        $limitFunctionButton1.click();\n        assert.equal(controller.lookupCustomLimitPredicate._containsValue, limitFunction1, 'Current limit function afther first limit function button click');\n\n        $limitFunctionButton2.click();\n        assert.equal(controller.lookupCustomLimitPredicate._containsValue, limitFunction2, 'Current limit function afther second limit function button click');\n\n        $clearLimitFunctionButton.click();\n        assert.equal(controller.lookupCustomLimitPredicate, undefined, 'Absent limit function afther clear limit function button click');\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-dropdown/flexberry-dropdown-conditional-render-test', ['qunit', 'dummy/tests/helpers/start-app'], function (_qunit, _startApp) {\n  'use strict';\n\n  var app = void 0;\n  var path = 'components-examples/flexberry-dropdown/conditional-render-example';\n  var testName = 'conditional render test';\n\n  (0, _qunit.module)('Acceptance | flexberry-dropdown | ' + testName, {\n    beforeEach: function beforeEach() {\n\n      // Start application.\n      app = (0, _startApp.default)();\n\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = app.__container__.lookup('controller:application');\n      applicationController.set('isInAcceptanceTestMode', true);\n    },\n    afterEach: function afterEach() {\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)(testName, function (assert) {\n    assert.expect(4);\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path, 'Path is correctly');\n\n      var $dropdown = Ember.$('.flexberry-dropdown');\n      assert.equal($dropdown.length, 1, 'Dropdown is render');\n\n      // Select dropdown item.\n      $dropdown.dropdown('set selected', 'Enum value №1');\n\n      var done = assert.async();\n      var timeout = 100;\n      Ember.run.later(function () {\n        var $dropdown = Ember.$('.flexberry-dropdown');\n        assert.equal($dropdown.length, 0, 'Dropdown isn\\'t render');\n\n        var $span = Ember.$('div.field span');\n        assert.equal($span.text(), 'Enum value №1', 'Span is render');\n        done();\n      }, timeout);\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-dropdown/flexberry-dropdown-empty-value-test', ['qunit', 'dummy/tests/helpers/start-app'], function (_qunit, _startApp) {\n  'use strict';\n\n  var app = void 0;\n  var path = 'components-examples/flexberry-dropdown/empty-value-example';\n  var testName = 'empty value test';\n\n  (0, _qunit.module)('Acceptance | flexberry-dropdown | ' + testName, {\n    beforeEach: function beforeEach() {\n\n      // Start application.\n      app = (0, _startApp.default)();\n\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = app.__container__.lookup('controller:application');\n      applicationController.set('isInAcceptanceTestMode', true);\n    },\n    afterEach: function afterEach() {\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)(testName, function (assert) {\n    assert.expect(3);\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path, 'Path is correctly');\n\n      var $dropdown = Ember.$('.flexberry-dropdown');\n      assert.equal($dropdown.length, 1, 'Dropdown is render');\n      assert.equal($dropdown[0].innerText, 'Enum value №2', 'Dropdown value is \"Enum value №2\"');\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-groupedit-test', ['qunit', 'dummy/tests/helpers/start-app', 'ember-test-helpers/wait'], function (_qunit, _startApp, _wait) {\n  'use strict';\n\n  var app = void 0;\n\n  (0, _qunit.module)('Acceptance | flexberry-groupedit', {\n    beforeEach: function beforeEach() {\n      // Start application.\n      app = (0, _startApp.default)();\n\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = app.__container__.lookup('controller:application');\n      applicationController.set('isInAcceptanceTestMode', true);\n    },\n    afterEach: function afterEach() {\n      // Destroy application.\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('it properly rerenders', function (assert) {\n    assert.expect(4);\n    var done = assert.async();\n\n    var path = 'components-acceptance-tests/flexberry-groupedit/properly-rerenders';\n    visit(path);\n    (0, _wait.default)().then(function () {\n\n      assert.equal(Ember.$('.object-list-view').find('tr').length, 2);\n\n      // Add record.\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n\n      var detailModel = controller.get('model.details');\n      var store = controller.get('store');\n\n      var detail1 = store.createRecord('components-examples/flexberry-groupedit/shared/detail');\n      var detail2 = store.createRecord('components-examples/flexberry-groupedit/shared/detail');\n      detailModel.pushObjects([detail1, detail2]);\n\n      (0, _wait.default)().then(function () {\n        assert.equal(Ember.$('.object-list-view').find('tr').length, 3);\n\n        var $componentGroupEditToolbar = Ember.$('.groupedit-toolbar');\n        var $componentButtons = $componentGroupEditToolbar.children('.ui.button');\n        var $componentButtonAdd = Ember.$($componentButtons[0]);\n\n        Ember.run(function () {\n          $componentButtonAdd.click();\n        });\n\n        (0, _wait.default)().then(function () {\n          assert.equal(Ember.$('.object-list-view').find('tr').length, 4, 'details add properly');\n\n          var $componentCheckBoxs = Ember.$('.flexberry-checkbox', Ember.$('.object-list-view'));\n          var $componentFirstCheckBox = Ember.$($componentCheckBoxs[0]);\n\n          Ember.run(function () {\n            $componentFirstCheckBox.click();\n          });\n\n          (0, _wait.default)().then(function () {\n            var $componentButtonRemove = Ember.$($componentButtons[1]);\n\n            Ember.run(function () {\n              $componentButtonRemove.click();\n            });\n\n            assert.equal(Ember.$('.object-list-view').find('tr').length, 3, 'details remove properly');\n            done();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-groupedit/flexberry-groupedit-check-all-at-page-test', ['qunit', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'dummy/tests/helpers/start-app'], function (_qunit, _folvTestsFunctions, _startApp) {\n  'use strict';\n\n  var app = void 0;\n  var path = 'components-examples/flexberry-groupedit/configurate-row-example';\n  var testName = 'check all at page';\n  var olvContainerClass = '.object-list-view-container';\n  var trTableClass = 'table.object-list-view tbody tr';\n\n  (0, _qunit.module)('Acceptance | flexberry-groupedit | ' + testName, {\n    beforeEach: function beforeEach() {\n\n      // Start application.\n      app = (0, _startApp.default)();\n\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = app.__container__.lookup('controller:application');\n      applicationController.set('isInAcceptanceTestMode', true);\n    },\n    afterEach: function afterEach() {\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)(testName, function (assert) {\n    assert.expect(4);\n\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $olv = Ember.$('.object-list-view ');\n      var $thead = Ember.$('th.dt-head-left', $olv)[0];\n\n      Ember.run(function () {\n        var done = assert.async();\n        (0, _folvTestsFunctions.loadingList)($thead, olvContainerClass, trTableClass).then(function ($list) {\n          assert.ok($list);\n          var $rows = Ember.$('.object-list-view-helper-column', $list);\n\n          click('.ui.check-all-at-page-button');\n          andThen(function () {\n            var $checkCheckBox = Ember.$('.flexberry-checkbox.checked', $rows);\n            assert.equal($checkCheckBox.length, $rows.length, 'All checkBox in row are select');\n\n            click('.ui.check-all-at-page-button');\n            andThen(function () {\n              $checkCheckBox = Ember.$('.flexberry-checkbox.checked', $rows);\n              assert.equal($checkCheckBox.length, 0, 'All checkBox in row are unselect');\n            });\n          });\n\n          done();\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-groupedit/flexberry-groupedit-configurate-row-test', ['qunit', 'dummy/tests/helpers/start-app'], function (_qunit, _startApp) {\n  'use strict';\n\n  var app = void 0;\n  var path = 'components-examples/flexberry-groupedit/configurate-row-example';\n  var testName = 'configurate row';\n\n  (0, _qunit.module)('Acceptance | flexberry-groupedit | ' + testName, {\n    beforeEach: function beforeEach() {\n\n      // Start application.\n      app = (0, _startApp.default)();\n\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = app.__container__.lookup('controller:application');\n      applicationController.set('isInAcceptanceTestMode', true);\n    },\n    afterEach: function afterEach() {\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)(testName, function (assert) {\n    assert.expect(58);\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path, 'Path is correctly');\n      var $folvRows = Ember.$('.object-list-view-container tbody tr');\n\n      for (var i = 0; i < $folvRows.length; i++) {\n        var $row = $folvRows[i];\n        var $deleteButton = Ember.$('.object-list-view-row-delete-button', $row);\n        var $flagField = Ember.$('.field .flexberry-checkbox', $row);\n\n        if (i % 2 === 0) {\n          assert.equal($deleteButton.hasClass('disabled'), true, 'Delete button in an even row is disabled');\n          assert.equal($flagField.hasClass('checked'), true, 'CheckBox in an even row is checked');\n        } else {\n          assert.equal($deleteButton.hasClass('disabled'), false, 'Delete button in a non-even row isn\\'t disabled');\n          assert.equal($flagField.hasClass('checked'), false, 'CheckBox in an even row isn\\'t checked');\n        }\n\n        var $textField = Ember.$('.field .flexberry-textbox input', $row);\n        assert.equal($textField[0].value, i + 1 + 'test', 'TextBox have currect text');\n      }\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-groupedit/flexberry-groupedit-user-button-test', ['qunit', 'dummy/tests/helpers/start-app'], function (_qunit, _startApp) {\n  'use strict';\n\n  var app = void 0;\n  var testName = 'user button test';\n\n  (0, _qunit.module)('Acceptance | flexberry-groupedit | ' + testName, {\n    beforeEach: function beforeEach() {\n\n      // Start application.\n      app = (0, _startApp.default)();\n\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = app.__container__.lookup('controller:application');\n      applicationController.set('isInAcceptanceTestMode', true);\n    },\n    afterEach: function afterEach() {\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)(testName, function (assert) {\n    assert.expect(3);\n    var path = 'components-examples/flexberry-groupedit/custom-buttons-example';\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n\n      // Enable the hi button.\n      click('.toggle-hi-button');\n\n      // First click.\n      click('.test-click-button');\n      andThen(function () {\n        return assert.equal(controller.clickCounter, 2, 'Test button was pressed');\n      });\n\n      // Second click.\n      click('.test-click-button');\n      andThen(function () {\n        return assert.equal(controller.clickCounter, 3, 'Test button was pressed');\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-lookup/change-component-lookup-test', ['dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_executeFlexberryLookupTest) {\n  'use strict';\n\n  var openLookupDialog = function openLookupDialog($lookup) {\n    return new Ember.RSVP.Promise(function (resolve, reject) {\n      var checkIntervalId = void 0;\n      var checkIntervalSucceed = false;\n      var checkInterval = 500;\n\n      var timeout = 4000;\n\n      var $lookupChooseButton = Ember.$('.ui-change', $lookup);\n\n      // Try to open lookup dialog.\n      Ember.run(function () {\n        $lookupChooseButton.click();\n      });\n\n      // Wait for lookup dialog to be opened & data loaded.\n      Ember.run(function () {\n        checkIntervalId = window.setInterval(function () {\n          var $lookupDialog = Ember.$('.flexberry-modal');\n          var $records = Ember.$('.content table.object-list-view tbody tr', $lookupDialog);\n          if ($records.length === 0) {\n            // Data isn't loaded yet.\n            return;\n          }\n\n          // Data is loaded.\n          // Stop interval & resolve promise.\n          window.clearInterval(checkIntervalId);\n          checkIntervalSucceed = true;\n\n          resolve($lookupDialog);\n        }, checkInterval);\n      });\n\n      // Set wait timeout.\n      Ember.run(function () {\n        window.setTimeout(function () {\n          if (checkIntervalSucceed) {\n            return;\n          }\n\n          // Time is out.\n          // Stop intervals & reject promise.\n          window.clearInterval(checkIntervalId);\n          reject('flexberry-lookup load data operation is timed out');\n        }, timeout);\n      });\n    });\n  };\n\n  var chooseRecordInLookupDialog = function chooseRecordInLookupDialog($lookupDialog, recordIndex) {\n    return new Ember.RSVP.Promise(function (resolve, reject) {\n      var checkIntervalId = void 0;\n      var checkIntervalSucceed = false;\n      var checkInterval = 500;\n\n      var timeout = 4000;\n\n      var $records = Ember.$('.content table.object-list-view tbody tr', $lookupDialog);\n      var $choosedRecord = Ember.$($records[recordIndex]);\n\n      // Try to choose record in the lookup dialog.\n      Ember.run(function () {\n        // Inside object-list-views component click actions are available only if cell in row has been clicked.\n        // Click on whole row wont take an effect.\n        var $choosedRecordFirstCell = Ember.$(Ember.$('td', $choosedRecord)[1]);\n        $choosedRecordFirstCell.click();\n\n        // Click on modal-dialog close icon.\n        // Сrutch correcting irregular bug\n        var $modelDilogClose = Ember.$('.close.icon');\n        $modelDilogClose.click();\n      });\n\n      // Wait for lookup dialog to be closed.\n      Ember.run(function () {\n        checkIntervalId = window.setInterval(function () {\n          if (!$lookupDialog.hasClass('hidden')) {\n            // Dialog is still opened.\n            return;\n          }\n\n          // Dialog is closed.\n          // Stop interval & resolve promise.\n          window.clearInterval(checkIntervalId);\n          checkIntervalSucceed = true;\n\n          resolve();\n        }, checkInterval);\n      });\n\n      // Set wait timeout.\n      Ember.run(function () {\n        window.setTimeout(function () {\n          if (checkIntervalSucceed) {\n            return;\n          }\n\n          // Time is out.\n          // Stop intervals & reject promise.\n          window.clearInterval(checkIntervalId);\n          reject('flexberry-lookup choose record operation is timed out');\n        }, timeout);\n      });\n    });\n  };\n\n  (0, _executeFlexberryLookupTest.executeTest)('changes in component\\'s value causes changes in related model\\'s specified \\'belongsTo\\' relation', function (store, assert, app, latestReceivedRecords) {\n    assert.expect(4);\n    visit('components-acceptance-tests/flexberry-lookup/base-operations');\n\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var model = Ember.get(controller, 'model');\n      var relationName = Ember.get(controller, 'relationName');\n      var displayAttributeName = Ember.get(controller, 'displayAttributeName');\n\n      var $lookup = Ember.$('.flexberry-lookup');\n      var $lookupInput = Ember.$('input', $lookup);\n      assert.strictEqual($lookupInput.val(), '', 'lookup display value is empty by default');\n\n      // Wait for lookup dialog to be opened, choose first record & check component's state.\n      var asyncOperationsCompleted = assert.async();\n      openLookupDialog($lookup).then(function ($lookupDialog) {\n        assert.ok($lookupDialog);\n\n        // Lookup dialog successfully opened & data is loaded.\n        // Try to choose first loaded record.\n        return chooseRecordInLookupDialog($lookupDialog, 0);\n      }).then(function () {\n        // First loaded record chosen successfully.\n        // Check that chosen record is now set to related model's 'belongsTo' relation.\n        var chosenRecord = model.get(relationName);\n        var expectedRecord = latestReceivedRecords[0];\n        assert.strictEqual(chosenRecord, expectedRecord, 'chosen record is set to model\\'s \\'' + relationName + '\\' relation as expected');\n\n        var chosenRecordDisplayAttribute = chosenRecord.get(displayAttributeName);\n        assert.strictEqual($lookupInput.val(), chosenRecordDisplayAttribute, 'lookup display value is equals to chosen record\\'s \\'' + displayAttributeName + '\\' attribute');\n      }).catch(function (reason) {\n        throw new Error(reason);\n      }).finally(function () {\n        asyncOperationsCompleted();\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-lookup/change-model-lookup-test', ['ember-flexberry-data/query/builder', 'dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_builder, _executeFlexberryLookupTest) {\n  'use strict';\n\n  (0, _executeFlexberryLookupTest.executeTest)('changes in model\\'s value causes changes in component\\'s specified \\'belongsTo\\' model', function (store, assert, app) {\n    assert.expect(2);\n    visit('components-acceptance-tests/flexberry-lookup/base-operations');\n    andThen(function () {\n\n      var $lookup = Ember.$('.flexberry-lookup');\n      var $lookupInput = Ember.$('input', $lookup);\n      assert.strictEqual($lookupInput.val() === '', true, 'lookup display value is empty by default');\n\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var model = Ember.get(controller, 'model');\n      var store = app.__container__.lookup('service:store');\n      var suggestionType = void 0;\n\n      // Create limit for query.\n      var query = new _builder.default(store).from('ember-flexberry-dummy-suggestion-type').selectByProjection('SettingLookupExampleView');\n\n      // Load olv data.\n      store.query('ember-flexberry-dummy-suggestion-type', query.build()).then(function (suggestionTypes) {\n\n        var suggestionTypesArr = suggestionTypes.toArray();\n\n        suggestionType = suggestionTypesArr.objectAt(0);\n      }).then(function () {\n\n        // Change data in the model.\n        model.set('type', suggestionType);\n\n        var done = assert.async();\n\n        setTimeout(function () {\n          $lookupInput = Ember.$('input', $lookup);\n          assert.strictEqual($lookupInput.val() === suggestionType.get('name'), true, 'lookup display value isn\\'t empty');\n          done();\n        }, 100);\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test', ['exports', 'qunit', 'dummy/tests/helpers/start-app'], function (exports, _qunit, _startApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.executeTest = executeTest;\n  function executeTest(testName, callback) {\n    var app = void 0;\n    var store = void 0;\n    var latestReceivedRecords = Ember.A();\n\n    (0, _qunit.module)('Acceptance | flexberry-lookup-base |' + testName, {\n      beforeEach: function beforeEach() {\n\n        // Start application.\n        app = (0, _startApp.default)();\n\n        // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n        var applicationController = app.__container__.lookup('controller:application');\n        applicationController.set('isInAcceptanceTestMode', true);\n\n        // Override store.query method to receive & remember records which will be requested by lookup dialog.\n        var store = app.__container__.lookup('service:store');\n        var originalQueryMethod = store.query;\n        store.query = function () {\n          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          // Call original method & remember returned records.\n          return originalQueryMethod.apply(this, args).then(function (records) {\n            latestReceivedRecords.clear();\n            latestReceivedRecords.addObjects(records.toArray());\n\n            return records;\n          });\n        };\n      },\n      afterEach: function afterEach() {\n        // Remove semantic ui modal dialog's dimmer.\n        Ember.$('body .ui.dimmer.modals').remove();\n\n        // Destroy application.\n        Ember.run(app, 'destroy');\n      }\n    });\n\n    (0, _qunit.test)(testName, function (assert) {\n      return callback(store, assert, app, latestReceivedRecords);\n    });\n  }\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-actions-test', ['dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_executeFlexberryLookupTest) {\n  'use strict';\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup actions test', function (store, assert, app) {\n    assert.expect(5);\n\n    var controller = app.__container__.lookup('controller:components-acceptance-tests/flexberry-lookup/settings-example-actions');\n\n    // Remap remove action.\n    var $onRemoveData = void 0;\n    Ember.set(controller, 'actions.externalRemoveAction', function (actual) {\n      $onRemoveData = actual;\n      assert.notEqual($onRemoveData, undefined, 'Component sends \\'remove\\' action after first click');\n      assert.strictEqual($onRemoveData.relationName, 'type', 'Component sends \\'remove\\' with actual relationName');\n    });\n\n    // Remap chose action.\n    var $onChooseData = void 0;\n    Ember.set(controller, 'actions.externalChooseAction', function (actual) {\n      $onChooseData = actual;\n      assert.notEqual($onChooseData, undefined, 'Component sends \\'choose\\' action after first click');\n      assert.strictEqual($onChooseData.componentName, 'flexberry-lookup', 'Component sends \\'choose\\' with actual componentName');\n      assert.strictEqual($onChooseData.projection, 'SettingLookupExampleView', 'Component sends \\'choose\\' with actual projection');\n    });\n\n    visit('components-acceptance-tests/flexberry-lookup/settings-example-actions');\n    andThen(function () {\n      var $lookupButtouChoose = Ember.$('.ui-change');\n      var $lookupButtouRemove = Ember.$('.ui-clear');\n\n      Ember.run(function () {\n        $lookupButtouChoose.click();\n        $lookupButtouRemove.click();\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-autocomplete-en-test', ['dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test', 'dummy/tests/acceptance/components/flexberry-lookup/lookup-test-functions', '@ember/test-helpers'], function (_executeFlexberryLookupTest, _lookupTestFunctions, _testHelpers) {\n  'use strict';\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup autocomplete message en', function (store, assert, app) {\n    assert.expect(4);\n    var path = 'components-acceptance-tests/flexberry-lookup/settings-example-autocomplete';\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      (0, _lookupTestFunctions.loadingLocales)('en', app).then(function () {\n        var textbox = Ember.$('.ember-text-field')[0];\n        (0, _testHelpers.fillIn)(textbox, 'gfhfkjglkhlh');\n      });\n\n      var asyncOperationsCompleted = assert.async();\n      Ember.run.later(function () {\n        asyncOperationsCompleted();\n\n        var $message = Ember.$('.message');\n        assert.strictEqual($message.hasClass('empty'), true, 'Component\\'s wrapper has message');\n\n        var $messageHeader = $message.children('.header');\n        assert.equal($messageHeader.text(), 'No results', 'Message\\'s header is properly');\n\n        var $messageDescription = $message.children('.description');\n        assert.equal($messageDescription.text(), 'No results found', 'Message\\'s description is properly');\n      }, 5000);\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-autocomplete-ru-test', ['dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test', 'dummy/tests/acceptance/components/flexberry-lookup/lookup-test-functions', '@ember/test-helpers'], function (_executeFlexberryLookupTest, _lookupTestFunctions, _testHelpers) {\n  'use strict';\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup autocomplete message ru', function (store, assert, app) {\n    assert.expect(4);\n    var path = 'components-acceptance-tests/flexberry-lookup/settings-example-autocomplete';\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      (0, _lookupTestFunctions.loadingLocales)('ru', app).then(function () {\n        var textbox = Ember.$('.ember-text-field')[0];\n        (0, _testHelpers.fillIn)(textbox, 'gfhfkjglkhlh');\n      });\n\n      var asyncOperationsCompleted = assert.async();\n      Ember.run.later(function () {\n        asyncOperationsCompleted();\n\n        var $message = Ember.$('.message');\n        assert.strictEqual($message.hasClass('empty'), true, 'Component\\'s wrapper has message');\n\n        var $messageHeader = $message.children('.header');\n        assert.equal($messageHeader.text(), 'Нет данных', 'Message\\'s header is properly');\n\n        var $messageDescription = $message.children('.description');\n        assert.equal($messageDescription.text(), 'Значения не найдены', 'Message\\'s description is properly');\n      }, 5000);\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-autofill-by-limit-test', ['dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_executeFlexberryLookupTest) {\n  'use strict';\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup autofillByLimit in readonly test', function (store, assert) {\n    assert.expect(1);\n    visit('components-acceptance-tests/flexberry-lookup/settings-example-autofill-by-limit');\n    andThen(function () {\n      var $lookupField = Ember.$('.isreadonly .lookup-field');\n      var value = $lookupField.val();\n      assert.ok(Ember.isBlank(value), 'Value was changed');\n    });\n  });\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup autofillByLimit is clean test', function (store, assert) {\n    assert.expect(2);\n    visit('components-acceptance-tests/flexberry-lookup/settings-example-autofill-by-limit');\n    andThen(function () {\n      var $lookupField = Ember.$('.isclean .lookup-field');\n      var value = $lookupField.val();\n      assert.notOk(Ember.isBlank(value), 'Value wasn\\'t changed');\n\n      Ember.run(function () {\n        click('.isclean .ui-clear');\n        andThen(function () {\n          var $lookupFieldUpdate = Ember.$('.isclean .lookup-field');\n          var valueUpdate = $lookupFieldUpdate.val();\n          assert.ok(Ember.isBlank(valueUpdate), 'Value isn\\'t empty');\n        });\n      });\n    });\n  });\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup autofillByLimit changes select value test', function (store, assert, app) {\n    assert.expect(1);\n    visit('components-acceptance-tests/flexberry-lookup/settings-example-autofill-by-limit');\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var defaultValue = Ember.get(controller, 'defaultValue.id');\n\n      var $lookupField = Ember.$('.exist .lookup-field');\n      var value = $lookupField.val();\n\n      assert.notEqual(defaultValue, value, 'DefaultValue: \\'' + defaultValue + '\\' didn\\'t change');\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-limit-function-test', ['ember-flexberry-data/query/builder', 'ember-flexberry-data/query/predicate', 'dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_builder, _predicate, _executeFlexberryLookupTest) {\n  'use strict';\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup limit function test', function (store, assert, app) {\n    visit('components-acceptance-tests/flexberry-lookup/settings-example-limit-function');\n\n    andThen(function () {\n      assert.equal(currentURL(), 'components-acceptance-tests/flexberry-lookup/settings-example-limit-function');\n\n      var $limitFunctionButton = Ember.$('.limitFunction');\n      var $lookupChouseButton = Ember.$('.ui-change');\n\n      Ember.run(function () {\n        $limitFunctionButton.click();\n        $lookupChouseButton.click();\n      });\n\n      var store = app.__container__.lookup('service:store');\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var limitType = controller.limitType;\n      var queryPredicate = new _predicate.StringPredicate('name').contains(limitType);\n\n      // Create limit for query.\n      var query = new _builder.default(store).from('ember-flexberry-dummy-suggestion-type').selectByProjection('SettingLookupExampleView').where(queryPredicate);\n\n      // Load olv data.\n      store.query('ember-flexberry-dummy-suggestion-type', query.build()).then(function (suggestionTypes) {\n\n        var suggestionTypesArr = suggestionTypes.toArray();\n        var suggestionModelLength = suggestionTypesArr.length;\n\n        var done = assert.async();\n\n        Ember.run(function () {\n          setTimeout(function () {\n            var $lookupSearch = Ember.$('.content table.object-list-view');\n            var $lookupSearchThead = $lookupSearch.children('tbody');\n            var $lookupSearchTr = $lookupSearchThead.children('tr');\n            var $lookupRows = $lookupSearchTr.children('td');\n            var $suggestionTableLength = $lookupSearchTr.length;\n\n            assert.expect(2 + $suggestionTableLength);\n\n            assert.strictEqual(suggestionModelLength >= $suggestionTableLength, true, 'Сorrect number of values restrictions limiting function');\n\n            // Сomparison data in the model and olv table.\n            for (var i = 0; i < $suggestionTableLength; i++) {\n              var suggestionType = suggestionTypesArr.objectAt(i);\n              var suggestionTypeName = suggestionType.get('name');\n\n              var $cell = Ember.$($lookupRows[3 * i + 1]);\n              var $cellDiv = $cell.children('div');\n              var $cellText = $cellDiv.text().trim();\n\n              assert.strictEqual(suggestionTypeName === $cellText, true, 'Сorrect data at lookup\\'s olv');\n            }\n\n            done();\n          }, 2000);\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-preview-test', ['dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_executeFlexberryLookupTest) {\n  'use strict';\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup preview in modal test', function (store, assert, app) {\n    assert.expect(2);\n    var path = 'components-acceptance-tests/flexberry-lookup/settings-example-preview';\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var testName = controller.testName;\n      var $inModal = Ember.$('.in-modal');\n\n      click('.ui-preview', $inModal).then(function () {\n        var $modal = Ember.$('.modal');\n        var $form = Ember.$('.form', $modal);\n        var $field = Ember.$('.flexberry-field .flexberry-textbox', $form);\n        var value = $field.children('input').val();\n        assert.equal(value, testName);\n      });\n    });\n  });\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup preview in separate route test', function (store, assert, app) {\n    assert.expect(2);\n    var path = 'components-acceptance-tests/flexberry-lookup/settings-example-preview';\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var testName = controller.testName;\n      var $inSeparateRoute = Ember.$('.in-separate-route');\n\n      click('.ui-preview', $inSeparateRoute).then(function () {\n        var $form = Ember.$('.form');\n        var $field = Ember.$('.flexberry-field .flexberry-textbox', $form);\n        var value = $field.children('input').val();\n        assert.equal(value, testName);\n      });\n    });\n  });\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup preview in groupedit test', function (store, assert, app) {\n    assert.expect(2);\n    var path = 'components-acceptance-tests/flexberry-lookup/settings-example-preview';\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var testName = controller.testName;\n      var $inGroupedit = Ember.$('.in-groupedit');\n\n      click('.ui-preview', $inGroupedit).then(function () {\n        var $form = Ember.$('.form');\n        var $field = Ember.$('.flexberry-field .flexberry-textbox', $form);\n        var value = $field.children('input').val();\n        assert.equal(value, testName);\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-projection-test', ['dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_executeFlexberryLookupTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup projection test', function (store, assert, app) {\n    /* eslint-enable no-unused-vars */\n\n    assert.expect(2);\n\n    visit('components-acceptance-tests/flexberry-lookup/settings-example-projection');\n\n    andThen(function () {\n      assert.equal(currentURL(), 'components-acceptance-tests/flexberry-lookup/settings-example-projection');\n\n      var $lookupButtouChoose = Ember.$('.ui-change');\n\n      // Click choose button.\n      Ember.run(function () {\n        $lookupButtouChoose.click();\n      });\n\n      Ember.run(function () {\n        var done = assert.async();\n        setTimeout(function () {\n\n          var $lookupSearch = Ember.$('.content table.object-list-view');\n          var $lookupSearchThead = $lookupSearch.children('thead');\n          var $lookupSearchTr = $lookupSearchThead.children('tr');\n          var $lookupHeaders = $lookupSearchTr.children('th');\n\n          // Check count at table header.\n          assert.strictEqual($lookupHeaders.length === 3, true, 'Component has SuggestionTypeE projection');\n\n          done();\n        }, 5000);\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-lookup/flexberry-lookup-relation-name-test', ['dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_executeFlexberryLookupTest) {\n  'use strict';\n\n  (0, _executeFlexberryLookupTest.executeTest)('flexberry-lookup relation name test', function (store, assert, app) {\n    assert.expect(1);\n    visit('components-acceptance-tests/flexberry-lookup/settings-example-relation-name');\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var relationName = Ember.get(controller, 'relationName');\n      assert.strictEqual(relationName, 'Temp relation name', 'relationName: \\'' + relationName + '\\' as expected');\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-lookup/lookup-test-functions', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.loadingList = loadingList;\n  exports.loadingLocales = loadingLocales;\n\n\n  // Function for waiting list loading.\n  function loadingList($ctrlForClick, list, records) {\n    return new Ember.RSVP.Promise(function (resolve, reject) {\n      var checkIntervalId = void 0;\n      var checkIntervalSucceed = false;\n      var checkInterval = 500;\n      var timeout = 10000;\n\n      Ember.run(function () {\n        $ctrlForClick.click();\n      });\n\n      Ember.run(function () {\n        checkIntervalId = window.setInterval(function () {\n          var $list = Ember.$(list);\n          var $records = Ember.$(records, $list);\n          if ($records.length === 0) {\n\n            // Data isn't loaded yet.\n            return;\n          }\n\n          // Data is loaded.\n          // Stop interval & resolve promise.\n          window.clearInterval(checkIntervalId);\n          checkIntervalSucceed = true;\n          resolve($list);\n        }, checkInterval);\n      });\n\n      // Set wait timeout.\n      Ember.run(function () {\n        window.setTimeout(function () {\n          if (checkIntervalSucceed) {\n            return;\n          }\n\n          // Time is out.\n          // Stop intervals & reject promise.\n          window.clearInterval(checkIntervalId);\n          reject('editForm load operation is timed out');\n        }, timeout);\n      });\n    });\n  }\n\n  // Function for waiting loading list.\n  function loadingLocales(locale, app) {\n    return new Ember.RSVP.Promise(function (resolve) {\n      var i18n = app.__container__.lookup('service:i18n');\n\n      Ember.run(function () {\n        i18n.set('locale', locale);\n      });\n\n      var timeout = 500;\n      Ember.run.later(function () {\n        resolve({ msg: 'ok' });\n      }, timeout);\n    });\n  }\n});","define('dummy/tests/acceptance/components/flexberry-lookup/visiting-flexberry-lookup-autocomplete-test', ['dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_executeFlexberryLookupTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeFlexberryLookupTest.executeTest)('visiting flexberry-lookup autocomplete', function (store, assert, app) {\n    /* eslint-enable no-unused-vars */\n    assert.expect(5);\n\n    visit('components-acceptance-tests/flexberry-lookup/settings-example-autocomplete');\n\n    andThen(function () {\n\n      assert.equal(currentURL(), 'components-acceptance-tests/flexberry-lookup/settings-example-autocomplete');\n\n      var $lookup = Ember.$('.flexberry-lookup');\n\n      assert.strictEqual($lookup.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n      assert.strictEqual($lookup.hasClass('search'), true, 'Component\\'s wrapper has \\'search\\' css-class');\n\n      var $lookupField = Ember.$('.lookup-field');\n\n      assert.strictEqual($lookupField.hasClass('prompt'), true, 'Component\\'s wrapper has \\'prompt\\' css-class');\n\n      var $result = Ember.$('.result');\n\n      assert.strictEqual($result.length === 1, true, 'Component has inner class \\'result\\'');\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-lookup/visiting-flexberry-lookup-dropdown-test', ['dummy/tests/acceptance/components/flexberry-lookup/execute-flexberry-lookup-test'], function (_executeFlexberryLookupTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeFlexberryLookupTest.executeTest)('visiting flexberry-lookup dropdown', function (store, assert, app) {\n    /* eslint-enable no-unused-vars */\n    assert.expect(13);\n\n    visit('components-acceptance-tests/flexberry-lookup/settings-example-dropdown');\n\n    andThen(function () {\n\n      assert.equal(currentURL(), 'components-acceptance-tests/flexberry-lookup/settings-example-dropdown');\n\n      // Retrieve component, it's inner <input>.\n      var $lookupSearch = Ember.$('.lookup-field');\n      var $lookupButtonChoose = Ember.$('.ui-change');\n      var $lookupButtonClear = Ember.$('.lookup-remove-button');\n\n      assert.strictEqual($lookupSearch.length === 0, true, 'Component has n\\'t flexberry-lookup');\n      assert.strictEqual($lookupButtonChoose.length === 0, true, 'Component has n\\'t button choose');\n      assert.strictEqual($lookupButtonClear.length === 0, true, 'Component has n\\'t button remove');\n\n      // Retrieve component, it's inner <input>.\n      var $dropdown = Ember.$('.flexberry-dropdown.search.selection');\n      var $dropdownSearch = $dropdown.children('.search');\n      var $dropdownIcon = $dropdown.children('.dropdown.icon');\n      var $dropdownMenu = $dropdown.children('.menu');\n      var $deopdownText = $dropdown.children('.text');\n\n      assert.strictEqual($dropdown.length === 1, true, 'Component has class flexberry-dropdown');\n      assert.strictEqual($dropdown.hasClass('search'), true, 'Component\\'s wrapper has \\'search\\' css-class');\n      assert.strictEqual($dropdown.hasClass('selection'), true, 'Component\\'s wrapper has \\'selection\\' css-class');\n      assert.strictEqual($dropdown.hasClass('ember-view'), true, 'Component\\'s wrapper has \\'ember-view\\' css-class');\n      assert.strictEqual($dropdown.hasClass('dropdown'), true, 'Component\\'s wrapper has \\'dropdown\\' css-class');\n\n      assert.strictEqual($dropdownSearch.length === 1, true, 'Component has class search');\n\n      assert.strictEqual($dropdownIcon.length === 1, true, 'Component has class dropdown and icon');\n\n      assert.strictEqual($deopdownText.length === 1, true, 'Component has class text');\n\n      assert.strictEqual($dropdownMenu.length === 1, true, 'Component has class menu');\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/checkbox-at-editform-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions'], function (_executeFolvTest, _folvTestsFunctions) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check checkbox at editform', function (store, assert, app) {\n    assert.expect(2);\n    var path = 'components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox';\n    visit(path);\n    andThen(function () {\n\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $folvContainer = Ember.$('.object-list-view-container');\n      var $trTableBody = Ember.$('table.object-list-view tbody tr', $folvContainer);\n      var $cell = $trTableBody[0].children[1];\n\n      var timeout = 500;\n      Ember.run.later(function () {\n        controller.set('rowClickable', true);\n        Ember.run.later(function () {\n          var asyncOperationsCompleted = assert.async();\n          (0, _folvTestsFunctions.loadingList)($cell, 'form.flexberry-vertical-form', '.field').then(function ($editForm) {\n            var checkbox = Ember.$('.flexberry-checkbox');\n\n            assert.ok($editForm, 'edit form open');\n            assert.equal(checkbox.hasClass('checked'), true, 'checkbox is check');\n          }).catch(function (reason) {\n            // Error output.\n            assert.ok(false, reason);\n          }).finally(function () {\n            asyncOperationsCompleted();\n          });\n        }, timeout);\n      }, timeout);\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', ['exports', 'qunit', 'dummy/tests/helpers/start-app'], function (exports, _qunit, _startApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.executeTest = executeTest;\n  exports.addDataForDestroy = addDataForDestroy;\n\n\n  var dataForDestroy = Ember.A();\n  var app = void 0;\n\n  function executeTest(testName, callback) {\n    var store = void 0;\n    var userSettingsService = void 0;\n\n    (0, _qunit.module)('Acceptance | flexberry-objectlistview | ' + testName, {\n      beforeEach: function beforeEach() {\n        Ember.run(function () {\n          // Start application.\n          app = (0, _startApp.default)();\n\n          // Just take it and turn it off...\n          app.__container__.lookup('service:log').set('enabled', false);\n\n          // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n          var applicationController = app.__container__.lookup('controller:application');\n          applicationController.set('isInAcceptanceTestMode', true);\n          store = app.__container__.lookup('service:store');\n\n          userSettingsService = app.__container__.lookup('service:user-settings');\n          var getCurrentPerPage = function getCurrentPerPage() {\n            return 5;\n          };\n\n          userSettingsService.set('getCurrentPerPage', getCurrentPerPage);\n        });\n      },\n      afterEach: function afterEach() {\n        Ember.run(function () {\n          if (dataForDestroy.length !== 0) {\n            recursionDelete(0);\n          } else {\n            Ember.run(app, 'destroy');\n          }\n        });\n      }\n    });\n\n    (0, _qunit.test)(testName, function (assert) {\n      return callback(store, assert, app);\n    });\n  }\n\n  /**\n    Function to delete data after testing.\n  \n    @public\n    @method addDataForDestroy\n    @param {Object} data  or array of Object.\n   */\n\n  function addDataForDestroy(data) {\n    if (Ember.isArray(data)) {\n      dataForDestroy.addObjects(data);\n    } else {\n      dataForDestroy.addObject(data);\n    }\n  }\n\n  function recursionDelete(index) {\n    if (index < dataForDestroy.length) {\n      if (!dataForDestroy[index].currentState.isDeleted) {\n        dataForDestroy[index].destroyRecord().then(function () {\n          recursionDelete(index + 1);\n        });\n      } else {\n        recursionDelete(index + 1);\n      }\n    } else {\n      dataForDestroy.clear();\n      Ember.run(app, 'destroy');\n    }\n  }\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-empty-filter-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions'], function (_executeFolvTest, _folvTestsFunctions) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check empty filter', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/custom-filter';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var filtreInsertOperation = 'empty';\n    var filtreInsertParametr = '';\n    var user = void 0;\n    var type = void 0;\n    var suggestion = void 0;\n    Ember.run(function () {\n      var newRecords = Ember.A();\n      user = newRecords.pushObject(store.createRecord('ember-flexberry-dummy-application-user', { name: 'Random name fot empty filther test',\n        eMail: 'Random eMail fot empty filther test' }));\n      type = newRecords.pushObject(store.createRecord('ember-flexberry-dummy-suggestion-type', { name: 'Random name fot empty filther test' }));\n\n      type.save().then(function () {\n        user.save().then(function () {\n          Ember.run(function () {\n            suggestion = newRecords.pushObject(store.createRecord(modelName, { type: type, author: user, editor1: user }));\n            suggestion.save();\n            (0, _executeFolvTest.addDataForDestroy)(suggestion);\n            (0, _executeFolvTest.addDataForDestroy)(type);\n            (0, _executeFolvTest.addDataForDestroy)(user);\n          });\n        });\n      });\n\n      visit(path + '?perPage=500');\n      andThen(function () {\n        assert.equal(currentPath(), path);\n        var $filterButtonDiv = Ember.$('.buttons.filter-active');\n        var $filterButton = $filterButtonDiv.children('button');\n        var $objectListView = Ember.$('.object-list-view');\n\n        // Activate filtre row.\n        Ember.run(function () {\n          $filterButton.click();\n        });\n\n        (0, _folvTestsFunctions.filterCollumn)($objectListView, 0, filtreInsertOperation, filtreInsertParametr).then(function () {\n          // Apply filter function.\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = Ember.$('.refresh-button')[0];\n            refreshButton.click();\n          };\n\n          // Apply filter.\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          var done1 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var filtherResult = controller.model.content;\n            var successful = true;\n            for (var i = 0; i < filtherResult.length; i++) {\n              var address = filtherResult[i]._data.address;\n              if (!Ember.isNone(address)) {\n                successful = false;\n              }\n            }\n\n            assert.equal(filtherResult.length >= 1, true, 'Filtered list is empty');\n            assert.equal(successful, true, 'Filter not successfully worked');\n          }).finally(function () {\n            newRecords[2].destroyRecord().then(function () {\n              Ember.run(function () {\n                newRecords[0].destroyRecord();\n                newRecords[1].destroyRecord();\n                done1();\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-filter-by-enther-click-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/query/filter-operator', 'ember-flexberry-data/query/builder'], function (_executeFolvTest, _folvTestsFunctions, _filterOperator, _builder) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check filter by enter click', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-filter';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var filtreInsertOperation = 'eq';\n    var filtreInsertParametr = void 0;\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n      var builder = new _builder.default(store).from(modelName).selectByProjection('SuggestionL').where('address', _filterOperator.default.Neq, '').top(1);\n      store.query(modelName, builder.build()).then(function (result) {\n        var arr = result.toArray();\n        filtreInsertParametr = arr.objectAt(0).get('address');\n        if (!filtreInsertParametr) {\n          assert.ok(false, 'Empty data');\n        }\n      }).then(function () {\n        var $filterButtonDiv = Ember.$('.buttons.filter-active');\n        var $filterButton = $filterButtonDiv.children('button');\n        var $objectListView = Ember.$('.object-list-view');\n\n        // Activate filtre row.\n        Ember.run(function () {\n          $filterButton.click();\n        });\n\n        (0, _folvTestsFunctions.filterCollumn)($objectListView, 0, filtreInsertOperation, filtreInsertParametr).then(function () {\n          // Apply filter by enter click function.\n          var refreshFunction = function refreshFunction() {\n            var input = Ember.$('.ember-text-field')[0];\n            input.focus();\n            keyEvent(input, 'keydown', 13);\n          };\n\n          // Apply filter.\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          var done1 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var filtherResult = controller.model.content;\n            var successful = true;\n            for (var i = 0; i < filtherResult.length; i++) {\n              var address = filtherResult[i]._data.address;\n              if (address !== filtreInsertParametr) {\n                successful = false;\n              }\n            }\n\n            assert.equal(filtherResult.length >= 1, true, 'Filtered list is empty');\n            assert.equal(successful, true, 'Filter successfully worked');\n            done1();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-filter-render-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions'], function (_executeFolvTest, _folvTestsFunctions) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check filter renders', function (store, assert, app) {\n    assert.expect(34);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-filter';\n\n    Ember.run(function () {\n      visit(path);\n      andThen(function () {\n        assert.equal(currentPath(), path);\n\n        var $filterButtonDiv = Ember.$('.buttons.filter-active');\n        var $filterButton = $filterButtonDiv.children('button');\n        var $filterRemoveButton = $filterButtonDiv.children('.removeFilter-button');\n        var $filterButtonIcon = $filterButton.children('i');\n\n        var $table = Ember.$('.object-list-view');\n        var $tableTbody = $table.children('tbody');\n        var $tableRows = $tableTbody.children('tr');\n\n        // Check filtre button div.\n        assert.strictEqual($filterButtonDiv.prop('tagName'), 'DIV', 'Filtre button\\'s wrapper is a <div>');\n        assert.strictEqual($filterButtonDiv.hasClass('ui icon buttons'), true, 'Filtre button\\'s wrapper has \\'ui icon buttons\\' css-class');\n        assert.strictEqual($filterButtonDiv.hasClass('filter-active'), true, 'Filtre button\\'s wrapper has \\'filter-active\\' css-class');\n        assert.strictEqual($filterButtonDiv.length === 1, true, 'Component has filter button');\n\n        // Check filtre button.\n        assert.strictEqual($filterButton.length === 1, true, 'Filtre button has inner button block');\n        assert.strictEqual($filterButton.hasClass('ui button'), true, 'Filtre button\\'s wrapper has \\'ui button\\' css-class');\n        assert.strictEqual($filterButton[0].title, 'Добавить фильтр', 'Filtre button has title');\n        assert.strictEqual($filterButton.prop('tagName'), 'BUTTON', 'Component\\'s inner button block is a <button>');\n\n        // Check button's icon <i>.\n        assert.strictEqual($filterButtonIcon.length === 1, true, 'Filtre button\\'s title has icon block');\n        assert.strictEqual($filterButtonIcon.prop('tagName'), 'I', 'Filtre button\\'s icon block is a <i>');\n        assert.strictEqual($filterButtonIcon.hasClass('filter icon'), true, 'Filtre button\\'s icon block has \\'filter icon\\' css-class');\n\n        // Check filtre remove button.\n        assert.strictEqual($filterRemoveButton.length === 0, true, 'Component hasn\\'t remove filter button');\n\n        // Check filtre row.\n        assert.strictEqual($tableRows.length === 5, true, 'Filtre row aren\\'t active');\n\n        var $objectListView = Ember.$('.object-list-view');\n\n        // Activate filtre row.\n        Ember.run(function () {\n          $filterButton.click();\n        });\n\n        $tableRows = $tableTbody.children('tr');\n\n        // Check filtre row afther filter active.\n        assert.strictEqual($tableRows.length === 7, true, 'Filtre row aren\\'t active');\n\n        var filtreInsertOperation = 'ge';\n        var filtreInsertParametr = 'A value that will never be told';\n\n        (0, _folvTestsFunctions.filterCollumn)($objectListView, 0, filtreInsertOperation, filtreInsertParametr).then(function () {\n          // Apply filter function.\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = Ember.$('.refresh-button')[0];\n            refreshButton.click();\n          };\n\n          // Apply filter.\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          var done1 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            $filterButtonDiv = Ember.$('.buttons.filter-active');\n            $filterButton = $filterButtonDiv.children('.button.active');\n            $filterButtonIcon = $filterButton.children('i');\n            $filterRemoveButton = $filterButtonDiv.children('.removeFilter-button');\n            var $filterRemoveButtonIcon = $filterRemoveButton.children('i');\n\n            // Check filtre button div.\n            assert.strictEqual($filterButtonDiv.prop('tagName'), 'DIV', 'Filtre button\\'s wrapper is a <div>');\n            assert.strictEqual($filterButtonDiv.hasClass('ui icon buttons'), true, 'Filtre button\\'s wrapper has \\'ui icon buttons\\' css-class');\n            assert.strictEqual($filterButtonDiv.hasClass('filter-active'), true, 'Filtre button\\'s wrapper has \\'filter-active\\' css-class');\n            assert.strictEqual($filterButtonDiv.length === 1, true, 'Component has filter button');\n\n            // Check filtre button.\n            assert.strictEqual($filterButton.length === 1, true, 'Filtre button has inner button block');\n            assert.strictEqual($filterButton.hasClass('ui button'), true, 'Filtre button\\'s wrapper has \\'ui button\\' css-class');\n            assert.strictEqual($filterButton[0].title, 'Добавить фильтр', 'Filtre button has title');\n            assert.strictEqual($filterButton.prop('tagName'), 'BUTTON', 'Component\\'s inner button block is a <button>');\n\n            // Check button's icon <i>.\n            assert.strictEqual($filterButtonIcon.length === 1, true, 'Filtre button\\'s title has icon block');\n            assert.strictEqual($filterButtonIcon.prop('tagName'), 'I', 'Filtre button\\'s icon block is a <i>');\n            assert.strictEqual($filterButtonIcon.hasClass('filter icon'), true, 'Filtre button\\'s icon block has \\'filter icon\\' css-class');\n\n            // Check filtre remove button.\n            assert.strictEqual($filterRemoveButton.length === 1, true, 'Filtre remove button has inner button block');\n            assert.strictEqual($filterRemoveButton.hasClass('ui button'), true, 'Filtre remove button\\'s wrapper has \\'ui button\\' css-class');\n            assert.strictEqual($filterRemoveButton[0].title, 'Сбросить фильтр', 'Filtre remove button has title');\n            assert.strictEqual($filterRemoveButton.prop('tagName'), 'BUTTON', 'Component\\'s inner button block is a <button>');\n\n            // Check remove button's icon <i>.\n            assert.strictEqual($filterRemoveButtonIcon.length === 1, true, 'Filtre button\\'s title has icon block');\n            assert.strictEqual($filterRemoveButtonIcon.prop('tagName'), 'I', 'Filtre button\\'s icon block is a <i>');\n            assert.strictEqual($filterRemoveButtonIcon.hasClass('remove icon'), true, 'Filtre button\\'s icon block has \\'remove icon\\' css-class');\n\n            // Deactivate filtre row.\n            Ember.run(function () {\n              $filterButton.click();\n            });\n\n            // Apply filter.\n            var done2 = assert.async();\n            (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n              $tableRows = $tableTbody.children('tr');\n\n              // Check filtre row afther filter deactivate.\n              assert.strictEqual($tableRows.length === 1, true, 'Filtre row aren\\'t deactivate');\n              done2();\n            });\n            done1();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-filter-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/query/filter-operator', 'ember-flexberry-data/query/builder'], function (_executeFolvTest, _folvTestsFunctions, _filterOperator, _builder) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check filter', function (store, assert, app) {\n    assert.expect(2);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-filter';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var filtreInsertOperationArr = ['eq', undefined, 'eq', 'eq', 'eq', 'eq'];\n    var filtreInsertValueArr = void 0;\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n      var builder2 = new _builder.default(store).from(modelName).selectByProjection('SuggestionL').where('address', _filterOperator.default.Neq, '').top(1);\n      store.query(modelName, builder2.build()).then(function (result) {\n        var arr = result.toArray();\n        filtreInsertValueArr = [arr.objectAt(0).get('address'), undefined, arr.objectAt(0).get('votes'), arr.objectAt(0).get('moderated'), arr.objectAt(0).get('type.name'), arr.objectAt(0).get('author.name')];\n      }).then(function () {\n        var $filterButtonDiv = Ember.$('.buttons.filter-active');\n        var $filterButton = $filterButtonDiv.children('button');\n        var $objectListView = Ember.$('.object-list-view');\n\n        // Activate filtre row.\n        Ember.run(function () {\n          $filterButton.click();\n        });\n\n        (0, _folvTestsFunctions.filterObjectListView)($objectListView, filtreInsertOperationArr, filtreInsertValueArr).then(function () {\n          // Apply filter function.\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = Ember.$('.refresh-button')[0];\n            refreshButton.click();\n          };\n\n          // Apply filter.\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          var done1 = assert.async();\n          /* eslint-disable no-unused-vars */\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function ($list) {\n            var filtherResult = controller.model.content;\n            assert.equal(filtherResult.length >= 1, true, 'Filtered list is empty');\n            done1();\n          });\n          /* eslint-enable no-unused-vars */\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-ge-filter-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/query/builder'], function (_executeFolvTest, _folvTestsFunctions, _builder) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check ge filter', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-filter';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var filtreInsertOperation = 'ge';\n    var filtreInsertParametr = void 0;\n\n    visit(path + '?perPage=500');\n    andThen(function () {\n      assert.equal(currentPath(), path);\n      var builder2 = new _builder.default(store).from(modelName).selectByProjection('SuggestionL').top(1);\n      store.query(modelName, builder2.build()).then(function (result) {\n        var arr = result.toArray();\n        filtreInsertParametr = arr.objectAt(0).get('votes') - 1;\n      }).then(function () {\n        var $filterButtonDiv = Ember.$('.buttons.filter-active');\n        var $filterButton = $filterButtonDiv.children('button');\n        var $objectListView = Ember.$('.object-list-view');\n\n        // Activate filtre row.\n        Ember.run(function () {\n          $filterButton.click();\n        });\n\n        (0, _folvTestsFunctions.filterCollumn)($objectListView, 2, filtreInsertOperation, filtreInsertParametr).then(function () {\n          // Apply filter function.\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = Ember.$('.refresh-button')[0];\n            refreshButton.click();\n          };\n\n          // Apply filter.\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          var done1 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var filtherResult = controller.model.content;\n            var successful = true;\n            for (var i = 0; i < filtherResult.length; i++) {\n              var votes = filtherResult[0]._data.votes;\n              if (votes <= filtreInsertParametr) {\n                successful = false;\n              }\n            }\n\n            assert.equal(filtherResult.length >= 1, true, 'Filtered list is empty');\n            assert.equal(successful, true, 'Filter successfully worked');\n            done1();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-le-filter-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/query/builder'], function (_executeFolvTest, _folvTestsFunctions, _builder) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check le filter', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-filter';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var filtreInsertOperation = 'le';\n    var filtreInsertParametr = void 0;\n\n    visit(path + '?perPage=500');\n    andThen(function () {\n      assert.equal(currentPath(), path);\n      var builder2 = new _builder.default(store).from(modelName).selectByProjection('SuggestionL').top(1);\n      store.query(modelName, builder2.build()).then(function (result) {\n        var arr = result.toArray();\n        filtreInsertParametr = arr.objectAt(0).get('votes') + 1;\n      }).then(function () {\n        var $filterButtonDiv = Ember.$('.buttons.filter-active');\n        var $filterButton = $filterButtonDiv.children('button');\n        var $objectListView = Ember.$('.object-list-view');\n\n        // Activate filtre row.\n        Ember.run(function () {\n          $filterButton.click();\n        });\n\n        (0, _folvTestsFunctions.filterCollumn)($objectListView, 2, filtreInsertOperation, filtreInsertParametr).then(function () {\n          // Apply filter function.\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = Ember.$('.refresh-button')[0];\n            refreshButton.click();\n          };\n\n          // Apply filter.\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          var done1 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var filtherResult = controller.model.content;\n            var successful = true;\n            for (var i = 0; i < filtherResult.length; i++) {\n              var votes = filtherResult[0]._data.votes;\n              if (votes >= filtreInsertParametr) {\n                successful = false;\n              }\n            }\n\n            assert.equal(filtherResult.length >= 1, true, 'Filtered list is empty');\n            assert.equal(successful, true, 'Filter successfully worked');\n            done1();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-like-filter-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/query/filter-operator', 'ember-flexberry-data/query/builder'], function (_executeFolvTest, _folvTestsFunctions, _filterOperator, _builder) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check like filter', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-filter';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var filtreInsertOperation = 'like';\n    var filtreInsertParametr = void 0;\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n      var builder2 = new _builder.default(store).from(modelName).selectByProjection('SuggestionL').where('address', _filterOperator.default.Neq, '').top(1);\n      store.query(modelName, builder2.build()).then(function (result) {\n        var arr = result.toArray();\n        filtreInsertParametr = arr.objectAt(0).get('address');\n        filtreInsertParametr = filtreInsertParametr.slice(1, filtreInsertParametr.length);\n        if (!filtreInsertParametr) {\n          assert.ok(false, 'Empty data');\n        }\n      }).then(function () {\n        var $filterButtonDiv = Ember.$('.buttons.filter-active');\n        var $filterButton = $filterButtonDiv.children('button');\n        var $objectListView = Ember.$('.object-list-view');\n\n        // Activate filtre row.\n        Ember.run(function () {\n          $filterButton.click();\n        });\n\n        (0, _folvTestsFunctions.filterCollumn)($objectListView, 0, filtreInsertOperation, filtreInsertParametr).then(function () {\n          // Apply filter function.\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = Ember.$('.refresh-button')[0];\n            refreshButton.click();\n          };\n\n          // Apply filter.\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          var done1 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var filtherResult = controller.model.content;\n            var successful = true;\n            for (var i = 0; i < filtherResult.length; i++) {\n              var address = filtherResult[i]._data.address;\n              if (address.lastIndexOf(filtreInsertParametr) === -1) {\n                successful = false;\n              }\n            }\n\n            assert.equal(filtherResult.length >= 1, true, 'Filtered list is empty');\n            assert.equal(successful, true, 'Filter successfully worked');\n            done1();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-neq-filter-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/query/filter-operator', 'ember-flexberry-data/query/builder'], function (_executeFolvTest, _folvTestsFunctions, _filterOperator, _builder) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check neq filter', function (store, assert, app) {\n    assert.expect(2);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-filter';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var filtreInsertOperation = 'neq';\n    var filtreInsertParametr = void 0;\n\n    visit(path + '?perPage=500');\n    andThen(function () {\n      assert.equal(currentPath(), path);\n      var builder2 = new _builder.default(store).from(modelName).selectByProjection('SuggestionL').where('address', _filterOperator.default.Neq, '').top(1);\n      store.query(modelName, builder2.build()).then(function (result) {\n        var arr = result.toArray();\n        filtreInsertParametr = arr.objectAt(0).get('address');\n        if (!filtreInsertParametr) {\n          assert.ok(false, 'Empty data');\n        }\n      }).then(function () {\n        var $filterButtonDiv = Ember.$('.buttons.filter-active');\n        var $filterButton = $filterButtonDiv.children('button');\n        var $objectListView = Ember.$('.object-list-view');\n\n        // Activate filtre row.\n        Ember.run(function () {\n          $filterButton.click();\n        });\n\n        (0, _folvTestsFunctions.filterCollumn)($objectListView, 0, filtreInsertOperation, filtreInsertParametr).then(function () {\n          // Apply filter function.\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = Ember.$('.refresh-button')[0];\n            refreshButton.click();\n          };\n\n          // Apply filter.\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          var done1 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var filtherResult = controller.model.content;\n            var successful = true;\n            for (var i = 0; i < filtherResult.length; i++) {\n              var address = filtherResult[i]._data.address;\n              if (address === filtreInsertParametr) {\n                successful = false;\n              }\n            }\n\n            assert.equal(successful, true, 'Filter successfully worked');\n            done1();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/filther/folv-without-operation-filter-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/query/filter-operator', 'ember-flexberry-data/query/builder'], function (_executeFolvTest, _folvTestsFunctions, _filterOperator, _builder) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check without operation filter', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-filter';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var filtreInsertOperation = '';\n    var filtreInsertParametr = void 0;\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n      var builder2 = new _builder.default(store).from(modelName).selectByProjection('SuggestionL').where('address', _filterOperator.default.Neq, '').top(1);\n      store.query(modelName, builder2.build()).then(function (result) {\n        var arr = result.toArray();\n        filtreInsertParametr = arr.objectAt(0).get('address');\n        filtreInsertParametr = filtreInsertParametr.slice(1, filtreInsertParametr.length);\n        if (!filtreInsertParametr) {\n          assert.ok(false, 'Empty data');\n        }\n      }).then(function () {\n        var $filterButtonDiv = Ember.$('.buttons.filter-active');\n        var $filterButton = $filterButtonDiv.children('button');\n        var $objectListView = Ember.$('.object-list-view');\n\n        // Activate filtre row.\n        Ember.run(function () {\n          $filterButton.click();\n        });\n\n        (0, _folvTestsFunctions.filterCollumn)($objectListView, 0, filtreInsertOperation, filtreInsertParametr).then(function () {\n          // Apply filter function.\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = Ember.$('.refresh-button')[0];\n            refreshButton.click();\n          };\n\n          // Apply filter.\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          var done1 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var filtherResult = controller.model.content;\n            var successful = true;\n            for (var i = 0; i < filtherResult.length; i++) {\n              var address = filtherResult[i]._data.address;\n              if (address.lastIndexOf(filtreInsertParametr) === -1) {\n                successful = false;\n              }\n            }\n\n            assert.equal(filtherResult.length >= 1, true, 'Filtered list is empty');\n            assert.equal(successful, true, 'Filter successfully worked');\n            done1();\n          });\n        });\n      });\n    });\n  });\n});","// import { run } from '@ember/runloop';\n// import $ from 'jquery';\n// import { get } from '@ember/object';\n// import { executeTest } from './execute-folv-test';\n// import { loadingList, checkSortingList, loadingLocales, getOrderByClause } from './folv-tests-functions';\n\n// var olvContainerClass = '.object-list-view-container';\n// var trTableClass = 'table.object-list-view tbody tr';\n\n// Need to add sort by multiple columns.\n// TODO: Fix for menu\n// executeTest('check select all at all page', (store, assert, app) => {\n// assert.expect(10);\n// let path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n// visit(path);\n// click('.ui.clear-sorting-button');\n// andThen(() => {\n\n//   // Check page path.\n//   assert.equal(currentPath(), path);\n//   let controller = app.__container__.lookup('controller:' + currentRouteName());\n//   let projectionName = get(controller, 'modelProjection');\n\n//   let orderByClause = null;\n\n//   let $olv = $('.object-list-view ');\n//   let $thead = $('th.dt-head-left', $olv)[0];\n\n//   let currentSorting = controller.get('computedSorting');\n//   if (!$.isEmptyObject(currentSorting)) {\n//     orderByClause = getOrderByClause(currentSorting);\n//   }\n\n//   run(() => {\n//     let done = assert.async();\n\n//     // Check sortihg in the first column. Sorting is not append.\n//     loadingLocales('ru', app).then(() => {\n//       checkSortingList(store, projectionName, $olv, orderByClause).then((isTrue) => {\n//         assert.ok(isTrue, 'sorting is not applied');\n\n//         // Check sortihg icon in the first column. Sorting icon is not added.\n//         assert.equal($thead.children[0].children.length, 1, 'no sorting icon in the first column');\n//         let done1 = assert.async();\n//         loadingList($thead, olvContainerClass, trTableClass).then(($list) => {\n\n//           assert.ok($list);\n\n//           let $checkAllButton = $('.check-all-button');\n//           run(() => {\n//             $checkAllButton.click();\n//           });\n\n//           let $checkAllAtPageButton = $('.check-all-at-page-button');\n//           let $checkCheckBox = $('.flexberry-checkbox.checked.read-only');\n//           let $deleteButton = $('.delete-button');\n\n//           // Check afther select all.\n//           assert.equal($checkAllAtPageButton.hasClass('disabled'), true, 'select all at page aren\\'t available');\n//           assert.equal($checkCheckBox.length, 5, 'all checkBox in row are select and readOnly');\n//           assert.equal($deleteButton.hasClass('disabled'), false, 'delete are available');\n\n//           run(() => {\n//             $checkAllButton.click();\n//           });\n\n//           $checkAllAtPageButton = $('.check-all-at-page-button');\n//           $checkCheckBox = $('.flexberry-checkbox.checked.read-only');\n//           $deleteButton = $('.delete-button');\n\n//           // Check afther unselect all.\n//           assert.equal($checkAllAtPageButton.hasClass('disabled'), false, 'select all at page are available');\n//           assert.equal($checkCheckBox.length, 0, 'all checkBox in row are select and readOnly');\n//           assert.equal($deleteButton.hasClass('disabled'), true, 'delete aren\\'t available');\n\n//           done1();\n//         });\n//         done();\n//       });\n//     });\n//   });\n// });\n// });\ndefine(\"dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-all-at-all-page-test\", [], function () {\n  \"use strict\";\n});","// import { run } from '@ember/runloop';\n// import $ from 'jquery';\n// import { get } from '@ember/object';\n// import { executeTest } from './execute-folv-test';\n// import { loadingList, checkSortingList, loadingLocales, getOrderByClause } from './folv-tests-functions';\n\n// var olvContainerClass = '.object-list-view-container';\n// var trTableClass = 'table.object-list-view tbody tr';\n\n// Need to add sort by multiple columns.\n// executeTest('check select all at page', (store, assert, app) => {\n// assert.expect(8);\n// let path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n// visit(path);\n// click('.ui.clear-sorting-button');\n// andThen(() => {\n\n//   // Check page path.\n//   assert.equal(currentPath(), path);\n//   let controller = app.__container__.lookup('controller:' + currentRouteName());\n//   let projectionName = get(controller, 'modelProjection');\n\n//   let orderByClause = null;\n\n//   let $olv = $('.object-list-view ');\n//   let $thead = $('th.dt-head-left', $olv)[0];\n\n//   let currentSorting = controller.get('computedSorting');\n//   if (!$.isEmptyObject(currentSorting)) {\n//     orderByClause = getOrderByClause(currentSorting);\n//   }\n\n//   run(() => {\n//     let done = assert.async();\n\n//     // Check sortihg in the first column. Sorting is not append.\n//     loadingLocales('ru', app).then(() => {\n//       checkSortingList(store, projectionName, $olv, orderByClause).then((isTrue) => {\n//         assert.ok(isTrue, 'sorting is not applied');\n\n//         // Check sortihg icon in the first column. Sorting icon is not added.\n//         assert.equal($thead.children[0].children.length, 1, 'no sorting icon in the first column');\n//         let done1 = assert.async();\n//         loadingList($thead, olvContainerClass, trTableClass).then(($list) => {\n\n//           assert.ok($list);\n\n//           let $checkAllAtPageButton = $('.check-all-at-page-button');\n//           run(() => {\n//             $checkAllAtPageButton.click();\n//           });\n\n//           let $deleteButton = $('.delete-button');\n//           let $checkCheckBox = $('.flexberry-checkbox.checked');\n\n//           // Check afther select all at page.\n//           assert.equal($checkCheckBox.length, 5, 'all checkBox in row are select');\n//           assert.equal($deleteButton.hasClass('disabled'), false, 'delete are available');\n\n//           run(() => {\n//             $checkAllAtPageButton.click();\n//           });\n\n//           $deleteButton = $('.delete-button');\n//           $checkCheckBox = $('.flexberry-checkbox.checked');\n\n//           // Check afther unselect all at page.\n//           assert.equal($checkCheckBox.length, 0, 'all checkBox in row are unselect');\n//           assert.equal($deleteButton.hasClass('disabled'), true, 'delete aren\\'t available');\n\n//           done1();\n//         });\n//         done();\n//       });\n//     });\n//   });\n// });\n// });\ndefine(\"dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-all-at-page-test\", [], function () {\n  \"use strict\";\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-checked-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test'], function (_executeFolvTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeFolvTest.executeTest)('test checking', function (store, assert, app) {\n    assert.expect(2);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $folvContainer = Ember.$('.object-list-view-container');\n      var $row = Ember.$('table.object-list-view tbody tr', $folvContainer).first();\n\n      // Мark first record.\n      var $firstCell = Ember.$('.object-list-view-helper-column-cell', $row);\n      var $checkboxInRow = Ember.$('.flexberry-checkbox', $firstCell);\n\n      $checkboxInRow.click();\n      andThen(function () {\n        var recordIsChecked = $checkboxInRow[0].className.indexOf('checked') >= 0;\n        assert.ok(recordIsChecked, 'First row is checked');\n      });\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-column-config-save-button-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test'], function (_executeFolvTest) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check column config save button test', function (store, assert) {\n    assert.expect(3);\n    var path = 'ember-flexberry-dummy-suggestion-list';\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $configButton = Ember.$('button.config-button');\n      click($configButton);\n\n      andThen(function () {\n        var $field = Ember.$('div.ui.action.input');\n        var $fieldInput = $field.children('input');\n\n        assert.equal($field.children('.cols-config-save.disabled').length === 1, true, 'button disabled');\n        fillIn($fieldInput, 'aaayyyeee leemaauuuu');\n      });\n\n      andThen(function () {\n        var $field = Ember.$('div.ui.action.input');\n        assert.equal($field.children('.cols-config-save.disabled').length === 0, true, 'button active');\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-configurate-row-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test'], function (_executeFolvTest) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check configurate row test', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-examples/flexberry-objectlistview/configurate-rows';\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $folvContainer = Ember.$('.object-list-view-container');\n\n      // Get all positive row.\n      var $positivRow = Ember.$('.positive', $folvContainer);\n      assert.equal($positivRow.length, 2, 'One positive row at component');\n\n      // Check positive row at folv.\n      var $folvRow = $positivRow[0];\n      var $cell = Ember.$('.oveflow-text', $folvRow);\n      assert.equal($cell[0].innerText, controller.configurateRowByAddress, '');\n\n      // Check positive row at GroupEdit.\n      var $geRow = $positivRow[1];\n      $cell = Ember.$('.oveflow-text', $geRow);\n      assert.equal($cell[0].innerText, controller.configurateRowByAddress, '');\n\n      // Get all negative row.\n      var $negativRow = Ember.$('.negative', $folvContainer);\n      assert.equal($negativRow.length, 8, 'Four negative row at component');\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-date-format-moment-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry/locales/ru/translations'], function (_executeFolvTest, _folvTestsFunctions, _translations) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('date format moment L', function (store, assert, app) {\n    assert.expect(5);\n    var done = assert.async();\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n      (0, _folvTestsFunctions.loadingLocales)('ru', app).then(function () {\n\n        var olvContainerClass = '.object-list-view-container';\n\n        var $toolBar = Ember.$('.ui.secondary.menu')[0];\n        var $toolBarButtons = $toolBar.children;\n        var $refreshButton = $toolBarButtons[0];\n        assert.equal($refreshButton.innerText.trim(), Ember.get(_translations.default, 'components.olv-toolbar.refresh-button-text'), 'button refresh exist');\n\n        var controller = app.__container__.lookup('controller:' + currentRouteName());\n        var refreshFunction = function refreshFunction() {\n          var refreshButton = Ember.$('.refresh-button')[0];\n          refreshButton.click();\n        };\n\n        (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n          var moment = app.__container__.lookup('service:moment');\n          var momentValue = Ember.get(moment, 'defaultFormat');\n\n          assert.equal(momentValue, 'L', 'moment value is \\'L\\' ');\n\n          var $folvContainer = Ember.$(olvContainerClass);\n          var $table = Ember.$('table.object-list-view', $folvContainer);\n          var $headRow = Ember.$('thead tr', $table)[0].children;\n\n          var indexDate = function indexDate() {\n            var toReturn = void 0;\n            /* eslint-disable no-unused-vars */\n            Object.keys($headRow).forEach(function (element, index, array) {\n              var $dateAttribute = Ember.$($headRow[element]).children('div');\n              if ($dateAttribute.length !== 0 && Ember.$.trim($dateAttribute[0].getAttribute('data-olv-header-property-name')) === 'date') {\n                toReturn = index;\n                return false;\n              }\n            });\n            /* eslint-enable no-unused-vars */\n\n            return toReturn;\n          };\n\n          var $dateCell = function $dateCell() {\n            return Ember.$.trim(Ember.$('tbody tr', $table)[0].children[indexDate()].innerText);\n          };\n\n          // Date format most be DD.MM.YYYY\n          var dateFormatRuRe = /(0[1-9]|[12][0-9]|3[01])\\.(0[1-9]|1[012])\\.(19|20)\\d\\d/;\n          var findDateRu = dateFormatRuRe.exec($dateCell());\n\n          assert.ok(findDateRu, 'date format is \\'DD.MM.YYYY\\' ');\n\n          var done2 = assert.async();\n          (0, _folvTestsFunctions.loadingLocales)('en', app).then(function () {\n\n            var done1 = assert.async();\n            (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n              // Date format most be MM/DD/YYYY:\n              var dateFormatEnRe = /(0[1-9]|1[012])\\/(0[1-9]|[12][0-9]|3[01])\\/(19|20)\\d\\d/;\n              var dataCellStr = $dateCell();\n\n              var findDateEn = dateFormatEnRe.exec(dataCellStr);\n\n              assert.ok(findDateEn, 'date format is \\'MM/DD/YYYY\\' ');\n            }).catch(function (reason) {\n              // Error output.\n              assert.ok(false, reason);\n            }).finally(function () {\n              done1();\n            });\n            done2();\n          });\n          done();\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-data-cancel-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'ember-flexberry-data/utils/generate-unique-id', 'ember-flexberry-data/query/builder', 'ember-flexberry-data/query/filter-operator', '@ember/test-helpers'], function (_executeFolvTest, _generateUniqueId, _builder, _filterOperator, _testHelpers) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check delete before record data cancel test', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-cancel';\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var howAddRec = 1;\n    var uuid = '0' + (0, _generateUniqueId.default)();\n\n    // Add records for deleting.\n    Ember.run(function () {\n      var newRecord = store.createRecord(modelName, { name: uuid });\n      var done1 = assert.async();\n\n      newRecord.save().then(function () {\n        (0, _executeFolvTest.addDataForDestroy)(newRecord);\n        var builder = new _builder.default(store).from(modelName).count();\n        var done = assert.async();\n        store.query(modelName, builder.build()).then(function (result) {\n          visit(path + '?perPage=' + result.meta.count);\n          andThen(function () {\n            assert.equal(currentPath(), path);\n\n            var olvContainerClass = '.object-list-view-container';\n            var trTableClass = 'table.object-list-view tbody tr';\n\n            var $folvContainer = Ember.$(olvContainerClass);\n            var $rows = function $rows() {\n              return Ember.$(trTableClass, $folvContainer).toArray();\n            };\n\n            // Check that the records have been added.\n            var recordIsForDeleting = $rows().reduce(function (sum, element) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              var flag = nameRecord.indexOf(uuid) >= 0;\n              return sum + flag;\n            }, 0);\n\n            assert.equal(recordIsForDeleting > 0, true, howAddRec + ' record added');\n\n            /* eslint-disable no-unused-vars */\n            var clickPromises = [];\n            $rows().forEach(function (element, i, arr) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              if (nameRecord.indexOf(uuid) >= 0) {\n                var $deleteBtnInRow = Ember.$('.object-list-view-row-delete-button', element)[0];\n                clickPromises.push((0, _testHelpers.click)($deleteBtnInRow));\n              }\n            });\n            /* eslint-enable no-unused-vars */\n\n            Promise.all(clickPromises).then(function () {\n              var done2 = assert.async();\n\n              // Check that the records wasn't remove in beforeDeleteRecord.\n              var controller = app.__container__.lookup('controller:' + currentRouteName());\n              assert.ok(controller.recordWasNotDelete, 'Records wasn\\'t remove in beforeDeleteRecord');\n\n              // Check that the records have been removed.\n              var recordsIsDeleteBtnInRow = $rows().every(function (element) {\n                var nameRecord = Ember.$.trim(element.children[1].innerText);\n                return nameRecord.indexOf(uuid) < 0;\n              });\n\n              assert.notOk(recordsIsDeleteBtnInRow, 'Each entry begins with \\'' + uuid + '\\' wasn\\'t deleted with button in row');\n\n              // Check that the records hadn't removed from store.\n              var builder2 = new _builder.default(store, modelName).where('name', _filterOperator.default.Eq, uuid).count();\n              var timeout = 500;\n              Ember.run.later(function () {\n                store.query(modelName, builder2.build()).then(function (result) {\n                  assert.ok(result.meta.count, 'record \\'' + uuid + '\\'not found in store');\n                  done2();\n                }).finally(function () {\n                  newRecord.destroyRecord();\n                });\n              }, timeout);\n            });\n          });\n          done();\n        });\n        done1();\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-data-immediately-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'ember-flexberry-data/utils/generate-unique-id', 'ember-flexberry-data/query/builder', 'ember-flexberry-data/query/filter-operator', '@ember/test-helpers'], function (_executeFolvTest, _generateUniqueId, _builder, _filterOperator, _testHelpers) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check delete before record data immediately test', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-immediately';\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var howAddRec = 1;\n    var uuid = '0' + (0, _generateUniqueId.default)();\n\n    // Add record for deleting.\n    Ember.run(function () {\n      var newRecord = store.createRecord(modelName, { name: uuid });\n      var done1 = assert.async();\n\n      newRecord.save().then(function () {\n        (0, _executeFolvTest.addDataForDestroy)(newRecord);\n        var builder = new _builder.default(store).from(modelName).count();\n        var done = assert.async();\n        store.query(modelName, builder.build()).then(function (result) {\n          visit(path + '?perPage=' + result.meta.count);\n          andThen(function () {\n            assert.equal(currentPath(), path);\n\n            var olvContainerClass = '.object-list-view-container';\n            var trTableClass = 'table.object-list-view tbody tr';\n\n            var $folvContainer = Ember.$(olvContainerClass);\n            var $rows = function $rows() {\n              return Ember.$(trTableClass, $folvContainer).toArray();\n            };\n\n            // Check that the record have been added.\n            var recordIsForDeleting = $rows().reduce(function (sum, element) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              var flag = nameRecord.indexOf(uuid) >= 0;\n              return sum + flag;\n            }, 0);\n\n            assert.equal(recordIsForDeleting > 0, true, howAddRec + ' record added');\n\n            /* eslint-disable no-unused-vars */\n            var clickPromises = [];\n            $rows().forEach(function (element, i, arr) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              if (nameRecord.indexOf(uuid) >= 0) {\n                var $deleteBtnInRow = Ember.$('.object-list-view-row-delete-button', element)[0];\n                clickPromises.push((0, _testHelpers.click)($deleteBtnInRow));\n              }\n            });\n            /* eslint-enable no-unused-vars */\n\n            Promise.all(clickPromises).then(function () {\n              var done2 = assert.async();\n\n              // Check that the records wasn't removed in beforeDeleteRecord.\n              var controller = app.__container__.lookup('controller:' + currentRouteName());\n              assert.ok(controller.recordWasNotDelete, 'Records wasn\\'t remove in beforeDeleteRecord');\n\n              // Check if the records haven't been removed.\n              var recordsIsDeleteBtnInRow = $rows().every(function (element) {\n                var nameRecord = Ember.$.trim(element.children[1].innerText);\n                return nameRecord.indexOf(uuid) < 0;\n              });\n\n              assert.ok(recordsIsDeleteBtnInRow, 'Each entry begins with \\'' + uuid + '\\' was deleted with button in row');\n\n              // Check that the records have been removed from store.\n              var builder2 = new _builder.default(store, modelName).where('name', _filterOperator.default.Eq, uuid).count();\n              var timeout = 500;\n              Ember.run.later(function () {\n                store.query(modelName, builder2.build()).then(function (result) {\n                  assert.ok(result.meta.count, 'record \\'' + uuid + '\\'not found in store');\n                  done2();\n                }).finally(function () {\n                  newRecord.destroyRecord();\n                });\n              }, timeout);\n            });\n          });\n          done();\n        });\n        done1();\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'ember-flexberry-data/utils/generate-unique-id', 'ember-flexberry-data/query/builder', 'ember-flexberry-data/query/filter-operator', '@ember/test-helpers'], function (_executeFolvTest, _generateUniqueId, _builder, _filterOperator, _testHelpers) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check delete before record test', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record';\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var howAddRec = 1;\n    var uuid = '0' + (0, _generateUniqueId.default)();\n\n    // Add records for deliting.\n    Ember.run(function () {\n      var newRecord = store.createRecord(modelName, { name: uuid });\n      var done1 = assert.async();\n\n      newRecord.save().then(function () {\n        (0, _executeFolvTest.addDataForDestroy)(newRecord);\n        var builder = new _builder.default(store).from(modelName).count();\n        var done = assert.async();\n        store.query(modelName, builder.build()).then(function (result) {\n          visit(path + '?perPage=' + result.meta.count);\n          andThen(function () {\n            assert.equal(currentPath(), path);\n\n            var olvContainerClass = '.object-list-view-container';\n            var trTableClass = 'table.object-list-view tbody tr';\n\n            var $folvContainer = Ember.$(olvContainerClass);\n            var $rows = function $rows() {\n              return Ember.$(trTableClass, $folvContainer).toArray();\n            };\n\n            // Check that the records have been added.\n            var recordIsForDeleting = $rows().reduce(function (sum, element) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              var flag = nameRecord.indexOf(uuid) >= 0;\n              return sum + flag;\n            }, 0);\n\n            assert.equal(recordIsForDeleting > 0, true, howAddRec + ' record added');\n\n            /* eslint-disable no-unused-vars */\n            var clickPromises = [];\n            $rows().forEach(function (element, i, arr) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              if (nameRecord.indexOf(uuid) >= 0) {\n                var $deleteBtnInRow = Ember.$('.object-list-view-row-delete-button', element)[0];\n                clickPromises.push((0, _testHelpers.click)($deleteBtnInRow));\n              }\n            });\n            /* eslint-enable no-unused-vars */\n\n            Promise.all(clickPromises).then(function () {\n              var done2 = assert.async();\n\n              // Check that the records wasn't remove in beforeDeleteRecord.\n              var controller = app.__container__.lookup('controller:' + currentRouteName());\n              assert.ok(controller.recordWasNotDelete, 'Records wasn\\'t remove in beforeDeleteRecord');\n\n              // Check that the records have been removed.\n              var recordsIsDeleteBtnInRow = $rows().every(function (element) {\n                var nameRecord = Ember.$.trim(element.children[1].innerText);\n                return nameRecord.indexOf(uuid) < 0;\n              });\n\n              assert.ok(recordsIsDeleteBtnInRow, 'Each entry begins with \\'' + uuid + '\\' is delete with button in row');\n\n              // Check that the records had been removed from store.\n              var builder2 = new _builder.default(store, modelName).where('name', _filterOperator.default.Eq, uuid).count();\n              var timeout = 500;\n              Ember.run.later(function () {\n                store.query(modelName, builder2.build()).then(function (result) {\n                  assert.notOk(result.meta.count, 'record \\'' + uuid + '\\'not found in store');\n                  done2();\n                });\n              }, timeout);\n            });\n          });\n          done();\n        });\n        done1();\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-with-promise-data-cancel-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'ember-flexberry-data/utils/generate-unique-id', 'ember-flexberry-data/query/builder', 'ember-flexberry-data/query/filter-operator', '@ember/test-helpers'], function (_executeFolvTest, _generateUniqueId, _builder, _filterOperator, _testHelpers) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check delete before record with promise data cancel test', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-cancel';\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var howAddRec = 1;\n    var uuid = '0' + (0, _generateUniqueId.default)();\n\n    // Add records for deliting.\n    Ember.run(function () {\n      var newRecord = store.createRecord(modelName, { name: uuid });\n      var done1 = assert.async();\n\n      newRecord.save().then(function () {\n        (0, _executeFolvTest.addDataForDestroy)(newRecord);\n        var builder = new _builder.default(store).from(modelName).count();\n        var done = assert.async();\n        store.query(modelName, builder.build()).then(function (result) {\n          visit(path + '?perPage=' + result.meta.count);\n          andThen(function () {\n            assert.equal(currentPath(), path);\n\n            var olvContainerClass = '.object-list-view-container';\n            var trTableClass = 'table.object-list-view tbody tr';\n\n            var $folvContainer = Ember.$(olvContainerClass);\n            var $rows = function $rows() {\n              return Ember.$(trTableClass, $folvContainer).toArray();\n            };\n\n            // Check that the records have been added.\n            var recordIsForDeleting = $rows().reduce(function (sum, element) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              var flag = nameRecord.indexOf(uuid) >= 0;\n              return sum + flag;\n            }, 0);\n\n            assert.equal(recordIsForDeleting > 0, true, howAddRec + ' record added');\n\n            /* eslint-disable no-unused-vars */\n            var clickPromises = [];\n            $rows().forEach(function (element, i, arr) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              if (nameRecord.indexOf(uuid) >= 0) {\n                var $deleteBtnInRow = Ember.$('.object-list-view-row-delete-button', element)[0];\n                clickPromises.push((0, _testHelpers.click)($deleteBtnInRow));\n              }\n            });\n            /* eslint-enable no-unused-vars */\n\n            Promise.all(clickPromises).then(function () {\n              var done2 = assert.async();\n\n              // Check that the records wasn't remove in beforeDeleteRecord.\n              var controller = app.__container__.lookup('controller:' + currentRouteName());\n              assert.ok(controller.recordWasNotDelete, 'Records wasn\\'t remove in beforeDeleteRecord');\n\n              // Check if the records wasn't removed.\n              var recordsIsDeleteBtnInRow = $rows().every(function (element) {\n                var nameRecord = Ember.$.trim(element.children[1].innerText);\n                return nameRecord.indexOf(uuid) < 0;\n              });\n\n              assert.notOk(recordsIsDeleteBtnInRow, 'Each entry begins with \\'' + uuid + '\\' is delete with button in row');\n\n              // Check that the records haven't been removed from store.\n              var builder2 = new _builder.default(store, modelName).where('name', _filterOperator.default.Eq, uuid).count();\n              var timeout = 500;\n              Ember.run.later(function () {\n                store.query(modelName, builder2.build()).then(function (result) {\n                  assert.ok(result.meta.count, 'record \\'' + uuid + '\\'not found in store');\n                  done2();\n                }).finally(function () {\n                  newRecord.destroyRecord();\n                });\n              }, timeout);\n            });\n          });\n          done();\n        });\n        done1();\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-with-promise-data-immediately-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'ember-flexberry-data/utils/generate-unique-id', 'ember-flexberry-data/query/builder', 'ember-flexberry-data/query/filter-operator', '@ember/test-helpers'], function (_executeFolvTest, _generateUniqueId, _builder, _filterOperator, _testHelpers) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check delete before record with promise data immediately test', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-immediately';\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var howAddRec = 1;\n    var uuid = '0' + (0, _generateUniqueId.default)();\n\n    // Add records for deliting.\n    Ember.run(function () {\n      var newRecord = store.createRecord(modelName, { name: uuid });\n      var done1 = assert.async();\n\n      newRecord.save().then(function () {\n        (0, _executeFolvTest.addDataForDestroy)(newRecord);\n        var builder = new _builder.default(store).from(modelName).count();\n        var done = assert.async();\n        store.query(modelName, builder.build()).then(function (result) {\n          visit(path + '?perPage=' + result.meta.count);\n          andThen(function () {\n            assert.equal(currentPath(), path);\n\n            var olvContainerClass = '.object-list-view-container';\n            var trTableClass = 'table.object-list-view tbody tr';\n\n            var $folvContainer = Ember.$(olvContainerClass);\n            var $rows = function $rows() {\n              return Ember.$(trTableClass, $folvContainer).toArray();\n            };\n\n            // Check that the records have been added.\n            var recordIsForDeleting = $rows().reduce(function (sum, element) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              var flag = nameRecord.indexOf(uuid) >= 0;\n              return sum + flag;\n            }, 0);\n\n            assert.equal(recordIsForDeleting > 0, true, howAddRec + ' record added');\n\n            /* eslint-disable no-unused-vars */\n            var clickPromises = [];\n            $rows().forEach(function (element, i, arr) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              if (nameRecord.indexOf(uuid) >= 0) {\n                var $deleteBtnInRow = Ember.$('.object-list-view-row-delete-button', element)[0];\n                clickPromises.push((0, _testHelpers.click)($deleteBtnInRow));\n              }\n            });\n            /* eslint-enable no-unused-vars */\n\n            Promise.all(clickPromises).then(function () {\n              var done2 = assert.async();\n\n              // Check that the records wasn't remove in beforeDeleteRecord.\n              var controller = app.__container__.lookup('controller:' + currentRouteName());\n              assert.ok(controller.recordWasNotDelete, 'Records wasn\\'t remove in beforeDeleteRecord');\n\n              // Check if the records wasn't removed.\n              var recordsIsDeleteBtnInRow = $rows().every(function (element) {\n                var nameRecord = Ember.$.trim(element.children[1].innerText);\n                return nameRecord.indexOf(uuid) < 0;\n              });\n\n              assert.ok(recordsIsDeleteBtnInRow, 'Each entry begins with \\'' + uuid + '\\' is delete with button in row');\n\n              // Check that the records have been removed from store.\n              var builder2 = new _builder.default(store, modelName).where('name', _filterOperator.default.Eq, uuid).count();\n              var timeout = 500;\n              Ember.run.later(function () {\n                store.query(modelName, builder2.build()).then(function (result) {\n                  assert.ok(result.meta.count, 'record \\'' + uuid + '\\'not found in store');\n                  done2();\n                }).finally(function () {\n                  newRecord.destroyRecord();\n                });\n              }, timeout);\n            });\n          });\n          done();\n        });\n        done1();\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-with-promise-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'ember-flexberry-data/utils/generate-unique-id', 'ember-flexberry-data/query/builder', 'ember-flexberry-data/query/filter-operator', '@ember/test-helpers'], function (_executeFolvTest, _generateUniqueId, _builder, _filterOperator, _testHelpers) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check delete before record with promise test', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise';\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var howAddRec = 1;\n    var uuid = '0' + (0, _generateUniqueId.default)();\n\n    // Add records for deliting.\n    Ember.run(function () {\n      var newRecord = store.createRecord(modelName, { name: uuid });\n      var done1 = assert.async();\n\n      newRecord.save().then(function () {\n        (0, _executeFolvTest.addDataForDestroy)(newRecord);\n        var builder = new _builder.default(store).from(modelName).count();\n        var done = assert.async();\n        store.query(modelName, builder.build()).then(function (result) {\n          visit(path + '?perPage=' + result.meta.count);\n          andThen(function () {\n            assert.equal(currentPath(), path);\n\n            var olvContainerClass = '.object-list-view-container';\n            var trTableClass = 'table.object-list-view tbody tr';\n\n            var $folvContainer = Ember.$(olvContainerClass);\n            var $rows = function $rows() {\n              return Ember.$(trTableClass, $folvContainer).toArray();\n            };\n\n            // Check that the records have been added.\n            var recordIsForDeleting = $rows().reduce(function (sum, element) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              var flag = nameRecord.indexOf(uuid) >= 0;\n              return sum + flag;\n            }, 0);\n\n            assert.equal(recordIsForDeleting > 0, true, howAddRec + ' record added');\n\n            /* eslint-disable no-unused-vars */\n            var clickPromises = [];\n            $rows().forEach(function (element, i, arr) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              if (nameRecord.indexOf(uuid) >= 0) {\n                var $deleteBtnInRow = Ember.$('.object-list-view-row-delete-button', element)[0];\n                clickPromises.push((0, _testHelpers.click)($deleteBtnInRow));\n              }\n            });\n            /* eslint-enable no-unused-vars */\n\n            Promise.all(clickPromises).then(function () {\n              var done2 = assert.async();\n\n              // Check that the records wasn't remove in beforeDeleteRecord.\n              var controller = app.__container__.lookup('controller:' + currentRouteName());\n              assert.ok(controller.recordWasNotDelete, 'Records wasn\\'t remove in beforeDeleteRecord');\n\n              // Check that the records haven't been removed.\n              var recordsIsDeleteBtnInRow = $rows().every(function (element) {\n                var nameRecord = Ember.$.trim(element.children[1].innerText);\n                return nameRecord.indexOf(uuid) < 0;\n              });\n\n              assert.ok(recordsIsDeleteBtnInRow, 'Each entry begins with \\'' + uuid + '\\' is delete with button in row');\n\n              // Check that the records haven't been removed into store.\n              var builder2 = new _builder.default(store, modelName).where('name', _filterOperator.default.Eq, uuid).count();\n              var timeout = 500;\n              Ember.run.later(function () {\n                store.query(modelName, builder2.build()).then(function (result) {\n                  assert.notOk(result.meta.count, 'record \\'' + uuid + '\\'not found in store');\n                  done2();\n                });\n              }, timeout);\n            });\n          });\n          done();\n        });\n        done1();\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-button-in-row-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'ember-flexberry-data/utils/generate-unique-id', '@ember/test-helpers', 'ember-flexberry-data/query/filter-operator', 'ember-flexberry-data/query/builder'], function (_executeFolvTest, _generateUniqueId, _testHelpers, _filterOperator, _builder) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeFolvTest.executeTest)('check delete button in row', function (store, assert, app) {\n    assert.expect(4);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var howAddRec = 1;\n    var uuid = '0' + (0, _generateUniqueId.default)();\n\n    // Add records for deliting.\n    Ember.run(function () {\n      var newRecord = store.createRecord(modelName, { name: uuid });\n      var done1 = assert.async();\n\n      newRecord.save().then(function () {\n        (0, _executeFolvTest.addDataForDestroy)(newRecord);\n        var builder = new _builder.default(store).from(modelName).count();\n        var done = assert.async();\n        store.query(modelName, builder.build()).then(function (result) {\n          visit(path + '?perPage=' + result.meta.count);\n          andThen(function () {\n            assert.equal(currentPath(), path);\n\n            var olvContainerClass = '.object-list-view-container';\n            var trTableClass = 'table.object-list-view tbody tr';\n\n            var $folvContainer = Ember.$(olvContainerClass);\n            var $rows = function $rows() {\n              return Ember.$(trTableClass, $folvContainer).toArray();\n            };\n\n            // Check that the records have been added.\n            var recordIsForDeleting = $rows().reduce(function (sum, element) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              var flag = nameRecord.indexOf(uuid) >= 0;\n              return sum + flag;\n            }, 0);\n\n            assert.equal(recordIsForDeleting, howAddRec, howAddRec + ' record added');\n\n            /* eslint-disable no-unused-vars */\n            var clickPromises = [];\n            $rows().forEach(function (element, i, arr) {\n              var nameRecord = Ember.$.trim(element.children[1].innerText);\n              if (nameRecord.indexOf(uuid) >= 0) {\n                var $deleteBtnInRow = Ember.$('.object-list-view-row-delete-button', element)[0];\n                Ember.run(function () {\n                  clickPromises.push((0, _testHelpers.click)($deleteBtnInRow));\n                });\n              }\n            });\n            /* eslint-enable no-unused-vars */\n\n            Promise.all(clickPromises).then(function () {\n              var done2 = assert.async();\n\n              // Check that the records have been removed.\n              var recordsIsDeleteBtnInRow = $rows().every(function (element) {\n                var nameRecord = Ember.$.trim(element.children[1].innerText);\n                return nameRecord.indexOf(uuid) < 0;\n              });\n\n              assert.ok(recordsIsDeleteBtnInRow, 'Each entry begins with \\'' + uuid + '\\' is delete with button in row');\n\n              // Check that the records have been removed into store.\n              var builder2 = new _builder.default(store, modelName).where('name', _filterOperator.default.Eq, uuid).count();\n              var timeout = 500;\n              Ember.run.later(function () {\n                store.query(modelName, builder2.build()).then(function (result) {\n                  assert.notOk(result.meta.count, 'record \\'' + uuid + '\\'not found in store');\n                  done2();\n                });\n              }, timeout);\n            });\n          });\n          done();\n        });\n        done1();\n      });\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-button-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/utils/generate-unique-id', 'ember-flexberry-data/query/filter-operator', 'ember-flexberry-data/query/builder'], function (_executeFolvTest, _folvTestsFunctions, _generateUniqueId, _filterOperator, _builder) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeFolvTest.executeTest)('check delete using button on toolbar', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var howAddRec = 2;\n    var uuid = '0' + (0, _generateUniqueId.default)();\n\n    // Add records for deliting.\n    Ember.run(function () {\n      var newRecords = Ember.A();\n\n      for (var i = 0; i < howAddRec; i++) {\n        newRecords.pushObject(store.createRecord('ember-flexberry-dummy-suggestion-type', { name: uuid }));\n      }\n\n      var done2 = assert.async();\n      var promises = Ember.A();\n      newRecords.forEach(function (item) {\n        promises.push(item.save());\n      });\n\n      (0, _executeFolvTest.addDataForDestroy)(newRecords);\n\n      Ember.RSVP.Promise.all(promises).then(function (resolvedPromises) {\n        assert.ok(resolvedPromises, 'All records saved.');\n\n        var builder = new _builder.default(store).from(modelName).count();\n        var done1 = assert.async();\n        store.query(modelName, builder.build()).then(function (result) {\n          visit(path + '?perPage=' + result.meta.count);\n          andThen(function () {\n            assert.equal(currentPath(), path);\n            var olvContainerClass = '.object-list-view-container';\n            var trTableClass = 'table.object-list-view tbody tr';\n\n            var $folvContainer = Ember.$(olvContainerClass);\n            var $rows = function $rows() {\n              return Ember.$(trTableClass, $folvContainer).toArray();\n            };\n\n            // Check that the records have been added.\n            var recordIsForDeleting = $rows().reduce(function (sum, current) {\n              var nameRecord = Ember.$.trim(current.children[1].innerText);\n              var flag = nameRecord.indexOf(uuid) >= 0;\n              return sum + flag;\n            }, 0);\n\n            assert.equal(recordIsForDeleting, howAddRec, howAddRec + ' records added');\n\n            var checkRecords = function checkRecords() {\n              promises.clear();\n              $rows().forEach(function (row) {\n                var nameRecord = Ember.$.trim(row.children[1].innerText);\n                var $firstCell = Ember.$('.object-list-view-helper-column-cell', row);\n                var checkboxInRow = Ember.$('.flexberry-checkbox', $firstCell)[0];\n                if (nameRecord.indexOf(uuid) >= 0) {\n                  promises.pushObject(click(checkboxInRow));\n                }\n              });\n\n              return Ember.RSVP.Promise.all(promises);\n            };\n\n            checkRecords().then(function () {\n              var $toolBar = Ember.$('.ui.secondary.menu')[0];\n              var $deleteButton = $toolBar.children[2];\n              var done = assert.async();\n\n              // Delete the marked records.\n              /* eslint-disable no-unused-vars */\n              (0, _folvTestsFunctions.loadingList)($deleteButton, olvContainerClass, trTableClass).then(function ($list) {\n                var recordsIsDelete = $rows().every(function (element) {\n                  var nameRecord = Ember.$.trim(element.children[1].innerText);\n                  return nameRecord.indexOf(uuid) < 0;\n                });\n\n                assert.ok(recordsIsDelete, 'Each entry begins with \\'' + uuid + '\\' is delete with button in toolbar button');\n\n                // Check that the records have been removed into store.\n                var builder2 = new _builder.default(store).from(modelName).where('name', _filterOperator.default.Eq, uuid).count();\n                var done3 = assert.async();\n                store.query(modelName, builder2.build()).then(function (result) {\n                  assert.notOk(result.meta.count, 'records \\'' + uuid + '\\'not found in store');\n                  done3();\n                });\n                done();\n              });\n              /* eslint-enable no-unused-vars */\n            });\n          });\n          done1();\n        });\n        done2();\n      });\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-edit-button-in-row-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions'], function (_executeFolvTest, _folvTestsFunctions) {\n  'use strict';\n\n  // Need to add sort by multiple columns.\n  /* eslint-disable no-unused-vars */\n  (0, _executeFolvTest.executeTest)('check edit button in row', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n    visit(path);\n    andThen(function () {\n\n      // Check page path.\n      assert.equal(currentPath(), path);\n\n      var $editButtonInRow = Ember.$('.object-list-view-row-edit-button');\n\n      assert.equal($editButtonInRow.length, 5, 'All row have editButton');\n\n      // Apply filter function.\n      var openEditFormFunction = function openEditFormFunction() {\n        var editButtonInRow = Ember.$('.object-list-view-row-edit-button')[0];\n        editButtonInRow.click();\n      };\n\n      // Open editform.\n      var done1 = assert.async();\n      (0, _folvTestsFunctions.openEditFormByFunction)(openEditFormFunction).then(function () {\n        assert.ok(true, 'edit form open');\n        done1();\n      });\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-from-edit-form-with-queryparams-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions'], function (_executeFolvTest, _folvTestsFunctions) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check return from editForm with queryParam', function (store, assert, app) {\n    assert.expect(2);\n    var path = 'components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-list?perPage=5';\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n\n      // Open editFirn function.\n      var openEditFormFunction = function openEditFormFunction() {\n        var editButtonInRow = Ember.$('.object-list-view-row-edit-button')[0];\n        editButtonInRow.click();\n      };\n\n      // Return to listform  function.\n      var returnToListFormFunction = function returnToListFormFunction() {\n        var returnToListFormButton = Ember.$('.return-to-list-form')[0];\n        returnToListFormButton.click();\n      };\n\n      // Open editform.\n      var done = assert.async();\n      (0, _folvTestsFunctions.openEditFormByFunction)(openEditFormFunction).then(function () {\n        assert.ok(true, 'edit form open');\n\n        (0, _folvTestsFunctions.refreshListByFunction)(returnToListFormFunction, controller).then(function () {\n          assert.equal(controller.model.content.length, 1, 'QueryParams applied successfully');\n          done();\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-getCellComponent-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry/locales/en/translations'], function (_executeFolvTest, _folvTestsFunctions, _translations) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check getCellComponent', function (store, assert, app) {\n    assert.expect(7);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/date-format';\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      // Set 'en' as current locale.\n      (0, _folvTestsFunctions.loadingLocales)('en', app).then(function () {\n\n        var olvContainerClass = '.object-list-view-container';\n\n        var controller = app.__container__.lookup('controller:' + currentRouteName());\n\n        var $folvContainer = Ember.$('.object-list-view-container');\n        var $table = Ember.$('table.object-list-view', $folvContainer);\n\n        var $headRow = Ember.$('thead tr', $table)[0].children;\n\n        var indexDate = function indexDate() {\n          var toReturn = void 0;\n          /* eslint-disable no-unused-vars */\n          Object.keys($headRow).forEach(function (element, index, array) {\n            if (Ember.$.trim($headRow[element].innerText) === 'Date') {\n              toReturn = index;\n              return false;\n            }\n          });\n          /* eslint-enable no-unused-vars */\n          return toReturn;\n        };\n\n        var $dateCell = function $dateCell() {\n          return Ember.$.trim(Ember.$('tbody tr', $table)[0].children[indexDate()].innerText);\n        };\n\n        var myRe = /[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])/;\n\n        // Date format most be YYYY-MM-DD.\n        var myArray = myRe.exec($dateCell());\n\n        var result = myArray ? myArray[0] : null;\n        assert.ok(result, 'date format is \\'YYYY-MM-DD\\' ');\n\n        controller.set('dateFormat', '2');\n        var $toolBar = Ember.$('.ui.secondary.menu')[0];\n        var $toolBarButtons = $toolBar.children;\n        var $refreshButton = $toolBarButtons[0];\n        assert.equal($refreshButton.innerText.trim(), Ember.get(_translations.default, 'components.olv-toolbar.refresh-button-text'), 'button refresh exist');\n\n        var timeout = 500;\n        Ember.run.later(function () {\n          // Apply filter function.\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = Ember.$('.refresh-button')[0];\n            refreshButton.click();\n          };\n\n          // Apply filter.\n          var done = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var $list = Ember.$(olvContainerClass);\n            assert.ok($list, 'list loaded');\n\n            /* eslint-disable no-useless-escape */\n            // Date format most be DD.MM.YYYY, hh:mm:ss.\n            var reDateTime = /(0[1-9]|[12][0-9]|3[01])\\.(0[1-9]|1[012])\\.(19|20)\\d\\d\\, ([0-1]\\d|2[0-3])(:[0-5]\\d){2}$/;\n            var arrayDateTime = reDateTime.exec($dateCell());\n            /* eslint-enable no-useless-escape */\n\n            var resultDateTime = arrayDateTime ? arrayDateTime[0] : null;\n            assert.ok(resultDateTime, 'date format is \\'DD.MM.YYYY, hh:mm:ss\\' ');\n            controller.set('dateFormat', '3');\n\n            var done2 = assert.async();\n            Ember.run.later(function () {\n              var done1 = assert.async();\n              (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n                var $list = Ember.$(olvContainerClass);\n                assert.ok($list, 'list loaded');\n\n                /* eslint-disable no-useless-escape */\n                // Date format most be II (example Sep 4 1986).\n                var reDateString = /[a-zA-Z]{3} ([1-9]|[12][0-9]|3[01])\\, (19|20)\\d\\d/;\n                var arrayDateString = reDateString.exec($dateCell());\n                /* eslint-enable no-useless-escape */\n\n                var resultDateString = arrayDateString ? arrayDateString[0] : null;\n                assert.ok(resultDateString, 'date format is \\'ll\\' ');\n                done1();\n              });\n              done2();\n            }, timeout);\n            done();\n          });\n        }, timeout);\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-goto-editform-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions'], function (_executeFolvTest, _folvTestsFunctions) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check goto editform', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $folvContainer = Ember.$('.object-list-view-container');\n      var $trTableBody = Ember.$('table.object-list-view tbody tr', $folvContainer);\n      var $cell = $trTableBody[0].children[1];\n\n      assert.equal(currentPath(), path, 'edit form not open');\n\n      var timeout = 500;\n      Ember.run.later(function () {\n        assert.equal(currentPath(), path, 'edit form not open');\n        controller.set('rowClickable', true);\n        Ember.run.later(function () {\n          var asyncOperationsCompleted = assert.async();\n          (0, _folvTestsFunctions.loadingList)($cell, 'form.flexberry-vertical-form', '.field').then(function ($editForm) {\n            assert.ok($editForm, 'edit form open');\n            assert.equal(currentPath(), 'ember-flexberry-dummy-suggestion-edit', 'edit form path');\n          }).catch(function (reason) {\n            // Error output.\n            assert.ok(false, reason);\n          }).finally(function () {\n            asyncOperationsCompleted();\n          });\n        }, timeout);\n      }, timeout);\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-limit-function-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/query/builder', 'ember-flexberry-data/query/filter-operator'], function (_executeFolvTest, _folvTestsFunctions, _builder, _filterOperator) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check limit function', function (store, assert, app) {\n    assert.expect(6);\n    var path = 'components-examples/flexberry-objectlistview/limit-function-example?perPage=500';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var result1 = void 0;\n    var result2 = void 0;\n    var count = void 0;\n\n    visit(path);\n    andThen(function () {\n      var builder1 = new _builder.default(store).from(modelName).selectByProjection('SuggestionL');\n      store.query(modelName, builder1.build()).then(function (result) {\n        var arr = result.toArray();\n        count = arr.length;\n      }).then(function () {\n        var builder2 = new _builder.default(store).from(modelName).selectByProjection('SuggestionL').where('address', _filterOperator.default.Neq, '');\n        store.query(modelName, builder2.build()).then(function (result) {\n          var arr = result.toArray();\n          result1 = arr.objectAt(0).get('address');\n          result2 = arr.objectAt(1).get('address');\n\n          if (!result1 && !result2) {\n            assert.ok(false, 'Laad empty data');\n          }\n        }).then(function () {\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          controller.set('limitFunction', result1);\n\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = Ember.$('.refresh-button')[0];\n            refreshButton.click();\n          };\n\n          assert.equal(controller.model.content.length, count, 'Folv load with current object count');\n\n          /* eslint-disable no-unused-vars */\n          var done1 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function ($list) {\n            var resultText = Ember.$('.oveflow-text')[0];\n            assert.notEqual(controller.model.content.length, count, 'Folv load with object current count');\n            assert.equal(resultText.innerText, result1, 'Correct result afther apply limitFunction');\n\n            controller.set('limitFunction', result2);\n\n            var done2 = assert.async();\n            (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function ($list) {\n              var resultText = Ember.$('.oveflow-text')[0];\n              assert.notEqual(controller.model.content.length, count, 'Folv load with current object count');\n              assert.equal(resultText.innerText, result2, 'Correct result afther apply limitFunction');\n\n              controller.set('limitFunction', undefined);\n\n              var done3 = assert.async();\n              (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function ($list) {\n                assert.equal(controller.model.content.length, count, 'Folv load with current object count');\n                done3();\n              });\n              done2();\n            });\n            done1();\n          });\n          /* eslint-enable no-unused-vars */\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-locales-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations'], function (_executeFolvTest, _folvTestsFunctions, _translations, _translations2) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check locale change', function (store, assert, app) {\n    assert.expect(11);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      function toolbarBtnTextAssert(currentLocale) {\n        assert.notEqual($toolBarButtons.length, 0, 'buttons in toolbar exists');\n        assert.equal($toolBarButtons[0].innerText.trim(), Ember.get(currentLocale, 'components.olv-toolbar.refresh-button-text'), 'button refresh exist');\n        assert.equal($toolBarButtons[1].innerText.trim(), Ember.get(currentLocale, 'components.olv-toolbar.add-button-text'), 'button create exist');\n        assert.equal($toolBarButtons[2].innerText.trim(), Ember.get(currentLocale, 'components.olv-toolbar.delete-button-text'), 'button delete exist');\n        assert.equal(Ember.$($toolBarButtons[2]).hasClass('disabled'), true, 'button delete is disabled');\n      }\n\n      var $toolBar = Ember.$('.ui.secondary.menu')[0];\n      var $toolBarButtons = $toolBar.children;\n\n      // Set 'ru' as current locale.\n      (0, _folvTestsFunctions.loadingLocales)('ru', app).then(function () {\n        toolbarBtnTextAssert(_translations.default);\n        (0, _folvTestsFunctions.loadingLocales)('en', app).then(function () {\n          toolbarBtnTextAssert(_translations2.default);\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-open-newform-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry/locales/ru/translations'], function (_executeFolvTest, _folvTestsFunctions, _translations) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check goto new form', function (store, assert, app) {\n    assert.expect(4);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    andThen(function () {\n\n      // Set 'ru' as current locale.\n      (0, _folvTestsFunctions.loadingLocales)('ru', app).then(function () {\n        assert.equal(currentPath(), path);\n        var $toolBar = Ember.$('.ui.secondary.menu')[0];\n        var $toolBarButtons = $toolBar.children;\n\n        assert.equal($toolBarButtons[1].innerText.trim(), Ember.get(_translations.default, 'components.olv-toolbar.add-button-text'), 'button create exist');\n\n        var asyncOperationsCompleted = assert.async();\n        (0, _folvTestsFunctions.loadingList)($toolBarButtons[1], 'form', '.field').then(function ($editForm) {\n          assert.ok($editForm, 'new form open');\n          assert.equal(currentPath(), 'ember-flexberry-dummy-suggestion-edit.new', 'new form open');\n        }).catch(function (reason) {\n          // Error output.\n          assert.ok(false, reason);\n        }).finally(function () {\n          asyncOperationsCompleted();\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-paging-dropdown-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/utils/generate-unique-id'], function (_executeFolvTest, _folvTestsFunctions, _generateUniqueId) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check paging dropdown', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var uuid = (0, _generateUniqueId.default)();\n\n    // Add records for paging.\n    Ember.run(function () {\n\n      (0, _folvTestsFunctions.addRecords)(store, modelName, uuid).then(function (resolvedPromises) {\n        assert.ok(resolvedPromises, 'All records saved.');\n\n        visit(path);\n        andThen(function () {\n          assert.equal(currentPath(), path);\n\n          var $choosedIthem = void 0;\n          var trTableBody = void 0;\n          var activeItem = void 0;\n\n          // Refresh function.\n          var refreshFunction = function refreshFunction() {\n            var $folvPerPageButton = Ember.$('.flexberry-dropdown.compact');\n            var $menu = Ember.$('.menu', $folvPerPageButton);\n            trTableBody = function trTableBody() {\n              return Ember.$(Ember.$('table.object-list-view tbody tr')).length.toString();\n            };\n\n            activeItem = function activeItem() {\n              return Ember.$(Ember.$('.item.active.selected', $menu)).text();\n            };\n\n            // The list should be more than 5 items.\n            assert.equal(activeItem(), trTableBody(), 'equal perPage and visible element count');\n            $folvPerPageButton.click();\n            var timeout = 500;\n            Ember.run.later(function () {\n              var menuIsVisible = $menu.hasClass('visible');\n              assert.strictEqual(menuIsVisible, true, 'menu is visible');\n              $choosedIthem = Ember.$('.item', $menu);\n              $choosedIthem[1].click();\n            }, timeout);\n          };\n\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n          var done = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            // The list should be more than 10 items\n            assert.equal(activeItem(), trTableBody(), 'equal perPage and visible element count');\n          }).catch(function (reason) {\n            // Error output.\n            assert.ok(false, reason);\n          }).finally(function () {\n            (0, _folvTestsFunctions.deleteRecords)(store, modelName, uuid, assert);\n            done();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-paging-navigation-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/utils/generate-unique-id'], function (_executeFolvTest, _folvTestsFunctions, _generateUniqueId) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check paging nav', function (store, assert, app) {\n    assert.expect(29);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var uuid = (0, _generateUniqueId.default)();\n    var last = void 0;\n\n    // Add records for paging.\n    Ember.run(function () {\n      (0, _folvTestsFunctions.addRecords)(store, modelName, uuid).then(function (resolvedPromises) {\n        assert.ok(resolvedPromises, 'All records saved.');\n        var done = assert.async();\n        visit(path + '?perPage=1');\n        andThen(function () {\n          assert.equal(currentPath(), path);\n          var controller = app.__container__.lookup('controller:' + currentRouteName());\n\n          // check paging.\n          var $basicButtons = Ember.$('.ui.button', '.ui.basic.buttons');\n          last = controller.get('model.meta.count');\n\n          assert.equal(Ember.$($basicButtons[0]).hasClass('disabled'), true, 'button prev is disabled');\n          assert.equal(Ember.$($basicButtons[1]).hasClass('active'), true, 'page 1 is active');\n          assert.equal(Ember.$($basicButtons[1])[0].innerText, 1, '1st page is depicted');\n          assert.equal(Ember.$($basicButtons[2])[0].innerText, 2, '2nd page is depicted');\n          assert.equal(Ember.$($basicButtons[3])[0].innerText, 3, '3rd page is depicted');\n          assert.equal(Ember.$($basicButtons[4])[0].innerText, 4, '4th page is depicted');\n          assert.equal(Ember.$($basicButtons[5])[0].innerText, '...', '... page is depicted');\n          assert.equal(Ember.$($basicButtons[6])[0].innerText, last, 'last page is depicted');\n\n          var done1 = assert.async();\n          var refreshFunction = function refreshFunction() {\n            var refreshButton = $basicButtons[4];\n            refreshButton.click();\n          };\n\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var $basicButtons = Ember.$('.ui.button', '.ui.basic.buttons');\n            assert.equal(Ember.$($basicButtons[1]).hasClass('active'), false, 'page 1 is not active');\n            assert.equal(Ember.$($basicButtons[4]).hasClass('active'), true, 'page 4 is active');\n            assert.equal(Ember.$($basicButtons[1])[0].innerText, 1, '1st page is depicted');\n            assert.equal(Ember.$($basicButtons[2])[0].innerText, '...', '... page is depicted');\n            assert.equal(Ember.$($basicButtons[3])[0].innerText, 3, '3rd page is depicted');\n            assert.equal(Ember.$($basicButtons[4])[0].innerText, 4, '4th page is depicted');\n            assert.equal(Ember.$($basicButtons[5])[0].innerText, 5, '5th page is depicted');\n            assert.equal(Ember.$($basicButtons[6])[0].innerText, '...', '... page is depicted');\n            assert.equal(Ember.$($basicButtons[7])[0].innerText, last, 'last page is depicted');\n\n            var done2 = assert.async();\n            var refreshFunction = function refreshFunction() {\n              var refreshButton = $basicButtons[7];\n              refreshButton.click();\n            };\n\n            (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n              var $basicButtons = Ember.$('.ui.button', '.ui.basic.buttons');\n              assert.equal(Ember.$($basicButtons[4]).hasClass('active'), false, 'page 4 is not active');\n              assert.equal(Ember.$($basicButtons[6]).hasClass('active'), true, 'last page is active');\n              assert.equal(Ember.$($basicButtons[7]).hasClass('disabled'), true, 'button next is disabled');\n              assert.equal(Ember.$($basicButtons[6])[0].innerText, last, 'last page is depicted');\n              assert.equal(Ember.$($basicButtons[1])[0].innerText, 1, '1st page is depicted');\n              assert.equal(Ember.$($basicButtons[2])[0].innerText, '...', '... page is depicted');\n              assert.equal(Ember.$($basicButtons[3])[0].innerText, last - 3, 'n-3 page is depicted');\n              assert.equal(Ember.$($basicButtons[4])[0].innerText, last - 2, 'n-2 page is depicted');\n              assert.equal(Ember.$($basicButtons[5])[0].innerText, last - 1, 'n-1 page is depicted');\n              assert.equal(Ember.$($basicButtons[6])[0].innerText, last, 'last page is depicted');\n            }).catch(function (reason) {\n              throw new Error(reason);\n            }).finally(function () {\n              (0, _folvTestsFunctions.deleteRecords)(store, modelName, uuid, assert);\n              done2();\n              done();\n            });\n          }).catch(function (reason) {\n            throw new Error(reason);\n          }).finally(function () {\n            (0, _folvTestsFunctions.deleteRecords)(store, modelName, uuid, assert);\n            done1();\n          });\n        });\n      });\n    });\n  });\n});","// import { executeTest} from './execute-folv-test';\n// import Builder from 'ember-flexberry-data/query/builder';\n// import $ from 'jquery';\n\n// executeTest('check configurate selected rows', (store, assert, app) => {\n//   assert.expect(8);\n//   let path = 'components-examples/flexberry-objectlistview/selected-rows';\n//   let modelName = 'ember-flexberry-dummy-suggestion-type';\n//   let count;\n\n//   visit(path);\n//   andThen(() => {\n//     assert.equal(currentPath(), path);\n\n//     let builder = new Builder(store).from(modelName);\n//     store.query(modelName, builder.build()).then((result) => {\n//       let arr = result.toArray();\n//       count = arr.length;\n//     }).then(function() {\n//       let $folvContainer = $('.object-list-view-container');\n//       let $checkAllButtton = $('.check-all-button', $folvContainer).first();\n//       let $checkAllAtPageButton = $('.check-all-at-page-button', $folvContainer).first();\n//       let $row = $('table.object-list-view tbody tr', $folvContainer);\n//       let controller = app.__container__.lookup('controller:' + currentRouteName());\n\n//       let $firstCell = $('.flexberry-checkbox', $row[0]);\n//       let $secondCell = $('.flexberry-checkbox', $row[1]);\n\n//       // Сheck first record.\n//       $firstCell.click();\n//       assert.equal(controller.countSelectedRows, 1, 'First row is checked');\n\n//       // Сheck second record.\n//       $secondCell.click();\n//       assert.equal(controller.countSelectedRows, 2, 'Second row is checked');\n\n//       // Uncheck second record.\n//       $firstCell.click();\n//       assert.equal(controller.countSelectedRows, 1, 'First row is checked');\n\n//       // Сheck all record at page.\n//       $checkAllAtPageButton.click();\n//       assert.equal(controller.countSelectedRows, 5, 'First row is checked');\n\n//       // Uncheck all record at page.\n//       $checkAllAtPageButton.click();\n//       assert.equal(controller.countSelectedRows, 0, 'First row is checked');\n\n//       // Сheck fist reccord and all record.\n//       $firstCell.click();\n//       $checkAllButtton.click();\n//       assert.equal(controller.countSelectedRows, count, 'First row is checked');\n\n//       // Uncheck all record.\n//       $checkAllButtton.click();\n//       assert.equal(controller.countSelectedRows, 0, 'First row is checked');\n//     });\n//   });\n// });\ndefine(\"dummy/tests/acceptance/components/flexberry-objectlistview/folv-select-record-test\", [], function () {\n  \"use strict\";\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-by-computable-field-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/query/builder'], function (_executeFolvTest, _folvTestsFunctions, _builder) {\n  'use strict';\n\n  // Need to add sort by multiple columns.\n  (0, _executeFolvTest.executeTest)('check sorting by computable field', function (store, assert, app) {\n    assert.expect(6);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/computable-field';\n    var modelName = 'ember-flexberry-dummy-suggestion';\n    var minValue = void 0;\n    var maxValue = void 0;\n\n    visit(path);\n    click('.ui.clear-sorting-button');\n    andThen(function () {\n      assert.equal(currentPath(), path);\n      var builder = new _builder.default(store).from(modelName).selectByProjection('SuggestionL').orderBy('commentsCount');\n      store.query(modelName, builder.build()).then(function (result) {\n        var arr = result.toArray();\n        minValue = arr.objectAt(0).get('commentsCount');\n        maxValue = arr.objectAt(arr.length - 1).get('commentsCount');\n      }).then(function () {\n\n        var $olv = Ember.$('.object-list-view ');\n        var $thead = Ember.$('th.dt-head-left', $olv)[9];\n        var controller = app.__container__.lookup('controller:' + currentRouteName());\n\n        // Refresh function.\n        var refreshFunction = function refreshFunction() {\n          $thead.click();\n        };\n\n        var done1 = assert.async();\n        (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n          var $cellText = Ember.$('div.oveflow-text')[9];\n          assert.equal(controller.sort, '+commentsCount', 'sorting symbol added');\n          assert.equal($cellText.innerText, minValue, 'sorting symbol added');\n          var done2 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var $cellText = Ember.$('div.oveflow-text')[9];\n            assert.equal(controller.sort, '-commentsCount', 'sorting symbol added');\n            assert.equal($cellText.innerText, maxValue, 'sorting symbol added');\n            var done3 = assert.async();\n            (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n              assert.equal(controller.sort, null, 'sorting is reset');\n              done3();\n            });\n            done2();\n          });\n          done1();\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-clear-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry/locales/ru/translations'], function (_executeFolvTest, _folvTestsFunctions, _translations) {\n  'use strict';\n\n  // Need to add sort by multiple columns.\n  (0, _executeFolvTest.executeTest)('check sorting clear', function (store, assert, app) {\n    assert.expect(8);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    click('.ui.clear-sorting-button');\n    andThen(function () {\n\n      // Check page path.\n      assert.equal(currentPath(), path);\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var projectionName = Ember.get(controller, 'modelProjection');\n\n      var orderByClause = null;\n\n      var $olv = Ember.$('.object-list-view ');\n      var $thead = Ember.$('th.dt-head-left', $olv)[0];\n\n      var currentSorting = controller.get('computedSorting');\n      if (!Ember.$.isEmptyObject(currentSorting)) {\n        orderByClause = (0, _folvTestsFunctions.getOrderByClause)(currentSorting);\n      }\n\n      Ember.run(function () {\n        var done = assert.async();\n\n        // Check sortihg in the first column. Sorting is not append.\n        (0, _folvTestsFunctions.loadingLocales)('ru', app).then(function () {\n          (0, _folvTestsFunctions.checkSortingList)(store, projectionName, $olv, orderByClause).then(function (isTrue) {\n            assert.ok(isTrue, 'sorting is not applied');\n\n            // Check sortihg icon in the first column. Sorting icon is not added.\n            assert.equal($thead.children[0].children.length, 1, 'no sorting icon in the first column');\n\n            // Refresh function.\n            var refreshFunction = function refreshFunction() {\n              $thead.click();\n            };\n\n            var done1 = assert.async();\n            (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n              var $thead = Ember.$('th.dt-head-left', $olv)[0];\n              var $ord = Ember.$('.object-list-view-order-icon', $thead);\n              var $divOrd = Ember.$('div', $ord);\n\n              assert.equal($divOrd.attr('title'), Ember.get(_translations.default, 'components.object-list-view.sort-ascending'), 'title is Order ascending');\n              assert.equal(Ember.$('.icon', $divOrd).hasClass('ascending'), true, 'sorting symbol added');\n\n              var done2 = assert.async();\n              (0, _folvTestsFunctions.checkSortingList)(store, projectionName, $olv, 'address asc').then(function (isTrue) {\n                assert.ok(isTrue, 'sorting applied');\n\n                var done3 = assert.async();\n                var refreshFunction2 = function refreshFunction2() {\n                  var $clearButton = Ember.$('.clear-sorting-button');\n                  $clearButton.click();\n                };\n\n                (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction2, controller).then(function () {\n                  var $thead = Ember.$('th.dt-head-left', $olv)[0];\n                  var $ord = Ember.$('.object-list-view-order-icon', $thead);\n                  var $divOrd = Ember.$('div', $ord);\n\n                  assert.equal($divOrd.attr('title'), undefined, 'sorting are clear');\n                  assert.equal(Ember.$.trim($divOrd.text()), '', 'sorting symbol delete');\n\n                  done3();\n                });\n                done2();\n              });\n              done1();\n            });\n            done();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry/locales/ru/translations'], function (_executeFolvTest, _folvTestsFunctions, _translations) {\n  'use strict';\n\n  // Need to add sort by multiple columns.\n  (0, _executeFolvTest.executeTest)('check sorting', function (store, assert, app) {\n    assert.expect(14);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    click('.ui.clear-sorting-button');\n    andThen(function () {\n\n      // Check page path.\n      assert.equal(currentPath(), path);\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var projectionName = Ember.get(controller, 'modelProjection');\n\n      var orderByClause = null;\n\n      var $olv = Ember.$('.object-list-view ');\n      var $thead = Ember.$('th.dt-head-left', $olv)[0];\n\n      var currentSorting = controller.get('computedSorting');\n      if (!Ember.$.isEmptyObject(currentSorting)) {\n        orderByClause = (0, _folvTestsFunctions.getOrderByClause)(currentSorting);\n      }\n\n      Ember.run(function () {\n        var done = assert.async();\n\n        // Check sortihg in the first column. Sorting is not append.\n        (0, _folvTestsFunctions.loadingLocales)('ru', app).then(function () {\n          (0, _folvTestsFunctions.checkSortingList)(store, projectionName, $olv, orderByClause).then(function (isTrue) {\n            assert.ok(isTrue, 'sorting is not applied');\n\n            // Check sortihg icon in the first column. Sorting icon is not added.\n            assert.equal($thead.children[0].children.length, 1, 'no sorting icon in the first column');\n            assert.equal(controller.sort, undefined, 'no sorting in URL');\n\n            // Refresh function.\n            var refreshFunction = function refreshFunction() {\n              $thead.click();\n            };\n\n            var done1 = assert.async();\n            (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n              var $thead = Ember.$('th.dt-head-left', $olv)[0];\n              var $ord = Ember.$('.object-list-view-order-icon', $thead);\n              var $divOrd = Ember.$('div', $ord);\n\n              assert.equal($divOrd.attr('title'), Ember.get(_translations.default, 'components.object-list-view.sort-ascending'), 'title is Order ascending');\n              assert.equal(Ember.$('.icon', $divOrd).hasClass(\"ascending\"), true, 'sorting symbol added');\n              assert.equal(controller.sort, '+address', 'up sorting in URL');\n\n              var done2 = assert.async();\n              (0, _folvTestsFunctions.checkSortingList)(store, projectionName, $olv, 'address asc').then(function (isTrue) {\n                assert.ok(isTrue, 'sorting applied');\n                var done3 = assert.async();\n                (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n                  var $thead = Ember.$('th.dt-head-left', $olv)[0];\n                  var $ord = Ember.$('.object-list-view-order-icon', $thead);\n                  var $divOrd = Ember.$('div', $ord);\n\n                  assert.equal($divOrd.attr('title'), Ember.get(_translations.default, 'components.object-list-view.sort-descending'), 'title is Order descending');\n                  assert.equal(Ember.$('.icon', $divOrd).hasClass(\"descending\"), true, 'sorting symbol added');\n                  assert.equal(controller.sort, '-address', 'down sorting in URL');\n\n                  var done4 = assert.async();\n                  (0, _folvTestsFunctions.checkSortingList)(store, projectionName, $olv, 'address desc').then(function (isTrue) {\n                    assert.ok(isTrue, 'sorting applied');\n\n                    var done5 = assert.async();\n                    (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n                      assert.equal(controller.sort, null, 'no sorting in URL');\n                      var done6 = assert.async();\n                      (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n                        assert.equal(controller.sort, '+address', 'up sorting in URL');\n                        done6();\n                      });\n                      done5();\n                    });\n                    done4();\n                  });\n                }).finally(function () {\n                  done3();\n                });\n                done2();\n              });\n              done1();\n            });\n            done();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-with-default-setting-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry/locales/ru/translations'], function (_executeFolvTest, _folvTestsFunctions, _translations) {\n  'use strict';\n\n  // Need to add sort by multiple columns.\n  (0, _executeFolvTest.executeTest)('check sorting with default setting', function (store, assert, app) {\n    assert.expect(9);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n    visit(path);\n    click('.ui.clear-sorting-button');\n    andThen(function () {\n\n      // Check page path.\n      assert.equal(currentPath(), path);\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n\n      var $olv = Ember.$('.object-list-view ');\n\n      Ember.run(function () {\n        (0, _folvTestsFunctions.loadingLocales)('ru', app).then(function () {\n          // Refresh function.\n          var refreshFunction = function refreshFunction() {\n            $thead.click();\n          };\n\n          var $thead = Ember.$('th.dt-head-left', $olv)[0];\n          var $ord = Ember.$('.object-list-view-order-icon', $thead);\n          var $divOrd = Ember.$('div', $ord);\n\n          assert.equal($divOrd.attr('title'), Ember.get(_translations.default, 'components.object-list-view.sort-ascending'), 'title is Order ascending');\n          assert.equal(Ember.$('.icon', $divOrd).hasClass('ascending'), true, 'sorting symbol added');\n          assert.equal(controller.sort, '+name', 'up sorting in URL');\n\n          var done1 = assert.async();\n          (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n            var $thead = Ember.$('th.dt-head-left', $olv)[0];\n            var $ord = Ember.$('.object-list-view-order-icon', $thead);\n            var $divOrd = Ember.$('div', $ord);\n\n            assert.equal($divOrd.attr('title'), Ember.get(_translations.default, 'components.object-list-view.sort-descending'), 'title is Order descending');\n            assert.equal(Ember.$('.icon', $divOrd).hasClass('descending'), true, 'sorting symbol changed');\n            assert.equal(controller.sort, '-name', 'down sorting in URL');\n\n            var done2 = assert.async();\n            (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n              assert.equal(controller.sort, null, 'no sorting in URL');\n              var done3 = assert.async();\n              (0, _folvTestsFunctions.refreshListByFunction)(refreshFunction, controller).then(function () {\n                assert.equal(controller.sort, '+name', 'up sorting in URL');\n                done3();\n              });\n              done2();\n            });\n          }).finally(function () {\n            done1();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', ['exports', 'ember-flexberry-data/query/filter-operator', 'ember-flexberry-data/query/builder'], function (exports, _filterOperator, _builder) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.loadingList = loadingList;\n  exports.openEditFormByFunction = openEditFormByFunction;\n  exports.refreshListByFunction = refreshListByFunction;\n  exports.checkSortingList = checkSortingList;\n  exports.addRecords = addRecords;\n  exports.deleteRecords = deleteRecords;\n  exports.loadingLocales = loadingLocales;\n  exports.filterObjectListView = filterObjectListView;\n  exports.filterCollumn = filterCollumn;\n  exports.getOrderByClause = getOrderByClause;\n\n\n  // Function for waiting list loading.\n  function loadingList($ctrlForClick, list, records) {\n    return new Ember.RSVP.Promise(function (resolve, reject) {\n      var checkIntervalId = void 0;\n      var checkIntervalSucceed = false;\n      var checkInterval = 500;\n      var timeout = 10000;\n\n      Ember.run(function () {\n        $ctrlForClick.click();\n      });\n\n      Ember.run(function () {\n        checkIntervalId = window.setInterval(function () {\n          var $list = Ember.$(list);\n          var $records = Ember.$(records, $list);\n          if ($records.length === 0) {\n\n            // Data isn't loaded yet.\n            return;\n          }\n\n          // Data is loaded.\n          // Stop interval & resolve promise.\n          window.clearInterval(checkIntervalId);\n          checkIntervalSucceed = true;\n          resolve($list);\n        }, checkInterval);\n      });\n\n      // Set wait timeout.\n      Ember.run(function () {\n        window.setTimeout(function () {\n          if (checkIntervalSucceed) {\n            return;\n          }\n\n          // Time is out.\n          // Stop intervals & reject promise.\n          window.clearInterval(checkIntervalId);\n          reject('ListForm load operation is timed out');\n        }, timeout);\n      });\n    });\n  }\n\n  /**\n    Function for waiting editform loading afther open editform by function at acceptance test.\n  \n    @public\n    @method openEditFormByFunction\n    @param {Function} openEditFormFunction Method options.\n   */\n  function openEditFormByFunction(openEditFormFunction) {\n    return new Ember.RSVP.Promise(function (resolve, reject) {\n      var checkIntervalId = void 0;\n      var checkIntervalSucceed = false;\n      var checkInterval = 500;\n      var timeout = 10000;\n\n      openEditFormFunction();\n\n      Ember.run(function () {\n        checkIntervalId = window.setInterval(function () {\n          if (Ember.$('.ui.button.close-button').length === 0) {\n\n            // Edit form isn't loaded yet.\n            return;\n          }\n\n          // Edit form is loaded, wait to render.\n          // Stop interval & resolve promise.\n          window.setTimeout(function () {\n            window.clearInterval(checkIntervalId);\n            checkIntervalSucceed = true;\n            resolve();\n          });\n        }, checkInterval);\n      });\n\n      // Set wait timeout.\n      Ember.run(function () {\n        window.setTimeout(function () {\n          if (checkIntervalSucceed) {\n            return;\n          }\n\n          // Time is out.\n          // Stop intervals & reject promise.\n          window.clearInterval(checkIntervalId);\n          reject('editForm load operation is timed out');\n        }, timeout);\n      });\n    });\n  }\n\n  /**\n    Function for waiting list loading afther refresh by function at acceptance test.\n  \n    @public\n    @method refreshListByFunction\n    @param {Function} refreshFunction Method options.\n    @param {Object} controlle Current form controller.\n  \n    For use:\n      Form controller must have the following code:\n        ```js\n          loadCount: 0\n        ```\n  \n      Form router must have the following code:\n        ```js\n          onModelLoadingAlways(data) {\n            let loadCount = this.get('controller.loadCount') + 1;\n            this.set('controller.loadCount', loadCount);\n          }\n        ```\n   */\n  function refreshListByFunction(refreshFunction, controller) {\n    return new Ember.RSVP.Promise(function (resolve, reject) {\n      var checkIntervalId = void 0;\n      var checkIntervalSucceed = false;\n      var checkInterval = 500;\n      var renderInterval = 100;\n      var timeout = 10000;\n      var timeiutForLongTimeLoad = checkInterval + 500;\n\n      var $lastLoadCount = controller.loadCount;\n      refreshFunction();\n\n      Ember.run(function () {\n        checkIntervalId = window.setInterval(function () {\n          var loadCount = controller.loadCount;\n          if (loadCount === $lastLoadCount) {\n\n            // Data isn't loaded yet.\n            return;\n          }\n\n          // Data is loaded, wait to render.\n          // Stop interval & resolve promise.\n          window.setTimeout(function () {\n            window.clearInterval(checkIntervalId);\n            checkIntervalSucceed = true;\n            resolve();\n          }, renderInterval);\n        }, checkInterval);\n      });\n\n      // Set wait timeout.\n      Ember.run(function () {\n        window.setTimeout(function () {\n          // Timeout for with a long load, setInterval executed first.\n          window.setTimeout(function () {\n            if (checkIntervalSucceed) {\n              return;\n            }\n\n            // Time is out.\n            // Stop intervals & reject promise.\n            window.clearInterval(checkIntervalId);\n            reject('ListForm load operation is timed out');\n          }, timeiutForLongTimeLoad);\n        }, timeout);\n      });\n    });\n  }\n\n  // Function for check sorting.\n  function checkSortingList(store, projection, $olv, ordr) {\n    return new Ember.RSVP.Promise(function (resolve) {\n      Ember.run(function () {\n        var modelName = projection.modelName;\n        var builder = new _builder.default(store).from(modelName).selectByProjection(projection.projectionName);\n        builder = !ordr ? builder : builder.orderBy(ordr);\n        store.query(modelName, builder.build()).then(function (records) {\n          var recordsArr = records.toArray();\n          var $tr = Ember.$('table.object-list-view tbody tr').toArray();\n\n          var isTrue = $tr.reduce(function (sum, current, i) {\n            var expectVal = !recordsArr[i].get('address') ? '' : recordsArr[i].get('address');\n            return sum && Ember.$.trim(current.children[1].innerText) === expectVal;\n          }, true);\n\n          resolve(isTrue);\n        });\n      });\n    });\n  }\n\n  // Function for addition records.\n  function addRecords(store, modelName, uuid) {\n    var promises = Ember.A();\n    var listCount = 55;\n    Ember.run(function () {\n\n      var builder = new _builder.default(store).from(modelName).count();\n      store.query(modelName, builder.build()).then(function (result) {\n        var howAddRec = listCount - result.meta.count;\n        var newRecords = Ember.A();\n\n        for (var i = 0; i < howAddRec; i++) {\n          newRecords.pushObject(store.createRecord(modelName, { name: uuid }));\n        }\n\n        newRecords.forEach(function (item) {\n          promises.push(item.save());\n        });\n      });\n    });\n    return Ember.RSVP.Promise.all(promises);\n  }\n\n  // Function for deleting records.\n  function deleteRecords(store, modelName, uuid) {\n    var builder = new _builder.default(store, modelName).where('name', _filterOperator.default.Eq, uuid);\n    return store.query(modelName, builder.build()).then(function (r) {\n      return Ember.RSVP.all(r.map(function (i) {\n        return i.destroyRecord();\n      }));\n    });\n  }\n\n  // Function for waiting loading list.\n  function loadingLocales(locale, app) {\n    return new Ember.RSVP.Promise(function (resolve) {\n      var i18n = app.__container__.lookup('service:i18n');\n\n      Ember.run(function () {\n        i18n.set('locale', locale);\n      });\n\n      var timeout = 500;\n      Ember.run.later(function () {\n        resolve({ msg: 'ok' });\n      }, timeout);\n    });\n  }\n\n  // Function for filter object-list-view by list of operations and values.\n  function filterObjectListView(objectListView, operations, filterValues) {\n    var tableBody = objectListView.children('tbody');\n    var tableRow = Ember.$(tableBody.children('tr'));\n    var tableColumns = Ember.$(tableRow[0]).children('td');\n\n    var promises = Ember.A();\n\n    for (var i = 0; i < tableColumns.length; i++) {\n      if (operations[i]) {\n        promises.push(filterCollumn(objectListView, i, operations[i], filterValues[i]));\n      }\n    }\n\n    return Ember.RSVP.Promise.all(promises);\n  }\n\n  // Function for filter object-list-view at one column by operations and values.\n  function filterCollumn(objectListView, columnNumber, operation, filterValue) {\n    return new Ember.RSVP.Promise(function (resolve) {\n      var tableBody = objectListView.children('tbody');\n      var tableRow = tableBody.children('tr');\n\n      var filterOperation = Ember.$(tableRow[0]).find('.flexberry-dropdown')[columnNumber];\n      var filterValueCell = Ember.$(tableRow[1]).children('td')[columnNumber];\n\n      // Select an existing item.\n      Ember.$(filterOperation).dropdown('set selected', operation);\n\n      var dropdown = Ember.$(filterValueCell).find('.flexberry-dropdown');\n      var textbox = Ember.$(filterValueCell).find('.ember-text-field');\n\n      var fillPromise = void 0;\n      if (textbox.length !== 0) {\n        fillPromise = fillIn(textbox, filterValue);\n      }\n\n      if (dropdown.length !== 0) {\n        dropdown.dropdown('set selected', filterValue);\n      }\n\n      if (fillPromise) {\n        fillPromise.then(function () {\n          return resolve();\n        });\n      } else {\n        var timeout = 300;\n        Ember.run.later(function () {\n          resolve();\n        }, timeout);\n      }\n    });\n  }\n\n  function getOrderByClause(currentSorting) {\n    return Object.keys(currentSorting).map(function (key) {\n      return { name: key, sortOrder: currentSorting[key].sortAscending ? 'asc' : 'desc', sortNumber: currentSorting[key].sortNumber };\n    }).sort(function (obj1, obj2) {\n      if (obj1.sortNumber < obj2.sortNumber) {\n        return -1;\n      }\n\n      if (obj1.sortNumber > obj2.sortNumber) {\n        return 1;\n      }\n\n      return 0;\n    }).map(function (obj) {\n      return obj.name + ' ' + obj.sortOrder;\n    }).join(', ');\n  }\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-user-button-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test'], function (_executeFolvTest) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('user button test', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-examples/flexberry-objectlistview/toolbar-custom-buttons-example';\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n\n      // Enable the hi button.\n      click('.toggle-hi-button');\n\n      // First click.\n      click('.test-click-button');\n      andThen(function () {\n        return assert.equal(controller.clickCounter, 2, 'Test button was pressed');\n      });\n\n      // Second click.\n      click('.test-click-button');\n      andThen(function () {\n        return assert.equal(controller.clickCounter, 3, 'Test button was pressed');\n      });\n\n      assert.notOk(controller.get('modelFromClickedRow'));\n      click('.ui.button > .bug.icon:first');\n      andThen(function () {\n        assert.equal(controller.get('modelFromClickedRow.id'), controller.get('model.firstObject.id'));\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-wrapper-projection-test', ['dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions'], function (_executeFolvTest, _folvTestsFunctions) {\n  'use strict';\n\n  (0, _executeFolvTest.executeTest)('check wrapper and projection', function (store, assert, app) {\n    assert.expect(6);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    click('.ui.clear-sorting-button');\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var projectionName = function projectionName() {\n        return Ember.get(controller, 'modelProjection');\n      };\n\n      var $olv = Ember.$('.object-list-view ');\n      var $folvContainer = Ember.$('.object-list-view-container');\n      var $tableInFolvContainer = Ember.$('table', $folvContainer);\n      assert.equal($tableInFolvContainer.length, 1, 'folv table in container exist');\n\n      var $tableBody = Ember.$('tbody', '.object-list-view-container');\n      assert.equal($tableBody.length, 1, 'tbody in table exist');\n\n      var dtHeadTable = Ember.$('.dt-head-left.me.class', 'thead', $tableInFolvContainer);\n\n      var orderByClause = null;\n\n      var currentSorting = controller.get('computedSorting');\n      if (!Ember.$.isEmptyObject(currentSorting)) {\n        orderByClause = (0, _folvTestsFunctions.getOrderByClause)(currentSorting);\n      }\n\n      var done = assert.async();\n      (0, _folvTestsFunctions.checkSortingList)(store, projectionName(), $olv, orderByClause).then(function (isTrue) {\n        assert.ok(isTrue, 'records are displayed correctly');\n        done();\n      }).then(function () {\n        (0, _folvTestsFunctions.loadingLocales)('en', app).then(function () {\n\n          // Check projectionName.\n          var attrs = projectionName().attributes;\n          var flag = true;\n          /* eslint-disable no-unused-vars */\n          Object.keys(attrs).forEach(function (element, index, array) {\n            if (attrs[element].kind !== 'hasMany') {\n              flag = flag && Ember.$.trim(dtHeadTable[index].innerText) === attrs[element].caption;\n            }\n          });\n          /* eslint-enable no-unused-vars */\n          assert.ok(flag, 'projection = columns names');\n\n          var newProjectionName = 'SettingLookupExampleView';\n          controller.set('modelProjection', newProjectionName);\n\n          // get(controller, 'modelProjection') returns only the name of the projection when it replaced.\n          assert.equal(projectionName(), newProjectionName, 'projection name is changed');\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/readonly-test/edit-form-readonly-test', ['qunit', 'dummy/tests/helpers/start-app'], function (_qunit, _startApp) {\n  'use strict';\n\n  var app = void 0;\n  var path = 'components-acceptance-tests/edit-form-readonly';\n\n  (0, _qunit.module)('Acceptance | edit-form | readonly-mode ', {\n    beforeEach: function beforeEach() {\n\n      // Start application.\n      app = (0, _startApp.default)();\n\n      // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n      var applicationController = app.__container__.lookup('controller:application');\n      applicationController.set('isInAcceptanceTestMode', true);\n    },\n    afterEach: function afterEach() {\n      Ember.run(app, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('controller is render properly', function (assert) {\n    assert.expect(3);\n\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      assert.equal(currentPath(), path, 'Path for edit-form-readonly-test is correctly');\n      assert.strictEqual(controller.get('readonly'), true, 'Controller\\'s flag \\'readonly\\' is enabled');\n\n      controller.set('readonly', false);\n      assert.strictEqual(controller.get('readonly'), false, 'Controller\\'s flag \\'readonly\\' is disabled');\n    });\n  });\n\n  (0, _qunit.test)('flexbery-checkbox on readonly editform', function (assert) {\n    assert.expect(4);\n\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $checkbox = Ember.$('.not-in-groupedit .flexberry-checkbox');\n      assert.strictEqual($checkbox.hasClass('read-only'), true, 'Checkbox is readonly');\n\n      var $checkboxFge = Ember.$('.in-groupedit .flexberry-checkbox');\n      assert.strictEqual($checkboxFge.hasClass('read-only'), true, 'Groupedit\\'s checkbox is readonly');\n\n      controller.set('readonly', false);\n      Ember.run.scheduleOnce('afterRender', function () {\n        assert.strictEqual($checkbox.hasClass('read-only'), false, 'Checkbox is not readonly');\n        assert.strictEqual($checkboxFge.hasClass('read-only'), false, 'Groupedit\\'s checkbox is not readonly');\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexbery-textbox on readonly editform', function (assert) {\n    assert.expect(4);\n\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $textbox = Ember.$('.not-in-groupedit .flexberry-textbox');\n      var $textboxInput = $textbox.children('input');\n      assert.strictEqual(Ember.$.trim($textboxInput.attr('readonly')), 'readonly', 'Textbox is readonly');\n\n      var $textboxFge = Ember.$('.in-groupedit .flexberry-textbox');\n      var $textboxFgeInput = $textboxFge.children('input');\n      assert.strictEqual(Ember.$.trim($textboxFgeInput.attr('readonly')), 'readonly', 'Groupedit\\'s textbox is readonly');\n\n      controller.set('readonly', false);\n      Ember.run.scheduleOnce('afterRender', function () {\n        assert.strictEqual($textbox.is('readonly'), false, 'Textbox is not readonly');\n        assert.strictEqual($textboxFge.is('readonly'), false, 'Groupedit\\'s textbox is not readonly');\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-textarea on readonly editform', function (assert) {\n    assert.expect(4);\n\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $textarea = Ember.$('.not-in-groupedit .flexberry-textarea');\n      var $textareaInput = $textarea.children('textarea');\n      assert.strictEqual(Ember.$.trim($textareaInput.attr('readonly')), 'readonly', 'Textarea is readonly');\n\n      var $textareaFGE = Ember.$('.in-groupedit .flexberry-textarea');\n      var $textareaInputFGE = $textareaFGE.children('textarea');\n      assert.strictEqual(Ember.$.trim($textareaInputFGE.attr('readonly')), 'readonly', 'Groupedit\\'s textarea is readonly');\n\n      controller.set('readonly', false);\n      Ember.run.scheduleOnce('afterRender', function () {\n        assert.strictEqual(Ember.$.trim($textareaInput.attr('readonly')), '', 'Textarea is not readonly');\n        assert.strictEqual(Ember.$.trim($textareaInputFGE.attr('readonly')), '', 'Groupedit\\'s textarea is not readonly');\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-simpledatetime on readonly editform', function (assert) {\n    assert.expect(4);\n\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $simpledatetime = Ember.$('.not-in-groupedit .flexberry-simpledatetime .custom-flatpickr');\n\n      assert.strictEqual(Ember.$.trim($simpledatetime.attr('readonly')), 'readonly', 'Time is readonly');\n\n      var $simpledatetimeFge = Ember.$('.in-groupedit .flexberry-simpledatetime .custom-flatpickr');\n      assert.strictEqual(Ember.$.trim($simpledatetimeFge.attr('readonly')), 'readonly', 'Groupedit\\'s datepicker is readonly');\n\n      controller.set('readonly', false);\n      Ember.run.scheduleOnce('afterRender', function () {\n        assert.strictEqual(Ember.$.trim($simpledatetime.attr('readonly')), '', 'Time is not readonly');\n        assert.strictEqual(Ember.$.trim($simpledatetimeFge.attr('readonly')), '', 'Groupedit\\'s datepicker is not readonly');\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-dropdown on readonly editform', function (assert) {\n    assert.expect(4);\n\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $dropdown = Ember.$('.not-in-groupedit .flexberry-dropdown');\n      assert.strictEqual($dropdown.hasClass('disabled'), true, 'Dropdown is readonly');\n\n      var $dropdownFge = Ember.$('.in-groupedit .flexberry-dropdown');\n      assert.strictEqual($dropdownFge.hasClass('disabled'), true, 'Groupedit\\'s dropdown is readonly');\n\n      controller.set('readonly', false);\n      Ember.run.scheduleOnce('afterRender', function () {\n        assert.strictEqual($dropdown.hasClass('disabled'), false, 'Dropdown is not readonly');\n        assert.strictEqual($dropdownFge.hasClass('disabled'), false, 'Groupedit\\'s dropdown is not readonly');\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-file on readonly edit form', function (assert) {\n    assert.expect(14);\n\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $file = Ember.$('.not-in-groupedit input.flexberry-file-filename-input');\n      assert.strictEqual(Ember.$.trim($file.attr('readonly')), 'readonly', 'Flexberry-file is readonly');\n      var $downloadButton = Ember.$('.not-in-groupedit label.flexberry-file-download-button');\n      assert.strictEqual($downloadButton.hasClass('disabled'), true, 'Flexberry-file\\'s button \\'Download\\' is readonly');\n\n      var $fileFge = Ember.$('.in-groupedit input.flexberry-file-filename-input');\n      assert.strictEqual(Ember.$.trim($fileFge.attr('readonly')), 'readonly', 'Groupedit\\'s flexberry-file is readonly');\n      var $downloadButtonFge = Ember.$('.in-groupedit label.flexberry-file-download-button');\n      assert.strictEqual($downloadButtonFge.hasClass('disabled'), true, 'Groupedit\\'s flexberry-file\\'s button \\'Download\\' is readonly');\n\n      controller.set('readonly', false);\n      Ember.run.scheduleOnce('afterRender', function () {\n        assert.strictEqual($file.is('readonly'), false, 'Flexberry-file is not readonly');\n        var $addButton = Ember.$('.not-in-groupedit label.flexberry-file-add-button');\n        assert.strictEqual($addButton.hasClass('disabled'), false, 'Flexberry-file\\'s button \\'Add\\' is not readonly');\n        var $removeButton = Ember.$('.not-in-groupedit label.flexberry-file-remove-button');\n        assert.strictEqual($removeButton.hasClass('disabled'), true, 'Flexberry-file has button \\'Remove\\'');\n        var $uploadButton = Ember.$('.not-in-groupedit label.flexberry-file-upload-button');\n        assert.strictEqual($uploadButton.hasClass('disabled'), true, 'Flexberry-file has button \\'Upload\\'');\n        assert.strictEqual($downloadButton.hasClass('disabled'), true, 'Flexberry-file has button \\'Download\\'');\n\n        assert.strictEqual($fileFge.is('readonly'), false, 'Groupedit\\'s flexberry-file is not readonly');\n        var $addButtonFge = Ember.$('.in-groupedit label.flexberry-file-add-button');\n        assert.strictEqual($addButtonFge.hasClass('disabled'), false, 'Groupedit\\'s flexberry-file\\'s button \\'Add\\' is not readonly');\n        var $removeButtonFge = Ember.$('.in-groupedit label.flexberry-file-remove-button');\n        assert.strictEqual($removeButtonFge.hasClass('disabled'), true, 'Groupedit\\'s flexberry-file has button \\'Remove\\'');\n        var $uploadButtonFge = Ember.$('.in-groupedit label.flexberry-file-upload-button');\n        assert.strictEqual($uploadButtonFge.hasClass('disabled'), true, 'Groupedit\\'s flexberry-file has button \\'Upload\\'');\n        assert.strictEqual($downloadButtonFge.hasClass('disabled'), true, 'Groupedit\\'s flexberry-file has button \\'Download\\'');\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-lookup on readonly edit form', function (assert) {\n    assert.expect(12);\n\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $flexberryLookup = Ember.$('.not-in-groupedit .flexberry-lookup div.ui.fluid.action.input');\n      var $lookup = $flexberryLookup.children('.lookup-field');\n      assert.strictEqual(Ember.$.trim($lookup.attr('readonly')), 'readonly', 'Lookup is readonly');\n      var $chooseButton = $flexberryLookup.children('.button.ui-change');\n      assert.strictEqual($chooseButton.hasClass('disabled'), true, 'Flexberry-lookup\\'s button \\'Choose\\' is readonly');\n      var $removeButton = $flexberryLookup.children('.button.ui-clear');\n      assert.strictEqual($removeButton.hasClass('disabled'), true, 'Flexberry-lookup\\'s button \\'Remove\\' is readonly');\n\n      var $lookupFge = Ember.$('.in-groupedit input.lookup-field');\n      assert.strictEqual(Ember.$.trim($lookupFge.attr('readonly')), 'readonly', 'Groupedit\\'s lookup is readonly');\n      var $chooseButtonFge = Ember.$('.in-groupedit button.ui-change');\n      assert.strictEqual($chooseButtonFge.hasClass('disabled'), true, 'Groupedit\\'s flexberry-lookup\\'s button \\'Choose\\' is readonly');\n      var $removeButtonFge = Ember.$('.in-groupedit button.ui-clear');\n      assert.strictEqual($removeButtonFge.hasClass('disabled'), true, 'Groupedit\\'s flexberry-lookup\\'s button \\'Remove\\' is readonly');\n\n      controller.set('readonly', false);\n      Ember.run.scheduleOnce('afterRender', function () {\n        $removeButton = Ember.$('.not-in-groupedit button.ui-clear');\n        $removeButtonFge = Ember.$('.in-groupedit button.ui-clear');\n        assert.strictEqual(Ember.$(undefined).is('readonly'), false, 'Lookup don\\'t readonly');\n        assert.strictEqual($chooseButton.hasClass('disabled'), false, 'Flexberry-lookup\\'s button \\'Choose\\' don\\'t readonly');\n        assert.strictEqual($removeButton.hasClass('disabled'), false, 'Flexberry-lookup\\'s button \\'Remove\\' don\\'t readonly');\n\n        assert.strictEqual($lookupFge.is('readonly'), false, 'Groupedit\\'s lookup is not readonly');\n        assert.strictEqual($chooseButtonFge.hasClass('disabled'), false, 'Groupedit\\'s flexberry-lookup\\'s button \\'Choose\\' is not readonly');\n        assert.strictEqual($removeButtonFge.hasClass('disabled'), false, 'Groupedit\\'s flexberry-lookup\\'s button \\'Remove\\' is not readonly');\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-lookup as dropdown on readonly edit form', function (assert) {\n    assert.expect(2);\n\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $dropdownAsLookup = Ember.$('.not-in-groupedit .flexberry-lookup');\n      var $dropdown = Ember.$($dropdownAsLookup[1]).children('.flexberry-dropdown');\n      assert.strictEqual($dropdown.hasClass('disabled'), true, 'Lookup as dropdown is readonly');\n\n      controller.set('readonly', false);\n      Ember.run.scheduleOnce('afterRender', function () {\n        assert.strictEqual($dropdown.hasClass('disabled'), false, 'Lookup as dropdown is not readonly');\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-groupedit on readonly edit form', function (assert) {\n    assert.expect(2);\n\n    visit(path);\n    andThen(function () {\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $groupedit = Ember.$('.in-groupedit table');\n      assert.strictEqual($groupedit.hasClass('readonly'), true, 'Groupedit is readonly');\n\n      controller.set('readonly', false);\n      Ember.run.scheduleOnce('afterRender', function () {\n        assert.strictEqual($groupedit.hasClass('readonly'), false, 'Groupedit is not readonly');\n      });\n    });\n  });\n\n  (0, _qunit.test)('flexberry-groupedit\\'s button on readonly edit form', function (assert) {\n    assert.expect(12);\n\n    visit(path);\n    andThen(function () {\n      var $addButton = Ember.$('.in-groupedit .ui-add');\n      var $removeButton = Ember.$('.in-groupedit .ui-delete');\n      var $checkbox = Ember.$('.in-groupedit .flexberry-checkbox');\n      var $removeButtonRow = Ember.$('.in-groupedit .object-list-view-row-delete-button');\n      var $itemEditMenu = Ember.$('.in-groupedit .edit-menu');\n      var $itemDeleteMenu = Ember.$('.in-groupedit .delete-menu');\n\n      assert.strictEqual(Ember.$.trim($addButton.attr('disabled')), 'disabled', 'Flexberry-groupedit\\'s button \\'Add\\' is readonly');\n      assert.strictEqual(Ember.$.trim($removeButton.attr('disabled')), 'disabled', 'Flexberry-groupedit\\'s button \\'Remove\\' is readonly');\n      assert.strictEqual($checkbox.hasClass('read-only'), true, 'Flexberry-groupedit\\'s checkbox helper is readonly');\n      assert.strictEqual($removeButtonRow.hasClass('disabled'), true, 'Flexberry-groupedit\\'s button \\'Remove in row\\' is readonly');\n      assert.strictEqual($itemEditMenu.hasClass('disabled'), true, 'Flexberry-groupedit\\'s item \\'Edit\\' in left menu is readonly');\n      assert.strictEqual($itemDeleteMenu.hasClass('disabled'), true, 'Flexberry-groupedit\\'s item \\'Delete\\' in left menu is readonly');\n\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      controller.set('readonly', false);\n      Ember.run.scheduleOnce('afterRender', function () {\n        $checkbox = Ember.$('.in-groupedit .flexberry-checkbox');\n        $itemEditMenu = Ember.$('.in-groupedit .edit-menu');\n        $itemDeleteMenu = Ember.$('.in-groupedit .delete-menu');\n        $removeButtonRow = Ember.$('.in-groupedit .object-list-view-row-delete-button');\n\n        assert.strictEqual(Ember.$(undefined).is('disabled'), false, 'Flexberry-groupedit\\'s button \\'Add\\' don\\'t readonly');\n        assert.strictEqual(Ember.$(undefined).is('disabled'), false, 'Flexberry-groupedit\\'s button \\'Remove\\' don\\'t readonly');\n        assert.strictEqual($checkbox.hasClass('read-only'), false, 'Flexberry-groupedit\\'s checkbox helper don\\'t readonly');\n        assert.strictEqual($removeButtonRow.hasClass('disabled'), false, 'Flexberry-groupedit\\'s button \\'Remove in row\\' don\\'t readonly');\n        assert.strictEqual($itemEditMenu.hasClass('disabled'), false, 'Flexberry-groupedit\\'s item \\'Edit\\' in left menu don\\'t readonly');\n        assert.strictEqual($itemDeleteMenu.hasClass('disabled'), false, 'Flexberry-groupedit\\'s item \\'Delete\\' in left menu don\\'t readonly');\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/edit-form-validation-test/execute-validation-test', ['exports', 'qunit', 'dummy/tests/helpers/start-app'], function (exports, _qunit, _startApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.executeTest = executeTest;\n  function executeTest(testName, callback) {\n    var app = void 0;\n    var store = void 0;\n    var userSettingsService = void 0;\n\n    (0, _qunit.module)('Acceptance | flexberry-validation | ' + testName, {\n      beforeEach: function beforeEach() {\n\n        // Start application.\n        app = (0, _startApp.default)();\n\n        // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n        var applicationController = app.__container__.lookup('controller:application');\n        applicationController.set('isInAcceptanceTestMode', true);\n        store = app.__container__.lookup('service:store');\n\n        userSettingsService = app.__container__.lookup('service:user-settings');\n        var getCurrentPerPage = function getCurrentPerPage() {\n          return 5;\n        };\n\n        userSettingsService.set('getCurrentPerPage', getCurrentPerPage);\n      },\n      afterEach: function afterEach() {\n        Ember.run(app, 'destroy');\n        var daterangepicker = Ember.$('.daterangepicker');\n        daterangepicker.remove();\n      }\n    });\n\n    (0, _qunit.test)(testName, function (assert) {\n      return callback(store, assert, app);\n    });\n  }\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-base-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test'], function (_executeValidationTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check default value', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    // Open validation page.\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $validationLablesContainer = Ember.$('.ember-view.ui.basic.label');\n      var $validationSixteenWide = Ember.$('.list');\n      var $validationLi = $validationSixteenWide.children('li');\n\n      // Сounting the number of validationmessage.\n      assert.equal($validationLablesContainer.length, 11, 'All components have default value');\n      assert.equal($validationLi.length, 17, 'All components have default value in sixteenWide');\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-checkbox-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test'], function (_executeValidationTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check operation checkbox', function (store, assert, app) {\n    assert.expect(4);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    // Open validation page.\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $validationField = Ember.$(Ember.$('.field.error')[0]);\n      var $validationFlexberryCheckbox = $validationField.children('.flexberry-checkbox');\n      var $validationFlexberryErrorLable = $validationField.children('.label');\n\n      // Check default validationmessage text.\n      assert.equal($validationFlexberryErrorLable.text().trim(), 'Flag is required,Flag must be \\'true\\' only', 'Checkbox\\'s label have default value by default');\n\n      Ember.run(function () {\n        $validationFlexberryCheckbox.click();\n      });\n\n      // Check validationmessage text afther first click.\n      assert.equal($validationFlexberryErrorLable.text().trim(), '', 'Checkbox\\'s label havn\\'t value after first click');\n\n      Ember.run(function () {\n        $validationFlexberryCheckbox.click();\n      });\n\n      // Check validationmessage text = 'Flag must be 'true' only' afther first click.\n      assert.equal($validationFlexberryErrorLable.text().trim(), 'Flag must be \\'true\\' only', 'Checkbox\\'s label have value after second click');\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-detail-delete-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test'], function (_executeValidationTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check detail delete', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    // Open validation page.\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      // Сounting the number of validationmessage.\n      var $validationLablesContainer = Ember.$('.ember-view.ui.basic.label');\n      assert.equal($validationLablesContainer.length, 11, 'All components have default value');\n\n      var $validationFlexberryCheckboxs = Ember.$('.flexberry-checkbox');\n      var $validationFlexberryCheckbox = Ember.$($validationFlexberryCheckboxs[1]);\n      var $validationFlexberryOLVDeleteButton = Ember.$(Ember.$('.ui.disabled.button')[1]);\n\n      // Delete detail.\n      Ember.run($validationFlexberryCheckbox, $validationFlexberryCheckbox.click);\n      Ember.run($validationFlexberryOLVDeleteButton, $validationFlexberryOLVDeleteButton.click);\n\n      // Сounting the number of validationmessage = 8 afther detail delete.\n      $validationLablesContainer = Ember.$('.ember-view.ui.basic.label');\n      assert.equal($validationLablesContainer.length, 8, 'Detail was deleted without errors');\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-detail-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test'], function (_executeValidationTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check detail\\'s components', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    // Open validation page.\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      // Сounting the number of validationmessage.\n      var $validationLablesContainer = Ember.$('.ember-view.ui.basic.label');\n      assert.equal($validationLablesContainer.length, 11, 'All components have default value');\n\n      var $validationFlexberryCheckboxs = Ember.$('.flexberry-checkbox');\n      var $validationFlexberryOLVCheckbox = Ember.$($validationFlexberryCheckboxs[2]);\n\n      var $validationFlexberryTextboxs = Ember.$('.flexberry-textbox');\n      var $validationFlexberryOLVTextbox1 = Ember.$($validationFlexberryTextboxs[2]);\n      var $validationFlexberryOLVTextbox2 = Ember.$($validationFlexberryTextboxs[3]);\n\n      // Selct textbox inner.\n      var $validationFlexberryTextboxInner1 = $validationFlexberryOLVTextbox1.children('input');\n      var $validationFlexberryTextboxInner2 = $validationFlexberryOLVTextbox2.children('input');\n\n      // Select deteil's validationmessages.\n      var $validationField1 = Ember.$($validationLablesContainer[8]);\n      var $validationField2 = Ember.$($validationLablesContainer[9]);\n      var $validationField3 = Ember.$($validationLablesContainer[10]);\n\n      // Data insertion.\n      Ember.run(function () {\n        $validationFlexberryOLVCheckbox.click();\n        $validationFlexberryTextboxInner1[0].value = '1';\n        $validationFlexberryTextboxInner1.change();\n        $validationFlexberryTextboxInner2[0].value = '12345';\n        $validationFlexberryTextboxInner2.change();\n      });\n\n      // Validationmessage must be empty.\n      assert.ok($validationField1.text().trim() === '' && $validationField2.text().trim() === '' && $validationField3.text().trim() === '', 'All components have default value');\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-dropdown-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test'], function (_executeValidationTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check operation dropdown', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    // Open validation page.\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $validationField = Ember.$(Ember.$('.field.error')[5]);\n      var $validationFlexberryDropdown = $validationField.children('.flexberry-dropdown');\n      var $validationFlexberryErrorLable = $validationField.children('.label');\n\n      // Check default validationmessage text.\n      assert.equal($validationFlexberryErrorLable.text().trim(), 'Enumeration is required', 'Dropdown have default value');\n\n      Ember.run(function () {\n\n        // Open dropdown.\n        $validationFlexberryDropdown.click();\n        var $validationFlexberryDropdownMenu = $validationFlexberryDropdown.children('.menu');\n        var $validationFlexberryDropdownItems = $validationFlexberryDropdownMenu.children('.item');\n        var $validationFlexberryDropdownItem = Ember.$($validationFlexberryDropdownItems[0]);\n\n        // Select item\n        $validationFlexberryDropdownItem.click();\n      });\n\n      // Validationmessage must be empty.\n      assert.equal($validationFlexberryErrorLable.text().trim(), '', 'Dropdown have value');\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-file-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test'], function (_executeValidationTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check operation file', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $validationFieldFile = Ember.$(Ember.$('.field.error')[6]);\n      var $validationFlexberryErrorLable = $validationFieldFile.children('.label');\n\n      // Check default validationmessage text.\n      assert.equal($validationFlexberryErrorLable.text().trim(), 'File is required', 'Flexberry file have default value');\n\n      var $validationFlexberryLookup = Ember.$('.flexberry-lookup');\n      var $validationFlexberryLookupInput = $validationFlexberryLookup.children('.input');\n      var $validationFlexberryLookupButton = $validationFlexberryLookupInput.children('.ui-change.button');\n\n      // Click lookup button.\n      Ember.run(function () {\n        $validationFlexberryLookupButton.click();\n      });\n\n      var done = assert.async();\n\n      // Сounting the number of validationmessage.\n      setTimeout(function () {\n        assert.equal($validationFlexberryErrorLable.text().trim(), '', 'Flexberry file have value');\n        done();\n      }, 2000);\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-lookup-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test'], function (_executeValidationTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check operation lookup', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    // Open validation page.\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $validationField = Ember.$(Ember.$('.field.error')[7]);\n      var $validationFlexberryErrorLable = $validationField.children('.label');\n\n      // Check default validationmessage text.\n      assert.equal($validationFlexberryErrorLable.text().trim(), 'Master is required', 'Lookup have default value');\n\n      var $validationFlexberryLookup = Ember.$('.flexberry-lookup');\n      var $validationFlexberryLookupInput = $validationFlexberryLookup.children('.input');\n      var $validationFlexberryLookupButton = $validationFlexberryLookupInput.children('.ui-change.button');\n\n      // Click lookup button.\n      Ember.run(function () {\n        $validationFlexberryLookupButton.click();\n      });\n\n      var done = assert.async();\n\n      // Waiting for the action complete.\n      setTimeout(function () {\n        assert.equal($validationFlexberryErrorLable.text().trim(), '', 'Lookup have value');\n        done();\n      }, 1000);\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test', '@ember/test-helpers'], function (_executeValidationTest, _testHelpers) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check complete all tests', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    // Open validation page.\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $validationDataField = Ember.$('.flexberry-simpledatetime');\n      var $validationDataDiv = $validationDataField.children('.input');\n      var $validationDataInput = $validationDataDiv.children('.flatpickr-input');\n\n      Ember.run(function () {\n        // Open datepicker calendar.\n        Ember.$($validationDataInput[0]).click();\n        var $validationDateButton = Ember.$('.flatpickr-day')[16];\n\n        // Select date.\n        (0, _testHelpers.click)($validationDateButton);\n      });\n\n      var $validationFlexberryLookup = Ember.$('.flexberry-lookup');\n      var $validationFlexberryLookupInput = $validationFlexberryLookup.children('.input');\n      var $validationFlexberryLookupButton = $validationFlexberryLookupInput.children('.ui-change.button');\n\n      // Click lookup button.\n      Ember.run(function () {\n        $validationFlexberryLookupButton.click();\n      });\n\n      var $validationFlexberryCheckboxs = Ember.$('.flexberry-checkbox');\n      var $validationFlexberryCheckbox = Ember.$($validationFlexberryCheckboxs[0]);\n      var $validationFlexberryOLVCheckbox = Ember.$($validationFlexberryCheckboxs[2]);\n\n      Ember.run(function () {\n        $validationFlexberryCheckbox.click();\n        $validationFlexberryOLVCheckbox.click();\n      });\n\n      var $validationFlexberryDropdown = Ember.$('.flexberry-dropdown');\n\n      Ember.run(function () {\n\n        // Open dropdown.\n        $validationFlexberryDropdown.click();\n        var $validationFlexberryDropdownMenu = $validationFlexberryDropdown.children('.menu');\n        var $validationFlexberryDropdownItems = $validationFlexberryDropdownMenu.children('.item');\n        var $validationFlexberryDropdownItem = Ember.$($validationFlexberryDropdownItems[0]);\n\n        // Select item\n        $validationFlexberryDropdownItem.click();\n      });\n\n      var $validationFlexberryTextboxs = Ember.$('.flexberry-textbox');\n      var $validationFlexberryTextbox1 = Ember.$($validationFlexberryTextboxs[0]);\n      var $validationFlexberryTextbox2 = Ember.$($validationFlexberryTextboxs[1]);\n      var $validationFlexberryOLVTextbox1 = Ember.$($validationFlexberryTextboxs[2]);\n      var $validationFlexberryOLVTextbox2 = Ember.$($validationFlexberryTextboxs[3]);\n      var $validationFlexberryTextarea = Ember.$('.flexberry-textarea');\n\n      var $validationFlexberryTextboxInner1 = $validationFlexberryTextbox1.children('input');\n      var $validationFlexberryTextboxInner2 = $validationFlexberryTextbox2.children('input');\n      var $validationFlexberryOLVTextboxInner1 = $validationFlexberryOLVTextbox1.children('input');\n      var $validationFlexberryOLVTextboxInner2 = $validationFlexberryOLVTextbox2.children('input');\n      var $validationFlexberryTextAreaInner = $validationFlexberryTextarea.children('textarea');\n\n      // Insert text in textbox and textarea.\n      Ember.run(function () {\n        $validationFlexberryTextboxInner1[0].value = '1';\n        $validationFlexberryTextboxInner1.change();\n        $validationFlexberryTextboxInner2[0].value = '12345';\n        $validationFlexberryTextboxInner2.change();\n        $validationFlexberryTextAreaInner.val('1');\n        $validationFlexberryTextAreaInner.change();\n        $validationFlexberryOLVTextboxInner1[0].value = '1';\n        $validationFlexberryOLVTextboxInner1.change();\n        $validationFlexberryOLVTextboxInner2[0].value = '12345';\n        $validationFlexberryOLVTextboxInner2.change();\n      });\n\n      var $validationFlexberryFileAddButton = Ember.$('.add.outline');\n\n      Ember.run(function () {\n        $validationFlexberryFileAddButton.click();\n      });\n\n      var done = assert.async();\n\n      // Сounting the number of validationmessage.\n      setTimeout(function () {\n        var $validationLablesContainer = Ember.$('.ember-view.ui.basic.label');\n        var $validationMessage = true;\n\n        for (var i = 0; i < 10; i++) {\n          if ($validationLablesContainer[i].textContent.trim() !== '') {\n            $validationMessage = false;\n          }\n        }\n\n        var $validationSixteenWide = Ember.$('.list');\n        var $validationLi = $validationSixteenWide.children('li');\n\n        // Сounting the number of validationmessage.\n        assert.equal($validationLi.length, 0, 'All components have default value in sixteenWide');\n\n        assert.ok($validationMessage, 'All components have correct value, All validationmessage disabled');\n        done();\n      }, 5000);\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-textarea-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test'], function (_executeValidationTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check operation textarea', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    // Open validation page.\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $validationField = Ember.$(Ember.$('.field.error')[3]);\n      var $validationFlexberryTextarea = Ember.$('.flexberry-textarea');\n      var $validationFlexberryTextboxInner = $validationFlexberryTextarea.children('textarea');\n      var $validationFlexberryErrorLable = $validationField.children('.label');\n\n      // Check default validationmessage text.\n      assert.equal($validationFlexberryErrorLable.text().trim(), 'Long text is required', 'Textarea have default value');\n\n      // Insert text in textarea.\n      Ember.run(function () {\n        $validationFlexberryTextboxInner.val('1');\n        $validationFlexberryTextboxInner.change();\n      });\n\n      // Validationmessage must be empty.\n      assert.equal($validationFlexberryErrorLable.text().trim(), '', 'Textarea have default value');\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-textbox-letter-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test'], function (_executeValidationTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check operation letter textbox', function (store, assert, app) {\n    assert.expect(4);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    // Open validation page.\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $validationField = Ember.$(Ember.$('.field.error')[2]);\n      var $validationFlexberryTextbox = $validationField.children('.flexberry-textbox');\n      var $validationFlexberryTextboxInner = $validationFlexberryTextbox.children('input');\n      var $validationFlexberryErrorLable = $validationField.children('.label');\n\n      // Check default validationmessage text.\n      assert.equal($validationFlexberryErrorLable.text().trim(), 'Text is required,Text length must be >= 5', 'letter textbox have default value');\n\n      // Insert text in textbox.\n      Ember.run(function () {\n        $validationFlexberryTextboxInner[0].value = '1';\n        $validationFlexberryTextboxInner.change();\n      });\n\n      // Check default validationmessage for text length <5 letter.\n      assert.equal($validationFlexberryErrorLable.text().trim(), 'Text length must be >= 5', 'letter textbox have < 5 letter');\n\n      // Insert text in textbox.\n      Ember.run(function () {\n        $validationFlexberryTextboxInner[0].value = '12345';\n        $validationFlexberryTextboxInner.change();\n      });\n\n      // Check default validationmessage for text length >5 letter.\n      assert.equal($validationFlexberryErrorLable.text().trim(), '', 'letter textbox have >= 5 letter');\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/acceptance/edit-form-validation-test/validation-textbox-numeric-test', ['dummy/tests/acceptance/edit-form-validation-test/execute-validation-test'], function (_executeValidationTest) {\n  'use strict';\n\n  /* eslint-disable no-unused-vars */\n  (0, _executeValidationTest.executeTest)('check operation numeric textbox', function (store, assert, app) {\n    assert.expect(4);\n    var path = 'components-acceptance-tests/edit-form-validation/validation';\n\n    // Open validation page.\n    visit(path);\n\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $validationField = Ember.$(Ember.$('.field.error')[1]);\n      var $validationFlexberryTextbox = $validationField.children('.flexberry-textbox');\n      var $validationFlexberryTextboxInner = $validationFlexberryTextbox.children('input');\n      var $validationFlexberryErrorLable = $validationField.children('.label');\n\n      // Check default validationmessage text.\n      assert.equal($validationFlexberryErrorLable.text().trim(), 'Number is required,Number is invalid', 'Numeric textbox have default value');\n\n      // Insert text in textbox.\n      Ember.run(function () {\n        $validationFlexberryTextboxInner[0].value = '2';\n        $validationFlexberryTextboxInner.change();\n      });\n\n      // Check default validationmessage text for even numbers.\n      assert.equal($validationFlexberryErrorLable.text().trim(), 'Number must be an odd', 'Numeric textbox have even value');\n\n      // Insert text in textbox.\n      Ember.run(function () {\n        $validationFlexberryTextboxInner[0].value = '1';\n        $validationFlexberryTextboxInner.change();\n      });\n\n      // Check default validationmessage text for odd numbers.\n      assert.equal($validationFlexberryErrorLable.text().trim(), '', 'Numeric textbox have odd value');\n    });\n  });\n  /* eslint-enable no-unused-vars */\n});","define('dummy/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/css-picker.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/css-picker.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/number-input.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/number-input.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/edit-form-readonly.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/edit-form-readonly.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/edit-form-validation/validation.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/edit-form-validation/validation.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/flexberry-groupedit/properly-rerenders.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-groupedit/properly-rerenders.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/flexberry-lookup/base-operations.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-lookup/base-operations.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/flexberry-lookup/settings-example-actions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-lookup/settings-example-actions.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/flexberry-lookup/settings-example-autocomplete.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-lookup/settings-example-autocomplete.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/flexberry-lookup/settings-example-autofill-by-limit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-lookup/settings-example-autofill-by-limit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/flexberry-lookup/settings-example-dropdown.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-lookup/settings-example-dropdown.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/flexberry-lookup/settings-example-limit-function.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-lookup/settings-example-limit-function.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/flexberry-lookup/settings-example-preview-page.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-lookup/settings-example-preview-page.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/flexberry-lookup/settings-example-preview.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-lookup/settings-example-preview.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/flexberry-lookup/settings-example-projection.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-lookup/settings-example-projection.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/flexberry-lookup/settings-example-relation-name.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-lookup/settings-example-relation-name.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/flexberry-lookup/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-lookup/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/flexberry-objectlistview/base-operations.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-objectlistview/base-operations.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/flexberry-objectlistview/computable-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-objectlistview/computable-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/flexberry-objectlistview/custom-filter.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-objectlistview/custom-filter.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/flexberry-objectlistview/date-format.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-objectlistview/date-format.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/flexberry-objectlistview/folv-filter.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-objectlistview/folv-filter.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-acceptance-tests/flexberry-objectlistview/folv-paging.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-objectlistview/folv-paging.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-button/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-button/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-checkbox/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-checkbox/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-ddau-checkbox/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-ddau-checkbox/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-dropdown/conditional-render-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-dropdown/conditional-render-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-dropdown/empty-value-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-dropdown/empty-value-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-dropdown/items-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-dropdown/items-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-dropdown/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-dropdown/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-field/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-field/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-file/flexberry-file-in-modal.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-file/flexberry-file-in-modal.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-file/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-file/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-groupedit/configurate-row-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-groupedit/configurate-row-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-groupedit/custom-buttons-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-groupedit/custom-buttons-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-groupedit-with-lookup-with-computed-atribute.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-groupedit-with-lookup-with-computed-atribute.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-readonly-columns-by-configurate-row-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-readonly-columns-by-configurate-row-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-groupedit-with-lookup-with-computed-atribute.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-groupedit-with-lookup-with-computed-atribute.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-readonly-columns-by-configurate-row-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-readonly-columns-by-configurate-row-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-groupedit/model-update-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-groupedit/model-update-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-groupedit/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-groupedit/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-lookup/autocomplete-order-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/autocomplete-order-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-lookup/autofill-by-limit-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/autofill-by-limit-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-lookup/customizing-window-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/customizing-window-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-lookup/default-ordering-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/default-ordering-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-lookup/dropdown-mode-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/dropdown-mode-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-lookup/hierarchy-olv-in-lookup-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/hierarchy-olv-in-lookup-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-lookup/limit-function-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/limit-function-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-lookup/lookup-block-form-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/lookup-block-form-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-lookup/lookup-in-modal.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/lookup-in-modal.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-lookup/numeric-autocomplete.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/numeric-autocomplete.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-lookup/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-menu/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-menu/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-cancel.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-cancel.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-immediately.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-immediately.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-cancel.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-cancel.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-immediately.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-immediately.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/configurate-rows.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/configurate-rows.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/custom-filter.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/custom-filter.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/hierarchy-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/hierarchy-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/hierarchy-paging-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/hierarchy-paging-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/inheritance-models.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/limit-function-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/limit-function-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/limited-text-size-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/limited-text-size-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/list-on-editform.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/list-on-editform.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/lock-services-editor-view-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/lock-services-editor-view-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/lock-services-editor-view-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/lock-services-editor-view-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/object-list-view-resize.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/object-list-view-resize.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/on-edit-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/on-edit-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/on-edit-form/suggestion.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/on-edit-form/suggestion.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/on-edit-form/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/on-edit-form/user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/selected-rows.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/selected-rows.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-simpledatetime/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-simpledatetime/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-text-cell/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-text-cell/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-textarea/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-textarea/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-textbox/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-textbox/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-toggler/ge-into-toggler-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-toggler/ge-into-toggler-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-toggler/settings-example-inner.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-toggler/settings-example-inner.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-toggler/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-toggler/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/flexberry-tree/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-tree/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/modal-dialog/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/modal-dialog/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/components-examples/ui-message/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/ui-message/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-application-user-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-application-user-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-application-user-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-application-user-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-application-user-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-application-user-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-comment-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-comment-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-comment-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-comment-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-comment-vote-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-comment-vote-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-comment-vote-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-comment-vote-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-localization-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-localization-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-localization-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-localization-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-localization-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-localization-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-multi-list-user-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-multi-list-user-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-multi-list-user-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-multi-list-user-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-multi-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-multi-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-suggestion-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-suggestion-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-suggestion-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-suggestion-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-suggestion-file-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-suggestion-file-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-suggestion-file-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-suggestion-file-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-suggestion-file-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-suggestion-file-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-suggestion-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-suggestion-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-suggestion-type-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-suggestion-type-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-suggestion-type-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-suggestion-type-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-suggestion-type-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-suggestion-type-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-toggler-example-master-e.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-toggler-example-master-e.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-flexberry-dummy-toggler-example-master-e/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-toggler-example-master-e/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/integration-examples/edit-form/readonly-mode.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/integration-examples/edit-form/readonly-mode.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/integration-examples/edit-form/validation.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/integration-examples/edit-form/validation.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/log-service-examples/clear-log-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/log-service-examples/clear-log-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/log-service-examples/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/log-service-examples/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/new-platform-flexberry-services-lock-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/new-platform-flexberry-services-lock-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/user-setting-forms/user-setting-delete.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/user-setting-forms/user-setting-delete.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('enums/components-examples/flexberry-dropdown/empty-value-example/enumeration.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/components-examples/flexberry-dropdown/empty-value-example/enumeration.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('enums/components-examples/flexberry-dropdown/settings-example/enumeration.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/components-examples/flexberry-dropdown/settings-example/enumeration.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('enums/components-examples/flexberry-groupedit/shared/detail-enumeration.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/components-examples/flexberry-groupedit/shared/detail-enumeration.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('enums/ember-flexberry-dummy-gender.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/ember-flexberry-dummy-gender.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('enums/ember-flexberry-dummy-vote-type.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/ember-flexberry-dummy-vote-type.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('enums/integration-examples/edit-form/readonly-mode/enumeration.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/integration-examples/edit-form/readonly-mode/enumeration.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('enums/integration-examples/edit-form/validation/enumeration.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/integration-examples/edit-form/validation/enumeration.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/to-safe-string.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/to-safe-string.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/to-string.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/to-string.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('locales/en/translations.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/translations.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('locales/ru/translations.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/translations.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/list-form-controller-operations-indication.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/list-form-controller-operations-indication.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/list-form-route-operations-indication.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/list-form-route-operations-indication.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/aggregator.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/aggregator.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/components-examples/flexberry-checkbox/settings-example/base.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-checkbox/settings-example/base.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/components-examples/flexberry-ddau-checkbox/settings-example/base.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-ddau-checkbox/settings-example/base.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/components-examples/flexberry-dropdown/conditional-render-example/base.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-dropdown/conditional-render-example/base.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/components-examples/flexberry-dropdown/empty-value-example/base.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-dropdown/empty-value-example/base.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/components-examples/flexberry-dropdown/settings-example/base.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-dropdown/settings-example/base.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/components-examples/flexberry-field/settings-example/base.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-field/settings-example/base.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/components-examples/flexberry-file/settings-example/base.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-file/settings-example/base.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/components-examples/flexberry-groupedit/shared/aggregator.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-groupedit/shared/aggregator.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/components-examples/flexberry-groupedit/shared/detail.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-groupedit/shared/detail.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/components-examples/flexberry-groupedit/shared/master.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-groupedit/shared/master.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/components-examples/flexberry-simpledatetime/settings-example/base.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-simpledatetime/settings-example/base.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/components-examples/flexberry-textarea/settings-example/base.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-textarea/settings-example/base.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/components-examples/flexberry-textbox/settings-example/base.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-textbox/settings-example/base.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/ember-flexberry-dummy-application-user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-application-user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/ember-flexberry-dummy-comment-vote.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-comment-vote.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/ember-flexberry-dummy-comment.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-comment.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/ember-flexberry-dummy-localization.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-localization.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/ember-flexberry-dummy-localized-suggestion-type.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-localized-suggestion-type.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/ember-flexberry-dummy-parent.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-parent.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/ember-flexberry-dummy-successor-phone.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-successor-phone.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/ember-flexberry-dummy-successor-social-network.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-successor-social-network.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/ember-flexberry-dummy-suggestion-file.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-suggestion-file.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/ember-flexberry-dummy-suggestion-type.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-suggestion-type.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/ember-flexberry-dummy-suggestion.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-suggestion.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/ember-flexberry-dummy-toggler-example-detail.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-toggler-example-detail.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/ember-flexberry-dummy-toggler-example-master.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-toggler-example-master.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/ember-flexberry-dummy-vote.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-vote.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/integration-examples/edit-form/readonly-mode/aggregator.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/integration-examples/edit-form/readonly-mode/aggregator.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/integration-examples/edit-form/readonly-mode/detail.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/integration-examples/edit-form/readonly-mode/detail.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/integration-examples/edit-form/readonly-mode/master-dropdown.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/integration-examples/edit-form/readonly-mode/master-dropdown.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/integration-examples/edit-form/readonly-mode/master.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/integration-examples/edit-form/readonly-mode/master.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/integration-examples/edit-form/validation/base.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/integration-examples/edit-form/validation/base.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/integration-examples/edit-form/validation/detail.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/integration-examples/edit-form/validation/detail.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/integration-examples/edit-form/validation/master.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/integration-examples/edit-form/validation/master.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/edit-form-readonly.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/edit-form-readonly.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/edit-form-validation/validation.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/edit-form-validation/validation.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/flexberry-groupedit/properly-rerenders.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-groupedit/properly-rerenders.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/flexberry-lookup/base-operations.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-lookup/base-operations.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/flexberry-lookup/settings-example-actions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-lookup/settings-example-actions.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/flexberry-lookup/settings-example-autocomplete.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-lookup/settings-example-autocomplete.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/flexberry-lookup/settings-example-autofill-by-limit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-lookup/settings-example-autofill-by-limit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/flexberry-lookup/settings-example-dropdown.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-lookup/settings-example-dropdown.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/flexberry-lookup/settings-example-limit-function.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-lookup/settings-example-limit-function.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/flexberry-lookup/settings-example-preview-page.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-lookup/settings-example-preview-page.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/flexberry-lookup/settings-example-preview.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-lookup/settings-example-preview.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/flexberry-lookup/settings-example-projection.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-lookup/settings-example-projection.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/flexberry-lookup/settings-example-relation-name.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-lookup/settings-example-relation-name.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/flexberry-lookup/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-lookup/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/flexberry-objectlistview/base-operations.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-objectlistview/base-operations.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/flexberry-objectlistview/computable-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-objectlistview/computable-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/flexberry-objectlistview/custom-filter.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-objectlistview/custom-filter.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/flexberry-objectlistview/date-format.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-objectlistview/date-format.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/flexberry-objectlistview/folv-filter.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-objectlistview/folv-filter.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-acceptance-tests/flexberry-objectlistview/folv-paging.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-objectlistview/folv-paging.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-button/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-button/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-checkbox/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-checkbox/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-ddau-checkbox/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-ddau-checkbox/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-dropdown/conditional-render-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-dropdown/conditional-render-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-dropdown/empty-value-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-dropdown/empty-value-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-dropdown/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-dropdown/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-field/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-field/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-file/flexberry-file-in-modal.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-file/flexberry-file-in-modal.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-file/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-file/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-groupedit/configurate-row-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-groupedit/configurate-row-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-groupedit/custom-buttons-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-groupedit/custom-buttons-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-groupedit-with-lookup-with-computed-atribute.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-groupedit-with-lookup-with-computed-atribute.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-readonly-columns-by-configurate-row-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-readonly-columns-by-configurate-row-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-groupedit-with-lookup-with-computed-atribute.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-groupedit-with-lookup-with-computed-atribute.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-readonly-columns-by-configurate-row-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-readonly-columns-by-configurate-row-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-groupedit/model-update-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-groupedit/model-update-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-groupedit/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-groupedit/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-lookup/autocomplete-order-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/autocomplete-order-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-lookup/autofill-by-limit-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/autofill-by-limit-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-lookup/customizing-window-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/customizing-window-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-lookup/default-ordering-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/default-ordering-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-lookup/dropdown-mode-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/dropdown-mode-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-lookup/hierarchy-olv-in-lookup-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/hierarchy-olv-in-lookup-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-lookup/limit-function-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/limit-function-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-lookup/lookup-block-form-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/lookup-block-form-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-lookup/lookup-in-modal.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/lookup-in-modal.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-lookup/numeric-autocomplete.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/numeric-autocomplete.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-lookup/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-menu/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-menu/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-cancel.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-cancel.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-immediately.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-immediately.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-cancel.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-cancel.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-immediately.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-immediately.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/configurate-rows.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/configurate-rows.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/custom-filter.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/custom-filter.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/edit-form-with-detail-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/edit-form-with-detail-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/hierarchy-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/hierarchy-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/hierarchy-paging-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/hierarchy-paging-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/inheritance-models.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/inheritance-models/parent-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/parent-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/limit-function-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/limit-function-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/limited-text-size-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/limited-text-size-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/list-on-editform.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/list-on-editform.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/lock-services-editor-view-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/lock-services-editor-view-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/lock-services-editor-view-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/lock-services-editor-view-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/object-list-view-resize.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/object-list-view-resize.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/on-edit-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/on-edit-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/on-edit-form/suggestion.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/on-edit-form/suggestion.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/on-edit-form/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/on-edit-form/user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/selected-rows.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/selected-rows.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-simpledatetime/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-simpledatetime/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-text-cell/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-text-cell/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-textarea/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-textarea/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-textbox/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-textbox/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-toggler/ge-into-toggler-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-toggler/ge-into-toggler-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-toggler/settings-example-inner.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-toggler/settings-example-inner.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-toggler/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-toggler/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/flexberry-tree/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-tree/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/components-examples/ui-message/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/ui-message/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-application-user-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-application-user-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-application-user-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-application-user-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-application-user-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-application-user-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-comment-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-comment-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-comment-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-comment-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-comment-vote-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-comment-vote-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-comment-vote-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-comment-vote-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-localization-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-localization-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-localization-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-localization-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-localization-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-localization-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-multi-list-user-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-multi-list-user-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-multi-list-user-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-multi-list-user-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-multi-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-multi-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-suggestion-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-suggestion-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-suggestion-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-suggestion-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-suggestion-file-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-suggestion-file-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-suggestion-file-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-suggestion-file-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-suggestion-file-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-suggestion-file-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-suggestion-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-suggestion-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-suggestion-type-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-suggestion-type-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-suggestion-type-edit/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-suggestion-type-edit/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-suggestion-type-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-suggestion-type-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-toggler-example-master-e.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-toggler-example-master-e.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-flexberry-dummy-toggler-example-master-e/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-toggler-example-master-e/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/integration-examples/edit-form/readonly-mode.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/integration-examples/edit-form/readonly-mode.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/integration-examples/edit-form/validation.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/integration-examples/edit-form/validation.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/log-service-examples/clear-log-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/log-service-examples/clear-log-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/log-service-examples/settings-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/log-service-examples/settings-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/user-setting-forms/user-setting-delete.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/user-setting-forms/user-setting-delete.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/ember-flexberry-dummy-application-user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-application-user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/ember-flexberry-dummy-comment-vote.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-comment-vote.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/ember-flexberry-dummy-comment.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-comment.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/ember-flexberry-dummy-localization.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-localization.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/ember-flexberry-dummy-localized-suggestion-type.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-localized-suggestion-type.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/ember-flexberry-dummy-parent.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-parent.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/ember-flexberry-dummy-successor-phone.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-successor-phone.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/ember-flexberry-dummy-successor-social-network.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-successor-social-network.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/ember-flexberry-dummy-suggestion-file.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-suggestion-file.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/ember-flexberry-dummy-suggestion-type.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-suggestion-type.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/ember-flexberry-dummy-suggestion.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-suggestion.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/ember-flexberry-dummy-toggler-example-detail.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-toggler-example-detail.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/ember-flexberry-dummy-toggler-example-master.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-toggler-example-master.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/ember-flexberry-dummy-vote.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-vote.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/offline-globals.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/offline-globals.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/store.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/store.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transforms/components-examples/flexberry-dropdown/conditional-render-example/enumeration.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/components-examples/flexberry-dropdown/conditional-render-example/enumeration.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transforms/components-examples/flexberry-dropdown/settings-example/enumeration.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/components-examples/flexberry-dropdown/settings-example/enumeration.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transforms/components-examples/flexberry-groupedit/shared/detail-enumeration.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/components-examples/flexberry-groupedit/shared/detail-enumeration.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transforms/ember-flexberry-dummy-gender.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/ember-flexberry-dummy-gender.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transforms/ember-flexberry-dummy-vote-type.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/ember-flexberry-dummy-vote-type.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transforms/integration-examples/edit-form/readonly-mode/enumeration.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/integration-examples/edit-form/readonly-mode/enumeration.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transforms/integration-examples/edit-form/validation/enumeration.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/integration-examples/edit-form/validation/enumeration.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/ember-i18n/test-helpers', ['ember-i18n/test-support/-private/t', 'ember-i18n/test-support/-private/assert-translation'], function (_t2, _assertTranslation2) {\n  'use strict';\n\n  // example usage: find(`.header:contains(${t('welcome_message')})`)\n  Ember.Test.registerHelper('t', function (app, key, interpolations) {\n    return (0, _t2.default)(app.__container__, key, interpolations);\n  });\n\n  // example usage: expectTranslation('.header', 'welcome_message');\n  Ember.Test.registerHelper('expectTranslation', function (app, element, key, interpolations) {\n    var text = (0, _t2.default)(app.__container__, key, interpolations);\n\n    (0, _assertTranslation2.default)(element, key, text);\n  });\n});","define('dummy/tests/helpers/ember-prop-types', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createComponent = createComponent;\n\n  var _slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n\n  var VERSION = Ember.VERSION;\n\n\n  /**\n   * Determine if we are on a version of Ember that includes Glimmer 2\n   * @returns {Boolean} whether or not we are on Glimmer 2\n   */\n  function isGlimmer2() {\n    var _VERSION$split = VERSION.split('.'),\n        _VERSION$split2 = _slicedToArray(_VERSION$split, 2),\n        major = _VERSION$split2[0],\n        minor = _VERSION$split2[1];\n\n    return parseInt(major) > 1 && parseInt(minor) > 9;\n  }\n\n  /**\n   * Programitcally instantiate instance of component class\n   * @param {Ember.Component} component - component class to instantiate\n   * @returns {Ember.Component} instance of component class\n   */\n  function createComponent(component) {\n    if (isGlimmer2()) {\n      return component.create({ renderer: {} });\n    }\n\n    return component.create();\n  }\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Ember.RSVP.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('dummy/tests/helpers/start-app', ['exports', 'dummy/app', 'dummy/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes.autoboot = true;\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('dummy/tests/integration/components/flexberry-checkbox-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('flexberry-checkbox', 'Integration | Component | flexberry-checkbox', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('Component renders properly', function (assert) {\n    assert.expect(15);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"tLdNS8JB\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-checkbox\\\",null,[[\\\"caption\\\",\\\"class\\\"],[[22,[\\\"caption\\\"]],[22,[\\\"class\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component, it's inner <input>.\n    var $component = this.$().children();\n    var $checkboxInput = $component.children('input');\n\n    // Check wrapper <div>.\n    assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n    assert.strictEqual($component.hasClass('flexberry-checkbox'), true, 'Component\\'s container has \\'flexberry-checkbox\\' css-class');\n    assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n    assert.strictEqual($component.hasClass('checkbox'), true, 'Component\\'s wrapper has \\'checkbox\\' css-class');\n\n    // Check <input>.\n    assert.strictEqual($checkboxInput.length === 1, true, 'Component has inner <input>');\n    assert.strictEqual($checkboxInput.attr('type'), 'checkbox', 'Component\\'s inner <input> is of checkbox type');\n    assert.strictEqual($checkboxInput.hasClass('flexberry-checkbox-input'), true, 'Component\\'s inner checkbox <input> has flexberry-checkbox-input css-class');\n    assert.strictEqual($checkboxInput.hasClass('hidden'), true, 'Component\\'s inner checkbox <input> has \\'hidden\\' css-class');\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked');\n\n    // Check wrapper's additional CSS-classes.\n    var additioanlCssClasses = 'radio slider toggle';\n    this.set('class', additioanlCssClasses);\n\n    /* eslint-disable no-unused-vars */\n    Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), true, 'Component\\'s wrapper has additional css class \\'' + cssClassName + '\\'');\n    });\n    /* eslint-enable no-unused-vars */\n\n    this.set('class', '');\n    /* eslint-disable no-unused-vars */\n    Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), false, 'Component\\'s wrapper hasn\\'t additional css class \\'' + cssClassName + '\\'');\n    });\n    /* eslint-enable no-unused-vars */\n  });\n\n  (0, _emberQunit.test)('Component renders it\\'s label properly', function (assert) {\n    assert.expect(5);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"5uyuK0Iw\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-checkbox\\\",null,[[\\\"label\\\"],[[22,[\\\"label\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component, it's inner <label>.\n    var $component = this.$().children();\n    var $checkboxLabel = $component.children('label');\n\n    // Check <label>'s text.\n    assert.strictEqual($checkboxLabel.length === 1, true, 'Component has inner <label>');\n    assert.strictEqual($checkboxLabel.hasClass('flexberry-checkbox-label'), true, 'Component\\'s inner <label> has flexberry-checkbox-label css-class');\n    assert.strictEqual(Ember.$.trim($checkboxLabel.text()).length === 0, true, 'Component\\'s inner <label> is empty by default');\n\n    // Define some label & check <label>'s text again.\n    var label = 'This is checkbox';\n    this.set('label', label);\n    assert.strictEqual(Ember.$.trim($checkboxLabel.text()) === label, true, 'Component\\'s inner <label> has text defined in component\\'s \\'label\\' property: \\'' + label + '\\'');\n\n    // Clean up defined label & check <label>'s text again.\n    label = null;\n    this.set('label', label);\n    assert.strictEqual(Ember.$.trim($checkboxLabel.text()).length === 0, true, 'Component\\'s inner <label> is empty if component\\'s \\'label\\' property is cleaned up');\n  });\n\n  (0, _emberQunit.test)('Changes in checkbox causes changes in binded value', function (assert) {\n    var _this = this;\n\n    assert.expect(9);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"rdFET5ht\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-checkbox\\\",null,[[\\\"value\\\"],[[22,[\\\"flag\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component & it's inner <input>.\n    var $component = this.$().children();\n    var $checkboxInput = $component.children('input');\n\n    // Check component's initial state.\n    assert.strictEqual($component.hasClass('checked'), false, 'Component hasn\\'t css-class \\'checked\\' before first click');\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked before first click');\n    assert.strictEqual(Ember.typeOf(this.get('flag')), 'undefined', 'Component\\'s binded value is \\'undefined\\' before first click');\n\n    // Imitate click on component (change it's state to checked) & check it's state again.\n    // Sometimes ember recognizes programmatical imitations of UI-events as asynchrony, so we should wrap them into run function.\n    Ember.run(function () {\n      $component.click();\n      assert.strictEqual($component.hasClass('checked'), true, 'Component has css-class \\'checked\\' after click');\n      assert.strictEqual($checkboxInput.prop('checked'), true, 'Component\\'s inner checkbox <input> is checked after click');\n      assert.strictEqual(_this.get('flag'), true, 'Component\\'s binded value is \\'true\\' after click');\n    });\n\n    // Imitate click on component again (change it's state to unchecked) & check it's state again.\n    // Sometimes ember recognizes programmatical imitations of UI-events as asynchrony, so we should wrap them into run function.\n    Ember.run(function () {\n      $component.click();\n      assert.strictEqual($component.hasClass('checked'), false, 'Component hasn\\'t css-class \\'checked\\' after second click');\n      assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked after second click');\n      assert.strictEqual(_this.get('flag'), false, 'Component\\'s binded value is \\'false\\' after second click');\n    });\n  });\n\n  (0, _emberQunit.test)('Changes in in binded value causes changes in checkbox', function (assert) {\n    assert.expect(7);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"rdFET5ht\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-checkbox\\\",null,[[\\\"value\\\"],[[22,[\\\"flag\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component & it's inner <input>.\n    var $component = this.$().children();\n    var $checkboxInput = $component.children('input');\n\n    // Check component's initial state.\n    assert.strictEqual($component.hasClass('checked'), false, 'Component hasn\\'t css-class \\'checked\\' by default');\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked by default');\n    assert.strictEqual(Ember.typeOf(this.get('flag')), 'undefined', 'Component\\'s binded value is \\'undefined\\' by default');\n\n    // Change binded value to 'true' & check component's state again (it must be checked).\n    this.set('flag', true);\n    assert.strictEqual($component.hasClass('checked'), true, 'Component has css-class \\'checked\\' after binded value changed to \\'true\\'');\n    assert.strictEqual($checkboxInput.prop('checked'), true, 'Component\\'s inner checkbox <input> is checked after binded value changed to \\'true\\'');\n\n    // Change binded value to 'false' & check component's state again (it must be unchecked).\n    this.set('flag', false);\n    assert.strictEqual($component.hasClass('checked'), false, 'Component hasn\\'t css-class \\'checked\\' after binded value changed to \\'false\\'');\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked after binded value changed to \\'false\\'');\n  });\n\n  (0, _emberQunit.test)('Component sends \\'onChange\\' action', function (assert) {\n    assert.expect(2);\n\n    var onCheckboxChangeEventObject = null;\n    this.set('actions.onCheckboxChange', function (e) {\n      onCheckboxChangeEventObject = e;\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"dqEUCwF1\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-checkbox\\\",null,[[\\\"value\\\",\\\"onChange\\\"],[[22,[\\\"flag\\\"]],[26,\\\"action\\\",[[21,0,[]],\\\"onCheckboxChange\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // Imitate click on component (change it's state to checked) & check action's event object.\n    // Sometimes ember recognizes programmatical imitations of UI-events as asynchrony, so we should wrap them into run function.\n    Ember.run(function () {\n      $component.click();\n      assert.strictEqual(Ember.get(onCheckboxChangeEventObject, 'checked'), true, 'Component sends \\'onChange\\' action with \\'checked\\' property equals to \\'true\\' after first click');\n    });\n\n    // Imitate click on component again (change it's state to unchecked) & check action's event object again.\n    // Sometimes ember recognizes programmatical imitations of UI-events as asynchrony, so we should wrap them into run function.\n    Ember.run(function () {\n      $component.click();\n      assert.strictEqual(Ember.get(onCheckboxChangeEventObject, 'checked'), false, 'Component sends \\'onChange\\' action with \\'checked\\' property equals to \\'false\\' after second click');\n    });\n  });\n\n  (0, _emberQunit.test)('Component works properly in readonly mode', function (assert) {\n    var _this2 = this;\n\n    assert.expect(11);\n\n    var onCheckboxChangeEventObject = null;\n    this.set('actions.onCheckboxChange', function (e) {\n      onCheckboxChangeEventObject = e;\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"2G4FJDB7\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-checkbox\\\",null,[[\\\"readonly\\\",\\\"value\\\",\\\"onChange\\\"],[[22,[\\\"readonly\\\"]],[22,[\\\"flag\\\"]],[26,\\\"action\\\",[[21,0,[]],\\\"onCheckboxChange\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component & it's inner <input>.\n    var $component = this.$().children();\n    var $checkboxInput = $component.children('input');\n\n    // Check component's initial state.\n    assert.strictEqual($component.hasClass('read-only'), false, 'Component hasn\\'t css-class \\'read-only\\' by default');\n\n    // Enable readonly mode & check component's state again.\n    this.set('readonly', true);\n    assert.strictEqual($component.hasClass('read-only'), true, 'Component has css-class \\'read-only\\' when readonly mode is enabled');\n\n    // Imitate click on component (try to change it's state to checked) & check it's state & action's event object.\n    // Sometimes ember recognizes programmatical imitations of UI-events as asynchrony, so we should wrap them into run function.\n    Ember.run(function () {\n      $component.click();\n      assert.strictEqual(onCheckboxChangeEventObject, null, 'Component doesn\\'t send \\'onChange\\' action in readonly mode');\n      assert.strictEqual($component.hasClass('checked'), false, 'Component hasn\\'t css-class \\'checked\\' after click in readonly mode');\n      assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked after click in readonly mode');\n      assert.strictEqual(Ember.typeOf(_this2.get('flag')), 'undefined', 'Component\\'s binded value is still \\'undefined\\' after click in readonly mode');\n    });\n\n    // Disable readonly mode & check component's state again.\n    this.set('readonly', false);\n    assert.strictEqual($component.hasClass('read-only'), false, 'Component hasn\\'t css-class \\'read-only\\' when readonly mode is disabled');\n\n    // Imitate click on component (try to change it's state to checked) & check it's state & action's event object.\n    // Sometimes ember recognizes programmatical imitations of UI-events as asynchrony, so we should wrap them into run function.\n    Ember.run(function () {\n      $component.click();\n      assert.strictEqual(Ember.isNone(onCheckboxChangeEventObject), false, 'Component sends \\'onChange\\' action when readonly mode is disabled');\n      assert.strictEqual($component.hasClass('checked'), true, 'Component has css-class \\'checked\\' after first click when readonly mode is disabled');\n      assert.strictEqual($checkboxInput.prop('checked'), true, 'Component\\'s inner checkbox <input> is checked after first click when readonly mode is disabled');\n      assert.strictEqual(_this2.get('flag'), true, 'Component\\'s binded value is equals to \\'true\\' after first click when readonly mode is disabled');\n    });\n  });\n\n  (0, _emberQunit.test)('Setting up classes in checkbox', function (assert) {\n    assert.expect(6);\n\n    var checkClass = 'radio slider toggle';\n    this.set('class', checkClass);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"aF1xW7AU\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-checkbox\\\",null,[[\\\"value\\\",\\\"class\\\"],[[22,[\\\"flag\\\"]],[22,[\\\"class\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // Check component's initial state.\n    assert.strictEqual($component.hasClass('radio'), true, 'Component hasn\\'t css-class \\'radio\\' by default');\n    assert.strictEqual($component.hasClass('slider'), true, 'Component hasn\\'t css-class \\'slider\\' by default');\n    assert.strictEqual($component.hasClass('toggle'), true, 'Component hasn\\'t css-class \\'toggle\\' by default');\n\n    // Change binded value to 'true' & check component's state again (it must be checked).\n    this.set('flag', true);\n\n    // Check component's afther change state.\n    assert.strictEqual($component.hasClass('radio'), true, 'Component hasn\\'t css-class \\'radio\\' afther change');\n    assert.strictEqual($component.hasClass('slider'), true, 'Component hasn\\'t css-class \\'slider\\' afther change');\n    assert.strictEqual($component.hasClass('toggle'), true, 'Component hasn\\'t css-class \\'toggle\\' afther change');\n  });\n});","define('dummy/tests/integration/components/flexberry-ddau-checkbox-test', ['ember-flexberry/components/flexberry-ddau-checkbox', 'ember-flexberry/mixins/flexberry-ddau-checkbox-actions-handler', 'ember-qunit'], function (_flexberryDdauCheckbox, _flexberryDdauCheckboxActionsHandler, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('flexberry-ddau-checkbox', 'Integration | Component | flexberry-ddau-checkbox', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('Component renders properly', function (assert) {\n    assert.expect(17);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"bedsM4UF\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-ddau-checkbox\\\",null,[[\\\"caption\\\",\\\"class\\\"],[[22,[\\\"caption\\\"]],[22,[\\\"class\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component, it's inner <input> & <label>.\n    var $component = this.$().children();\n    var $checkboxInput = $component.children('input');\n    var $checkboxCaption = $component.children('label');\n\n    var flexberryClassNames = _flexberryDdauCheckbox.default.flexberryClassNames;\n\n    // Check wrapper <div>.\n    assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n    assert.strictEqual($component.hasClass(flexberryClassNames.wrapper), true, 'Component\\'s container has \\'' + flexberryClassNames.wrapper + '\\' css-class');\n    assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n    assert.strictEqual($component.hasClass('checkbox'), true, 'Component\\'s wrapper has \\'checkbox\\' css-class');\n\n    // Check <input>.\n    assert.strictEqual($checkboxInput.length === 1, true, 'Component has inner <input>');\n    assert.strictEqual($checkboxInput.attr('type'), 'checkbox', 'Component\\'s inner <input> is of checkbox type');\n    assert.strictEqual($checkboxInput.hasClass(flexberryClassNames.checkboxInput), true, 'Component\\'s inner checkbox <input> has \\'' + flexberryClassNames.checkboxInput + '\\' css-class');\n    assert.strictEqual($checkboxInput.hasClass('hidden'), true, 'Component\\'s inner checkbox <input> has \\'hidden\\' css-class');\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked');\n\n    // Check caption's <label>.\n    assert.strictEqual($checkboxCaption.length === 1, true, 'Component has inner <label>');\n    assert.strictEqual($checkboxCaption.hasClass(flexberryClassNames.checkboxCaption), true, 'Component\\'s inner <label> has \\'' + flexberryClassNames.checkboxCaption + '\\' css-class');\n    assert.strictEqual(Ember.$.trim($checkboxCaption.text()).length === 0, true, 'Component\\'s inner <label> is empty by default');\n\n    var checkboxCaptionText = 'Checkbox caption';\n    this.set('caption', checkboxCaptionText);\n    assert.strictEqual(Ember.$.trim($checkboxCaption.text()), checkboxCaptionText, 'Component\\'s inner <label> text changes when component\\'s \\'caption\\' property changes');\n\n    // Check wrapper's additional CSS-classes.\n    var additioanlCssClasses = 'additional-css-class-name and-another-one';\n    this.set('class', additioanlCssClasses);\n\n    /* eslint-disable no-unused-vars */\n    Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), true, 'Component\\'s wrapper has additional css class \\'' + cssClassName + '\\'');\n    });\n    /* eslint-enable no-unused-vars */\n\n    this.set('class', '');\n    /* eslint-disable no-unused-vars */\n    Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), false, 'Component\\'s wrapper hasn\\'t additional css class \\'' + cssClassName + '\\'');\n    });\n    /* eslint-enable no-unused-vars */\n  });\n\n  (0, _emberQunit.test)('Component invokes actions', function (assert) {\n    assert.expect(3);\n\n    var latestEventObjects = {\n      change: null\n    };\n\n    // Bind component's action handlers.\n    this.set('actions.onFlagChange', function (e) {\n      latestEventObjects.change = e;\n    });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"rgT1ZVdB\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-ddau-checkbox\\\",null,[[\\\"change\\\"],[[26,\\\"action\\\",[[21,0,[]],\\\"onFlagChange\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    assert.strictEqual(latestEventObjects.change, null, 'Component\\'s \\'change\\' action wasn\\'t invoked before click');\n\n    // Imitate first click on component.\n    $component.click();\n    assert.notStrictEqual(latestEventObjects.change, null, 'Component\\'s \\'change\\' action was invoked after first click');\n\n    // Imitate second click on component.\n    latestEventObjects.change = null;\n    $component.click();\n    assert.notStrictEqual(latestEventObjects.change, null, 'Component\\'s \\'change\\' action was invoked after second click');\n  });\n\n  (0, _emberQunit.test)('Component changes binded value (without \\'change\\' action handler)', function (testAssert) {\n    // Mock Ember.assert method.\n    var thrownExceptions = Ember.A();\n    var originalEmberAssert = Ember.assert;\n    Ember.assert = function () {\n      try {\n        originalEmberAssert.apply(undefined, arguments);\n      } catch (ex) {\n        thrownExceptions.pushObject(ex);\n      }\n    };\n\n    testAssert.expect(4);\n\n    this.set('flag', false);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"RkoVMjZ5\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-ddau-checkbox\\\",null,[[\\\"value\\\"],[[22,[\\\"flag\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component & it's inner <input>.\n    var $component = this.$().children();\n    var $checkboxInput = $component.children('input');\n\n    // Check component's initial state.\n    testAssert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked before click');\n\n    // Imitate click on component & check for exception.\n    $component.click();\n\n    // Check component's state after click (it should be changed).\n    testAssert.strictEqual($checkboxInput.prop('checked'), true, 'Component\\'s inner checkbox <input> isn\\'t checked after click (without \\'change\\' action handler)');\n\n    // Check binded value state after click (it should be unchanged, because 'change' action handler is not defined).\n    testAssert.strictEqual(this.get('flag'), true, 'Component\\'s binded value changed (without \\'change\\' action handler)');\n\n    testAssert.strictEqual(thrownExceptions.length === 1 && /.*required.*change.*action.*not.*defined.*/gi.test(thrownExceptions[0].message), true, 'Component throws single exception if \\'change\\' action handler is not defined');\n\n    // Clean up after mock Ember.assert.\n    Ember.assert = originalEmberAssert;\n  });\n\n  (0, _emberQunit.test)('Component changes binded value (with \\'change\\' action handler)', function (assert) {\n    var _this = this;\n\n    assert.expect(7);\n\n    this.set('flag', false);\n\n    // Bind component's 'change' action handler.\n    this.set('actions.onFlagChange', function (e) {\n      assert.strictEqual(e.originalEvent.target.id, _this.$('input')[0].id);\n      _this.set('flag', e.newValue);\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"WVc54MPf\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-ddau-checkbox\\\",null,[[\\\"value\\\",\\\"change\\\"],[[22,[\\\"flag\\\"]],[26,\\\"action\\\",[[21,0,[]],\\\"onFlagChange\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component & it's inner <input>.\n    var $component = this.$().children();\n    var $checkboxInput = $component.children('input');\n\n    // Check component's initial state.\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked before click');\n\n    // Make component checked.\n    $component.click();\n    assert.strictEqual($checkboxInput.prop('checked'), true, 'Component\\'s inner checkbox <input> is checked after click (with \\'change\\' action handler)');\n    assert.strictEqual(this.get('flag'), true, 'Component\\'s binded value changed (with \\'change\\' action handler)');\n\n    // Make component unchecked.\n    $component.click();\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> is unchecked after second click (with \\'change\\' action handler)');\n    assert.strictEqual(this.get('flag'), false, 'Component\\' binded value changed after second click (with \\'change\\' action handler)');\n  });\n\n  (0, _emberQunit.test)('Component changes binded value (with \\'change\\' action handler from special mixin)', function (assert) {\n    assert.expect(5);\n\n    this.set('flag', false);\n\n    // Bind component's 'change' action handler from specialized mixin.\n    this.set('actions.onCheckboxChange', _flexberryDdauCheckboxActionsHandler.default.mixins[0].properties.actions.onCheckboxChange);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"RrZKXti+\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-ddau-checkbox\\\",null,[[\\\"value\\\",\\\"change\\\"],[[22,[\\\"flag\\\"]],[26,\\\"action\\\",[[21,0,[]],\\\"onCheckboxChange\\\",\\\"flag\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component & it's inner <input>.\n    var $component = this.$().children();\n    var $checkboxInput = $component.children('input');\n\n    // Check component's initial state.\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked before click');\n\n    // Make component checked.\n    $component.click();\n    assert.strictEqual($checkboxInput.prop('checked'), true, 'Component\\'s inner checkbox <input> is checked after click (with \\'change\\' action handler from special mixin)');\n    assert.strictEqual(this.get('flag'), true, 'Component changed binded value (with \\'change\\' action handler from special mixin)');\n\n    // Make component unchecked.\n    $component.click();\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> is unchecked after second click (with \\'change\\' action handler from special mixin)');\n    assert.strictEqual(this.get('flag'), false, 'Component changed binded value after second click (with \\'change\\' action handler from special mixin)');\n  });\n\n  (0, _emberQunit.test)('Component works properly in readonly mode', function (assert) {\n    assert.expect(9);\n\n    var latestEventObjects = {\n      change: null\n    };\n\n    // Bind component's action handlers.\n    this.set('actions.onFlagChange', function (e) {\n      latestEventObjects.change = e;\n    });\n\n    // Render component in readonly mode.\n    this.set('flag', false);\n    this.set('readonly', true);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"67FR1zrZ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-ddau-checkbox\\\",null,[[\\\"value\\\",\\\"readonly\\\",\\\"change\\\"],[[22,[\\\"flag\\\"]],[22,[\\\"readonly\\\"]],[26,\\\"action\\\",[[21,0,[]],\\\"onFlagChange\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component & it's inner <input>.\n    var $component = this.$().children();\n    var $checkboxInput = $component.children('input');\n\n    // Check component's initial state.\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked before click');\n\n    // Imitate click on component.\n    $component.click();\n\n    // Check after click state.\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked after click');\n    assert.strictEqual(latestEventObjects.change, null, 'Component doesn\\'t send \\'change\\' action in readonly mode');\n\n    // Disable readonly mode.\n    this.set('readonly', false);\n\n    // Imitate click on component.\n    $component.click();\n\n    // Check after click state.\n    assert.strictEqual($checkboxInput.prop('checked'), true, 'Component\\'s inner checkbox <input> is checked after click');\n    assert.notStrictEqual(latestEventObjects.change, null, 'Component send \\'change\\' action after readonly mode disabling');\n\n    latestEventObjects.change = null;\n\n    // Imitate click on component.\n    $component.click();\n\n    // Check after click state.\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> is unchecked after click');\n    assert.notStrictEqual(latestEventObjects.change, null, 'Component send \\'change\\' action after readonly mode disabling');\n\n    latestEventObjects.change = null;\n\n    // Enable readonly mode again.\n    this.set('readonly', true);\n\n    // Imitate click on component.\n    $component.click();\n\n    // Check after click state.\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked after click');\n    assert.strictEqual(latestEventObjects.change, null, 'Component doesn\\'t send \\'change\\' action in readonly mode');\n  });\n});","define('dummy/tests/integration/components/flexberry-dropdown-test', ['ember-i18n/services/i18n', 'ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations', 'ember-qunit'], function (_i18n, _translations, _translations2, _emberQunit) {\n  'use strict';\n\n  var animationDuration = Ember.$.fn.dropdown.settings.duration + 100;\n\n  (0, _emberQunit.moduleForComponent)('flexberry-dropdown', 'Integration | Component | flexberry dropdown', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.register('locale:ru/translations', _translations.default);\n      this.register('locale:en/translations', _translations2.default);\n      this.register('service:i18n', _i18n.default);\n\n      this.inject.service('i18n', { as: 'i18n' });\n      Ember.Component.reopen({\n        i18n: Ember.inject.service('i18n')\n      });\n\n      // Set 'ru' as initial locale.\n      this.set('i18n.locale', 'ru');\n    }\n  });\n\n  // Helper method to expand flexberry-dropdown.\n  var expandDropdown = function expandDropdown(options) {\n    options = options || {};\n\n    var $component = options.dropdown;\n    var $menu = $component.children('div.menu');\n\n    var callbacks = Ember.A(options.callbacks || []);\n\n    return new Ember.RSVP.Promise(function (resolve, reject) {\n\n      // Click on component to trigger expand animation.\n      Ember.run(function () {\n        $component.click();\n\n        // Set timeouts for possibly defined additional callbacks.\n        callbacks.forEach(function (callback) {\n          setTimeout(callback.callback, callback.timeout);\n        });\n\n        // Set timeout for end of expand animation.\n        setTimeout(function () {\n          if ($component.hasClass('active') && $component.hasClass('visible') && $menu.hasClass('visible')) {\n            resolve();\n          } else {\n            reject(new Error('flexberry-dropdown\\'s menu isn\\'t expanded'));\n          }\n        }, animationDuration);\n      });\n    });\n  };\n\n  // Helper method to select item with specified caption from already expanded flexberry-dropdown's menu.\n  var selectDropdownItem = function selectDropdownItem(options) {\n    options = options || {};\n\n    var $component = options.dropdown;\n    var $menu = $component.children('div.menu');\n\n    var itemCaption = options.itemCaption;\n    var callbacks = Ember.A(options.callbacks || []);\n\n    return new Ember.RSVP.Promise(function (resolve, reject) {\n\n      // To select some item, menu must be expanded.\n      if (!($component.hasClass('active') && $component.hasClass('visible') && $menu.hasClass('visible'))) {\n        reject(new Error('flexberry-dropdown\\'s menu isn\\'t expanded'));\n      }\n\n      // To select some item, menu must contain such item (with the specified caption).\n      var $item = Ember.$('.item:contains(' + itemCaption + ')', $menu);\n      if ($item.length === 0) {\n        reject(new Error('flexberry-dropdown\\'s menu doesn\\'t contain item with caption \\'' + itemCaption + '\\''));\n      }\n\n      // Click on item to select it & trigger collapse animation.\n      Ember.run(function () {\n        $item.click();\n\n        // Set timeouts for possibly defined additional callbacks.\n        callbacks.forEach(function (callback) {\n          setTimeout(callback.callback, callback.timeout);\n        });\n\n        // Set timeout for end of collapse animation.\n        setTimeout(function () {\n          if (!($component.hasClass('active') || $component.hasClass('visible') || $menu.hasClass('visible'))) {\n            resolve();\n          } else {\n            reject(new Error('flexberry-dropdown\\'s menu isn\\'t collapsed'));\n          }\n        }, animationDuration);\n      });\n    });\n  };\n\n  (0, _emberQunit.test)('it renders properly', function (assert) {\n    assert.expect(14);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"oYNzYx2F\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-dropdown\\\",null,[[\\\"class\\\"],[[22,[\\\"class\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $dropdownIcon = $component.children('i.icon');\n    var $dropdownText = $component.children('div.text');\n    var $dropdownMenu = $component.children('div.menu');\n\n    // Check wrapper <div>.\n    assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n    assert.strictEqual($component.hasClass('flexberry-dropdown'), true, 'Component\\'s wrapper has \\' flexberry-dropdown\\' css-class');\n    assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n    assert.strictEqual($component.hasClass('selection'), true, 'Component\\'s wrapper has \\'selection\\' css-class');\n    assert.strictEqual($component.hasClass('dropdown'), true, 'Component\\'s wrapper has \\'dropdown\\' css-class');\n    assert.strictEqual($dropdownIcon.hasClass('dropdown icon'), true, 'Component\\'s wrapper has \\'dropdown icon\\' css-class');\n    assert.strictEqual($dropdownText.hasClass('default text'), true, 'Component\\'s wrapper has \\'default text\\' css-class');\n    assert.strictEqual($dropdownMenu.hasClass('menu'), true, 'Component\\'s wrapper has \\'menu\\' css-class');\n\n    // Check wrapper's additional CSS-classes.\n    var additioanlCssClasses = 'scrolling compact fluid';\n    this.set('class', additioanlCssClasses);\n    /* eslint-disable no-unused-vars */\n    Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), true, 'Component\\'s wrapper has additional css class \\'' + cssClassName + '\\'');\n    });\n    /* eslint-enable no-unused-vars */\n\n    // Clean up wrapper's additional CSS-classes.\n    this.set('class', '');\n    /* eslint-disable no-unused-vars */\n    Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), false, 'Component\\'s wrapper hasn\\'t additional css class \\'' + cssClassName + '\\'');\n    });\n    /* eslint-enable no-unused-vars */\n  });\n\n  (0, _emberQunit.test)('it renders i18n-ed placeholder', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"5bCPYce6\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"flexberry-dropdown\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $dropdownText = $component.children('div.default.text');\n\n    // Check <dropdown>'s placeholder.\n    assert.strictEqual(Ember.$.trim($dropdownText.text()), Ember.get(_translations.default, 'components.flexberry-dropdown.placeholder'), 'Component\\'s inner <dropdown>\\'s placeholder is equals to it\\'s default value from i18n locales/ru/translations');\n\n    // Change current locale to 'en' & check <dropdown>'s placeholder again.\n    this.set('i18n.locale', 'en');\n    assert.strictEqual(Ember.$.trim($dropdownText.text()), Ember.get(_translations2.default, 'components.flexberry-dropdown.placeholder'), 'Component\\'s inner <dropdown>\\'s placeholder is equals to it\\'s value from i18n locales/en/translations');\n  });\n\n  (0, _emberQunit.test)('it renders manually defined placeholder', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"F/Gved3Y\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-dropdown\\\",null,[[\\\"placeholder\\\"],[[22,[\\\"placeholder\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Set <dropdown>'s placeholder' & render component.\n    var placeholder = 'please type some text';\n    this.set('placeholder', placeholder);\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $dropdownText = $component.children('div.default.text');\n\n    // Check <dropdown>'s placeholder.\n    assert.strictEqual(Ember.$.trim($dropdownText.text()), placeholder);\n\n    // Change placeholder's value & check <dropdown>'s placeholder again.\n    placeholder = 'dropdown has no value';\n    this.set('placeholder', placeholder);\n    assert.strictEqual(Ember.$.trim($dropdownText.text()), placeholder);\n  });\n\n  (0, _emberQunit.test)('readonly mode works properly', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"2NTwYzij\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-dropdown\\\",null,[[\\\"readonly\\\"],[true]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $dropdownMenu = $component.children('div.menu');\n\n    // Activate readonly mode & check that readonly (disabled) attribute exists now & has value equals to 'readonly'.\n    assert.strictEqual($component.hasClass('disabled'), true, 'Component\\'s has readonly');\n\n    // Check that component is disabled.\n    /* eslint-disable no-unused-vars */\n    new Ember.RSVP.Promise(function (resolve, reject) {\n      Ember.run(function () {\n        $component.click();\n      });\n\n      Ember.run(function () {\n        var animation = assert.async();\n        setTimeout(function () {\n          assert.strictEqual($dropdownMenu.hasClass('animating'), false, 'Component is not active');\n\n          animation();\n        }, animationDuration / 2);\n      });\n    });\n    /* eslint-enable no-unused-vars */\n  });\n\n  (0, _emberQunit.test)('needChecksOnValue mode properly', function (assert) {\n    var _this = this;\n\n    var exceptionHandler = Ember.Test.Adapter.exception;\n    Ember.Test.Adapter.exception = function (error) {\n      throw error;\n    };\n\n    // Create array for testing.\n    var itemsArray = ['Caption1', 'Caption2', 'Caption3'];\n    this.set('itemsArray', itemsArray);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Qnk53n/N\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-dropdown\\\",null,[[\\\"value\\\",\\\"items\\\",\\\"needChecksOnValue\\\"],[[22,[\\\"value\\\"]],[22,[\\\"itemsArray\\\"]],[22,[\\\"needChecksOnValue\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Change property binded to 'value' & check them.\n    this.set('needChecksOnValue', true);\n    var newValue = 'Caption4';\n\n    // Check that errors handled properly.\n    assert.throws(function () {\n      _this.set('value', newValue);\n    }, new RegExp(newValue));\n\n    Ember.Test.Adapter.exception = exceptionHandler;\n  });\n\n  (0, _emberQunit.test)('dropdown with items represented by object renders properly', function (assert) {\n    assert.expect(3);\n\n    // Create objects for testing.\n    var itemsObject = {\n      item1: 'Caption1',\n      item2: 'Caption2',\n      item3: 'Caption3'\n    };\n    this.set('itemsObject', itemsObject);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Ry1dXV6N\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-dropdown\\\",null,[[\\\"items\\\"],[[22,[\\\"itemsObject\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $dropdownMenu = $component.children('div.menu');\n    var $dropdownItem = $dropdownMenu.children('div.item');\n\n    // Check component's captions and objects.\n    var itemsObjectKeys = Object.keys(itemsObject);\n    $dropdownItem.each(function (i) {\n      var $item = Ember.$(this);\n      var itemKey = itemsObjectKeys[i];\n\n      // Check that the captions matches the objects.\n      assert.strictEqual($item.attr('data-value'), itemKey, 'Component\\'s item\\'s сaptions matches the objects');\n    });\n  });\n\n  (0, _emberQunit.test)('dropdown with items represented by array renders properly', function (assert) {\n    assert.expect(3);\n\n    // Create array for testing.\n    var itemsArray = ['Caption1', 'Caption2', 'Caption3'];\n    this.set('itemsArray', itemsArray);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"1OcXHyQc\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-dropdown\\\",null,[[\\\"items\\\"],[[22,[\\\"itemsArray\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $dropdownMenu = $component.children('div.menu');\n    var $dropdownItem = $dropdownMenu.children('div.item');\n\n    // Check component's captions and array.\n    $dropdownItem.each(function (i) {\n      var $item = Ember.$(this);\n\n      // Check that the captions matches the array.\n      assert.strictEqual($item.attr('data-value'), String(i), 'Component\\'s item\\'s сaptions matches the array');\n    });\n  });\n\n  (0, _emberQunit.test)('expand animation works properly', function (assert) {\n    assert.expect(9);\n\n    // Create array for testing.\n    var itemsArray = ['Caption1', 'Caption2', 'Caption3'];\n    this.set('itemsArray', itemsArray);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"1OcXHyQc\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-dropdown\\\",null,[[\\\"items\\\"],[[22,[\\\"itemsArray\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $dropdownMenu = $component.children('div.menu');\n\n    // Check that component is collapsed by default.\n    assert.strictEqual($component.hasClass('active'), false, 'Component hasn\\'t class \\'active\\'');\n    assert.strictEqual($component.hasClass('visible'), false, 'Component hasn\\'t class \\'visible\\'');\n    assert.strictEqual($dropdownMenu.hasClass('visible'), false, 'Component\\'s menu hasn\\'t class \\'visible\\'');\n    assert.strictEqual($dropdownMenu.hasClass('hidden'), false, 'Component\\'s menu hasn\\'t class \\'hidden\\'');\n\n    var asyncAnimationsCompleted = assert.async();\n    expandDropdown({\n      dropdown: $component,\n      callbacks: [{\n        timeout: animationDuration / 2,\n        callback: function callback() {\n\n          // Check that component is animating now.\n          assert.strictEqual($dropdownMenu.hasClass('animating'), true, 'Component has class \\'animating\\' during expand animation');\n        }\n      }]\n    }).then(function () {\n\n      // Check that component is expanded now.\n      assert.strictEqual($component.hasClass('active'), true, 'Component has class \\'active\\'');\n      assert.strictEqual($component.hasClass('visible'), true, 'Component has class \\'visible\\'');\n      assert.strictEqual($dropdownMenu.hasClass('visible'), true, 'Component\\'s menu has class \\'visible\\'');\n      assert.strictEqual($dropdownMenu.hasClass('hidden'), false, 'Component\\'s menu hasn\\'t class \\'hidden\\'');\n    }).catch(function (e) {\n      // Error output.\n      assert.ok(false, e);\n    }).finally(function () {\n      asyncAnimationsCompleted();\n    });\n  });\n\n  (0, _emberQunit.test)('collapse animation works properly', function (assert) {\n    assert.expect(9);\n\n    // Create array for testing.\n    var itemsArray = ['Caption1', 'Caption2', 'Caption3'];\n    this.set('itemsArray', itemsArray);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"1OcXHyQc\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-dropdown\\\",null,[[\\\"items\\\"],[[22,[\\\"itemsArray\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $dropdownMenu = $component.children('div.menu');\n\n    var asyncAnimationsCompleted = assert.async();\n    expandDropdown({\n      dropdown: $component\n    }).then(function () {\n\n      // Check that component is expanded now.\n      assert.strictEqual($component.hasClass('active'), true, 'Component has class \\'active\\'');\n      assert.strictEqual($component.hasClass('visible'), true, 'Component has class \\'visible\\'');\n      assert.strictEqual($dropdownMenu.hasClass('visible'), true, 'Component\\'s menu has class \\'visible\\'');\n      assert.strictEqual($dropdownMenu.hasClass('hidden'), false, 'Component\\'s menu hasn\\'t class \\'hidden\\'');\n\n      // Collapse component.\n      var itemCaption = itemsArray[1];\n      return selectDropdownItem({\n        dropdown: $component,\n        itemCaption: itemCaption,\n        callbacks: [{\n          timeout: animationDuration / 2,\n          callback: function callback() {\n\n            // Check that component is animating now.\n            assert.strictEqual($dropdownMenu.hasClass('animating'), true, 'Component has class \\'animating\\' during collapse animation');\n          }\n        }]\n      });\n    }).then(function () {\n\n      // Check that component is collapsed now.\n      assert.strictEqual($component.hasClass('active'), false, 'Component hasn\\'t class \\'active\\'');\n      assert.strictEqual($component.hasClass('visible'), false, 'Component hasn\\'t class \\'visible\\'');\n      assert.strictEqual($dropdownMenu.hasClass('visible'), false, 'Component\\'s menu hasn\\'t class \\'visible\\'');\n      assert.strictEqual($dropdownMenu.hasClass('hidden'), true, 'Component\\'s menu has class \\'hidden\\'');\n    }).catch(function (e) {\n      // Error output.\n      assert.ok(false, e);\n    }).finally(function () {\n      asyncAnimationsCompleted();\n    });\n  });\n\n  (0, _emberQunit.test)('changes in inner <dropdown> causes changes in property binded to \\'value\\'', function (assert) {\n    var _this2 = this;\n\n    assert.expect(5);\n\n    // Create array for testing.\n    var itemsArray = ['Caption1', 'Caption2', 'Caption3'];\n    this.set('itemsArray', itemsArray);\n    this.set('value', null);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"f+1idt22\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-dropdown\\\",null,[[\\\"items\\\",\\\"value\\\"],[[22,[\\\"itemsArray\\\"]],[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $dropdownMenu = $component.children('div.menu');\n\n    // Caption of the item to be selected.\n    var itemCaption = itemsArray[2];\n\n    // Select item & perform all necessary checks.\n    var asyncAnimationsCompleted = assert.async();\n    expandDropdown({\n      dropdown: $component\n    }).then(function () {\n\n      // Select item & collapse component.\n      return selectDropdownItem({\n        dropdown: $component,\n        itemCaption: itemCaption\n      });\n    }).then(function () {\n      var $selectedItems = $dropdownMenu.children('div.item.active.selected');\n      var $selectedItem = Ember.$($selectedItems[0]);\n      var $dropdownText = $component.children('div.text');\n\n      // Check that specified item is selected now & it is the only one selected item.\n      assert.strictEqual($selectedItems.length, 1, 'Only one component\\'s item is active');\n      assert.strictEqual(Ember.$.trim($selectedItem.text()), itemCaption, 'Selected item\\'s caption is \\'' + itemCaption + '\\'');\n\n      // Check that dropdown's text <div> has text equals to selected item's caption.\n      assert.strictEqual($dropdownText.hasClass('default'), false, 'Component\\'s text <div> hasn\\'t class \\'default\\'');\n      assert.strictEqual(Ember.$.trim($dropdownText.text()), itemCaption, 'Component\\'s text <div> has content equals to selected item \\'' + itemCaption + '\\'');\n\n      // Check that related model's value binded to dropdown is equals to selected item's caption.\n      assert.strictEqual(_this2.get('value'), itemCaption, 'Related model\\'s value binded to dropdown is \\'' + itemCaption + '\\'');\n    }).catch(function (e) {\n      // Error output.\n      assert.ok(false, e);\n    }).finally(function () {\n      asyncAnimationsCompleted();\n    });\n  });\n\n  (0, _emberQunit.test)('changes in inner <dropdown> causes call to \\'onChange\\' action', function (assert) {\n    assert.expect(2);\n\n    // Create array for testing.\n    var itemsArray = ['Caption1', 'Caption2', 'Caption3'];\n    this.set('itemsArray', itemsArray);\n    this.set('value', null);\n\n    var onChangeHasBeenCalled = false;\n    var onChangeArgument = void 0;\n    this.set('actions.onDropdownChange', function (e) {\n      onChangeHasBeenCalled = true;\n      onChangeArgument = e;\n    });\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Wt+WeSnd\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-dropdown\\\",null,[[\\\"value\\\",\\\"items\\\",\\\"onChange\\\"],[[22,[\\\"value\\\"]],[22,[\\\"itemsArray\\\"]],[26,\\\"action\\\",[[21,0,[]],\\\"onDropdownChange\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // Caption of the item to be selected.\n    var itemCaption = itemsArray[2];\n\n    // Select item & perform all necessary checks.\n    var asyncAnimationsCompleted = assert.async();\n    expandDropdown({\n      dropdown: $component\n    }).then(function () {\n\n      // Select item & collapse component.\n      return selectDropdownItem({\n        dropdown: $component,\n        itemCaption: itemCaption\n      });\n    }).then(function () {\n\n      // Check that 'onChange' action has been called.\n      assert.strictEqual(onChangeHasBeenCalled, true, 'Component\\'s \\'onChange\\' action has been called');\n      assert.strictEqual(onChangeArgument, itemCaption, 'Component\\'s \\'onChange\\' action has been called with \\'' + itemCaption + '\\' as argument');\n    }).catch(function (e) {\n      // Error output.\n      assert.ok(false, e);\n    }).finally(function () {\n      asyncAnimationsCompleted();\n    });\n  });\n});","define('dummy/tests/integration/components/flexberry-error-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('flexberry-error', 'Integration | Component | flexberry error', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"jAayP0on\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-error\\\",null,[[\\\"error\\\",\\\"modalContext\\\"],[[22,[\\\"error\\\"]],\\\"body\\\"]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n    this.set('error', new Error('Error, error, error...'));\n    assert.ok(/Error, error, error.../.test(this.$().text()));\n  });\n});","define('dummy/tests/integration/components/flexberry-field-test', ['ember-i18n/services/i18n', 'ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations', 'ember-qunit'], function (_i18n, _translations, _translations2, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('flexberry-field', 'Integration | Component | flexberry field', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.register('locale:ru/translations', _translations.default);\n      this.register('locale:en/translations', _translations2.default);\n      this.register('service:i18n', _i18n.default);\n\n      this.inject.service('i18n', { as: 'i18n' });\n      Ember.Component.reopen({\n        i18n: Ember.inject.service('i18n')\n      });\n\n      // Set 'ru' as initial locale.\n      this.set('i18n.locale', 'ru');\n    }\n  });\n\n  (0, _emberQunit.test)('it renders properly', function (assert) {\n    assert.expect(13);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"IwKP+my/\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"class\\\"],[[22,[\\\"class\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldTextbox = $component.children('div.flexberry-textbox');\n\n    // Check wrapper <div>.\n    assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n    assert.strictEqual($component.hasClass('flexberry-field'), true, 'Component\\'s wrapper has \\' flexberry-field\\' css-class');\n    assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n    assert.strictEqual($component.hasClass('field'), true, 'Component\\'s wrapper has \\'field\\' css-class');\n    assert.strictEqual($fieldTextbox.length === 1, true, 'Component has inner \\'flexberry-textbox\\'');\n\n    // Check wrapper's additional CSS-classes.\n    var additioanlCssClasses = 'transparent mini huge error';\n    this.set('class', additioanlCssClasses);\n    /* eslint-disable no-unused-vars */\n    Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), true, 'Component\\'s wrapper has additional css class \\'' + cssClassName + '\\'');\n    });\n    /* eslint-enable no-unused-vars */\n\n    // Clean up wrapper's additional CSS-classes.\n    this.set('class', '');\n    /* eslint-disable no-unused-vars */\n    Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), false, 'Component\\'s wrapper hasn\\'t additional css class \\'' + cssClassName + '\\'');\n    });\n    /* eslint-enable no-unused-vars */\n  });\n\n  (0, _emberQunit.test)('label mode works properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"/civMie0\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"class\\\",\\\"label\\\"],[[22,[\\\"class\\\"]],[22,[\\\"label\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Check that label attribute doesn't exist now.\n    this.set('label', null);\n    assert.strictEqual(this.get('label'), null, 'Component\\'s hasn\\'t inner <label>');\n\n    // Add text for label & check that label attribute exist.\n    var labelText = 'Some text for label';\n    this.set('label', labelText);\n\n    assert.strictEqual(this.get('label'), labelText, 'Component has inner <label>');\n\n    // Check that label attribute doesn't exist now.\n    this.set('label', null);\n    assert.strictEqual(this.get('label'), null, 'Component\\'s hasn\\'t inner <label>');\n  });\n\n  (0, _emberQunit.test)('readonly mode works properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"6FeqLNId\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"class\\\",\\\"readonly\\\"],[[22,[\\\"class\\\"]],[22,[\\\"readonly\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldInput = Ember.$('.flexberry-textbox input', $component);\n\n    // Check that <input>'s readonly attribute doesn't exist yet.\n    assert.strictEqual(Ember.$.trim($fieldInput.attr('readonly')), '', 'Component\\'s inner <input> hasn\\'t readonly attribute by default');\n\n    // Activate readonly mode & check that <input>'s readonly attribute exists now & has value equals to 'readonly'.\n    this.set('readonly', true);\n\n    $fieldInput = Ember.$('.flexberry-textbox input', $component);\n    assert.strictEqual(Ember.$.trim($fieldInput.attr('readonly')), 'readonly', 'Component\\'s inner <input> has readonly attribute with value equals to \\'readonly\\'');\n\n    // Check that <input>'s readonly attribute doesn't exist now.\n    this.set('readonly', false);\n\n    $fieldInput = Ember.$('.flexberry-textbox input', $component);\n    assert.strictEqual(Ember.$.trim($fieldInput.attr('readonly')), '', 'Component\\'s inner <input> hasn\\'t readonly attribute');\n  });\n\n  (0, _emberQunit.test)('readonly mode works properly with value', function (assert) {\n    var _this = this;\n\n    assert.expect(2);\n\n    // Set <input>'s value' & render component.\n    this.set('value', null);\n    this.set('readonly', true);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"W9EvN/jF\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"readonly\\\",\\\"value\\\"],[[22,[\\\"readonly\\\"]],[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldInput = Ember.$('.flexberry-textbox input', $component);\n\n    $fieldInput.on('change', function (e) {\n      if (_this.get('readonly')) {\n        e.stopPropagation();\n        $fieldInput.val(null);\n      }\n    });\n\n    var newValue = 'New value';\n    $fieldInput.val(newValue);\n    $fieldInput.change();\n\n    // Check <input>'s value not changed.\n    assert.strictEqual(Ember.$.trim($fieldInput.val()), '', 'Component\\'s inner <input>\\'s value not changed');\n    assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to unchanged \\'value\\'');\n  });\n\n  (0, _emberQunit.test)('click on field in readonly mode doesn\\'t change value & it\\'s type', function (assert) {\n    assert.expect(3);\n\n    // Set <input>'s value' & render component.\n    var value = 123;\n    this.set('value', value);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"kjfAAAZM\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"readonly\\\",\\\"value\\\"],[true,[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldInput = Ember.$('.flexberry-textbox input', $component);\n\n    $fieldInput.click();\n    $fieldInput.change();\n\n    // Check <input>'s value not changed.\n    assert.strictEqual(Ember.$.trim($fieldInput.val()), '' + value, 'Component\\'s inner <input>\\'s value not changed');\n    assert.strictEqual(this.get('value'), value, 'Value binded to component\\'s \\'value\\' property is unchanged');\n    assert.strictEqual(Ember.typeOf(this.get('value')), 'number', 'Value binded to component\\'s \\'value\\' property is still number');\n  });\n\n  (0, _emberQunit.test)('it renders i18n-ed placeholder', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"SjI7NtQV\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"flexberry-field\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldInput = Ember.$('.flexberry-textbox input', $component);\n\n    // Check <input>'s placeholder.\n    assert.strictEqual(Ember.$.trim($fieldInput.attr('placeholder')), Ember.get(_translations.default, 'components.flexberry-field.placeholder'), 'Component\\'s inner <input>\\'s placeholder is equals to it\\'s default value from i18n locales/ru/translations');\n\n    // Change current locale to 'en' & check <input>'s placeholder again.\n    this.set('i18n.locale', 'en');\n    assert.strictEqual(Ember.$.trim($fieldInput.attr('placeholder')), Ember.get(_translations2.default, 'components.flexberry-field.placeholder'), 'Component\\'s inner <input>\\'s placeholder is equals to it\\'s value from i18n locales/en/translations');\n  });\n\n  (0, _emberQunit.test)('it renders manually defined placeholder', function (assert) {\n    assert.expect(2);\n\n    // Set <input>'s placeholder' & render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Qm8td5g4\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"placeholder\\\"],[[22,[\\\"placeholder\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldInput = Ember.$('.flexberry-textbox input', $component);\n\n    var placeholder = 'input is empty, please type some text';\n    this.set('placeholder', placeholder);\n\n    // Check <input>'s placeholder.\n    assert.strictEqual(Ember.$.trim($fieldInput.attr('placeholder')), placeholder, 'Component\\'s inner <input>\\'s placeholder is equals to manually defined value \\'' + placeholder + '\\'');\n\n    // Change placeholder's value & check <input>'s placeholder again.\n    placeholder = 'input has no value';\n    this.set('placeholder', placeholder);\n    assert.strictEqual(Ember.$.trim($fieldInput.attr('placeholder')), placeholder, 'Component\\'s inner <input>\\'s placeholder is equals to manually updated value \\'' + placeholder + '\\'');\n  });\n\n  (0, _emberQunit.test)('type mode works properly', function (assert) {\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"PemiHgzt\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"class\\\",\\\"type\\\"],[[22,[\\\"class\\\"]],[22,[\\\"type\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldInput = Ember.$('.flexberry-textbox input', $component);\n\n    // Check that <input>'s type attribute 'text'.\n    this.set('type', 'text');\n    assert.strictEqual(Ember.$.trim($fieldInput.attr('type')), 'text', 'Component\\'s inner <input> type attribute \\'text\\'');\n\n    // Check that <input>'s type attribute 'number'.\n    this.set('type', 'number');\n    assert.strictEqual(Ember.$.trim($fieldInput.attr('type')), 'number', 'Component\\'s inner <input> type attribute \\'number\\'');\n\n    // Check that <input>'s type attribute 'password'.\n    this.set('type', 'password');\n    assert.strictEqual(Ember.$.trim($fieldInput.attr('type')), 'password', 'Component\\'s inner <input> type attribute \\'password\\'');\n\n    // Check that <input>'s type attribute 'color'.\n    this.set('type', 'color');\n    assert.strictEqual(Ember.$.trim($fieldInput.attr('type')), 'color', 'Component\\'s inner <input> type attribute \\'color\\'');\n\n    // Check that <input>'s type attribute 'button'.\n    this.set('type', 'button');\n    assert.strictEqual(Ember.$.trim($fieldInput.attr('type')), 'button', 'Component\\'s inner <input> type attribute \\'button\\'');\n\n    // Check that <input>'s type attribute 'hidden'.\n    this.set('type', 'hidden');\n    assert.strictEqual(Ember.$.trim($fieldInput.attr('type')), 'hidden', 'Component\\'s inner <input> type attribute \\'hidden\\'');\n  });\n\n  (0, _emberQunit.test)('changes in inner <input> causes changes in property binded to \\'value\\'', function (assert) {\n    assert.expect(4);\n\n    // Set <input>'s value' & render component.\n    this.set('value', null);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"VmTtyhIv\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"value\\\"],[[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldInput = Ember.$('.flexberry-textbox input', $component);\n\n    // Check <input>'s value & binded value for initial emptyness.\n    assert.strictEqual(Ember.$.trim($fieldInput.val()), '', 'Component\\'s inner <input>\\'s value is equals to \\'\\'');\n    assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to \\'value\\' is equals to null');\n\n    // Change <input>'s value (imitate situation when user typed something into component's <input>)\n    // & check them again ('change' event is needed to force bindings work).\n    var newValue = 'Some text typed into field\\'s inner input';\n    $fieldInput.val(newValue);\n    $fieldInput.change();\n\n    assert.strictEqual(Ember.$.trim($fieldInput.val()), newValue, 'Component\\'s inner <input>\\'s value is equals to \\'' + newValue + '\\'');\n    assert.strictEqual(this.get('value'), newValue, 'Component\\'s property binded to \\'value\\' is equals to \\'' + newValue + '\\'');\n  });\n\n  (0, _emberQunit.test)('attribute maxlength rendered in html', function (assert) {\n    assert.expect(1);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"w2woXa5q\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"maxlength\\\"],[5]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldInput = Ember.$('.flexberry-textbox input', $component);\n\n    // Check <input>'s maxlength attribute.\n    assert.strictEqual($fieldInput.attr('maxlength'), '5', 'Component\\'s inner <input>\\'s attribute maxlength rendered');\n  });\n\n  (0, _emberQunit.test)('changes in property binded to \\'value\\' causes changes in inner <input>', function (assert) {\n    assert.expect(4);\n\n    // Set <input>'s value' & render component.\n    this.set('value', null);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"VmTtyhIv\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"value\\\"],[[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldInput = Ember.$('.flexberry-textbox input', $component);\n\n    // Check <input>'s value & binded value for initial emptyness.\n    assert.strictEqual(Ember.$.trim($fieldInput.val()), '', 'Component\\'s inner <input>\\'s value is equals to \\'\\'');\n    assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to \\'value\\' is equals to null');\n\n    // Change property binded to 'value' & check them again.\n    var newValue = 'Some text typed into field\\'s inner input';\n    this.set('value', newValue);\n\n    assert.strictEqual(Ember.$.trim($fieldInput.val()), newValue, 'Component\\'s inner <input>\\'s value is equals to \\'' + newValue + '\\'');\n    assert.strictEqual(this.get('value'), newValue, 'Component\\'s property binded to \\'value\\' is equals to \\'' + newValue + '\\'');\n  });\n});","define('dummy/tests/integration/components/flexberry-groupedit-test', ['ember-test-helpers/wait', 'dummy/tests/helpers/start-app', 'ember-qunit', 'ember-flexberry/services/user-settings', 'dummy/models/components-examples/flexberry-groupedit/shared/aggregator', 'dummy/models/ember-flexberry-dummy-suggestion', 'ember-flexberry/components/flexberry-base-component'], function (_wait, _startApp, _emberQunit, _userSettings, _aggregator, _emberFlexberryDummySuggestion, _flexberryBaseComponent) {\n  'use strict';\n\n  var App = void 0;\n\n  (0, _emberQunit.moduleForComponent)('flexberry-groupedit', 'Integration | Component | Flexberry groupedit', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      App = (0, _startApp.default)();\n      Ember.Component.reopen({\n        i18n: Ember.inject.service('i18n'),\n        userSettingsService: Ember.inject.service('user-settings')\n      });\n\n      _userSettings.default.reopen({\n        isUserSettingsServiceEnabled: false\n      });\n\n      // Just take it and turn it off...\n      App.__container__.lookup('service:log').set('enabled', false);\n    },\n\n    afterEach: function afterEach() {\n      // Restore base component's reference to current controller to its initial state.\n      _flexberryBaseComponent.default.prototype.currentController = null;\n\n      Ember.run(App, 'destroy');\n    }\n  });\n\n  (0, _emberQunit.test)('ember-grupedit element by default test', function (assert) {\n    var _this = this;\n\n    assert.expect(9);\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n\n      _this.set('proj', _aggregator.default.projections.get('AggregatorE'));\n      _this.set('model', model);\n      _this.set('componentName', testComponentName);\n      _this.set('searchForContentChange', true);\n      _this.render(Ember.HTMLBars.template({\n        \"id\": \"ieiQ6Lvy\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      // Add record.\n      var $component = _this.$().children();\n      var $componentGroupEditToolbar = $component.children('.groupedit-toolbar');\n      var $componentButtons = $componentGroupEditToolbar.children('.ui.button');\n      var $componentButtonAdd = Ember.$($componentButtons[0]);\n\n      Ember.run(function () {\n        $componentButtonAdd.click();\n      });\n\n      andThen(function () {\n        var $componentObjectListViewFirstCellAsterisk = Ember.$('.asterisk', $component);\n\n        // Check object-list-view <i>.\n        assert.strictEqual($componentObjectListViewFirstCellAsterisk.length === 1, true, 'Component has inner object-list-view-operations blocks');\n        assert.strictEqual($componentObjectListViewFirstCellAsterisk.prop('tagName'), 'I', 'Component\\'s inner component block is a <i>');\n        assert.strictEqual($componentObjectListViewFirstCellAsterisk.hasClass('asterisk'), true, 'Component\\'s inner object-list-view has \\'asterisk\\' css-class');\n        assert.strictEqual($componentObjectListViewFirstCellAsterisk.hasClass('small'), true, 'Component\\'s inner object-list-view has \\'small\\' css-class');\n        assert.strictEqual($componentObjectListViewFirstCellAsterisk.hasClass('red'), true, 'Component\\'s inner oobject-list-view has \\'red\\' css-class');\n        assert.strictEqual($componentObjectListViewFirstCellAsterisk.hasClass('icon'), true, 'Component\\'s inner object-list-view has \\'icon\\' css-class');\n\n        var $componentObjectListViewFirstCell = Ember.$('.object-list-view-helper-column', $component);\n        var $flexberryCheckbox = Ember.$('.flexberry-checkbox', $componentObjectListViewFirstCell);\n\n        assert.ok($flexberryCheckbox, 'Component has flexberry-checkbox in first cell blocks');\n\n        var $minusButton = Ember.$('.minus', $componentObjectListViewFirstCell);\n\n        assert.strictEqual($minusButton.length === 0, true, 'Component hasn\\'t delete button in first cell');\n\n        var $editMenuButton = Ember.$('.button.right', $component);\n\n        assert.strictEqual($editMenuButton.length === 0, true, 'Component hasn\\'t edit menu in last cell');\n      });\n    });\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    var _this2 = this;\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n\n      _this2.set('proj', _aggregator.default.projections.get('AggregatorE'));\n      _this2.set('model', model);\n      _this2.render(Ember.HTMLBars.template({\n        \"id\": \"wU3hDn7c\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"modelProjection\\\",\\\"content\\\",\\\"componentName\\\"],[[22,[\\\"proj\\\"]],[22,[\\\"model\\\",\\\"details\\\"]],\\\"my-group-edit\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.ok(true);\n    });\n  });\n\n  (0, _emberQunit.test)('it properly rerenders', function (assert) {\n    var _this3 = this;\n\n    assert.expect(5);\n    var done = assert.async();\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n\n      _this3.set('proj', _aggregator.default.projections.get('AggregatorE'));\n      _this3.set('model', model);\n      _this3.set('componentName', testComponentName);\n      _this3.set('searchForContentChange', true);\n      _this3.render(Ember.HTMLBars.template({\n        \"id\": \"ieiQ6Lvy\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(_this3.$('.object-list-view').find('tr').length, 2);\n\n      // Add record.\n      var detailModel = _this3.get('model.details');\n      detailModel.addObject(store.createRecord('components-examples/flexberry-groupedit/shared/detail', { text: '1' }));\n      detailModel.addObject(store.createRecord('components-examples/flexberry-groupedit/shared/detail', { text: '2' }));\n\n      (0, _wait.default)().then(function () {\n        assert.equal(_this3.$('.object-list-view').find('tr').length, 3);\n\n        // Add record.\n        detailModel.addObject(store.createRecord('components-examples/flexberry-groupedit/shared/detail', { text: '3' }));\n        (0, _wait.default)().then(function () {\n          assert.equal(_this3.$('.object-list-view').find('tr').length, 4);\n\n          // Delete record.\n          _this3.get('model.details').get('firstObject').deleteRecord();\n          (0, _wait.default)().then(function () {\n            assert.equal(_this3.$('.object-list-view').find('tr').length, 3);\n\n            // Disable search for changes flag and add record.\n            _this3.set('searchForContentChange', false);\n            detailModel.addObject(store.createRecord('components-examples/flexberry-groupedit/shared/detail', { text: '4' }));\n            (0, _wait.default)().then(function () {\n              assert.equal(_this3.$('.object-list-view').find('tr').length, 3);\n              done();\n            });\n          });\n        });\n      });\n    });\n  });\n\n  (0, _emberQunit.test)('it properly rerenders by default', function (assert) {\n    var _this4 = this;\n\n    assert.expect(72);\n\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n\n      _this4.set('proj', _aggregator.default.projections.get('AggregatorE'));\n      _this4.set('model', model);\n      _this4.set('componentName', testComponentName);\n      _this4.set('searchForContentChange', true);\n      _this4.render(Ember.HTMLBars.template({\n        \"id\": \"ieiQ6Lvy\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(_this4.$('.object-list-view').find('tr').length, 2);\n\n      var $detailsAtributes = _this4.get('proj.attributes.details.attributes');\n      var $detailsAtributesArray = Object.keys($detailsAtributes);\n\n      var $component = _this4.$().children();\n      var $componentGroupEditToolbar = $component.children('.groupedit-toolbar');\n\n      // Check groupedit-toolbar <div>.\n      assert.strictEqual($componentGroupEditToolbar.length === 1, true, 'Component has inner groupedit-toolbar block');\n      assert.strictEqual($componentGroupEditToolbar.prop('tagName'), 'DIV', 'Component\\'s inner component block is a <div>');\n      assert.strictEqual($componentGroupEditToolbar.hasClass('ember-view'), true, 'Component\\'s inner groupedit-toolbar block has \\'ember-view\\' css-class');\n      assert.strictEqual($componentGroupEditToolbar.hasClass('groupedit-toolbar'), true, 'Component inner has \\'groupedit-toolbar\\' css-class');\n\n      var $componentButtons = $componentGroupEditToolbar.children('.ui.button');\n\n      // Check button count.\n      assert.strictEqual($componentButtons.length === 3, true, 'Component has inner two button blocks');\n\n      var $componentButtonAdd = Ember.$($componentButtons[0]);\n\n      // Check buttonAdd <button>.\n      assert.strictEqual($componentButtonAdd.length === 1, true, 'Component has inner button block');\n      assert.strictEqual($componentButtonAdd.prop('tagName'), 'BUTTON', 'Component\\'s inner groupedit block is a <button>');\n      assert.strictEqual($componentButtonAdd.hasClass('ui'), true, 'Component\\'s inner groupedit block has \\'ui\\' css-class');\n      assert.strictEqual($componentButtonAdd.hasClass('button'), true, 'Component\\'s inner groupedit block has \\'button\\' css-class');\n\n      var $componentButtonAddIcon = $componentButtonAdd.children('i');\n\n      // Check buttonAddIcon <i>.\n      assert.strictEqual($componentButtonAddIcon.length === 1, true, 'Component has inner button block');\n      assert.strictEqual($componentButtonAddIcon.prop('tagName'), 'I', 'Component\\'s inner groupedit block is a <i>');\n      assert.strictEqual($componentButtonAddIcon.hasClass('plus'), true, 'Component\\'s inner groupedit block has \\'plus\\' css-class');\n      assert.strictEqual($componentButtonAddIcon.hasClass('icon'), true, 'Component\\'s inner groupedit block has \\'icon\\' css-class');\n\n      var $componentButtonRemove = Ember.$($componentButtons[1]);\n\n      // Check buttonRemove <button>.\n      assert.strictEqual($componentButtonRemove.length === 1, true, 'Component has inner button block');\n      assert.strictEqual($componentButtonRemove.prop('tagName'), 'BUTTON', 'Component\\'s inner groupedit block is a <button>');\n      assert.strictEqual($componentButtonRemove.hasClass('ui'), true, 'Component\\'s inner groupedit block has \\'ui\\' css-class');\n      assert.strictEqual($componentButtonRemove.hasClass('button'), true, 'Component\\'s inner groupedit block has \\'button\\' css-class');\n      assert.strictEqual($componentButtonRemove.hasClass('disabled'), true, 'Component\\'s inner groupedit block has \\'disabled\\' css-class');\n\n      var $componentButtonDefauldSetting = Ember.$($componentButtons[2]);\n\n      // Check buttonRemove <button>.\n      assert.strictEqual($componentButtonDefauldSetting.length === 1, true, 'Component has inner button block');\n      assert.strictEqual($componentButtonDefauldSetting.prop('tagName'), 'BUTTON', 'Component\\'s inner groupedit block is a <button>');\n      assert.strictEqual($componentButtonDefauldSetting.hasClass('ui'), true, 'Component\\'s inner groupedit block has \\'ui\\' css-class');\n      assert.strictEqual($componentButtonDefauldSetting.hasClass('button'), true, 'Component\\'s inner groupedit block has \\'button\\' css-class');\n\n      var $componentButtonRemoveIcon = $componentButtonRemove.children('i');\n\n      // Check componentButtonRemove <i>.\n      assert.strictEqual($componentButtonRemoveIcon.length === 1, true, 'Component has inner button block');\n      assert.strictEqual($componentButtonRemoveIcon.prop('tagName'), 'I', 'Component\\'s inner groupedit block is a <i>');\n      assert.strictEqual($componentButtonRemoveIcon.hasClass('minus'), true, 'Component\\'s inner groupedit block has \\'minus\\' css-class');\n      assert.strictEqual($componentButtonRemoveIcon.hasClass('icon'), true, 'Component\\'s inner groupedit block has \\'icon\\' css-class');\n\n      var $componentListViewContainer = $component.children('.object-list-view-container');\n\n      // Check list-view-container <div>.\n      assert.strictEqual($componentListViewContainer.length === 1, true, 'Component has inner list-view-container block');\n      assert.strictEqual($componentListViewContainer.prop('tagName'), 'DIV', 'Component\\'s inner component block is a <div>');\n      assert.strictEqual($componentListViewContainer.hasClass('ember-view'), true, 'Component\\'s inner list-view-container block has \\'ember-view\\' css-class');\n      assert.strictEqual($componentListViewContainer.hasClass('object-list-view-container'), true, 'Component has \\'object-list-view-container\\' css-class');\n\n      var $componentJCLRgrips = $componentListViewContainer.children('.JCLRgrips');\n\n      // Check JCLRgrips <div>.\n      assert.strictEqual($componentJCLRgrips.length === 1, true, 'Component has inner JCLRgrips blocks');\n      assert.strictEqual($componentJCLRgrips.prop('tagName'), 'DIV', 'Component\\'s inner component block is a <div>');\n      assert.strictEqual($componentJCLRgrips.hasClass('JCLRgrips'), true, 'Component\\'s inner list-view-container block has \\'JCLRgrios\\' css-class');\n\n      var $componentJCLRgrip = $componentJCLRgrips.children('.JCLRgrip');\n\n      // Check JCLRgrip <div>.\n      assert.strictEqual($componentJCLRgrip.length === 7, true, 'Component has inner JCLRgrip blocks');\n\n      var $componentJCLRgripFirst = Ember.$($componentJCLRgrip[0]);\n\n      // Check first JCLRgrip <div>.\n      assert.strictEqual($componentJCLRgripFirst.prop('tagName'), 'DIV', 'Component\\'s inner component block is a <div>');\n      assert.strictEqual($componentJCLRgripFirst.hasClass('JCLRgrip'), true, 'Component\\'s inner list-view-container block has \\'JCLRgrios\\' css-class');\n\n      var $componentJCLRgripLast = Ember.$($componentJCLRgrip[6]);\n\n      // Check last JCLRgrip <div>.\n      assert.strictEqual($componentJCLRgripLast.length === 1, true, 'Component has inner JCLRgrips blocks');\n      assert.strictEqual($componentJCLRgripLast.prop('tagName'), 'DIV', 'Component\\'s inner component block is a <div>');\n      assert.strictEqual($componentJCLRgripLast.hasClass('JCLRgrip'), true, 'Component\\'s inner list-view-container block has \\'JCLRgrios\\' css-class');\n      assert.strictEqual($componentJCLRgripLast.hasClass('JCLRLastGrip'), true, 'Component\\'s inner list-view-container block has \\'JCLRLastGrip\\' css-class');\n\n      var $componentObjectListView = $componentListViewContainer.children('.object-list-view');\n\n      // Check object-list-view <div>.\n      assert.strictEqual($componentObjectListView.length === 1, true, 'Component has inner object-list-view blocks');\n      assert.strictEqual($componentObjectListView.prop('tagName'), 'TABLE', 'Component\\'s inner component block is a <table>');\n      assert.strictEqual($componentObjectListView.hasClass('object-list-view'), true, 'Component has \\'object-list-view\\' css-class');\n      assert.strictEqual($componentObjectListView.hasClass('ui'), true, 'Component\\'s inner object-list-view block has \\'ui\\' css-class');\n      assert.strictEqual($componentObjectListView.hasClass('unstackable'), true, 'Component\\'s inner object-list-view block has \\'unstackable\\' css-class');\n      assert.strictEqual($componentObjectListView.hasClass('celled'), true, 'Component\\'s inner object-list-view block has \\'celled\\' css-class');\n      assert.strictEqual($componentObjectListView.hasClass('striped'), false, 'Component\\'s inner object-list-view block has \\'striped\\' css-class');\n      assert.strictEqual($componentObjectListView.hasClass('table'), true, 'Component\\'s inner object-list-view block has \\'table\\' css-class');\n      assert.strictEqual($componentObjectListView.hasClass('fixed'), true, 'Component\\'s inner object-list-view block has \\'fixed\\' css-class');\n      assert.strictEqual($componentObjectListView.hasClass('JColResizer'), true, 'Component\\'s inner object-list-view block has \\'JColResizer\\' css-class');\n      assert.strictEqual($componentObjectListView.hasClass('rowClickable'), false, 'Component\\'s inner object-list-view block has \\'striped\\' css-class');\n\n      var $componentObjectListViewThead = $componentObjectListView.children('thead');\n      var $componentObjectListViewTr = $componentObjectListViewThead.children('tr');\n      var $componentObjectListViewThFirstCell = $componentObjectListViewTr.children('.object-list-view-operations');\n\n      // Check object-list-view <th>.\n      assert.strictEqual($componentObjectListViewThFirstCell.length === 1, true, 'Component has inner object-list-view-operations blocks');\n      assert.strictEqual($componentObjectListViewThFirstCell.prop('tagName'), 'TH', 'Component\\'s inner component block is a <th>');\n      assert.strictEqual($componentObjectListViewThFirstCell.hasClass('object-list-view-operations'), true, 'Component has \\'object-list-view-operations\\' css-class');\n      assert.strictEqual($componentObjectListViewThFirstCell.hasClass('collapsing'), true, 'Component has \\'collapsing\\' css-class');\n\n      var $componentObjectListViewThs = $componentObjectListViewTr.children('.dt-head-left');\n\n      // Check object-list-view <th>.\n      assert.strictEqual($componentObjectListViewThs.length === 6, true, 'Component has inner object-list-view-operations blocks');\n\n      var $componentObjectListViewTh = Ember.$($componentObjectListViewThs[0]);\n\n      // Check object-list-view <th>.\n      assert.strictEqual($componentObjectListViewTh.length === 1, true, 'Component has inner object-list-view-operations blocks');\n      assert.strictEqual($componentObjectListViewTh.prop('tagName'), 'TH', 'Component\\'s inner component block is a <th>');\n      assert.strictEqual($componentObjectListViewTh.hasClass('dt-head-left'), true, 'Component has \\'object-list-view-operations\\' css-class');\n      assert.strictEqual($componentObjectListViewTh.hasClass('me'), true, 'Component\\'s inner object-list-view-operations has \\'collapsing\\' css-class');\n      assert.strictEqual($componentObjectListViewTh.hasClass('class'), true, 'Component\\'s inner object-list-view-operations has \\'collapsing\\' css-class');\n\n      for (var index = 0; index < 6; ++index) {\n        assert.strictEqual($componentObjectListViewThs[index].innerText.trim().toLowerCase(), $detailsAtributesArray[index], 'title ok');\n      }\n\n      var $componentObjectListViewThDiv = $componentObjectListViewTh.children('div');\n      var $componentObjectListViewThDivSpan = $componentObjectListViewThDiv.children('span');\n\n      // Check object-list-view <span>.\n      assert.strictEqual($componentObjectListViewThDivSpan.length === 1, true, 'Component has inner <span> blocks');\n\n      var $componentObjectListViewBody = $componentObjectListView.children('tbody');\n      $componentObjectListViewTr = $componentObjectListViewBody.children('tr');\n      var $componentObjectListViewTd = $componentObjectListViewTr.children('td');\n      var $componentObjectListViewTdInner = $componentObjectListViewTd[0];\n\n      // Check object-list-view <td>.\n      assert.strictEqual($componentObjectListViewTd.length === 1, true, 'Component has inner object-list-view-operations blocks');\n      assert.strictEqual($componentObjectListViewTd.prop('tagName'), 'TD', 'Component\\'s inner component block is a <th>');\n      assert.strictEqual($componentObjectListViewTdInner.innerText, 'Нет данных', 'Component\\'s inner component block is a <th>');\n    });\n  });\n\n  (0, _emberQunit.test)('ember-grupedit placeholder test', function (assert) {\n    var _this5 = this;\n\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n\n      _this5.set('proj', _aggregator.default.projections.get('AggregatorE'));\n      _this5.set('model', model);\n      _this5.set('componentName', testComponentName);\n\n      var tempText = 'Temp text.';\n\n      _this5.set('placeholder', tempText);\n      _this5.render(Ember.HTMLBars.template({\n        \"id\": \"4scvnOp5\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"placeholder\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"placeholder\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      var $componentObjectListView = Ember.$('.object-list-view');\n      var $componentObjectListViewBody = $componentObjectListView.children('tbody');\n\n      assert.strictEqual($componentObjectListViewBody.text().trim(), tempText, 'Component has placeholder: ' + tempText);\n    });\n  });\n\n  (0, _emberQunit.test)('ember-grupedit striped test', function (assert) {\n    var _this6 = this;\n\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n\n      _this6.set('proj', _aggregator.default.projections.get('AggregatorE'));\n      _this6.set('model', model);\n      _this6.set('componentName', testComponentName);\n      _this6.set('searchForContentChange', true);\n      _this6.render(Ember.HTMLBars.template({\n        \"id\": \"0J767blZ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\",\\\"tableStriped\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]],false]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      var $componentObjectListView = Ember.$('.object-list-view');\n\n      // Check object-list-view <div>.\n      assert.strictEqual($componentObjectListView.hasClass('striped'), false, 'Component\\'s inner object-list-view block has \\'striped\\' css-class');\n    });\n  });\n\n  (0, _emberQunit.test)('ember-grupedit off defaultSettingsButton, createNewButton and deleteButton test', function (assert) {\n    var _this7 = this;\n\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n\n      _this7.set('proj', _aggregator.default.projections.get('AggregatorE'));\n      _this7.set('model', model);\n      _this7.set('componentName', testComponentName);\n      _this7.set('searchForContentChange', true);\n      _this7.render(Ember.HTMLBars.template({\n        \"id\": \"bo7EKbr+\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\",\\\"createNewButton\\\",\\\"deleteButton\\\",\\\"showCheckBoxInRow\\\",\\\"showAsteriskInRow\\\",\\\"defaultSettingsButton\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]],false,false,false,false,false]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      var $component = _this7.$().children();\n      var $componentButtons = Ember.$('.ui.button', $component);\n\n      assert.strictEqual($componentButtons.length === 0, true, 'Component hasn\\'t inner two button blocks');\n    });\n  });\n\n  (0, _emberQunit.test)('ember-grupedit allowColumnResize test', function (assert) {\n    var _this8 = this;\n\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n\n      _this8.set('proj', _aggregator.default.projections.get('AggregatorE'));\n      _this8.set('model', model);\n      _this8.set('componentName', testComponentName);\n      _this8.set('searchForContentChange', true);\n      _this8.render(Ember.HTMLBars.template({\n        \"id\": \"JcPxk/B6\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\",\\\"showEditMenuItemInRow\\\",\\\"allowColumnResize\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]],true,false]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      var $componentJCLRgrips = Ember.$(Ember.$('.JCLRgrips')[0]);\n\n      // Check JCLRgrips <div>.\n      assert.strictEqual($componentJCLRgrips.length === 0, true, 'Component hasn\\'t inner JCLRgrips blocks');\n\n      var $componentObjectListView = Ember.$(Ember.$('.object-list-view')[0]);\n\n      // Check object-list-view <div>.\n      assert.strictEqual($componentObjectListView.hasClass('JColResizer'), false, 'Component\\'s inner object-list-view block hasn\\'t \\'JColResizer\\' css-class');\n    });\n  });\n\n  (0, _emberQunit.test)('ember-grupedit showAsteriskInRow test', function (assert) {\n    var _this9 = this;\n\n    assert.expect(1);\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n\n      _this9.set('proj', _aggregator.default.projections.get('AggregatorE'));\n      _this9.set('model', model);\n      _this9.set('componentName', testComponentName);\n      _this9.set('searchForContentChange', true);\n      _this9.render(Ember.HTMLBars.template({\n        \"id\": \"Z9XTQZNp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\",\\\"showAsteriskInRow\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]],false]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      // Add record.\n      var $componentButtonAdd = Ember.$(Ember.$('.ui.button')[0]);\n\n      Ember.run(function () {\n        $componentButtonAdd.click();\n      });\n\n      andThen(function () {\n        var $componentObjectListViewFirstCell = Ember.$('.asterisk');\n\n        // Check object-list-view <i>.\n        assert.strictEqual($componentObjectListViewFirstCell.length === 0, true, 'Component has small red asterisk blocks');\n      });\n    });\n  });\n\n  (0, _emberQunit.test)('ember-grupedit showCheckBoxInRow test', function (assert) {\n    var _this10 = this;\n\n    assert.expect(2);\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n\n      _this10.set('proj', _aggregator.default.projections.get('AggregatorE'));\n      _this10.set('model', model);\n      _this10.set('componentName', testComponentName);\n      _this10.set('searchForContentChange', true);\n      _this10.render(Ember.HTMLBars.template({\n        \"id\": \"KKlXRzM7\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\",\\\"showCheckBoxInRow\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]],false]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      // Add record.\n      var $componentButtonAdd = Ember.$(Ember.$('.ui.button')[0]);\n\n      Ember.run(function () {\n        $componentButtonAdd.click();\n      });\n\n      andThen(function () {\n        var $flexberryCheckbox = Ember.$('.flexberry-checkbox');\n\n        assert.ok($flexberryCheckbox, false, 'Component hasn\\'t flexberry-checkbox in first cell');\n\n        var $componentObjectListViewEditMenu = Ember.$('.button.right.pointing');\n\n        assert.strictEqual($componentObjectListViewEditMenu.length === 0, true, 'Component hasn\\'t edit menu in last cell');\n      });\n    });\n  });\n\n  (0, _emberQunit.test)('ember-grupedit showDeleteButtonInRow test', function (assert) {\n    var _this11 = this;\n\n    assert.expect(1);\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n\n      _this11.set('proj', _aggregator.default.projections.get('AggregatorE'));\n      _this11.set('model', model);\n      _this11.set('componentName', testComponentName);\n      _this11.set('searchForContentChange', true);\n      _this11.render(Ember.HTMLBars.template({\n        \"id\": \"Y9WWHMdO\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\",\\\"showDeleteButtonInRow\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]],true]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      var $componentButtonAdd = Ember.$(Ember.$('.ui.button')[0]);\n\n      Ember.run(function () {\n        $componentButtonAdd.click();\n      });\n\n      andThen(function () {\n        var $componentObjectListViewFirstCell = Ember.$('.object-list-view-helper-column');\n        var $minusButton = Ember.$('.minus', $componentObjectListViewFirstCell);\n\n        assert.strictEqual($minusButton.length === 1, true, 'Component has delete button in first cell');\n      });\n    });\n  });\n\n  (0, _emberQunit.test)('ember-grupedit showEditMenuItemInRow test', function (assert) {\n    var _this12 = this;\n\n    assert.expect(6);\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n\n      _this12.set('proj', _aggregator.default.projections.get('AggregatorE'));\n      _this12.set('model', model);\n      _this12.set('componentName', testComponentName);\n      _this12.set('searchForContentChange', true);\n      _this12.render(Ember.HTMLBars.template({\n        \"id\": \"seAsRGdp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\",\\\"showEditMenuItemInRow\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]],true]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      var $component = _this12.$().children();\n      var $componentButtonAdd = Ember.$(Ember.$('.ui.button')[0]);\n\n      Ember.run(function () {\n        $componentButtonAdd.click();\n      });\n\n      andThen(function () {\n        var $editMenuButton = Ember.$('.button.right', $component);\n        var $editMenuItem = Ember.$('.item', $editMenuButton);\n\n        assert.strictEqual($editMenuItem.length === 1, true, 'Component has edit menu item in last cell');\n\n        var $editMenuItemIcon = $editMenuItem.children('.edit');\n\n        assert.strictEqual($editMenuItemIcon.length === 1, true, 'Component has only edit menu item in last cell');\n        assert.strictEqual($editMenuItemIcon.prop('tagName'), 'I', 'Component\\'s inner component block is a <i>');\n        assert.strictEqual($editMenuItemIcon.hasClass('edit'), true, 'Component\\'s inner object-list-view has \\'edit\\' css-class');\n        assert.strictEqual($editMenuItemIcon.hasClass('icon'), true, 'Component\\'s inner object-list-view has \\'icon\\' css-class');\n\n        var $editMenuItemSpan = $editMenuItem.children('span');\n        assert.strictEqual($editMenuItemSpan.text().trim(), 'Редактировать запись', 'Component has edit menu item in last cell');\n      });\n    });\n  });\n\n  (0, _emberQunit.test)('ember-grupedit showDeleteMenuItemInRow test', function (assert) {\n    var _this13 = this;\n\n    assert.expect(6);\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n\n      _this13.set('proj', _aggregator.default.projections.get('AggregatorE'));\n      _this13.set('model', model);\n      _this13.set('componentName', testComponentName);\n      _this13.set('searchForContentChange', true);\n      _this13.render(Ember.HTMLBars.template({\n        \"id\": \"GHq3vlJI\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\",\\\"showDeleteMenuItemInRow\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]],true]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      var $component = _this13.$().children();\n      var $componentButtonAdd = Ember.$(Ember.$('.ui.button')[0]);\n\n      Ember.run(function () {\n        $componentButtonAdd.click();\n      });\n\n      andThen(function () {\n        var $editMenuButton = Ember.$('.button.right', $component);\n        var $editMenuItem = Ember.$('.item', $editMenuButton);\n\n        assert.strictEqual($editMenuItem.length === 1, true, 'Component has delete menu item in last cell');\n\n        var $editMenuItemIcon = $editMenuItem.children('.trash');\n\n        assert.strictEqual($editMenuItemIcon.length === 1, true, 'Component has only edit menu item in last cell');\n        assert.strictEqual($editMenuItemIcon.prop('tagName'), 'I', 'Component\\'s inner component block is a <i>');\n        assert.strictEqual($editMenuItemIcon.hasClass('trash'), true, 'Component\\'s inner object-list-view has \\'edit\\' css-class');\n        assert.strictEqual($editMenuItemIcon.hasClass('icon'), true, 'Component\\'s inner object-list-view has \\'icon\\' css-class');\n\n        var $editMenuItemSpan = $editMenuItem.children('span');\n        assert.strictEqual($editMenuItemSpan.text().trim(), 'Удалить запись', 'Component has delete menu item in last cell');\n      });\n    });\n  });\n\n  (0, _emberQunit.test)('ember-grupedit showEditMenuItemInRow and showDeleteMenuItemInRow test', function (assert) {\n    var _this14 = this;\n\n    assert.expect(10);\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n\n      _this14.set('proj', _aggregator.default.projections.get('AggregatorE'));\n      _this14.set('model', model);\n      _this14.set('componentName', testComponentName);\n      _this14.set('searchForContentChange', true);\n      _this14.render(Ember.HTMLBars.template({\n        \"id\": \"X/KUQzm3\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\",\\\"showEditMenuItemInRow\\\",\\\"showDeleteMenuItemInRow\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]],true,true]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      var $component = _this14.$().children();\n      var $componentButtonAdd = Ember.$(Ember.$('.ui.button')[0]);\n\n      Ember.run(function () {\n        $componentButtonAdd.click();\n      });\n\n      andThen(function () {\n        var $editMenuButton = Ember.$('.button.right', $component);\n        var $editMenuItem = Ember.$('.item', $editMenuButton);\n\n        assert.strictEqual($editMenuItem.length === 2, true, 'Component has edit menu and delete menu item in last cell');\n\n        var $editMenuItemIcon = $editMenuItem.children('.edit');\n\n        assert.strictEqual($editMenuItemIcon.length === 1, true, 'Component has edit menu item in last cell');\n        assert.strictEqual($editMenuItemIcon.prop('tagName'), 'I', 'Component\\'s inner component block is a <i>');\n        assert.strictEqual($editMenuItemIcon.hasClass('edit'), true, 'Component\\'s inner object-list-view has \\'edit\\' css-class');\n        assert.strictEqual($editMenuItemIcon.hasClass('icon'), true, 'Component\\'s inner object-list-view has \\'icon\\' css-class');\n\n        $editMenuItemIcon = $editMenuItem.children('.trash');\n\n        assert.strictEqual($editMenuItemIcon.length === 1, true, 'Component has edit menu item in last cell');\n        assert.strictEqual($editMenuItemIcon.prop('tagName'), 'I', 'Component\\'s inner component block is a <i>');\n        assert.strictEqual($editMenuItemIcon.hasClass('trash'), true, 'Component\\'s inner object-list-view has \\'edit\\' css-class');\n        assert.strictEqual($editMenuItemIcon.hasClass('icon'), true, 'Component\\'s inner object-list-view has \\'icon\\' css-class');\n\n        var $editMenuItemSpan = $editMenuItem.children('span');\n        assert.strictEqual($editMenuItemSpan.text().trim(), 'Редактировать записьУдалить запись', 'Component has edit menu and delete menu item in last cell');\n      });\n    });\n  });\n\n  (0, _emberQunit.test)('ember-grupedit rowClickable test', function (assert) {\n    var _this15 = this;\n\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n\n      _this15.set('proj', _aggregator.default.projections.get('AggregatorE'));\n      _this15.set('model', model);\n      _this15.set('componentName', testComponentName);\n      _this15.set('searchForContentChange', true);\n      _this15.render(Ember.HTMLBars.template({\n        \"id\": \"G/bwSCG0\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"searchForContentChange\\\",\\\"rowClickable\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"searchForContentChange\\\"]],true]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      var $componentObjectListView = Ember.$('.object-list-view');\n\n      // Check object-list-view <div>.\n      assert.strictEqual($componentObjectListView.hasClass('selectable'), true, 'Component\\'s inner object-list-view block has \\'selectable\\' css-class');\n    });\n  });\n\n  (0, _emberQunit.test)('ember-grupedit buttonClass test', function (assert) {\n    var _this16 = this;\n\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n      var tempButtonClass = 'temp button class';\n\n      _this16.set('proj', _aggregator.default.projections.get('AggregatorE'));\n      _this16.set('model', model);\n      _this16.set('componentName', testComponentName);\n      _this16.set('buttonClass', tempButtonClass);\n      _this16.render(Ember.HTMLBars.template({\n        \"id\": \"htLUA7Ap\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"rowClickable\\\",\\\"buttonClass\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],true,[22,[\\\"buttonClass\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      var $componentButtonAdd = Ember.$(Ember.$('.ui.button')[0]);\n\n      assert.strictEqual($componentButtonAdd.hasClass(tempButtonClass), true, 'Button has class ' + tempButtonClass);\n    });\n  });\n\n  (0, _emberQunit.test)('ember-grupedit customTableClass test', function (assert) {\n    var _this17 = this;\n\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n      var myCustomTableClass = 'tempcustomTableClass';\n\n      _this17.set('proj', _aggregator.default.projections.get('AggregatorE'));\n      _this17.set('model', model);\n      _this17.set('componentName', testComponentName);\n      _this17.set('customTableClass', myCustomTableClass);\n      _this17.render(Ember.HTMLBars.template({\n        \"id\": \"i9Orxd/y\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"rowClickable\\\",\\\"customTableClass\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],true,[22,[\\\"customTableClass\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      var $componentObjectListView = Ember.$('.object-list-view');\n\n      assert.strictEqual($componentObjectListView.hasClass(myCustomTableClass), true, 'Table has class ' + myCustomTableClass);\n    });\n  });\n\n  (0, _emberQunit.test)('ember-grupedit orderable test', function (assert) {\n    var _this18 = this;\n\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n\n      _this18.set('proj', _aggregator.default.projections.get('AggregatorE'));\n      _this18.set('model', model);\n      _this18.set('componentName', testComponentName);\n      _this18.set('orderable', true);\n      _this18.render(Ember.HTMLBars.template({\n        \"id\": \"HoxVG+Rh\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"orderable\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"orderable\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      var $componentObjectListView = Ember.$('.object-list-view');\n      var $componentObjectListViewTh = $componentObjectListView.children('thead').children('tr').children('th');\n      var $componentOlvFirstHead = Ember.$($componentObjectListViewTh[1]);\n\n      Ember.run(function () {\n        $componentOlvFirstHead.click();\n      });\n\n      var $componentOlvFirstDiv = $componentOlvFirstHead.children('div');\n      var $orderIcon = $componentOlvFirstDiv.children('div');\n\n      assert.strictEqual($orderIcon.length === 1, true, 'Table has order');\n    });\n  });\n\n  (0, _emberQunit.test)('ember-grupedit menuInRowAdditionalItems without standart element test', function (assert) {\n    var _this19 = this;\n\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n      var tempMenuInRowAdditionalItems = [{\n        icon: 'remove icon',\n        title: 'Temp menu item',\n        actionName: 'tempAction'\n      }];\n\n      _this19.set('proj', _aggregator.default.projections.get('AggregatorE'));\n      _this19.set('model', model);\n      _this19.set('componentName', testComponentName);\n      _this19.set('menuInRowAdditionalItems', tempMenuInRowAdditionalItems);\n      _this19.render(Ember.HTMLBars.template({\n        \"id\": \"M3K8nyz0\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"menuInRowAdditionalItems\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"menuInRowAdditionalItems\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      var $addButton = Ember.$(Ember.$('.ui.button')[0]);\n\n      Ember.run(function () {\n        $addButton.click();\n      });\n\n      var componentOLVMenu = Ember.$('.button.right');\n      var componentOLVMenuItem = componentOLVMenu.children('div').children('.item');\n\n      assert.strictEqual(componentOLVMenuItem.length === 1, true, 'Component OLVMenuItem has only adding item');\n      assert.strictEqual(componentOLVMenuItem.text().trim() === 'Temp menu item', true, 'Component OLVMenuItem text is \\'Temp menu item\\'');\n\n      var componentOLVMenuItemIcon = componentOLVMenuItem.children('.icon');\n\n      assert.strictEqual(componentOLVMenuItemIcon.hasClass('icon'), true, 'Component OLVMenuItemIcon has class icon');\n      assert.strictEqual(componentOLVMenuItemIcon.hasClass('remove'), true, 'Component OLVMenuItemIcon has class remove');\n    });\n  });\n\n  (0, _emberQunit.test)('ember-grupedit menuInRowAdditionalItems with standart element test', function (assert) {\n    var _this20 = this;\n\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n      var tempMenuInRowAdditionalItems = [{\n        icon: 'remove icon',\n        title: 'Temp menu item',\n        actionName: 'tempAction'\n      }];\n\n      _this20.set('proj', _aggregator.default.projections.get('AggregatorE'));\n      _this20.set('model', model);\n      _this20.set('componentName', testComponentName);\n      _this20.set('menuInRowAdditionalItems', tempMenuInRowAdditionalItems);\n      _this20.render(Ember.HTMLBars.template({\n        \"id\": \"0gq0ZWUa\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\",\\\"menuInRowAdditionalItems\\\",\\\"showEditMenuItemInRow\\\",\\\"showDeleteMenuItemInRow\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]],[22,[\\\"menuInRowAdditionalItems\\\"]],true,true]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      var $addButton = Ember.$(Ember.$('.ui.button')[0]);\n\n      Ember.run(function () {\n        $addButton.click();\n      });\n\n      var componentOLVMenu = Ember.$('.button.right');\n      var componentOLVMenuItem = componentOLVMenu.children('div').children('.item');\n\n      assert.strictEqual(componentOLVMenuItem.length === 3, true, 'Component OLVMenuItem has standart and adding items');\n    });\n  });\n\n  (0, _emberQunit.test)('ember-grupedit model projection test', function (assert) {\n    var _this21 = this;\n\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n\n      _this21.set('proj', _aggregator.default.projections.get('ConfigurateRowView'));\n      _this21.set('model', model);\n      _this21.set('componentName', testComponentName);\n      _this21.render(Ember.HTMLBars.template({\n        \"id\": \"os+LRmZK\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"content\\\",\\\"componentName\\\",\\\"modelProjection\\\"],[[22,[\\\"model\\\",\\\"details\\\"]],[22,[\\\"componentName\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"details\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      var componentOLV = Ember.$('.object-list-view');\n      var componentOLVThead = componentOLV.children('thead').children('tr').children('th');\n\n      assert.strictEqual(componentOLVThead.length === 3, true, 'Component has \\'ConfigurateRowView\\' projection');\n    });\n  });\n\n  (0, _emberQunit.test)('ember-grupedit main model projection test', function (assert) {\n    var _this22 = this;\n\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('ember-flexberry-dummy-suggestion');\n      var testComponentName = 'my-test-component-to-count-rerender';\n      var valueMainModelProjection = model.get('i18n').t('models.ember-flexberry-dummy-suggestion.projections.SuggestionMainModelProjectionTest.userVotes.voteType.__caption__');\n\n      _this22.set('proj', _emberFlexberryDummySuggestion.default.projections.get('SuggestionMainModelProjectionTest'));\n      _this22.set('model', model);\n      _this22.set('componentName', testComponentName);\n      _this22.render(Ember.HTMLBars.template({\n        \"id\": \"Fzime7cI\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[26,\\\"flexberry-groupedit\\\",null,[[\\\"componentName\\\",\\\"content\\\",\\\"modelProjection\\\",\\\"mainModelProjection\\\"],[[22,[\\\"componentName\\\"]],[22,[\\\"model\\\",\\\"userVotes\\\"]],[22,[\\\"proj\\\",\\\"attributes\\\",\\\"userVotes\\\"]],[22,[\\\"proj\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      var $componentObjectListView = Ember.$('.object-list-view');\n      var $componentObjectListViewTh = $componentObjectListView.children('thead').children('tr').children('th');\n      var $componentOlvFirstHead = $componentObjectListViewTh[1];\n\n      assert.strictEqual($componentOlvFirstHead.innerText === valueMainModelProjection.toString(), true, 'Header has text \\'Vote type\\'');\n    });\n  });\n});","define('dummy/tests/integration/components/flexberry-lookup-test', ['ember-i18n/services/i18n', 'ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations', 'ember-qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (_i18n, _translations, _translations2, _emberQunit, _startApp, _destroyApp) {\n  'use strict';\n\n  var app = void 0;\n\n  (0, _emberQunit.moduleForComponent)('flexberry-lookup', 'Integration | Component | flexberry lookup', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.register('locale:ru/translations', _translations.default);\n      this.register('locale:en/translations', _translations2.default);\n      this.register('service:i18n', _i18n.default);\n\n      this.inject.service('i18n', { as: 'i18n' });\n      Ember.Component.reopen({\n        i18n: Ember.inject.service('i18n')\n      });\n\n      this.set('i18n.locale', 'ru');\n      app = (0, _startApp.default)();\n\n      // Just take it and turn it off...\n      app.__container__.lookup('service:log').set('enabled', false);\n    },\n    afterEach: function afterEach() {\n      (0, _destroyApp.default)(app);\n    }\n  });\n\n  (0, _emberQunit.test)('component renders properly', function (assert) {\n    assert.expect(31);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"E9riANNk\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"flexberry-lookup\\\",null,[[\\\"placeholder\\\"],[\\\"(тестовое значение)\\\"]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component, it's inner <input>.\n    var $component = this.$().children();\n    var $lookupFluid = $component.children('.fluid');\n    var $lookupInput = $lookupFluid.children('.lookup-field');\n    var $lookupButtonPreview = $lookupFluid.children('.ui-preview');\n    var $lookupButtonChoose = $lookupFluid.children('.ui-change');\n    var $lookupButtonClear = $lookupFluid.children('.ui-clear');\n    var $lookupButtonClearIcon = $lookupButtonClear.children('.remove');\n\n    // Check wrapper <flexberry-lookup>.\n    assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s title block is a <div>');\n    assert.strictEqual($component.hasClass('flexberry-lookup'), true, 'Component\\'s container has \\'flexberry-lookup\\' css-class');\n    assert.strictEqual($component.hasClass('ember-view'), true, 'Component\\'s wrapper has \\'ember-view\\' css-class');\n\n    // Check wrapper <fluid>.\n    assert.strictEqual($lookupFluid.length === 1, true, 'Component has inner title block');\n    assert.strictEqual($lookupFluid.prop('tagName'), 'DIV', 'Component\\'s title block is a <div>');\n    assert.strictEqual($lookupFluid.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n    assert.strictEqual($lookupFluid.hasClass('fluid'), true, 'Component\\'s wrapper has \\'fluid\\' css-class');\n    assert.strictEqual($lookupFluid.hasClass('action'), true, 'Component\\'s wrapper has \\'action\\' css-class');\n    assert.strictEqual($lookupFluid.hasClass('input'), true, 'Component\\'s container has \\'input\\' css-class');\n\n    // Check <input>.\n    assert.strictEqual($lookupInput.length === 1, true, 'Component has inner title block');\n    assert.strictEqual($lookupInput.prop('tagName'), 'INPUT', 'Component\\'s wrapper is a <input>');\n    assert.strictEqual($lookupInput.hasClass('lookup-field'), true, 'Component\\'s title block has \\'lookup-field\\' css-class');\n    assert.strictEqual($lookupInput.hasClass('ember-view'), true, 'Component\\'s title block has \\'ember-view\\' css-class');\n    assert.strictEqual($lookupInput.hasClass('ember-text-field'), true, 'Component\\'s title block has \\'ember-text-field\\' css-class');\n    assert.equal($lookupInput.attr('placeholder'), '(тестовое значение)', 'Component\\'s container has \\'input\\' css-class');\n\n    // Check <preview button>.\n    assert.strictEqual($lookupButtonPreview.length === 0, true, 'Component has inner title block');\n\n    // Check <choose button>.\n    assert.strictEqual($lookupButtonChoose.length === 1, true, 'Component has inner title block');\n    assert.strictEqual($lookupButtonChoose.prop('tagName'), 'BUTTON', 'Component\\'s title block is a <button>');\n    assert.strictEqual($lookupButtonChoose.hasClass('ui'), true, 'Component\\'s container has \\'ui\\' css-class');\n    assert.strictEqual($lookupButtonChoose.hasClass('ui-change'), true, 'Component\\'s container has \\'ui-change\\' css-class');\n    assert.strictEqual($lookupButtonChoose.hasClass('button'), true, 'Component\\'s container has \\'button\\' css-class');\n    assert.equal($lookupButtonChoose.attr('title'), 'Выбрать');\n\n    // Check <clear button>.\n    assert.strictEqual($lookupButtonClear.length === 1, true, 'Component has inner title block');\n    assert.strictEqual($lookupButtonClear.prop('tagName'), 'BUTTON', 'Component\\'s title block is a <button>');\n    assert.strictEqual($lookupButtonClear.hasClass('ui'), true, 'Component\\'s container has \\'ui\\' css-class');\n    assert.strictEqual($lookupButtonClear.hasClass('ui-clear'), true, 'Component\\'s container has \\'ui-clear\\' css-class');\n    assert.strictEqual($lookupButtonClear.hasClass('button'), true, 'Component\\'s container has \\'button\\' css-class');\n\n    // Check <clear button icon>\n    assert.strictEqual($lookupButtonClearIcon.length === 1, true, 'Component has inner title block');\n    assert.strictEqual($lookupButtonClearIcon.prop('tagName'), 'I', 'Component\\'s title block is a <i>');\n    assert.strictEqual($lookupButtonClearIcon.hasClass('remove'), true, 'Component\\'s container has \\'remove\\' css-class');\n    assert.strictEqual($lookupButtonClearIcon.hasClass('icon'), true, 'Component\\'s container has \\'icon\\' css-class');\n  });\n\n  (0, _emberQunit.test)('component with readonly renders properly', function (assert) {\n    assert.expect(2);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"NhaYr0BL\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-lookup\\\",null,[[\\\"readonly\\\"],[true]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component, it's inner <input>.\n    var $component = this.$().children();\n    var $lookupFluid = $component.children('.fluid');\n    var $lookupButtonChoose = $lookupFluid.children('.ui-change');\n    var $lookupButtonClear = $lookupFluid.children('.ui-clear');\n\n    // Check <choose button>.\n    assert.strictEqual($lookupButtonChoose.hasClass('disabled'), true, 'Component\\'s container has \\'disabled\\' css-class');\n\n    // Check <clear button>.\n    assert.strictEqual($lookupButtonClear.hasClass('disabled'), true, 'Component\\'s container has \\'disabled\\' css-class');\n  });\n\n  (0, _emberQunit.test)('component with choose-text and remove-text properly', function (assert) {\n    assert.expect(2);\n    this.set('tempTextChoose', 'TempText1');\n    this.set('tempTextRemove', 'TempText2');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"hGBFU4mB\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"flexberry-lookup\\\",null,[[\\\"chooseText\\\",\\\"removeText\\\"],[[22,[\\\"tempTextChoose\\\"]],[22,[\\\"tempTextRemove\\\"]]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    var $component = this.$().children();\n    var $lookupFluid = $component.children('.fluid');\n    var $lookupButtonChoose = $lookupFluid.children('.ui-change');\n    var $lookupButtonClear = $lookupFluid.children('.ui-clear');\n\n    // Check <choose button>.\n    assert.equal($lookupButtonChoose.text().trim(), 'TempText1');\n\n    // Check <clear button>.\n    assert.equal($lookupButtonClear.text().trim(), 'TempText2');\n  });\n\n  (0, _emberQunit.test)('autocomplete doesn\\'t send data-requests in readonly mode', function (assert) {\n    var _this = this;\n\n    assert.expect(1);\n\n    var store = app.__container__.lookup('service:store');\n\n    // Override store.query method.\n    var ajaxMethodHasBeenCalled = false;\n    var originalAjaxMethod = Ember.$.ajax;\n    Ember.$.ajax = function () {\n      ajaxMethodHasBeenCalled = true;\n\n      return originalAjaxMethod.apply(this, arguments);\n    };\n\n    var asyncOperationsCompleted = assert.async();\n\n    this.set('actions.showLookupDialog', function () {});\n    this.set('actions.removeLookupValue', function () {});\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"t6Fqi2rh\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-lookup\\\",null,[[\\\"value\\\",\\\"relatedModel\\\",\\\"relationName\\\",\\\"projection\\\",\\\"displayAttributeName\\\",\\\"title\\\",\\\"choose\\\",\\\"remove\\\",\\\"readonly\\\",\\\"autocomplete\\\"],[[22,[\\\"model\\\",\\\"parent\\\"]],[22,[\\\"model\\\"]],\\\"parent\\\",\\\"SuggestionTypeL\\\",\\\"name\\\",\\\"Parent\\\",[26,\\\"action\\\",[[21,0,[]],\\\"showLookupDialog\\\"],null],[26,\\\"action\\\",[[21,0,[]],\\\"removeLookupValue\\\"],null],true,true]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$();\n    var $componentInput = Ember.$('input', $component);\n\n    Ember.run(function () {\n      _this.set('model', store.createRecord('ember-flexberry-dummy-suggestion-type', {\n        name: 'TestTypeName'\n      }));\n\n      var testPromise = new Ember.RSVP.Promise(function (resolve) {\n        ajaxMethodHasBeenCalled = false;\n\n        // Imitate focus on component, which can cause async data-requests.\n        $componentInput.focusin();\n\n        // Wait for some time which can pass after focus, before possible async data-request will be sent.\n        Ember.run.later(function () {\n          resolve();\n        }, 300);\n      });\n\n      testPromise.then(function () {\n        // Check that store.query hasn\\'t been called after focus.\n        assert.strictEqual(ajaxMethodHasBeenCalled, false, '$.ajax hasn\\'t been called after click on autocomplete lookup in readonly mode');\n      }).finally(function () {\n        // Restore original method.\n        Ember.$.ajax = originalAjaxMethod;\n\n        asyncOperationsCompleted();\n      });\n    });\n  });\n\n  (0, _emberQunit.test)('preview button renders properly', function (assert) {\n    var _this2 = this;\n\n    assert.expect(11);\n\n    var store = app.__container__.lookup('service:store');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"yfTeYiZT\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-lookup\\\",null,[[\\\"value\\\",\\\"relationName\\\",\\\"projection\\\",\\\"displayAttributeName\\\",\\\"title\\\",\\\"showPreviewButton\\\",\\\"previewFormRoute\\\"],[[22,[\\\"model\\\"]],\\\"parent\\\",\\\"SuggestionTypeL\\\",\\\"name\\\",\\\"Parent\\\",true,\\\"ember-flexberry-dummy-suggestion-type-edit\\\"]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $lookupFluid = $component.children('.fluid');\n\n    assert.strictEqual($lookupFluid.children('.ui-preview').length === 0, true, 'Component has inner title block');\n\n    Ember.run(function () {\n      _this2.set('model', store.createRecord('ember-flexberry-dummy-suggestion-type', {\n        name: 'TestTypeName'\n      }));\n\n      var $lookupButtonPreview = $lookupFluid.children('.ui-preview');\n      var $lookupButtonPreviewIcon = $lookupButtonPreview.children('.eye');\n\n      assert.strictEqual($lookupButtonPreview.length === 1, true, 'Component has inner title block');\n      assert.strictEqual($lookupButtonPreview.prop('tagName'), 'BUTTON', 'Component\\'s title block is a <button>');\n      assert.strictEqual($lookupButtonPreview.hasClass('ui'), true, 'Component\\'s container has \\'ui\\' css-class');\n      assert.strictEqual($lookupButtonPreview.hasClass('ui-preview'), true, 'Component\\'s container has \\'ui-preview\\' css-class');\n      assert.strictEqual($lookupButtonPreview.hasClass('button'), true, 'Component\\'s container has \\'button\\' css-class');\n      assert.equal($lookupButtonPreview.attr('title'), 'Просмотр');\n\n      assert.strictEqual($lookupButtonPreviewIcon.length === 1, true, 'Component has inner title block');\n      assert.strictEqual($lookupButtonPreviewIcon.prop('tagName'), 'I', 'Component\\'s title block is a <i>');\n      assert.strictEqual($lookupButtonPreviewIcon.hasClass('eye'), true, 'Component\\'s container has \\'eye\\' css-class');\n      assert.strictEqual($lookupButtonPreviewIcon.hasClass('icon'), true, 'Component\\'s container has \\'icon\\' css-class');\n    });\n  });\n\n  (0, _emberQunit.test)('preview button view previewButtonClass and previewText properly', function (assert) {\n    var _this3 = this;\n\n    assert.expect(3);\n\n    var store = app.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      _this3.set('model', store.createRecord('ember-flexberry-dummy-suggestion-type', {\n        name: 'TestTypeName'\n      }));\n\n      _this3.set('previewButtonClass', 'previewButtonClassTest');\n      _this3.set('previewText', 'previewTextTest');\n\n      _this3.render(Ember.HTMLBars.template({\n        \"id\": \"qXjDh8Be\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-lookup\\\",null,[[\\\"value\\\",\\\"relationName\\\",\\\"projection\\\",\\\"displayAttributeName\\\",\\\"title\\\",\\\"showPreviewButton\\\",\\\"previewFormRoute\\\",\\\"previewButtonClass\\\",\\\"previewText\\\"],[[22,[\\\"model\\\"]],\\\"parent\\\",\\\"SuggestionTypeL\\\",\\\"name\\\",\\\"Parent\\\",true,\\\"ember-flexberry-dummy-suggestion-type-edit\\\",[22,[\\\"previewButtonClass\\\"]],[22,[\\\"previewText\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      // Retrieve component.\n      var $component = _this3.$().children();\n      var $lookupFluid = $component.children('.fluid');\n      var $lookupButtonPreview = $lookupFluid.children('.ui-preview');\n\n      assert.strictEqual($lookupButtonPreview.length === 1, true, 'Component has inner title block');\n      assert.strictEqual($lookupButtonPreview.hasClass('previewButtonClassTest'), true, 'Component\\'s container has \\'previewButtonClassTest\\' css-class');\n      assert.equal($lookupButtonPreview.text().trim(), 'previewTextTest');\n    });\n  });\n\n  (0, _emberQunit.test)('preview with readonly renders properly', function (assert) {\n    var _this4 = this;\n\n    assert.expect(1);\n\n    var store = app.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      _this4.set('model', store.createRecord('ember-flexberry-dummy-suggestion-type', {\n        name: 'TestTypeName'\n      }));\n\n      _this4.render(Ember.HTMLBars.template({\n        \"id\": \"ASa0a1tB\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-lookup\\\",null,[[\\\"value\\\",\\\"relationName\\\",\\\"projection\\\",\\\"displayAttributeName\\\",\\\"title\\\",\\\"showPreviewButton\\\",\\\"previewFormRoute\\\",\\\"readonly\\\"],[[22,[\\\"model\\\"]],\\\"parent\\\",\\\"SuggestionTypeL\\\",\\\"name\\\",\\\"Parent\\\",true,\\\"ember-flexberry-dummy-suggestion-type-edit\\\",true]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      // Retrieve component.\n      var $component = _this4.$().children();\n      var $lookupFluid = $component.children('.fluid');\n      var $lookupButtonPreview = $lookupFluid.children('.ui-preview');\n\n      assert.strictEqual($lookupButtonPreview.hasClass('disabled'), false, 'Component\\'s container has not \\'disabled\\' css-class');\n    });\n  });\n});","define('dummy/tests/integration/components/flexberry-sidebar-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('flexberry-sidebar', 'Integration | Component | flexberry-sidebar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"GqM6eeCw\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"flexberry-sidebar\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$().text().trim(), '');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ATlQLI0U\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"flexberry-sidebar\\\",null,null,{\\\"statements\\\":[[0,\\\"text\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$().text().trim(), 'text');\n  });\n});","define('dummy/tests/integration/components/flexberry-simpledatetime-test', ['ember-qunit', 'ember-i18n/services/i18n', 'ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations'], function (_emberQunit, _i18n, _translations, _translations2) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('flexberry-simpledatetime', 'Integration | Component | flexberry simpledatetime', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.register('locale:ru/translations', _translations.default);\n      this.register('locale:en/translations', _translations2.default);\n      this.register('service:i18n', _i18n.default);\n\n      this.inject.service('i18n', { as: 'i18n' });\n      Ember.Component.reopen({\n        i18n: Ember.inject.service('i18n')\n      });\n\n      // Set 'ru' as initial locale.\n      this.set('i18n.locale', 'ru');\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"W16NdrYS\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"flexberry-simpledatetime\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.ok(true);\n  });\n\n  (0, _emberQunit.test)('render with type before value', function (assert) {\n    assert.expect(1);\n    var typeName = 'date';\n    this.set('type', typeName);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"/FqBGfvC\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-simpledatetime\\\",null,[[\\\"type\\\",\\\"value\\\"],[[22,[\\\"type\\\"]],[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$();\n    var $componentInput = Ember.$('.flatpickr-input.custom-flatpickr', $component);\n\n    // Click on component to open calendar.\n    $componentInput.click();\n\n    var $calendar = Ember.$('.flatpickr-calendar');\n\n    // Check calendar.\n    assert.strictEqual($calendar.hasClass('flatpickr-calendar'), true, 'Component\\'s wrapper has \\' flatpickr-calendar\\' css-class');\n  });\n\n  (0, _emberQunit.test)('render with type afther value', function (assert) {\n    assert.expect(1);\n    var typeName = 'date';\n    this.set('type', typeName);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"/qKq9/d4\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-simpledatetime\\\",null,[[\\\"value\\\",\\\"type\\\"],[[22,[\\\"value\\\"]],[22,[\\\"type\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$();\n    var $componentInput = Ember.$('.flatpickr-input.custom-flatpickr', $component);\n\n    // Click on component to open calendar.\n    $componentInput.click();\n\n    var $calendar = Ember.$('.flatpickr-calendar');\n\n    // Check calendar.\n    assert.strictEqual($calendar.hasClass('flatpickr-calendar'), true, 'Component\\'s wrapper has \\' flatpickr-calendar\\' css-class');\n  });\n});","define('dummy/tests/integration/components/flexberry-sitemap-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('flexberry-sitemap', 'Integration | Component | flexberry-sitemap', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders and works', function (assert) {\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"P0xSfbWL\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"flexberry-sitemap\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$().text().trim(), '', 'Empty sitemap, empty result.');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"eMvZeCrF\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"flexberry-sitemap\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$().text().trim(), '', 'Block params not used.');\n\n    // this.set('sitemap', {\n    //   nodes: [\n    //     {\n    //       caption: 'Superheroes',\n    //       children: [\n    //         { link: 'superman', caption: 'Superman' },\n    //         { link: 'ironman', caption: 'Ironman' },\n    //       ],\n    //     },\n    //   ],\n    // });\n    // this.render(hbs`{{flexberry-sitemap sitemap=sitemap}}`);\n    // assert.equal(this.$('.title-item-menu:visible').text().trim(), 'Superheroes', 'Menu is closed.');\n    // this.$('.title-item-menu:visible').click();\n    // assert.equal(this.$('.title-item-menu:visible').text().trim().replace(/\\s+/g, ''), 'SuperheroesSupermanIronman', 'Menu is open.');\n  });\n});","define('dummy/tests/integration/components/flexberry-textarea-test', ['ember-i18n/services/i18n', 'ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations', 'ember-qunit'], function (_i18n, _translations, _translations2, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('flexberry-textarea', 'Integration | Component | flexberry-textarea', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.register('locale:ru/translations', _translations.default);\n      this.register('locale:en/translations', _translations2.default);\n      this.register('service:i18n', _i18n.default);\n\n      this.inject.service('i18n', { as: 'i18n' });\n      Ember.Component.reopen({\n        i18n: Ember.inject.service('i18n')\n      });\n\n      // Set 'ru' as initial locale.\n      this.set('i18n.locale', 'ru');\n    }\n  });\n\n  (0, _emberQunit.test)('it renders properly', function (assert) {\n    assert.expect(10);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Wgbr2/S5\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\"],[[22,[\\\"class\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // Check wrapper <div>.\n    assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n    assert.strictEqual($component.hasClass('flexberry-textarea'), true, 'Component\\'s wrapper has \\' flexberry-textarea\\' css-class');\n    assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n    assert.strictEqual($component.hasClass('input'), true, 'Component\\'s wrapper has \\'input\\' css-class');\n\n    // Check wrapper's additional CSS-classes.\n    var additioanlCssClasses = 'fluid mini huge';\n    this.set('class', additioanlCssClasses);\n    /* eslint-disable no-unused-vars */\n    Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), true, 'Component\\'s wrapper has additional css class \\'' + cssClassName + '\\'');\n    });\n    /* eslint-enable no-unused-vars */\n\n    // Clean up wrapper's additional CSS-classes.\n    this.set('class', '');\n    /* eslint-disable no-unused-vars */\n    Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), false, 'Component\\'s wrapper hasn\\'t additional css class \\'' + cssClassName + '\\'');\n    });\n    /* eslint-enable no-unused-vars */\n  });\n\n  (0, _emberQunit.test)('readonly mode works properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"K2qcPsaA\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"readonly\\\"],[[22,[\\\"class\\\"]],[22,[\\\"readonly\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check that <textarea>'s readonly attribute doesn't exist yet.\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('readonly')), '', 'Component\\'s inner <textarea> hasn\\'t readonly attribute');\n\n    // Activate readonly mode & check that <textarea>'s readonly attribute exists now & has value equals to 'readonly'.\n    this.set('readonly', true);\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('readonly')), 'readonly', 'Component\\'s inner <textarea> has readonly attribute with value equals to \\'readonly\\'');\n\n    // Check that <textarea>'s readonly attribute doesn't exist now.\n    this.set('readonly', false);\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('readonly')), '', 'Component\\'s inner <textarea> hasn\\'t readonly attribute');\n  });\n\n  (0, _emberQunit.test)('readonly mode works properly with value', function (assert) {\n    var _this = this;\n\n    assert.expect(2);\n\n    // Set <textarea>'s value' & render component.\n    this.set('value', null);\n    this.set('readonly', true);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"qq/ZSFhm\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"readonly\\\",\\\"value\\\"],[[22,[\\\"readonly\\\"]],[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    $textareaInput.on('change', function (e) {\n      if (_this.get('readonly')) {\n        e.stopPropagation();\n        $textareaInput.val(null);\n      }\n    });\n\n    var newValue = 'New value';\n    $textareaInput.val(newValue);\n    $textareaInput.change();\n\n    // Check <textarea>'s value not changed.\n    assert.strictEqual(Ember.$.trim($textareaInput.val()), '', 'Component\\'s inner <textarea>\\'s value not changed');\n    assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to unchanged \\'value\\'');\n  });\n\n  (0, _emberQunit.test)('it renders i18n-ed placeholder', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"tz1yXvrh\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"flexberry-textarea\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check <textarea>'s placeholder.\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('placeholder')), Ember.get(_translations.default, 'components.flexberry-textarea.placeholder'), 'Component\\'s inner <textarea>\\'s placeholder is equals to it\\'s default value from i18n locales/ru/translations');\n\n    // Change current locale to 'en' & check <textarea>'s placeholder again.\n    this.set('i18n.locale', 'en');\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('placeholder')), Ember.get(_translations2.default, 'components.flexberry-textarea.placeholder'), 'Component\\'s inner <textarea>\\'s placeholder is equals to it\\'s value from i18n locales/en/translations');\n  });\n\n  (0, _emberQunit.test)('it renders manually defined placeholder', function (assert) {\n    assert.expect(2);\n\n    // Set <textarea>'s placeholder' & render component.\n    var placeholder = 'textarea is empty, please type some text';\n    this.set('placeholder', placeholder);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"RweRkPSr\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"placeholder\\\"],[[22,[\\\"placeholder\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check <textarea>'s placeholder.\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('placeholder')), placeholder, 'Component\\'s inner <textarea>\\'s placeholder is equals to manually defined value \\'' + placeholder + '\\'');\n\n    // Change placeholder's value & check <textarea>'s placeholder again.\n    placeholder = 'textarea has no value';\n    this.set('placeholder', placeholder);\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('placeholder')), placeholder, 'Component\\'s inner <textarea>\\'s placeholder is equals to manually updated value \\'' + placeholder + '\\'');\n  });\n\n  (0, _emberQunit.test)('required mode works properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"P0+F1REW\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"required\\\"],[[22,[\\\"class\\\"]],[22,[\\\"required\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check that <textarea>'s required attribute doesn't exist yet.\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('required')), '', 'Component\\'s inner <textarea> hasn\\'t required attribute');\n\n    // Activate required mode & check that <textarea>'s required attribute exists now & has value equals to 'required'.\n    this.set('required', true);\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('required')), 'required', 'Component\\'s inner <textarea> has required attribute with value equals to \\'required\\'');\n\n    // Check that <textarea>'s required attribute doesn't exist now.\n    this.set('required', false);\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('required')), '', 'Component\\'s inner <textarea> hasn\\'t required attribute');\n  });\n\n  (0, _emberQunit.test)('disabled mode works properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"AOcMLYEP\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"disabled\\\"],[[22,[\\\"class\\\"]],[22,[\\\"disabled\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check that <textarea>'s disabled attribute doesn't exist yet.\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('disabled')), '', 'Component\\'s inner <textarea> hasn\\'t disabled attribute');\n\n    // Activate disabled mode & check that <textarea>'s disabled attribute exists now & has value equals to 'disabled'.\n    this.set('disabled', true);\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('disabled')), 'disabled', 'Component\\'s inner <textarea> has disabled attribute with value equals to \\'disabled\\'');\n\n    // Check that <textarea>'s disabled attribute doesn't exist now.\n    this.set('disabled', false);\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('disabled')), '', 'Component\\'s inner <textarea> hasn\\'t disabled attribute');\n  });\n\n  (0, _emberQunit.test)('autofocus mode works properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"xLt1DUdr\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"autofocus\\\"],[[22,[\\\"class\\\"]],[22,[\\\"autofocus\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check that <textarea>'s autofocus attribute doesn't exist yet.\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('autofocus')), '', 'Component\\'s inner <textarea> hasn\\'t autofocus attribute');\n\n    // Activate autofocus mode & check that <textarea>'s autofocus attribute exists now & has value equals to 'autofocus'.\n    this.set('autofocus', true);\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('autofocus')), 'autofocus', 'Component\\'s inner <textarea> has autofocus attribute with value equals to \\'autofocus\\'');\n\n    // Check that <textarea>'s autofocus attribute doesn't exist now.\n    this.set('autofocus', false);\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('autofocus')), '', 'Component\\'s inner <textarea> hasn\\'t autofocus attribute');\n  });\n\n  (0, _emberQunit.test)('spellcheck mode works properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Vq4KEuUS\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"spellcheck\\\"],[[22,[\\\"class\\\"]],[22,[\\\"spellcheck\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check that <textarea>'s spellcheck attribute doesn't exist yet.\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('spellcheck')), '', 'Component\\'s inner <textarea> hasn\\'t spellcheck attribute');\n\n    // Activate spellcheck mode & check that <textarea>'s spellcheck attribute exists now & has value equals to 'spellcheck'.\n    this.set('spellcheck', true);\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('spellcheck')), 'true', 'Component\\'s inner <textarea> has spellcheck attribute with value equals to \\'spellcheck\\'');\n\n    // Check that <textarea>'s spellcheck attribute doesn't exist now.\n    this.set('spellcheck', false);\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('spellcheck')), 'false', 'Component\\'s inner <textarea> hasn\\'t spellcheck attribute');\n  });\n\n  (0, _emberQunit.test)('wrap mode works properly', function (assert) {\n    assert.expect(4);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"hhUAsNKD\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"wrap\\\"],[[22,[\\\"class\\\"]],[22,[\\\"wrap\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check that <textarea>'s wrap attribute 'soft'.\n    this.set('wrap', 'soft');\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('wrap')), 'soft', 'Component\\'s inner <textarea> wrap attribute \\'soft\\'');\n\n    // Check that <textarea>'s wrap attribute 'hard'.\n    this.set('wrap', 'hard');\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('wrap')), 'hard', 'Component\\'s inner <textarea> wrap attribute \\'hard\\'');\n\n    // Check that <textarea>'s wrap attribute 'soft'.\n    this.set('wrap', 'soft');\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('wrap')), 'soft', 'Component\\'s inner <textarea> wrap attribute \\'soft\\'');\n\n    // Check that <textarea>'s wrap attribute 'off'.\n    this.set('wrap', 'off');\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('wrap')), 'off', 'Component\\'s inner <textarea> wrap attribute \\'off\\'');\n  });\n\n  (0, _emberQunit.test)('rows mode works properly', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"py1xI1wP\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"rows\\\"],[[22,[\\\"class\\\"]],[22,[\\\"rows\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Retrieve default rows count for current browser.\n    var defaultRowsCount = $textareaInput.prop('rows');\n\n    // Generate random rows count >= 2.\n    var rowsValue = Math.floor(Math.random() * 10) + 2;\n\n    // Check that <textarea>'s rows attribute is equals to specified value.\n    this.set('rows', rowsValue);\n    assert.strictEqual($textareaInput.prop('rows'), rowsValue, 'Component\\'s inner <textarea>\\'s value \\'rows\\' is equals to ' + rowsValue);\n\n    // Check that <textarea>'s rows count is switched to default value.\n    this.set('rows', null);\n    assert.strictEqual($textareaInput.prop('rows'), defaultRowsCount, 'Component\\'s inner <textarea>\\'s rows count is switched to default value');\n  });\n\n  (0, _emberQunit.test)('cols mode works properly', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"CGpxkJex\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"cols\\\"],[[22,[\\\"class\\\"]],[22,[\\\"cols\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Retrieve default rows count for current browser.\n    var defaultColsCount = $textareaInput.prop('cols');\n\n    // Generate random cols count >= 20.\n    var colsValue = Math.floor(Math.random() * 10) + 20;\n\n    // Check that <textarea>'s cols attribute is equals to specified value.\n    this.set('cols', colsValue);\n    assert.strictEqual($textareaInput.prop('cols'), colsValue, 'Component\\'s inner <textarea>\\'s value \\'cols\\' is equals to ' + colsValue);\n\n    // Check that <textarea>'s cols count is switched to default value.\n    this.set('cols', null);\n    assert.strictEqual($textareaInput.prop('cols'), defaultColsCount, 'Component\\'s inner <textarea> hasn\\'t value cols attribute');\n  });\n\n  (0, _emberQunit.test)('maxlength mode works properly', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"uGg5RJZ1\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"maxlength\\\"],[[22,[\\\"class\\\"]],[22,[\\\"maxlength\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    //Generate a random value 'maxlength' and convert to a string.\n    var maxlengthValue = '' + Math.floor(Math.random() * 10);\n\n    // Check that <textarea>'s maxlength attribute.\n    this.set('maxlength', maxlengthValue);\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('maxlength')), maxlengthValue, 'Component\\'s inner <textarea>\\'s value \\'maxlength\\' is equals to \\'' + maxlengthValue + '\\'');\n\n    // Check that <textarea>'s hasn\\'t value maxlength attribute.\n    this.set('maxlength', null);\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('maxlength')), '', 'Component\\'s inner <textarea> hasn\\'t value maxlength attribute');\n  });\n\n  (0, _emberQunit.test)('selectionStart mode works properly', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"l0ulxOle\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"selectionStart\\\"],[[22,[\\\"class\\\"]],[22,[\\\"selectionStart\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Change <textarea>'s value (imitate situation when user typed something into component's <textarea>)\n    // & check them again ('change' event is needed to force bindings work).\n    var newValue = 'Some text typed into textarea';\n    $textareaInput.val(newValue);\n    $textareaInput.change();\n\n    //Generate a random value 'selectionStart' and convert to a string.\n    var selectionStartValue = Math.floor(Math.random() * 10 + 1);\n\n    var $this = this;\n\n    // This timeout  is correcting problem with selectionStart in Mozila Firefox.\n    var done = assert.async();\n    setTimeout(function () {\n      $this.set('selectionStart', selectionStartValue);\n      assert.strictEqual($textareaInput.prop('selectionStart'), selectionStartValue, 'Component\\'s inner <textarea>\\'s value \\'selectionStart\\' is equals to \\'' + selectionStartValue + '\\'');\n\n      // Check that <textarea>'s hasn\\'t value maxlength attribute.\n      $this.set('selectionStart', null);\n      assert.strictEqual(Ember.$.trim($textareaInput.attr('selectionStart')), '', 'Component\\'s inner <textarea> hasn\\'t value selectionStart attribute');\n      done();\n    }, 10);\n  });\n\n  (0, _emberQunit.test)('selectionEnd mode works properly', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"zCgy2lRV\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"selectionEnd\\\"],[[22,[\\\"class\\\"]],[22,[\\\"selectionEnd\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Change <textarea>'s value (imitate situation when user typed something into component's <textarea>)\n    // & check them again ('change' event is needed to force bindings work).\n    var newValue = 'Some text typed into textarea';\n    $textareaInput.val(newValue);\n    $textareaInput.change();\n\n    //Generate a random value 'selectionEnd' and convert to a string.\n    var selectionEndValue = Math.floor(Math.random() * 10 + 1);\n\n    // Check that <textarea>'s selectionEnd attribute.\n    this.set('selectionEnd', selectionEndValue);\n    assert.strictEqual($textareaInput.prop('selectionEnd'), selectionEndValue, 'Component\\'s inner <textarea>\\'s value \\'selectionEnd\\' is equals to \\'' + selectionEndValue + '\\'');\n\n    // Check that <textarea>'s hasn\\'t value maxlength attribute.\n    this.set('selectionEnd', null);\n    assert.strictEqual(Ember.$.trim($textareaInput.attr('selectionEnd')), '', 'Component\\'s inner <textarea> hasn\\'t value selectionEnd attribute');\n  });\n\n  (0, _emberQunit.test)('selectionDirection mode works properly', function (assert) {\n    assert.expect(1);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"hfB/KRiF\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"class\\\",\\\"selectionDirection\\\"],[[22,[\\\"class\\\"]],[22,[\\\"selectionDirection\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check that <textarea>'s hasn\\'t value selectionDirection attribute.\n    this.set('selectionDirection', null);\n    assert.strictEqual($textareaInput.attr('selectionDirection'), undefined, 'Component\\'s inner <textarea> hasn\\'t value selectionDirection attribute');\n  });\n\n  (0, _emberQunit.test)('changes in inner <textarea> causes changes in property binded to \\'value\\'', function (assert) {\n    assert.expect(4);\n\n    // Set <textarea>'s value' & render component.\n    this.set('value', null);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"tacx7sgL\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"value\\\"],[[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check <textarea>'s value & binded value for initial emptyness.\n    assert.strictEqual(Ember.$.trim($textareaInput.val()), '', 'Component\\'s inner <textarea>\\'s value is equals to \\'\\'');\n    assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to \\'value\\' is equals to null');\n\n    // Change <textarea>'s value (imitate situation when user typed something into component's <textarea>)\n    // & check them again ('change' event is needed to force bindings work).\n    var newValue = 'Some text typed into textareas inner <textarea>';\n    $textareaInput.val(newValue);\n    $textareaInput.change();\n\n    assert.strictEqual(Ember.$.trim($textareaInput.val()), newValue, 'Component\\'s inner <textarea>\\'s value is equals to \\'' + newValue + '\\'');\n    assert.strictEqual(this.get('value'), newValue, 'Component\\'s property binded to \\'value\\' is equals to \\'' + newValue + '\\'');\n  });\n\n  (0, _emberQunit.test)('changes in property binded to \\'value\\' causes changes in inner <textarea>', function (assert) {\n    assert.expect(4);\n\n    // Set <textarea>'s value' & render component.\n    this.set('value', null);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"tacx7sgL\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textarea\\\",null,[[\\\"value\\\"],[[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check <textarea>'s value & binded value for initial emptyness.\n    assert.strictEqual(Ember.$.trim($textareaInput.val()), '', 'Component\\'s inner <textarea>\\'s value is equals to \\'\\'');\n    assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to \\'value\\' is equals to null');\n\n    // Change property binded to 'value' & check them again.\n    var newValue = 'Some text typed into textareas inner <textarea>';\n    this.set('value', newValue);\n\n    assert.strictEqual(Ember.$.trim($textareaInput.val()), newValue, 'Component\\'s inner <textarea>\\'s value is equals to \\'' + newValue + '\\'');\n    assert.strictEqual(this.get('value'), newValue, 'Component\\'s property binded to \\'value\\' is equals to \\'' + newValue + '\\'');\n  });\n});","define('dummy/tests/integration/components/flexberry-textbox-test', ['ember-i18n/services/i18n', 'ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations', 'ember-qunit'], function (_i18n, _translations, _translations2, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('flexberry-textbox', 'Integration | Component | flexberry-textbox', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.register('locale:ru/translations', _translations.default);\n      this.register('locale:en/translations', _translations2.default);\n      this.register('service:i18n', _i18n.default);\n\n      this.inject.service('i18n', { as: 'i18n' });\n      Ember.Component.reopen({\n        i18n: Ember.inject.service('i18n')\n      });\n\n      // Set 'ru' as initial locale.\n      this.set('i18n.locale', 'ru');\n    }\n  });\n\n  (0, _emberQunit.test)('it renders properly', function (assert) {\n    assert.expect(16);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Sid7vGdE\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textbox\\\",null,[[\\\"class\\\"],[[22,[\\\"class\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textboxInput = $component.children('input');\n\n    // Check wrapper <div>.\n    assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n    assert.strictEqual($component.hasClass('flexberry-textbox'), true, 'Component\\'s wrapper has \\' flexberry-textbox\\' css-class');\n    assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n    assert.strictEqual($component.hasClass('input'), true, 'Component\\'s wrapper has \\'input\\' css-class');\n\n    // Check <input>.\n    assert.strictEqual($textboxInput.length === 1, true, 'Component has inner <input>');\n    assert.strictEqual($textboxInput.attr('type'), 'text', 'Component\\'s inner <input> is of text type');\n\n    // Check wrapper's additional CSS-classes.\n    var additioanlCssClasses = 'fluid transparent mini huge error';\n    this.set('class', additioanlCssClasses);\n    /* eslint-disable no-unused-vars */\n    Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), true, 'Component\\'s wrapper has additional css class \\'' + cssClassName + '\\'');\n    });\n    /* eslint-enable no-unused-vars */\n\n    // Clean up wrapper's additional CSS-classes.\n    this.set('class', '');\n    /* eslint-disable no-unused-vars */\n    Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), false, 'Component\\'s wrapper hasn\\'t additional css class \\'' + cssClassName + '\\'');\n    });\n    /* eslint-enable no-unused-vars */\n  });\n\n  (0, _emberQunit.test)('class changes through base-component\\'s dynamic properties works properly', function (assert) {\n    assert.expect(6);\n\n    var initialClass = 'class1 class2';\n    var anotherClass = 'firstClass secondClass';\n    var dynamicProperties = {\n      class: initialClass\n    };\n\n    this.set('dynamicProperties', dynamicProperties);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"e2oimvkQ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n    \\\"],[1,[26,\\\"flexberry-textbox\\\",null,[[\\\"dynamicProperties\\\"],[[22,[\\\"dynamicProperties\\\"]]]]],false],[0,\\\"\\\\n  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    var $component = this.$().children();\n\n    assert.strictEqual($component.hasClass('class1'), true, 'Component\\'s container has \\'class1\\' css-class');\n    assert.strictEqual($component.hasClass('class2'), true, 'Component\\'s container has \\'class2\\' css-class');\n\n    Ember.set(dynamicProperties, 'class', anotherClass);\n    assert.strictEqual($component.hasClass('class1'), false, 'Component\\'s container hasn\\'t \\'class1\\' css-class');\n    assert.strictEqual($component.hasClass('class2'), false, 'Component\\'s container hasn\\'t \\'class2\\' css-class');\n    assert.strictEqual($component.hasClass('firstClass'), true, 'Component\\'s container has \\'firstClass\\' css-class');\n    assert.strictEqual($component.hasClass('secondClass'), true, 'Component\\'s container has \\'secondClass\\' css-class');\n  });\n\n  (0, _emberQunit.test)('readonly mode works properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"z7/lVeUo\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textbox\\\",null,[[\\\"class\\\",\\\"readonly\\\"],[[22,[\\\"class\\\"]],[22,[\\\"readonly\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textboxInput = $component.children('input');\n\n    // Check that <input>'s readonly attribute doesn't exist yet.\n    assert.strictEqual(Ember.$.trim($textboxInput.attr('readonly')), '', 'Component\\'s inner <input> hasn\\'t readonly attribute');\n\n    // Activate readonly mode & check that <input>'s readonly attribute exists now & has value equals to 'readonly'.\n    this.set('readonly', true);\n\n    $textboxInput = $component.children('input');\n    assert.strictEqual(Ember.$.trim($textboxInput.attr('readonly')), 'readonly', 'Component\\'s inner <input> has readonly attribute with value equals to \\'readonly\\'');\n\n    // Check that <input>'s readonly attribute doesn't exist now.\n    this.set('readonly', false);\n\n    $textboxInput = $component.children('input');\n    assert.strictEqual(Ember.$.trim($textboxInput.attr('readonly')), '', 'Component\\'s inner <input> hasn\\'t readonly attribute');\n  });\n\n  (0, _emberQunit.test)('readonly mode works properly with value', function (assert) {\n    var _this = this;\n\n    assert.expect(2);\n\n    // Set <input>'s value' & render component.\n    this.set('value', null);\n    this.set('readonly', true);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"LPWkt6eT\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textbox\\\",null,[[\\\"readonly\\\",\\\"value\\\"],[[22,[\\\"readonly\\\"]],[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textboxInput = $component.children('input');\n\n    $textboxInput.on('change', function (e) {\n      if (_this.get('readonly')) {\n        e.stopPropagation();\n        $textboxInput.val(null);\n      }\n    });\n\n    var newValue = 'New value';\n    $textboxInput.val(newValue);\n    $textboxInput.change();\n\n    // Check <input>'s value not changed.\n    assert.strictEqual(Ember.$.trim($textboxInput.val()), '', 'Component\\'s inner <input>\\'s value not changed');\n    assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to unchanged \\'value\\'');\n  });\n\n  (0, _emberQunit.test)('click on textbox in readonly mode doesn\\'t change value & it\\'s type', function (assert) {\n    assert.expect(3);\n\n    // Set <input>'s value' & render component.\n    var value = 123;\n    this.set('value', value);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"uEXOATyP\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textbox\\\",null,[[\\\"readonly\\\",\\\"value\\\"],[true,[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textboxInput = $component.children('input');\n\n    $textboxInput.click();\n    $textboxInput.change();\n\n    // Check <input>'s value not changed.\n    assert.strictEqual(Ember.$.trim($textboxInput.val()), '' + value, 'Component\\'s inner <input>\\'s value not changed');\n    assert.strictEqual(this.get('value'), value, 'Value binded to component\\'s \\'value\\' property is unchanged');\n    assert.strictEqual(Ember.typeOf(this.get('value')), 'number', 'Value binded to component\\'s \\'value\\' property is still number');\n  });\n\n  (0, _emberQunit.test)('it renders i18n-ed placeholder', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"2FwbsAq3\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"flexberry-textbox\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textboxInput = $component.children('input');\n\n    // Check <input>'s placeholder.\n    assert.strictEqual(Ember.$.trim($textboxInput.attr('placeholder')), Ember.get(_translations.default, 'components.flexberry-textbox.placeholder'), 'Component\\'s inner <input>\\'s placeholder is equals to it\\'s default value from i18n locales/ru/translations');\n\n    // Change current locale to 'en' & check <input>'s placeholder again.\n    this.set('i18n.locale', 'en');\n    assert.strictEqual(Ember.$.trim($textboxInput.attr('placeholder')), Ember.get(_translations2.default, 'components.flexberry-textbox.placeholder'), 'Component\\'s inner <input>\\'s placeholder is equals to it\\'s value from i18n locales/en/translations');\n  });\n\n  (0, _emberQunit.test)('it renders manually defined placeholder', function (assert) {\n    assert.expect(2);\n\n    // Set <input>'s placeholder' & render component.\n    var placeholder = 'Input is empty, please type some text';\n    this.set('placeholder', placeholder);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"LO/PMoJH\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textbox\\\",null,[[\\\"placeholder\\\"],[[22,[\\\"placeholder\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textboxInput = $component.children('input');\n\n    // Check <input>'s placeholder.\n    assert.strictEqual(Ember.$.trim($textboxInput.attr('placeholder')), placeholder, 'Component\\'s inner <input>\\'s placeholder is equals to manually defined value \\'' + placeholder + '\\'');\n\n    // Change placeholder's value & check <input>'s placeholder again.\n    placeholder = 'Input has no value';\n    this.set('placeholder', placeholder);\n    assert.strictEqual(Ember.$.trim($textboxInput.attr('placeholder')), placeholder, 'Component\\'s inner <input>\\'s placeholder is equals to manually updated value \\'' + placeholder + '\\'');\n  });\n\n  (0, _emberQunit.test)('changes in inner <input> causes changes in property binded to \\'value\\'', function (assert) {\n    assert.expect(4);\n\n    // Set <input>'s value' & render component.\n    this.set('value', null);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"dT+OH+YL\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textbox\\\",null,[[\\\"value\\\"],[[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textboxInput = $component.children('input');\n\n    // Check <input>'s value & binded value for initial emptyness.\n    assert.strictEqual(Ember.$.trim($textboxInput.val()), '', 'Component\\'s inner <input>\\'s value is equals to \\'\\'');\n    assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to \\'value\\' is equals to null');\n\n    // Change <input>'s value (imitate situation when user typed something into component's <input>)\n    // & check them again ('change' event is needed to force bindings work).\n    var newValue = 'Some text typed into textboxes inner <input>';\n    $textboxInput.val(newValue);\n    $textboxInput.change();\n\n    assert.strictEqual(Ember.$.trim($textboxInput.val()), newValue, 'Component\\'s inner <input>\\'s value is equals to \\'' + newValue + '\\'');\n    assert.strictEqual(this.get('value'), newValue, 'Component\\'s property binded to \\'value\\' is equals to \\'' + newValue + '\\'');\n  });\n\n  (0, _emberQunit.test)('attribute maxlength rendered in html', function (assert) {\n    assert.expect(1);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"w2woXa5q\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-field\\\",null,[[\\\"maxlength\\\"],[5]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldInput = Ember.$('.flexberry-textbox input', $component);\n\n    // Check <input>'s maxlength attribute.\n    assert.strictEqual($fieldInput.attr('maxlength'), '5', 'Component\\'s inner <input>\\'s attribute maxlength rendered');\n  });\n\n  (0, _emberQunit.test)('changes in property binded to \\'value\\' causes changes in inner <input>', function (assert) {\n    assert.expect(4);\n\n    // Set <input>'s value' & render component.\n    this.set('value', null);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"dT+OH+YL\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-textbox\\\",null,[[\\\"value\\\"],[[22,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textboxInput = $component.children('input');\n\n    // Check <input>'s value & binded value for initial emptyness.\n    assert.strictEqual(Ember.$.trim($textboxInput.val()), '', 'Component\\'s inner <input>\\'s value is equals to \\'\\'');\n    assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to \\'value\\' is equals to null');\n\n    // Change property binded to 'value' & check them again.\n    var newValue = 'Some text typed into textboxes inner <input>';\n    this.set('value', newValue);\n\n    assert.strictEqual(Ember.$.trim($textboxInput.val()), newValue, 'Component\\'s inner <input>\\'s value is equals to \\'' + newValue + '\\'');\n    assert.strictEqual(this.get('value'), newValue, 'Component\\'s property binded to \\'value\\' is equals to \\'' + newValue + '\\'');\n  });\n});","define('dummy/tests/integration/components/flexberry-toggler-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  var animationDuration = Ember.$.fn.accordion.settings.duration + 100;\n\n  (0, _emberQunit.moduleForComponent)('flexberry-toggler', 'Integration | Component | flexberry toggler', {\n    integration: true\n  });\n\n  // Common expand/collapse test method.\n  var expandCollapseTogglerWithStateChecks = function expandCollapseTogglerWithStateChecks(assert, captions) {\n    assert.expect(10);\n    var endFunction = assert.async();\n    var content = 'Toggler\\'s content';\n\n    captions = captions || {};\n    var caption = captions.caption || '';\n    var expandedCaption = captions.expandedCaption || caption;\n    var collapsedCaption = captions.collapsedCaption || caption;\n\n    this.set('content', content);\n    this.set('caption', caption);\n    this.set('expandedCaption', expandedCaption);\n    this.set('collapsedCaption', collapsedCaption);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"sK+tO5I7\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"flexberry-toggler\\\",null,[[\\\"caption\\\",\\\"expandedCaption\\\",\\\"collapsedCaption\\\"],[[22,[\\\"caption\\\"]],[22,[\\\"expandedCaption\\\"]],[22,[\\\"collapsedCaption\\\"]]]],{\\\"statements\\\":[[0,\\\"      \\\"],[1,[20,\\\"content\\\"],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component, it's inner <input>.\n    var $component = this.$().children();\n    var $componentTitle = $component.children('div .title');\n    var $componentCaption = $componentTitle.children('span');\n    var $componentContent = $component.children('div .content');\n\n    // Check that component is collapsed by default.\n    assert.strictEqual($componentTitle.hasClass('active'), false);\n    assert.strictEqual($componentContent.hasClass('active'), false);\n    assert.strictEqual(Ember.$.trim($componentCaption.text()), collapsedCaption);\n\n    /* eslint-disable no-unused-vars */\n    var expandAnimationCompleted = new Ember.RSVP.Promise(function (resolve, reject) {\n      // Try to expand component.\n      // Semantic UI will start asynchronous animation after click, so we need run function here.\n      Ember.run(function () {\n        $componentTitle.click();\n      });\n\n      // Check that component is animating now.\n      assert.strictEqual($componentContent.hasClass('animating'), true);\n\n      // Wait for expand animation to be completed & check component's state.\n      Ember.run(function () {\n        var animationCompleted = assert.async();\n        setTimeout(function () {\n          // Check that component is expanded now.\n          assert.strictEqual($componentTitle.hasClass('active'), true);\n          assert.strictEqual($componentContent.hasClass('active'), true);\n          assert.strictEqual(Ember.$.trim($componentCaption.text()), expandedCaption);\n\n          // Tell to test method that asynchronous operation completed.\n          animationCompleted();\n\n          // Resolve 'expandAnimationCompleted' promise.\n          resolve();\n        }, animationDuration);\n      });\n    });\n    /* eslint-enable no-unused-vars */\n\n    // Wait for expand animation to be completed (when resolve will be called inside previous timeout).\n    // Then try to collapse component.\n    expandAnimationCompleted.then(function () {\n      // Semantic UI will start asynchronous animation after click, so we need run function here.\n      Ember.run(function () {\n        $componentTitle.click();\n      });\n\n      // Wait for collapse animation to be completed & check component's state.\n      Ember.run(function () {\n        var animationCompleted = assert.async();\n        setTimeout(function () {\n          // Check that component is expanded now.\n          assert.strictEqual($componentTitle.hasClass('active'), false);\n          assert.strictEqual($componentContent.hasClass('active'), false);\n          assert.strictEqual(Ember.$.trim($componentCaption.text()), collapsedCaption);\n\n          animationCompleted();\n          endFunction();\n        }, animationDuration);\n      });\n    });\n  };\n\n  (0, _emberQunit.test)('component renders properly', function (assert) {\n    assert.expect(22);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"6yrbjMAe\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"flexberry-toggler\\\",null,[[\\\"class\\\"],[[22,[\\\"class\\\"]]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component, it's inner <input>.\n    var $component = this.$().children();\n    var $togglerTitle = $component.children('.title');\n    var $togglerIcon = $togglerTitle.children('i');\n    var $togglerCaption = $togglerTitle.children('span');\n    var $togglerContent = $component.children('.content');\n\n    // Check wrapper.\n    assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n    assert.strictEqual($component.hasClass('flexberry-toggler'), true, 'Component\\'s wrapper has \\'flexberry-toggler\\' css-class');\n    assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n    assert.strictEqual($component.hasClass('accordion'), true, 'Component\\'s wrapper has \\'accordion\\' css-class');\n    assert.strictEqual($component.hasClass('fluid'), true, 'Component\\'s wrapper has \\'fluid\\' css-class');\n\n    // Check title's <div>.\n    assert.strictEqual($togglerTitle.length === 1, true, 'Component has inner title block');\n    assert.strictEqual($togglerTitle.prop('tagName'), 'DIV', 'Component\\'s inner title block is a <div>');\n    assert.strictEqual($togglerTitle.hasClass('title'), true, 'Component\\'s inner title block has \\'title\\' css-class');\n\n    // Check title's icon <i>.\n    assert.strictEqual($togglerIcon.length === 1, true, 'Component\\'s title has icon block');\n    assert.strictEqual($togglerIcon.prop('tagName'), 'I', 'Component\\'s icon block is a <i>');\n    assert.strictEqual($togglerIcon.hasClass('dropdown icon'), true, 'Component\\'s icon block has \\'dropdown icon\\' css-class');\n\n    // Check title's caption <span>.\n    assert.strictEqual($togglerCaption.length === 1, true, 'Component has inner caption block');\n    assert.strictEqual($togglerCaption.prop('tagName'), 'SPAN', 'Component\\'s caption block is a <span>');\n    assert.strictEqual($togglerCaption.hasClass('flexberry-toggler-caption'), true, 'Component\\'s caption block has \\'flexberry-toggler-caption\\' css-class');\n\n    // Check content's <div>.\n    assert.strictEqual($togglerContent.length === 1, true, 'Component has inner content block');\n    assert.strictEqual($togglerContent.prop('tagName'), 'DIV', 'Component\\'s content block is a <div>');\n    assert.strictEqual($togglerContent.hasClass('content'), true, 'Component\\'s content block has \\'content\\' css-class');\n    assert.strictEqual($togglerContent.hasClass('flexberry-toggler-content'), true, 'Component\\'s content block has \\'flexberry-toggler-content\\' css-class');\n\n    // Check component's additional CSS-classes.\n    var additioanlCssClasses = 'firstClass secondClass';\n    this.set('class', additioanlCssClasses);\n\n    /* eslint-disable no-unused-vars */\n    Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), true, 'Component\\'s wrapper has additional css class \\'' + cssClassName + '\\'');\n    });\n    /* eslint-enable no-unused-vars */\n\n    this.set('class', '');\n    /* eslint-disable no-unused-vars */\n    Ember.A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), false, 'Component\\'s wrapper hasn\\'t additional css class \\'' + cssClassName + '\\'');\n    });\n    /* eslint-enable no-unused-vars */\n  });\n\n  (0, _emberQunit.test)('component\\'s icon can be customized', function (assert) {\n    assert.expect(2);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"NWQn5fLd\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"flexberry-toggler\\\",null,[[\\\"iconClass\\\"],[[22,[\\\"iconClass\\\"]]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component, it's inner <input>.\n    var $component = this.$().children();\n    var $togglerTitle = $component.children('.title');\n    var $togglerIcon = $togglerTitle.children('i');\n\n    // Change default icon class.\n    var defaultIconClass = 'dropdown icon';\n    assert.strictEqual($togglerIcon.attr('class'), defaultIconClass, 'Component\\'s icon is \\'dropdown icon\\' by default');\n\n    // Change icon class & check again.\n    var iconClass = 'marker icon';\n    this.set('iconClass', iconClass);\n    assert.strictEqual($togglerIcon.attr('class'), iconClass, 'Component\\'s icon is \\'dropdown icon\\' by default');\n  });\n\n  (0, _emberQunit.test)('component expands/collapses with defined \\'expandedCaption\\' & \\'collapsedCaption\\'', function (assert) {\n    expandCollapseTogglerWithStateChecks.call(this, assert, {\n      expandedCaption: 'Toggler\\'s expanded caption',\n      collapsedCaption: 'Toggler\\'s collapsed caption'\n    });\n  });\n\n  (0, _emberQunit.test)('component expands/collapses with defined \\'caption\\' & \\'collapsedCaption\\'', function (assert) {\n    expandCollapseTogglerWithStateChecks.call(this, assert, {\n      caption: 'Toggler\\'s caption',\n      collapsedCaption: 'Toggler\\'s collapsed caption'\n    });\n  });\n\n  (0, _emberQunit.test)('component expands/collapses with defined \\'caption\\' & \\'expandedCaption\\'', function (assert) {\n    expandCollapseTogglerWithStateChecks.call(this, assert, {\n      caption: 'Toggler\\'s caption',\n      expandedCaption: 'Toggler\\'s expanded caption'\n    });\n  });\n\n  (0, _emberQunit.test)('component expands/collapses with only \\'caption\\' defined', function (assert) {\n    expandCollapseTogglerWithStateChecks.call(this, assert, {\n      caption: 'Toggler\\'s caption'\n    });\n  });\n\n  (0, _emberQunit.test)('component expands/collapses with only \\'expandedCaption\\' defined', function (assert) {\n    expandCollapseTogglerWithStateChecks.call(this, assert, {\n      expandedCaption: 'Toggler\\'s expanded caption'\n    });\n  });\n\n  (0, _emberQunit.test)('component expands/collapses with only \\'collapsedCaption\\' defined', function (assert) {\n    expandCollapseTogglerWithStateChecks.call(this, assert, {\n      collapsedCaption: 'Toggler\\'s collapsed caption'\n    });\n  });\n\n  (0, _emberQunit.test)('component expands/collapses without defined captions', function (assert) {\n    expandCollapseTogglerWithStateChecks.call(this, assert, {});\n  });\n\n  (0, _emberQunit.test)('changes in \\'expanded\\' property causes changing of component\\'s expand/collapse state', function (assert) {\n    assert.expect(9);\n\n    var content = 'Toggler\\'s content';\n    var collapsedCaption = 'Toggler\\'s collapsed caption';\n    var expandedCaption = 'Toggler\\'s expanded caption';\n\n    this.set('content', content);\n    this.set('collapsedCaption', collapsedCaption);\n    this.set('expandedCaption', expandedCaption);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"xUrRxBLi\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"flexberry-toggler\\\",null,[[\\\"expanded\\\",\\\"collapsedCaption\\\",\\\"expandedCaption\\\"],[[22,[\\\"expanded\\\"]],[22,[\\\"collapsedCaption\\\"]],[22,[\\\"expandedCaption\\\"]]]],{\\\"statements\\\":[[0,\\\"      \\\"],[1,[20,\\\"content\\\"],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component, it's inner <input>.\n    var $component = this.$().children();\n    var $togglerTitle = $component.children('.title');\n    var $togglerCaption = $togglerTitle.children('span');\n    var $togglerContent = $component.children('.content');\n\n    // Check that component is collapsed by default.\n    assert.strictEqual($togglerTitle.hasClass('active'), false);\n    assert.strictEqual($togglerContent.hasClass('active'), false);\n    assert.strictEqual(Ember.$.trim($togglerCaption.text()), collapsedCaption);\n\n    // Expand & check that component is expanded.\n    this.set('expanded', true);\n    assert.strictEqual($togglerTitle.hasClass('active'), true);\n    assert.strictEqual($togglerContent.hasClass('active'), true);\n    assert.strictEqual(Ember.$.trim($togglerCaption.text()), expandedCaption);\n\n    // Collapse & check that component is collapsed.\n    this.set('expanded', false);\n    assert.strictEqual($togglerTitle.hasClass('active'), false);\n    assert.strictEqual($togglerContent.hasClass('active'), false);\n    assert.strictEqual(Ember.$.trim($togglerCaption.text()), collapsedCaption);\n  });\n\n  (0, _emberQunit.test)('disabled animation', function (assert) {\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"30Kj9C3J\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"flexberry-toggler\\\",null,[[\\\"caption\\\",\\\"duration\\\"],[\\\"Click me!\\\",0]],{\\\"statements\\\":[[0,\\\"      Hello!\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.notOk(this.$('.flexberry-toggler .content').hasClass('active'));\n\n    this.$('.flexberry-toggler .title').click();\n\n    assert.ok(this.$('.flexberry-toggler .content').hasClass('active'));\n  });\n\n  (0, _emberQunit.test)('loong animation speed', function (assert) {\n    var _this = this;\n\n    assert.expect(3);\n    var done = assert.async();\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"QzgUxXIS\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"flexberry-toggler\\\",null,[[\\\"caption\\\",\\\"duration\\\"],[\\\"Click me!\\\",750]],{\\\"statements\\\":[[0,\\\"      Hello!\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    this.$('.flexberry-toggler .title').click();\n\n    assert.ok(this.$('.flexberry-toggler .content').hasClass('animating'));\n    Ember.run.later(function () {\n      assert.ok(_this.$('.flexberry-toggler .content').hasClass('animating'));\n    }, 500);\n    Ember.run.later(function () {\n      assert.notOk(_this.$('.flexberry-toggler .content').hasClass('animating'));\n      done();\n    }, 1000);\n  });\n});","define('dummy/tests/integration/components/flexberry-validationmessage-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('flexberry-validationmessage', 'Integration | Component | flexberry-validationmessage', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders and works', function (assert) {\n    var _this = this;\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"F4BP9WHG\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-validationmessage\\\",null,[[\\\"error\\\",\\\"color\\\",\\\"pointing\\\"],[[22,[\\\"error\\\"]],[22,[\\\"color\\\"]],[22,[\\\"pointing\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    [undefined, null, '', []].forEach(function (error) {\n      _this.set('error', error);\n      assert.ok(_this.$('.ui.label').is(':hidden'), 'Component is hidden if no error.');\n    });\n\n    this.set('error', 'This is error.');\n    assert.ok(this.$('.ui.label').is(':visible'), 'Component is visible if there errors.');\n    assert.equal(this.$().text().trim(), 'This is error.', 'Component shows error.');\n\n    this.set('error', ['First error.', 'Second error.']);\n    assert.equal(this.$().text().trim(), 'First error.,Second error.', 'Component shows all errors.');\n\n    assert.notOk(this.$('.ui.label').hasClass('red'), 'Override default color with undefined value.');\n    assert.notOk(this.$('.ui.label').hasClass('pointing'), 'Override default pointing with undefined value.');\n\n    this.set('color', 'pink');\n    this.set('pointing', 'left pointing');\n    assert.ok(this.$('.ui.label').hasClass('pink'), 'Color works through CSS class.');\n    assert.ok(this.$('.ui.label').hasClass('left'), 'Pointing works through CSS class.');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"dJ7ABynb\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"flexberry-validationmessage\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.ok(this.$('.ui.label').hasClass('red'), 'Default color \\'red\\'.');\n    assert.ok(this.$('.ui.label').hasClass('pointing'), 'Default pointing \\'pointing\\'.');\n  });\n});","define('dummy/tests/integration/components/flexberry-validationsummary-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('flexberry-validationsummary', 'Integration | Component | flexberry-validationsummary', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders and works', function (assert) {\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"T3lhr2lq\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"flexberry-validationsummary\\\",null,[[\\\"errors\\\",\\\"color\\\",\\\"header\\\"],[[22,[\\\"errors\\\"]],[22,[\\\"color\\\"]],[22,[\\\"header\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    var errors = this.set('errors', Ember.A());\n    assert.ok(this.$('.ui.message').is(':hidden'), 'Component is hidden if no errors.');\n\n    Ember.run(function () {\n      errors.pushObject('Validation error.');\n    });\n    assert.ok(this.$('.ui.message').is(':visible'), 'Component is visible if there errors.');\n    assert.ok(this.$().text().trim(), 'Validation error.', 'Component shows errors at added.');\n\n    this.set('header', 'Validation errors');\n    assert.ok(/Validation errors\\s*/.test(this.$().text().trim()), 'Component has a header.');\n\n    assert.notOk(this.$('.ui.label').hasClass('red'), 'Override default color with undefined value.');\n\n    this.set('color', 'blue');\n    assert.ok(this.$('.ui.message').hasClass('blue'), 'Color works through CSS class.');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"B1HkP5Uq\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"flexberry-validationsummary\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.ok(this.$('.ui.message').hasClass('red'), 'Default color \\'red\\'.');\n  });\n});","define('dummy/tests/integration/components/form-load-time-tracker-test', ['ember-i18n/services/i18n', 'ember-qunit'], function (_i18n, _emberQunit) {\n  'use strict';\n\n  var formLoadTimeTracker = Ember.Service.extend({\n    loadTime: 1.0000,\n    renderTime: 2.0000\n  });\n\n  (0, _emberQunit.moduleForComponent)('form-load-time-tracker', 'Integration | Component | form load time tracker', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.register('service:form-load-time-tracker', formLoadTimeTracker);\n      this.register('service:i18n', _i18n.default);\n\n      this.inject.service('i18n', { as: 'i18n' });\n      Ember.Component.reopen({\n        i18n: Ember.inject.service('i18n')\n      });\n\n      this.inject.service('form-load-time-tracker', { as: 'formLoadTimeTracker' });\n\n      // Set 'ru' as initial locale.\n      this.set('i18n.locale', 'ru');\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    var i18n = this.get('i18n');\n    var loadTimeText = i18n.t('components.form-load-time-tracker.load-time');\n    var renderTimeText = i18n.t('components.form-load-time-tracker.render-time');\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"fiSH9ohk\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"form-load-time-tracker\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$().text().trim(), loadTimeText + ': 1\\n' + renderTimeText + ': 2');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"DtXIWqiD\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"form-load-time-tracker\\\",null,null,{\\\"statements\\\":[[0,\\\"Yield here!\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$().text().trim(), loadTimeText + ': 1\\n' + renderTimeText + ': 2\\nYield here!');\n  });\n});","define('dummy/tests/integration/components/groupedit-toolbar-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('groupedit-toolbar', 'Integration | Component | groupedit toolbar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(2);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"nz9cvBqP\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"groupedit-toolbar\\\",null,[[\\\"componentName\\\"],[\\\"someName\\\"]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"qbw45Nu2\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"groupedit-toolbar\\\",null,[[\\\"componentName\\\"],[\\\"someName\\\"]],{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    //Component does not support template block usage.\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('dummy/tests/integration/components/modal-dialog-test', ['ember-qunit', 'ember-test-helpers/wait'], function (_emberQunit, _wait) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('modal-dialog', 'Integration | Component | modal dialog', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      // detachable need for jquery can do select child components\n      this.set('settings', {\n        detachable: false\n      });\n\n      this.set('created', false);\n      this.set('createdConsumer', function () {\n        _this.set('created', true);\n      });\n\n      Ember.Test.registerWaiter(this, function () {\n        return _this.get('created');\n      });\n    },\n    afterEach: function afterEach() {\n      this.$('.flexberry-modal').modal('hide dimmer');\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    var _this2 = this;\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"dBIiwO3L\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"modal-dialog\\\",null,[[\\\"settings\\\",\\\"created\\\"],[[22,[\\\"settings\\\"]],[22,[\\\"createdConsumer\\\"]]]],{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    return (0, _wait.default)().then(function () {\n      assert.equal(_this2.$('.description').text().trim(), 'template block text');\n    });\n  });\n\n  (0, _emberQunit.test)('it should not show actions div if no buttons visible', function (assert) {\n    var _this3 = this;\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"2I7g2N+e\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"modal-dialog\\\",null,[[\\\"settings\\\",\\\"created\\\",\\\"useOkButton\\\",\\\"useCloseButton\\\"],[[22,[\\\"settings\\\"]],[22,[\\\"createdConsumer\\\"]],false,false]],{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    return (0, _wait.default)().then(function () {\n      assert.equal(_this3.$('.actions').length, 0);\n    });\n  });\n});","define('dummy/tests/integration/components/object-list-view-test', ['ember-qunit', 'dummy/tests/helpers/start-app', 'dummy/models/components-examples/flexberry-groupedit/shared/aggregator', 'ember-flexberry/services/user-settings'], function (_emberQunit, _startApp, _aggregator, _userSettings) {\n  'use strict';\n\n  var App = void 0;\n\n  (0, _emberQunit.moduleForComponent)('object-list-view', 'Integration | Component | object list view', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      App = (0, _startApp.default)();\n      Ember.Component.reopen({\n        i18n: Ember.inject.service('i18n'),\n        userSettingsService: Ember.inject.service('user-settings')\n      });\n\n      _userSettings.default.reopen({\n        isUserSettingsServiceEnabled: false\n      });\n\n      // Just take it and turn it off...\n      App.__container__.lookup('service:log').set('enabled', false);\n    }\n  });\n\n  (0, _emberQunit.test)('columns renders', function (assert) {\n    var _this = this;\n\n    var store = App.__container__.lookup('service:store');\n\n    Ember.run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n\n      _this.set('proj', _aggregator.default.projections.get('AggregatorE'));\n      _this.set('model', model);\n      _this.render(Ember.HTMLBars.template({\n        \"id\": \"h5/LJ9Rn\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"object-list-view\\\",null,[[\\\"modelProjection\\\",\\\"content\\\",\\\"componentName\\\"],[[22,[\\\"proj\\\"]],[22,[\\\"model\\\",\\\"details\\\"]],\\\"someName\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.notEqual(_this.$().text().trim(), '');\n    });\n  });\n});","define('dummy/tests/integration/components/olv-filter-interval-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('olv-filter-interval', 'Integration | Component | olv filter interval', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ZGoM5/ro\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"olv-filter-interval\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('dummy/tests/integration/components/ui-message-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('ui-message', 'Integration | Component | ui-message', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders properly', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"QST815LZ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"ui-message\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // Check wrapper <div>.\n    assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n    assert.strictEqual($component.hasClass('message'), true, 'Component\\'s wrapper has \\' message\\' css-class');\n  });\n\n  (0, _emberQunit.test)('size renders properly', function (assert) {\n    var _this = this;\n\n    assert.expect(8);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"YtPrj2kZ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"size\\\"],[[22,[\\\"size\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // Check component's syze's types.\n    var sizeTypes = Ember.A(['small', 'large', 'huge', 'massive']);\n    /* eslint-disable no-unused-vars */\n    sizeTypes.forEach(function (sizeCssClassName, index) {\n      _this.set('size', sizeCssClassName);\n      assert.strictEqual($component.hasClass(sizeCssClassName), true, 'Component\\'s wrapper has size css-class \\'' + sizeCssClassName + '\\'');\n    });\n    /* eslint-enable no-unused-vars */\n\n    this.set('size', '');\n    /* eslint-disable no-unused-vars */\n    sizeTypes.forEach(function (sizeCssClassName, index) {\n      assert.strictEqual($component.hasClass(sizeCssClassName), false, 'Component\\'s wrapper hasn\\'t size css-class \\'' + sizeCssClassName + '\\'');\n    });\n    /* eslint-enable no-unused-vars */\n  });\n\n  (0, _emberQunit.test)('type renders properly', function (assert) {\n    var _this2 = this;\n\n    assert.expect(12);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"+dL3UPGt\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"type\\\"],[[22,[\\\"type\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // Check component's type's CSS-classes.\n    var typeCssClasses = Ember.A(['warning', 'info', 'positive', 'success', 'negative', 'error']);\n    /* eslint-disable no-unused-vars */\n    typeCssClasses.forEach(function (typeCssClassName, index) {\n      _this2.set('type', typeCssClassName);\n      assert.strictEqual($component.hasClass(typeCssClassName), true, 'Component\\'s wrapper has type css-class \\'' + typeCssClassName + '\\'');\n    });\n    /* eslint-enable no-unused-vars */\n\n    this.set('type', '');\n    /* eslint-disable no-unused-vars */\n    typeCssClasses.forEach(function (typeCssClassName, index) {\n      assert.strictEqual($component.hasClass(typeCssClassName), false, 'Component\\'s wrapper hasn\\'t type css-class \\'' + typeCssClassName + '\\'');\n    });\n    /* eslint-enable no-unused-vars */\n  });\n\n  (0, _emberQunit.test)('color renders properly', function (assert) {\n    var _this3 = this;\n\n    assert.expect(24);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Gpe4jVFk\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"color\\\"],[[22,[\\\"color\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // Check component's color's CSS-classes.\n    var colorCssClasses = Ember.A(['red', 'orange', 'yellow', 'olive', 'green', 'teal', 'blue', 'violet', 'purple', 'pink', 'brown', 'black']);\n    /* eslint-disable no-unused-vars */\n    colorCssClasses.forEach(function (colorCssClassName, index) {\n      _this3.set('color', colorCssClassName);\n      assert.strictEqual($component.hasClass(colorCssClassName), true, 'Component\\'s wrapper has color css-class \\'' + colorCssClassName + '\\'');\n    });\n    /* eslint-enable no-unused-vars */\n\n    this.set('color', '');\n    /* eslint-disable no-unused-vars */\n    colorCssClasses.forEach(function (colorCssClassName, index) {\n      assert.strictEqual($component.hasClass(colorCssClassName), false, 'Component\\'s wrapper hasn\\'t color css-class \\'' + colorCssClassName + '\\'');\n    });\n    /* eslint-enable no-unused-vars */\n  });\n\n  (0, _emberQunit.test)('floating renders properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"D889f8Ys\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"floating\\\"],[[22,[\\\"floating\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // Check wrapper <div>.\n    assert.strictEqual($component.hasClass('floating'), false, 'Component\\'s wrapper hasn\\'t \\'floating\\' css-class');\n\n    this.set('floating', true);\n    assert.strictEqual($component.hasClass('floating'), true, 'Component\\'s wrapper has \\'floating\\' css-class');\n\n    this.set('floating', false);\n    assert.strictEqual($component.hasClass('floating'), false, 'Component\\'s wrapper hasn\\'t \\'floating\\' css-class');\n  });\n\n  (0, _emberQunit.test)('attached renders properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"+iRwRmSZ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"attached\\\"],[[22,[\\\"attached\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // Check wrapper <div>.\n    assert.strictEqual($component.hasClass('attached'), false, 'Component\\'s wrapper hasn\\'t \\'attached\\' css-class');\n\n    this.set('attached', true);\n    assert.strictEqual($component.hasClass('attached'), true, 'Component\\'s wrapper has \\'attached\\' css-class');\n\n    this.set('attached', false);\n    assert.strictEqual($component.hasClass('attached'), false, 'Component\\'s wrapper hasn\\'t \\'attached\\' css-class');\n  });\n\n  (0, _emberQunit.test)('visible renders properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ugsdBNVe\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"visible\\\",\\\"closeable\\\"],[[22,[\\\"visible\\\"]],true]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $closeableIcon = $component.children('i');\n\n    // Component is visible.\n    assert.strictEqual($component.hasClass('hidden'), false, 'Component\\'s wrapper hasn\\'t css-class \\'hidden\\'');\n\n    // The component is hidden by the Close button.\n    Ember.run(function () {\n      $closeableIcon.click();\n    });\n\n    assert.strictEqual($component.hasClass('hidden'), true, 'Component\\'s wrapper has css-class \\'hidden\\'');\n\n    // Component is visible again.\n    this.set('visible', true);\n    assert.strictEqual($component.hasClass('hidden'), false, 'Component\\'s wrapper hasn\\'t css-class \\'hidden\\'');\n  });\n\n  (0, _emberQunit.test)('closeable renders properly', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"UaYYereD\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"closeable\\\"],[true]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $closeableIcon = $component.children('i');\n\n    assert.strictEqual($closeableIcon.hasClass('close'), true, 'Component\\'s close icon has css-class \\'close\\'');\n    assert.strictEqual($closeableIcon.hasClass('icon'), true, 'Component\\'s wrapper has css-class \\'icon\\'');\n  });\n\n  (0, _emberQunit.test)('caption & massage renders properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Frieyj9C\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"caption\\\",\\\"message\\\"],[\\\"My caption\\\",\\\"My message\\\"]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $captionText = $component.children('div');\n    var $massageText = $component.children('p');\n\n    assert.strictEqual($captionText.hasClass('header'), true, 'Component\\'s caption block has \\'header\\' css-class');\n    assert.strictEqual(Ember.$.trim($captionText.text()), 'My caption', 'Component\\'s caption is right');\n    assert.strictEqual(Ember.$.trim($massageText.text()), 'My message', 'Component\\'s message is right');\n  });\n\n  (0, _emberQunit.test)('icon renders properly', function (assert) {\n    assert.expect(7);\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"5DlouAdb\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"icon\\\",\\\"caption\\\",\\\"message\\\"],[\\\"icon paw\\\",\\\"My caption\\\",\\\"My message\\\"]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $messageIcon = $component.children('i');\n    var $captionDiv = $component.children('div.content');\n    var $captionText = $captionDiv.children('div.header');\n    var $massageText = $captionDiv.children('p');\n\n    assert.strictEqual($component.hasClass('icon'), true, 'Component\\'s wrapper has \\'icon\\' css-class');\n    assert.strictEqual($messageIcon.hasClass('paw'), true, 'Component\\'s icon has \\'paw\\' css-class');\n    assert.strictEqual($messageIcon.hasClass('icon'), true, 'Component\\'s icon has \\'icon\\' css-class');\n    assert.strictEqual($captionDiv.hasClass('content'), true, 'Component\\'s content block has \\'content\\' css-class');\n    assert.strictEqual($captionText.hasClass('header'), true, 'Component\\'s caption block has \\'header\\' css-class');\n    assert.strictEqual(Ember.$.trim($captionText.text()), 'My caption', 'Component\\'s caption is right');\n    assert.strictEqual(Ember.$.trim($massageText.text()), 'My message', 'Component\\'s message is right');\n  });\n\n  (0, _emberQunit.test)('component sends \\'onHide\\' action', function (assert) {\n    assert.expect(3);\n\n    var messageClose = false;\n    this.set('actions.onClose', function () {\n      messageClose = true;\n    });\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"IABVmd0q\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"closeable\\\",\\\"onHide\\\"],[true,[26,\\\"action\\\",[[21,0,[]],\\\"onClose\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $closeableIcon = $component.children('i');\n\n    // The component is visible.\n    assert.strictEqual($component.hasClass('hidden'), false, 'Component\\'s wrapper has\\'t css-class \\'hidden\\'');\n\n    // The component is hidden by the Close button.\n    Ember.run(function () {\n      var done = assert.async();\n      $closeableIcon.click();\n      setTimeout(function () {\n        assert.strictEqual(messageClose, true, 'Component closed');\n        assert.strictEqual($component.hasClass('hidden'), true, 'Component\\'s wrapper has css-class \\'hidden\\'');\n        done();\n      }, 50);\n    });\n  });\n\n  (0, _emberQunit.test)('component sends \\'onShow\\' action', function (assert) {\n    assert.expect(4);\n\n    var messageVisible = false;\n    this.set('actions.onVisible', function () {\n      messageVisible = true;\n    });\n\n    // Render component.\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"DTAIN0dA\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"ui-message\\\",null,[[\\\"closeable\\\",\\\"visible\\\",\\\"onShow\\\"],[true,[22,[\\\"visible\\\"]],[26,\\\"action\\\",[[21,0,[]],\\\"onVisible\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // The component is hidden.\n    this.set('visible', false);\n    assert.strictEqual(messageVisible, false, 'Component is not visible');\n    assert.strictEqual($component.hasClass('hidden'), true, 'Component\\'s wrapper has css-class \\'hidden\\'');\n\n    // The component is visible.\n    this.set('visible', true);\n    assert.strictEqual(messageVisible, true, 'Component is visible');\n    assert.strictEqual($component.hasClass('hidden'), false, 'Component\\'s wrapper hasn\\'t css-class \\'hidden\\'');\n  });\n});","define('dummy/tests/test-helper', ['dummy/app', 'dummy/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('dummy/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('acceptance/components/base-flexberry-lookup-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/base-flexberry-lookup-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-dropdown/flexberry-dropdown-conditional-render-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-dropdown/flexberry-dropdown-conditional-render-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-dropdown/flexberry-dropdown-empty-value-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-dropdown/flexberry-dropdown-empty-value-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-groupedit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-groupedit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-groupedit/flexberry-groupedit-check-all-at-page-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-groupedit/flexberry-groupedit-check-all-at-page-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-groupedit/flexberry-groupedit-configurate-row-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-groupedit/flexberry-groupedit-configurate-row-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-groupedit/flexberry-groupedit-user-button-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-groupedit/flexberry-groupedit-user-button-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-lookup/change-component-lookup-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-lookup/change-component-lookup-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-lookup/change-model-lookup-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-lookup/change-model-lookup-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-lookup/execute-flexberry-lookup-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-lookup/execute-flexberry-lookup-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-lookup/flexberry-lookup-actions-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-lookup/flexberry-lookup-actions-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-lookup/flexberry-lookup-autocomplete-en-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-lookup/flexberry-lookup-autocomplete-en-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-lookup/flexberry-lookup-autocomplete-ru-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-lookup/flexberry-lookup-autocomplete-ru-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-lookup/flexberry-lookup-autofill-by-limit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-lookup/flexberry-lookup-autofill-by-limit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-lookup/flexberry-lookup-limit-function-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-lookup/flexberry-lookup-limit-function-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-lookup/flexberry-lookup-preview-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-lookup/flexberry-lookup-preview-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-lookup/flexberry-lookup-projection-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-lookup/flexberry-lookup-projection-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-lookup/flexberry-lookup-relation-name-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-lookup/flexberry-lookup-relation-name-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-lookup/lookup-test-functions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-lookup/lookup-test-functions.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-lookup/visiting-flexberry-lookup-autocomplete-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-lookup/visiting-flexberry-lookup-autocomplete-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-lookup/visiting-flexberry-lookup-dropdown-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-lookup/visiting-flexberry-lookup-dropdown-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/checkbox-at-editform-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/checkbox-at-editform-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/execute-folv-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/execute-folv-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/filther/folv-empty-filter-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/filther/folv-empty-filter-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/filther/folv-filter-by-enther-click-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/filther/folv-filter-by-enther-click-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/filther/folv-filter-render-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/filther/folv-filter-render-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/filther/folv-filter-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/filther/folv-filter-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/filther/folv-ge-filter-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/filther/folv-ge-filter-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/filther/folv-le-filter-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/filther/folv-le-filter-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/filther/folv-like-filter-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/filther/folv-like-filter-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/filther/folv-neq-filter-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/filther/folv-neq-filter-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/filther/folv-without-operation-filter-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/filther/folv-without-operation-filter-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-check-all-at-all-page-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-check-all-at-all-page-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-check-all-at-page-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-check-all-at-page-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-checked-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-checked-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-column-config-save-button-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-column-config-save-button-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-configurate-row-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-configurate-row-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-date-format-moment-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-date-format-moment-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-data-cancel-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-data-cancel-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-data-immediately-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-data-immediately-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-with-promise-data-cancel-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-with-promise-data-cancel-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-with-promise-data-immediately-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-with-promise-data-immediately-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-with-promise-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-delete-before-recoed-with-promise-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-delete-button-in-row-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-delete-button-in-row-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-delete-button-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-delete-button-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-edit-button-in-row-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-edit-button-in-row-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-from-edit-form-with-queryparams-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-from-edit-form-with-queryparams-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-getCellComponent-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-getCellComponent-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-goto-editform-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-goto-editform-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-limit-function-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-limit-function-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-locales-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-locales-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-open-newform-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-open-newform-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-paging-dropdown-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-paging-dropdown-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-paging-navigation-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-paging-navigation-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-select-record-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-select-record-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-sorting-by-computable-field-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-sorting-by-computable-field-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-sorting-clear-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-sorting-clear-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-sorting-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-sorting-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-sorting-with-default-setting-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-sorting-with-default-setting-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-tests-functions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-tests-functions.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-user-button-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-user-button-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/flexberry-objectlistview/folv-wrapper-projection-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-wrapper-projection-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/components/readonly-test/edit-form-readonly-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/readonly-test/edit-form-readonly-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/edit-form-validation-test/execute-validation-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/edit-form-validation-test/execute-validation-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/edit-form-validation-test/validation-base-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/edit-form-validation-test/validation-base-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/edit-form-validation-test/validation-checkbox-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/edit-form-validation-test/validation-checkbox-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/edit-form-validation-test/validation-detail-delete-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/edit-form-validation-test/validation-detail-delete-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/edit-form-validation-test/validation-detail-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/edit-form-validation-test/validation-detail-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/edit-form-validation-test/validation-dropdown-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/edit-form-validation-test/validation-dropdown-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/edit-form-validation-test/validation-file-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/edit-form-validation-test/validation-file-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/edit-form-validation-test/validation-lookup-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/edit-form-validation-test/validation-lookup-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/edit-form-validation-test/validation-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/edit-form-validation-test/validation-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/edit-form-validation-test/validation-textarea-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/edit-form-validation-test/validation-textarea-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/edit-form-validation-test/validation-textbox-letter-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/edit-form-validation-test/validation-textbox-letter-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/edit-form-validation-test/validation-textbox-numeric-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/edit-form-validation-test/validation-textbox-numeric-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/flexberry-checkbox-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-checkbox-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/flexberry-ddau-checkbox-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-ddau-checkbox-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/flexberry-dropdown-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-dropdown-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/flexberry-error-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-error-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/flexberry-field-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-field-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/flexberry-groupedit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-groupedit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/flexberry-lookup-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-lookup-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/flexberry-sidebar-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-sidebar-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/flexberry-simpledatetime-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-simpledatetime-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/flexberry-sitemap-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-sitemap-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/flexberry-textarea-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-textarea-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/flexberry-textbox-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-textbox-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/flexberry-toggler-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-toggler-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/flexberry-validationmessage-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-validationmessage-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/flexberry-validationsummary-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-validationsummary-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-load-time-tracker-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-load-time-tracker-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/groupedit-toolbar-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/groupedit-toolbar-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/modal-dialog-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/modal-dialog-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/object-list-view-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/object-list-view-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/olv-filter-interval-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/olv-filter-interval-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ui-message-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ui-message-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/detail-edit-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/detail-edit-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/edit-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/edit-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/flexberry-file-view-dialog-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/flexberry-file-view-dialog-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/list-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/list-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/lookup-dialog-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/lookup-dialog-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/new-platform-flexberry-services-lock-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/new-platform-flexberry-services-lock-list-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/readonly-cell-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/readonly-cell-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/initializers/i18n-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/i18n-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/initializers/render-perf-logger-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/render-perf-logger-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/instance-initializers/i18n-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/instance-initializers/i18n-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/instance-initializers/lock-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/instance-initializers/lock-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/instance-initializers/moment-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/instance-initializers/moment-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/dynamic-actions-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/dynamic-actions-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/dynamic-properties-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/dynamic-properties-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/errorable-route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/errorable-route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/flexberry-file-controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-file-controller-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/flexberry-groupedit-route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-groupedit-route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/lock-route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/lock-route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/modal-application-route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/modal-application-route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/multi-list-controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/multi-list-controller-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/multi-list-model-edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/multi-list-model-edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/multi-list-model-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/multi-list-model-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/multi-list-route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/multi-list-route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/paginated-controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/paginated-controller-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/paginated-route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/paginated-route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/predicate-from-filters-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/predicate-from-filters-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/reload-list-mixin-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/reload-list-mixin-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/sortable-controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/sortable-controller-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/sortable-route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/sortable-route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/new-platform-flexberry-flexberry-user-setting-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/new-platform-flexberry-flexberry-user-setting-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/new-platform-flexberry-services-lock-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/new-platform-flexberry-services-lock-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/edit-form-new-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/edit-form-new-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/edit-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/edit-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/list-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/list-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/new-platform-flexberry-services-lock-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/new-platform-flexberry-services-lock-list-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/projected-model-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/projected-model-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/new-platform-flexberry-services-lock-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/new-platform-flexberry-services-lock-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/app-state-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/app-state-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/detail-interaction-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/detail-interaction-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/form-load-time-tracker-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/form-load-time-tracker-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/log-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/log-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/objectlistview-events-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/objectlistview-events-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/utils/cut-string-by-length-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/cut-string-by-length-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/utils/deserialize-sorting-param-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/deserialize-sorting-param-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/utils/get-current-agregator-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/get-current-agregator-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/utils/get-projection-by-name-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/get-projection-by-name-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/utils/need-save-current-agregator-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/need-save-current-agregator-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/utils/serialize-sorting-param-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/serialize-sorting-param-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/utils/string-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/string-test.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/unit/adapters/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'ApplicationAdapter', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('dummy/tests/unit/controllers/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:application', {\n    needs: ['service:objectlistview-events', 'service:app-state']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('dummy/tests/unit/controllers/detail-edit-form-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:detail-edit-form', 'Unit | Controller | detail edit form', {\n    needs: ['controller:advlimit-dialog', 'controller:colsconfig-dialog', 'controller:flexberry-file-view-dialog', 'controller:lookup-dialog', 'controller:filters-dialog', 'service:detail-interaction', 'service:objectlistview-events', 'service:user-settings', 'service:app-state', 'service:adv-limit']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var _this = this;\n\n    var controller = void 0;\n    Ember.run(function () {\n      controller = _this.subject();\n    });\n\n    assert.ok(controller);\n  });\n});","define('dummy/tests/unit/controllers/edit-form-test', ['ember-data', 'ember-qunit', 'dummy/tests/helpers/start-app'], function (_emberData, _emberQunit, _startApp) {\n  'use strict';\n\n  var App;\n\n  (0, _emberQunit.moduleFor)('controller:edit-form', 'Unit | Controller | edit form', {\n    needs: ['controller:advlimit-dialog', 'controller:colsconfig-dialog', 'controller:flexberry-file-view-dialog', 'controller:lookup-dialog', 'controller:filters-dialog', 'service:detail-interaction', 'service:objectlistview-events', 'service:user-settings', 'service:app-state', 'service:adv-limit'],\n\n    beforeEach: function beforeEach() {\n      App = (0, _startApp.default)();\n    },\n    afterEach: function afterEach() {\n      Ember.run(App, 'destroy');\n      Ember.$.mockjax.clear();\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var _this = this;\n\n    var controller = void 0;\n    Ember.run(function () {\n      controller = _this.subject();\n    });\n    assert.ok(controller);\n  });\n\n  (0, _emberQunit.test)('save hasMany relationships recursively', function (assert) {\n    var _this3 = this;\n\n    var savedRecords = [];\n\n    var TestModel = _emberData.default.Model.extend({\n      save: function save() {\n        var _this2 = this;\n\n        return new Ember.RSVP.Promise(function (resolve) {\n          savedRecords.push(_this2);\n          resolve(_this2);\n        });\n      }\n    });\n\n    var Model1 = TestModel.extend({\n      hasManyModel2: _emberData.default.hasMany('model2')\n    });\n\n    var Model2 = TestModel.extend({\n      hasManyModel3: _emberData.default.hasMany('model3')\n    });\n\n    var Model3 = TestModel.extend({});\n\n    App.register('model:model1', Model1);\n    App.register('model:model2', Model2);\n    App.register('model:model3', Model3);\n\n    var controller = void 0;\n    var store = void 0;\n    Ember.run(function () {\n      controller = _this3.subject();\n      store = App.__container__.lookup('service:store');\n    });\n\n    Ember.run(function () {\n      var record = store.createRecord('model1');\n      var model21 = store.createRecord('model2');\n      var model22 = store.createRecord('model2');\n      record.get('hasManyModel2').pushObjects([model21, model22]);\n      var model31 = store.createRecord('model3');\n      model22.get('hasManyModel3').pushObjects([model31]);\n\n      controller.set('model', record);\n      controller._saveHasManyRelationships(record).then(function () {\n        assert.equal(savedRecords[0], model21);\n        assert.equal(savedRecords[1], model22);\n        assert.equal(savedRecords[2], model31);\n      });\n    });\n  });\n});","define('dummy/tests/unit/controllers/flexberry-file-view-dialog-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:flexberry-file-view-dialog', 'Unit | Controller | edit form', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('dummy/tests/unit/controllers/list-form-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:list-form', 'Unit | Controller | list form', {\n    needs: ['controller:advlimit-dialog', 'controller:colsconfig-dialog', 'controller:filters-dialog', 'service:objectlistview-events', 'service:user-settings', 'service:adv-limit']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('dummy/tests/unit/controllers/lookup-dialog-test', ['ember-qunit', 'sinon'], function (_emberQunit, _sinon) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:lookup-dialog', 'Unit | Controller | lookup dialog', {\n    needs: ['controller:advlimit-dialog', 'controller:colsconfig-dialog', 'controller:filters-dialog', 'service:lookup-events', 'service:objectlistview-events', 'service:user-settings', 'service:adv-limit']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n\n  (0, _emberQunit.test)('it shold set selected record to saveTo.propName of saveTo.model', function (assert) {\n    var model = Ember.Object.extend({ makeDirty: function makeDirty() {} }).create();\n    var saveTo = {\n      model: model,\n      propName: 'testProperty'\n    };\n\n    var controller = this.subject();\n    controller.set('saveTo', saveTo);\n\n    _sinon.default.stub(model, 'makeDirty');\n    _sinon.default.stub(controller, '_closeModalDialog');\n    var master = Ember.Object.create();\n\n    controller.send('objectListViewRowClick', master);\n\n    assert.equal(model.get('testProperty'), master);\n  });\n});","define('dummy/tests/unit/controllers/new-platform-flexberry-services-lock-list-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:new-platform-flexberry-services-lock-list', 'Unit | Controller | new-platform-flexberry-services-lock-list', {\n    needs: ['controller:advlimit-dialog', 'controller:colsconfig-dialog', 'controller:filters-dialog', 'service:adv-limit', 'service:objectlistview-events', 'service:user-settings']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('dummy/tests/unit/helpers/readonly-cell-test', ['dummy/helpers/readonly-cell', 'qunit'], function (_readonlyCell, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | readonly cell');\n\n  (0, _qunit.test)('it works', function (assert) {\n    Ember.run(function () {\n      var result = (0, _readonlyCell.readonlyCell)([['test'], 'test', false]);\n      assert.ok(result);\n    });\n  });\n});","define('dummy/tests/unit/initializers/i18n-test', ['dummy/initializers/i18n', 'qunit'], function (_i18n, _qunit) {\n  'use strict';\n\n  var application = void 0;\n\n  (0, _qunit.module)('Unit | Initializer | i18n', {\n    beforeEach: function beforeEach() {\n      Ember.run(function () {\n        application = Ember.Application.create();\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    _i18n.default.initialize(application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('dummy/tests/unit/initializers/render-perf-logger-test', ['dummy/initializers/render-perf-logger', 'qunit'], function (_renderPerfLogger, _qunit) {\n  'use strict';\n\n  var application = void 0;\n\n  (0, _qunit.module)('Unit | Initializer | render perf logger', {\n    beforeEach: function beforeEach() {\n      Ember.run(function () {\n        application = Ember.Application.create();\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    _renderPerfLogger.default.initialize(application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('dummy/tests/unit/instance-initializers/i18n-test', ['ember-flexberry/instance-initializers/i18n', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (_i18n, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  var application = void 0;\n  var appInstance = void 0;\n  var fakeLocale = void 0;\n\n  (0, _qunit.module)('Unit | Instance Initializer | i18n', {\n    beforeEach: function beforeEach() {\n      application = (0, _startApp.default)();\n      appInstance = application.buildInstance();\n\n      // Just take it and turn it off...\n      appInstance.lookup('service:log').set('enabled', false);\n\n      // Set 'fake-locale' as default i18n-service locale.\n      var i18n = appInstance.lookup('service:i18n');\n      fakeLocale = 'fake-locale';\n      i18n.set('locale', fakeLocale);\n    },\n    afterEach: function afterEach() {\n      (0, _destroyApp.default)(appInstance);\n      (0, _destroyApp.default)(application);\n    }\n  });\n\n  (0, _qunit.test)('Configures i18n service for locale', function (assert) {\n    Ember.run(function () {\n      assert.expect(2);\n\n      var i18n = appInstance.lookup('service:i18n');\n      var ENV = appInstance.factoryFor('config:environment').class;\n      var defaultLocale = (ENV.i18n || {}).defaultLocale;\n\n      assert.strictEqual(i18n.get('locale'), fakeLocale, 'Default i18n-service locale is \\'' + fakeLocale + '\\'');\n\n      var currentLocale = defaultLocale ? defaultLocale : window.navigator.languages ? window.navigator.languages[0] : window.navigator.language || window.navigator.userLanguage;\n\n      var locales = appInstance.lookup('controller:application').get('locales');\n      if (!locales || Ember.typeOf(locales) !== 'array' || locales.indexOf(currentLocale) === -1 || Ember.isBlank(currentLocale)) {\n        currentLocale = 'en';\n      }\n\n      _i18n.default.initialize(appInstance);\n\n      assert.strictEqual(i18n.get('locale'), currentLocale, 'Current i18n-service locale is \\'' + currentLocale + '\\'');\n    });\n  });\n});","define('dummy/tests/unit/instance-initializers/lock-test', ['dummy/instance-initializers/lock', 'qunit', 'dummy/tests/helpers/destroy-app'], function (_lock, _qunit, _destroyApp) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Instance Initializer | lock', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      Ember.run(function () {\n        _this.application = Ember.Application.create();\n        _this.appInstance = _this.application.buildInstance();\n      });\n    },\n    afterEach: function afterEach() {\n      Ember.run(this.appInstance, 'destroy');\n      (0, _destroyApp.default)(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _lock.initialize)(this.appInstance);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('dummy/tests/unit/instance-initializers/moment-test', ['ember-flexberry/instance-initializers/moment', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (_moment, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  var application = void 0;\n  var appInstance = void 0;\n  var defaultLocale = void 0;\n  var defaultFormat = void 0;\n\n  (0, _qunit.module)('Unit | Instance Initializer | moment', {\n    beforeEach: function beforeEach() {\n      application = (0, _startApp.default)();\n      appInstance = application.buildInstance();\n\n      // Run instance-initializer.\n      _moment.default.initialize(appInstance);\n\n      // Set 'en' as default locale.\n      var i18n = appInstance.lookup('service:i18n');\n      defaultLocale = 'en';\n      i18n.set('locale', defaultLocale);\n\n      // Set 'DD.MM.YYYY' as default date format.\n      var moment = appInstance.lookup('service:moment');\n      defaultFormat = 'DD.MM.YYYY';\n      moment.set('defaultFormat', defaultFormat);\n    },\n    afterEach: function afterEach() {\n      (0, _destroyApp.default)(appInstance);\n      (0, _destroyApp.default)(application);\n    }\n  });\n\n  (0, _qunit.test)('Changes in i18n-service locale causes same changes in moment-service & in global moment object', function (assert) {\n    assert.expect(4);\n\n    var i18n = appInstance.lookup('service:i18n');\n    var moment = appInstance.lookup('service:moment');\n\n    assert.strictEqual(moment.get('locale'), defaultLocale, 'Initial locale in moment service is equals to \\'' + defaultLocale + '\\'');\n    assert.strictEqual(window.moment.locale(), defaultLocale, 'Initial locale in window.moment object is equals to \\'' + defaultLocale + '\\'');\n\n    var newLocale = 'ru';\n    i18n.set('locale', newLocale);\n\n    assert.strictEqual(moment.get('locale'), newLocale, 'Initial locale in moment service is equals to \\'' + newLocale + '\\'');\n    assert.strictEqual(window.moment.locale(), newLocale, 'Initial locale in window.moment object is equals to \\'' + newLocale + '\\'');\n  });\n\n  (0, _qunit.test)('Changes in moment-service default format causes same changes in global moment object', function (assert) {\n    assert.expect(4);\n\n    var moment = appInstance.lookup('service:moment');\n\n    assert.strictEqual(moment.get('defaultFormat'), defaultFormat, 'Initial locale in moment service is equals to \\'' + defaultFormat + '\\'');\n    assert.strictEqual(window.moment.defaultFormat, defaultFormat, 'Initial locale in window.moment object is equals to \\'' + defaultFormat + '\\'');\n\n    var newDefaultFormat = 'MMMM Do YYYY, h:mm:ss a';\n    moment.set('defaultFormat', newDefaultFormat);\n\n    assert.strictEqual(moment.get('defaultFormat'), newDefaultFormat, 'Initial locale in moment service is equals to \\'' + newDefaultFormat + '\\'');\n    assert.strictEqual(window.moment.defaultFormat, newDefaultFormat, 'Initial locale in window.moment object is equals to \\'' + newDefaultFormat + '\\'');\n  });\n});","define('dummy/tests/unit/mixins/dynamic-actions-test', ['ember-flexberry/mixins/dynamic-actions', 'ember-flexberry/objects/dynamic-action', 'qunit'], function (_dynamicActions, _dynamicAction, _qunit) {\n  'use strict';\n\n  function _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  }\n\n  var ComponentWithDynamicActionsMixin = Ember.Component.extend(_dynamicActions.default, {});\n\n  (0, _qunit.module)('Unit | Mixin | dynamic-actions mixin');\n\n  (0, _qunit.test)('Mixin throws assertion failed exception if specified \\'dynamicActions\\' is not array', function (assert) {\n    var wrongDynamicActionsArray = Ember.A([1, true, false, 'some string', {}, function () {}, new Date(), new RegExp()]);\n\n    assert.expect(wrongDynamicActionsArray.length);\n\n    wrongDynamicActionsArray.forEach(function (wrongDynamicActions) {\n      var component = ComponentWithDynamicActionsMixin.create({\n        attrs: {},\n        dynamicActions: wrongDynamicActions,\n        renderer: {}\n      });\n\n      try {\n        component.sendDynamicAction('someAction');\n      } catch (ex) {\n        assert.strictEqual(/wrong\\s*type\\s*of\\s*.*dynamicActions.*/gi.test(ex.message), true, 'Throws assertion failed exception if specified \\'dynamicActions\\' property is \\'' + Ember.typeOf(wrongDynamicActions) + '\\'');\n      }\n    });\n  });\n\n  (0, _qunit.test)('Mixin throws assertion failed exception if one of specified \\'dynamicActions\\' has wrong \\'on\\' property', function (assert) {\n    var wrongOnPropertiesArray = Ember.A([1, true, false, {}, [], function () {}, new Date(), new RegExp()]);\n\n    assert.expect(wrongOnPropertiesArray.length);\n\n    wrongOnPropertiesArray.forEach(function (wrongOnProperty) {\n      var component = ComponentWithDynamicActionsMixin.create({\n        attrs: {},\n        dynamicActions: Ember.A([_dynamicAction.default.create({\n          on: wrongOnProperty,\n          actionHandler: null,\n          actionName: null,\n          actionContext: null,\n          actionArguments: null\n        })]),\n        renderer: {}\n      });\n\n      try {\n        component.sendDynamicAction('someAction');\n      } catch (ex) {\n        assert.strictEqual(/wrong\\s*type\\s*of\\s*.*on.*/gi.test(ex.message), true, 'Throws assertion failed exception if one of specified \\'dynamicActions\\' has \\'on\\' property of wrong type \\'' + Ember.typeOf(wrongOnProperty) + '\\'');\n      }\n    });\n  });\n\n  (0, _qunit.test)('Mixin throws assertion failed exception if one of specified \\'dynamicActions\\' has wrong \\'actionHandler\\' property', function (assert) {\n    var wrongActionHandlersArray = Ember.A([1, true, false, 'some string', {}, [], new Date(), new RegExp()]);\n\n    assert.expect(wrongActionHandlersArray.length);\n\n    wrongActionHandlersArray.forEach(function (wrongActionHandler) {\n      var component = ComponentWithDynamicActionsMixin.create({\n        attrs: {},\n        dynamicActions: Ember.A([_dynamicAction.default.create({\n          on: 'someAction',\n          actionHandler: wrongActionHandler,\n          actionName: null,\n          actionContext: null,\n          actionArguments: null\n        })]),\n        renderer: {}\n      });\n\n      try {\n        component.sendDynamicAction('someAction');\n      } catch (ex) {\n        assert.strictEqual(/wrong\\s*type\\s*of\\s*.*actionHandler.*/gi.test(ex.message), true, 'Throws assertion failed exception if one of specified \\'dynamicActions\\' has \\'actionHandler\\' property of wrong type \\'' + Ember.typeOf(wrongActionHandler) + '\\'');\n      }\n    });\n  });\n\n  (0, _qunit.test)('Mixin throws assertion failed exception if one of specified \\'dynamicActions\\' has wrong \\'actionName\\' property', function (assert) {\n    var wrongActionNamesArray = Ember.A([1, true, false, {}, [], function () {}, new Date(), new RegExp()]);\n\n    assert.expect(wrongActionNamesArray.length);\n\n    wrongActionNamesArray.forEach(function (wrongActionName) {\n      var component = ComponentWithDynamicActionsMixin.create({\n        attrs: {},\n        dynamicActions: Ember.A([_dynamicAction.default.create({\n          on: 'someAction',\n          actionHandler: null,\n          actionName: wrongActionName,\n          actionContext: null,\n          actionArguments: null\n        })]),\n        renderer: {}\n      });\n\n      try {\n        component.sendDynamicAction('someAction');\n      } catch (ex) {\n        assert.strictEqual(/wrong\\s*type\\s*of\\s*.*actionName.*/gi.test(ex.message), true, 'Throws assertion failed exception if one of specified \\'dynamicActions\\' has \\'actionName\\' property of wrong type \\'' + Ember.typeOf(wrongActionName) + '\\'');\n      }\n    });\n  });\n\n  (0, _qunit.test)('Mixin throws assertion failed exception if one of specified \\'dynamicActions\\' has defined \\'actionName\\', but' + ' wrong \\'actionContext\\' property (without \\'send\\' method)', function (assert) {\n    var wrongActionContextsArray = Ember.A([null, 1, true, false, {}, [], function () {}, new Date(), new RegExp(), { send: function send() {} }]);\n\n    // Assertion shouldn't be send for last object containing 'send' method,\n    // that's why length - 1.\n    assert.expect(wrongActionContextsArray.length - 1);\n\n    wrongActionContextsArray.forEach(function (wrongActionContext) {\n      var component = ComponentWithDynamicActionsMixin.create({\n        attrs: {},\n        dynamicActions: Ember.A([_dynamicAction.default.create({\n          on: 'someAction',\n          actionHandler: null,\n          actionName: 'onSomeAction',\n          actionContext: wrongActionContext,\n          actionArguments: null\n        })]),\n        renderer: {}\n      });\n\n      try {\n        component.sendDynamicAction('someAction');\n      } catch (ex) {\n        assert.strictEqual(/method\\s*.*send.*\\s*.*actionContext.*/gi.test(ex.message), true, 'Throws assertion failed exception if one of specified \\'dynamicActions\\' has defined \\'actionName\\', ' + 'but wrong \\'actionContext\\' property (without \\'send\\' method)');\n      }\n    });\n  });\n\n  (0, _qunit.test)('Mixin throws assertion failed exception if one of specified \\'dynamicActions\\' has wrong \\'actionArguments\\' property', function (assert) {\n    var wrongActionArgumentsArray = Ember.A([1, true, false, 'some string', {}, function () {}, new Date(), new RegExp()]);\n\n    assert.expect(wrongActionArgumentsArray.length);\n\n    wrongActionArgumentsArray.forEach(function (wrongActionArguments) {\n      var component = ComponentWithDynamicActionsMixin.create({\n        attrs: {},\n        dynamicActions: Ember.A([_dynamicAction.default.create({\n          on: 'someAction',\n          actionHandler: null,\n          actionName: null,\n          actionContext: null,\n          actionArguments: wrongActionArguments\n        })]),\n        renderer: {}\n      });\n\n      try {\n        component.sendDynamicAction('someAction');\n      } catch (ex) {\n        assert.strictEqual(/wrong\\s*type\\s*of\\s*.*actionArguments.*/gi.test(ex.message), true, 'Throws assertion failed exception if one of specified \\'dynamicActions\\' has \\'actionArguments\\' property of wrong type \\'' + Ember.typeOf(wrongActionArguments) + '\\'');\n      }\n    });\n  });\n\n  (0, _qunit.test)('Mixin does\\'t break it\\'s owner\\'s standard \\'sendAction\\' logic', function (assert) {\n    assert.expect(1);\n\n    var component = ComponentWithDynamicActionsMixin.create({\n      attrs: {},\n      dynamicActions: Ember.A([_dynamicAction.default.create({\n        on: 'someAction',\n        actionHandler: null,\n        actionName: null,\n        actionContext: null,\n        actionArguments: null\n      })]),\n      renderer: {}\n    });\n\n    var someActionHandlerHasBeenCalled = false;\n    component.attrs.someAction = function () {\n      someActionHandlerHasBeenCalled = true;\n    };\n\n    component.sendDynamicAction('someAction');\n\n    assert.strictEqual(someActionHandlerHasBeenCalled, true, 'Component still normally triggers proper action handlers (binded explicitly with ember API, not with dynamic actions)');\n  });\n\n  (0, _qunit.test)('Mixin triggers specified \\'dynamicActions\\' handlers (\\'actionHandler\\' callbacks only) ' + 'if \\'actionContext\\' isn\\'t specified', function (assert) {\n    assert.expect(10);\n\n    var someActionDynamicHandlerHasBeenCalled = false;\n    var someAnotherActionDynamicHandlerHasBeenCalled = false;\n    var someActionAgainDynamicHandlerHasBeenCalled = false;\n\n    var component = ComponentWithDynamicActionsMixin.create({\n      attrs: {},\n      dynamicActions: Ember.A([_dynamicAction.default.create({\n        on: 'someAction',\n        actionHandler: function actionHandler() {\n          someActionDynamicHandlerHasBeenCalled = true;\n        },\n        actionName: null,\n        actionContext: null,\n        actionArguments: null\n      }), _dynamicAction.default.create({\n        on: 'someAnotherAction',\n        actionHandler: function actionHandler() {\n          someAnotherActionDynamicHandlerHasBeenCalled = true;\n        },\n        actionName: null,\n        actionContext: null,\n        actionArguments: null\n      }), _dynamicAction.default.create({\n        on: 'someAction',\n        actionHandler: function actionHandler() {\n          someActionAgainDynamicHandlerHasBeenCalled = true;\n        },\n        actionName: null,\n        actionContext: null,\n        actionArguments: null\n      })]),\n      renderer: {}\n    });\n\n    var someActionHandlerHasBeenCalled = false;\n    component.attrs.someAction = function () {\n      someActionHandlerHasBeenCalled = true;\n    };\n\n    var someAnotherActionHandlerHasBeenCalled = false;\n    component.attrs.someAnotherAction = function () {\n      someAnotherActionHandlerHasBeenCalled = true;\n    };\n\n    component.sendDynamicAction('someAction');\n    assert.strictEqual(someActionHandlerHasBeenCalled, true, 'Component still normally triggers proper action handlers (binded explicitly with ember API, not with dynamic actions)');\n    assert.strictEqual(someAnotherActionHandlerHasBeenCalled, false, 'Component still normally doesn\\'t trigger proper action handlers ' + '(binded explicitly with ember API, not with dynamic actions) for yet unsended actions');\n\n    assert.strictEqual(someActionDynamicHandlerHasBeenCalled, true, 'Component triggers specified in dynamic action \\'actionHandler\\' for component\\'s \\'someAction\\'');\n    assert.strictEqual(someAnotherActionDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded to yet unsended \\'someAnotherAction\\'');\n    assert.strictEqual(someActionAgainDynamicHandlerHasBeenCalled, true, 'Component triggers specified in dynamic action another \\'actionHandler\\' for component\\'s \\'someAction\\'');\n\n    someActionHandlerHasBeenCalled = false;\n    someAnotherActionHandlerHasBeenCalled = false;\n    someAnotherActionDynamicHandlerHasBeenCalled = false;\n    someActionDynamicHandlerHasBeenCalled = false;\n    someActionAgainDynamicHandlerHasBeenCalled = false;\n\n    component.sendDynamicAction('someAnotherAction');\n    assert.strictEqual(someActionHandlerHasBeenCalled, false, 'Component still normally doesn\\'t trigger proper action handlers ' + '(binded explicitly with ember API, not with dynamic actions) for yet unsended actions');\n    assert.strictEqual(someAnotherActionHandlerHasBeenCalled, true, 'Component still normally triggers proper action handlers (binded explicitly with ember API, not with dynamic actions)');\n\n    assert.strictEqual(someActionDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded to yet unsended \\'someAction\\'');\n    assert.strictEqual(someAnotherActionDynamicHandlerHasBeenCalled, true, 'Component triggers specified in dynamic action \\'actionHandler\\' for component\\'s \\'anotherAction\\'');\n    assert.strictEqual(someActionAgainDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded to yet unsended \\'someAction\\'');\n  });\n\n  (0, _qunit.test)('Mixin triggers all specified \\'dynamicActions\\' handlers (callbacks & normal actions) on given context', function (assert) {\n    assert.expect(22);\n\n    var someActionControllersHandlerHasBeenCalled = false;\n    var someActionControllersHandlerContext = null;\n\n    var someAnoterActionControllersHandlerHasBeenCalled = false;\n    var someAnotherActionControllersHandlerContext = null;\n\n    var someActionAgainControllersHandlerHasBeenCalled = false;\n    var someActionAgainControllersHandlerContext = null;\n\n    var controller = Ember.Controller.extend({\n      actions: {\n        onSomeAction: function onSomeAction() {\n          someActionControllersHandlerHasBeenCalled = true;\n          someActionControllersHandlerContext = this;\n        },\n\n        onSomeAnotherAction: function onSomeAnotherAction() {\n          someAnoterActionControllersHandlerHasBeenCalled = true;\n          someAnotherActionControllersHandlerContext = this;\n        },\n\n        onSomeActionAgain: function onSomeActionAgain() {\n          someActionAgainControllersHandlerHasBeenCalled = true;\n          someActionAgainControllersHandlerContext = this;\n        }\n      }\n    }).create();\n\n    var someActionDynamicHandlerHasBeenCalled = false;\n    var someActionDynamicHandlerContext = null;\n\n    var someAnotherActionDynamicHandlerHasBeenCalled = false;\n    var someAnotherActionDynamicHandlerContext = null;\n\n    var someActionAgainDynamicHandlerHasBeenCalled = false;\n    var someActionAgainDynamicHandlerContext = null;\n\n    var component = ComponentWithDynamicActionsMixin.create({\n      attrs: {},\n      dynamicActions: Ember.A([_dynamicAction.default.create({\n        on: 'someAction',\n        actionHandler: function actionHandler() {\n          someActionDynamicHandlerHasBeenCalled = true;\n          someActionDynamicHandlerContext = this;\n        },\n        actionName: 'onSomeAction',\n        actionContext: controller,\n        actionArguments: null\n      }), _dynamicAction.default.create({\n        on: 'someAnotherAction',\n        actionHandler: function actionHandler() {\n          someAnotherActionDynamicHandlerHasBeenCalled = true;\n          someAnotherActionDynamicHandlerContext = this;\n        },\n        actionName: 'onSomeAnotherAction',\n        actionContext: controller,\n        actionArguments: null\n      }), _dynamicAction.default.create({\n        on: 'someAction',\n        actionHandler: function actionHandler() {\n          someActionAgainDynamicHandlerHasBeenCalled = true;\n          someActionAgainDynamicHandlerContext = this;\n        },\n        actionName: 'onSomeActionAgain',\n        actionContext: controller,\n        actionArguments: null\n      })]),\n      renderer: {}\n    });\n\n    var someActionHandlerHasBeenCalled = false;\n    component.attrs.someAction = function () {\n      someActionHandlerHasBeenCalled = true;\n    };\n\n    var someAnotherActionHandlerHasBeenCalled = false;\n    component.attrs.someAnotherAction = function () {\n      someAnotherActionHandlerHasBeenCalled = true;\n    };\n\n    component.sendDynamicAction('someAction');\n    assert.strictEqual(someActionHandlerHasBeenCalled, true, 'Component still normally triggers proper action handlers (binded explicitly with ember API, not with dynamic actions)');\n    assert.strictEqual(someAnotherActionHandlerHasBeenCalled, false, 'Component still normally doesn\\'t trigger proper action handlers ' + '(binded explicitly with ember API, not with dynamic actions) for yet unsended actions');\n\n    assert.strictEqual(someActionDynamicHandlerHasBeenCalled, true, 'Component triggers specified in dynamic action \\'actionHandler\\' for component\\'s \\'someAction\\'');\n    assert.strictEqual(someActionDynamicHandlerContext, controller, 'Component triggers specified in dynamic action \\'actionHandler\\' for ' + 'component\\'s \\'someAction\\' with specified \\'actionContext\\'');\n    assert.strictEqual(someAnotherActionDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded to ' + 'yet unsended \\'someAnotherAction\\'');\n    assert.strictEqual(someActionAgainDynamicHandlerHasBeenCalled, true, 'Component triggers specified in dynamic action another \\'actionHandler\\' for component\\'s \\'someAction\\'');\n    assert.strictEqual(someActionAgainDynamicHandlerContext, controller, 'Component triggers specified in dynamic action \\'actionHandler\\' for ' + 'component\\'s \\'someAction\\' with specified \\'actionContext\\'');\n\n    assert.strictEqual(someActionControllersHandlerHasBeenCalled, true, 'Component triggers on given \\'actionContext\\' action with specified \\'actionName\\' for component\\'s \\'someAction\\'');\n    assert.strictEqual(someActionControllersHandlerContext, controller, 'Component triggers on given \\'actionContext\\' action with specified \\'actionName\\' for ' + 'component\\'s \\'someAction\\' with specified \\'actionContext\\'');\n    assert.strictEqual(someAnotherActionDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded to yet unsended \\'someAnotherAction\\'');\n    assert.strictEqual(someActionAgainControllersHandlerHasBeenCalled, true, 'Component triggers on given \\'actionContext\\' action with specified \\'actionName\\' for component\\'s \\'someAction\\'');\n    assert.strictEqual(someActionAgainControllersHandlerContext, controller, 'Component triggers on given \\'actionContext\\' action with specified \\'actionName\\' for ' + 'component\\'s \\'someAction\\' with specified \\'actionContext\\'');\n\n    someActionHandlerHasBeenCalled = false;\n    someAnotherActionHandlerHasBeenCalled = false;\n\n    someActionDynamicHandlerHasBeenCalled = false;\n    someActionDynamicHandlerContext = null;\n\n    someAnotherActionDynamicHandlerHasBeenCalled = false;\n    someAnotherActionDynamicHandlerContext = null;\n\n    someActionAgainDynamicHandlerHasBeenCalled = false;\n    someActionAgainDynamicHandlerContext = null;\n\n    someActionControllersHandlerHasBeenCalled = false;\n    someActionControllersHandlerContext = null;\n\n    someAnoterActionControllersHandlerHasBeenCalled = false;\n    someAnotherActionControllersHandlerContext = null;\n\n    someActionAgainControllersHandlerHasBeenCalled = false;\n    someActionAgainControllersHandlerContext = null;\n\n    component.sendDynamicAction('someAnotherAction');\n    assert.strictEqual(someActionHandlerHasBeenCalled, false, 'Component still normally doesn\\'t trigger proper action handlers ' + '(binded explicitly with ember API, not with dynamic actions) for yet unsended actions');\n    assert.strictEqual(someAnotherActionHandlerHasBeenCalled, true, 'Component still normally triggers proper action handlers ' + '(binded explicitly with ember API, not with dynamic actions)');\n\n    assert.strictEqual(someActionDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded to yet unsended \\'someAction\\'');\n    assert.strictEqual(someAnotherActionDynamicHandlerHasBeenCalled, true, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded to yet unsended \\'someAnotherAction\\'');\n    assert.strictEqual(someAnotherActionDynamicHandlerContext, controller, 'Component triggers specified in dynamic action \\'actionHandler\\' for ' + 'component\\'s \\'someAnotherAction\\' with specified \\'actionContext\\'');\n    assert.strictEqual(someActionAgainDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded ' + 'to yet unsended \\'someAction\\'');\n\n    assert.strictEqual(someActionControllersHandlerHasBeenCalled, false, 'Component doesn\\'t trigger on given \\'actionContext\\' action with specified \\'actionName\\' binded ' + 'to yet unsended \\'someAction\\'');\n    assert.strictEqual(someAnoterActionControllersHandlerHasBeenCalled, true, 'Component triggers on given \\'actionContext\\' action with specified \\'actionName\\' for ' + 'component\\'s \\'someAnotherAction\\'');\n    assert.strictEqual(someAnotherActionControllersHandlerContext, controller, 'Component triggers on given \\'actionContext\\' action with specified \\'actionName\\' for ' + 'component\\'s \\'someAnotherAction\\' with specified \\'actionContext\\'');\n    assert.strictEqual(someActionAgainControllersHandlerHasBeenCalled, false, 'Component doesn\\'t trigger on given \\'actionContext\\' action with specified \\'actionName\\' binded to ' + 'yet unsended \\'someAction\\'');\n  });\n\n  (0, _qunit.test)('Mixin works properly with \\'dynamicActions\\' added/removed after component initialization', function (assert) {\n    assert.expect(8);\n\n    // Define component without any dynamic actions.\n    var dynamicActions = Ember.A();\n    var component = ComponentWithDynamicActionsMixin.create({\n      attrs: {},\n      dynamicActions: dynamicActions,\n      renderer: {}\n    });\n\n    // Define controller.\n    var someActionControllersHandlerHasBeenCalled = false;\n    var someActionControllersHandlerContext = null;\n    var controller = Ember.Controller.extend({\n      actions: {\n        onSomeAction: function onSomeAction() {\n          someActionControllersHandlerHasBeenCalled = true;\n          someActionControllersHandlerContext = this;\n        }\n      }\n    }).create();\n\n    // Define dynamic action.\n    var someActionDynamicHandlerHasBeenCalled = false;\n    var someActionDynamicHandlerContext = null;\n    var someDynamicAction = _dynamicAction.default.create({\n      on: 'someAction',\n      actionHandler: function actionHandler() {\n        someActionDynamicHandlerHasBeenCalled = true;\n        someActionDynamicHandlerContext = this;\n      },\n      actionName: 'onSomeAction',\n      actionContext: controller,\n      actionArguments: null\n    });\n\n    var someActionHandlerHasBeenCalled = false;\n    component.attrs.someAction = function () {\n      someActionHandlerHasBeenCalled = true;\n    };\n\n    // Add defined dynamic action to a component after it has been already initialized.\n    dynamicActions.pushObject(someDynamicAction);\n\n    // Check that all handlers were called with expected context.\n    component.sendDynamicAction('someAction');\n    assert.strictEqual(someActionHandlerHasBeenCalled, true, 'Component still normally triggers proper action handlers (binded explicitly with ember API, not with dynamic actions)');\n    assert.strictEqual(someActionDynamicHandlerHasBeenCalled, true, 'Component triggers specified in added dynamic action \\'actionHandler\\' for component\\'s \\'someAction\\'');\n    assert.strictEqual(someActionDynamicHandlerContext, controller, 'Component triggers specified in added dynamic action \\'actionHandler\\' for ' + 'component\\'s \\'someAction\\' with specified \\'actionContext\\'');\n    assert.strictEqual(someActionControllersHandlerHasBeenCalled, true, 'Component triggers on added dynamic action\\'s \\'actionContext\\' action with specified \\'actionName\\' for ' + 'component\\'s \\'someAction\\'');\n    assert.strictEqual(someActionControllersHandlerContext, controller, 'Component triggers on added dynamic action\\'s \\'actionContext\\' action with specified \\'actionName\\' for ' + 'component\\'s \\'someAction\\' with specified \\'actionContext\\'');\n\n    someActionHandlerHasBeenCalled = false;\n    someActionDynamicHandlerHasBeenCalled = false;\n    someActionDynamicHandlerContext = false;\n    someActionControllersHandlerHasBeenCalled = false;\n    someActionControllersHandlerContext = false;\n\n    // Remove defined dynamic action to a component after it has been already initialized.\n    dynamicActions.removeObject(someDynamicAction);\n    component.sendDynamicAction('someAction');\n    assert.strictEqual(someActionHandlerHasBeenCalled, true, 'Component still normally triggers proper action handlers (binded explicitly with ember API, not with dynamic actions)');\n    assert.strictEqual(someActionDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in removed dynamic action \\'actionHandler\\' for component\\'s \\'someAction\\'');\n    assert.strictEqual(someActionControllersHandlerHasBeenCalled, false, 'Component doesn\\'t trigger on removed dynamic action\\'s \\'actionContext\\' action with specified \\'actionName\\' for ' + 'component\\'s \\'someAction\\'');\n  });\n\n  (0, _qunit.test)('Mixin adds specified in \\'dynamicActions\\' \\'actionArguments\\' to the beginning of handler\\'s arguments array', function (assert) {\n    assert.expect(3);\n\n    var dynamicActionArguments = Ember.A(['firstDynamicArgument', 'secondDynamicArgument']);\n\n    var someActionHandlerArguments = null;\n    var someActionDynamicHandlerArguments = null;\n    var someActionDynamicControllersHandlerArguments = null;\n\n    var controller = Ember.Controller.extend({\n      actions: {\n        onSomeAction: function onSomeAction() {\n          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          someActionDynamicControllersHandlerArguments = Ember.A(args);\n        }\n      }\n    }).create();\n\n    var component = ComponentWithDynamicActionsMixin.create({\n      attrs: {},\n      dynamicActions: Ember.A([_dynamicAction.default.create({\n        on: 'someAction',\n        actionHandler: function actionHandler() {\n          for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          someActionDynamicHandlerArguments = Ember.A(args);\n        },\n        actionName: 'onSomeAction',\n        actionContext: controller,\n        actionArguments: dynamicActionArguments\n      })]),\n      renderer: {}\n    });\n\n    component.attrs.someAction = function () {\n      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      someActionHandlerArguments = Ember.A(args);\n    };\n\n    // Check that all handlers were called with expected arguments.\n    var originalActionArguments = Ember.A(['firstOriginalArgument', 'secondOriginalArgument']);\n    component.sendDynamicAction.apply(component, ['someAction'].concat(_toConsumableArray(originalActionArguments)));\n    assert.strictEqual(someActionHandlerArguments[0] === originalActionArguments[0] && someActionHandlerArguments[1] === originalActionArguments[1], true, 'Component\\'s original action handler doesn\\'t contain additional \\'actionArguments\\' from \\'dynamicActions\\' (only original arguments)');\n    assert.strictEqual(someActionDynamicHandlerArguments[0] === dynamicActionArguments[0] && someActionDynamicHandlerArguments[1] === dynamicActionArguments[1] && someActionDynamicHandlerArguments[2] === originalActionArguments[0] && someActionDynamicHandlerArguments[3] === originalActionArguments[1], true, 'Component\\'s dynamic action handler contains additional \\'actionArguments\\' from \\'dynamicActions\\'');\n    assert.strictEqual(someActionDynamicControllersHandlerArguments[0] === dynamicActionArguments[0] && someActionDynamicControllersHandlerArguments[1] === dynamicActionArguments[1] && someActionDynamicControllersHandlerArguments[2] === originalActionArguments[0] && someActionDynamicControllersHandlerArguments[3] === originalActionArguments[1], true, 'Action handler with specified \\'actionName\\' contains additional \\'actionArguments\\' from \\'dynamicActions\\'');\n  });\n\n  (0, _qunit.test)('Mixin doesn\\'t trigger component\\'s inner method if outer action handler is not defined', function (assert) {\n    assert.expect(2);\n\n    var component = ComponentWithDynamicActionsMixin.create({\n      attrs: {},\n      renderer: {}\n    });\n\n    var innerSomeActionHasBeenCalled = false;\n    component.someAction = function () {\n      innerSomeActionHasBeenCalled = true;\n    };\n\n    component.sendDynamicAction('someAction');\n    assert.strictEqual(innerSomeActionHasBeenCalled, false, 'Component doesn\\'t trigger inner \\'someAction\\' method');\n\n    var outerSomeActionHasBeenCalled = false;\n    component.attrs.someAction = function () {\n      outerSomeActionHasBeenCalled = true;\n    };\n\n    component.sendDynamicAction('someAction');\n    assert.strictEqual(outerSomeActionHasBeenCalled && !innerSomeActionHasBeenCalled, true, 'Component trigger\\'s outer \\'someAction\\' handler');\n  });\n});","define('dummy/tests/unit/mixins/dynamic-properties-test', ['ember-flexberry/mixins/dynamic-properties', 'qunit'], function (_dynamicProperties, _qunit) {\n  'use strict';\n\n  var ClassWithDynamicPropertiesMixin = Ember.Object.extend(_dynamicProperties.default, {});\n\n  (0, _qunit.module)('Unit | Mixin | dynamic-properties mixin');\n\n  (0, _qunit.test)('Mixin throws assertion failed exception if specified \\'dynamicProperties\\' property is not an \\'object\\' or an \\'instance\\'', function (assert) {\n    var wrongDynamicPropertiesArray = Ember.A([1, true, false, 'some string', [], function () {}, new Date(), new RegExp()]);\n\n    assert.expect(wrongDynamicPropertiesArray.length);\n\n    wrongDynamicPropertiesArray.forEach(function (wrongDynamicProperties) {\n      try {\n        ClassWithDynamicPropertiesMixin.create({ dynamicProperties: wrongDynamicProperties });\n      } catch (ex) {\n        assert.strictEqual(/wrong\\s*type\\s*of\\s*.*dynamicProperties.*/gi.test(ex.message), true, 'Throws assertion failed exception if specified \\'dynamicProperties\\' property is \\'' + Ember.typeOf(wrongDynamicProperties) + '\\'');\n      }\n    });\n  });\n\n  (0, _qunit.test)('Mixin assignes it\\'s owner\\'s properties form the specified \\'dynamicProperties\\'', function (assert) {\n    assert.expect(1);\n\n    var propertyValue = 'MyValue';\n    var dynamicProperties = { property: propertyValue };\n    var mixinOwner = ClassWithDynamicPropertiesMixin.create({ dynamicProperties: dynamicProperties });\n\n    assert.strictEqual(mixinOwner.get('property'), propertyValue, 'Owner\\'s properties are equals to related \\'dynamicProperties\\'');\n  });\n\n  (0, _qunit.test)('Mixin changes it\\'s owner\\'s properties (when something changes inside related \\'dynamicProperties\\')', function (assert) {\n    assert.expect(2);\n\n    var propertyValue = 'MyValue';\n    var dynamicProperties = { property: propertyValue };\n    var mixinOwner = ClassWithDynamicPropertiesMixin.create({ dynamicProperties: dynamicProperties });\n\n    assert.strictEqual(mixinOwner.get('property'), propertyValue, 'Owner\\'s properties are equals to related \\'dynamicProperties\\'');\n\n    var propertyChangedValue = 'MyChangedValue';\n    Ember.set(dynamicProperties, 'property', propertyChangedValue);\n\n    assert.strictEqual(mixinOwner.get('property'), propertyChangedValue, 'Owner\\'s properties changes when values inside \\'dynamicProperties\\' changes');\n  });\n\n  (0, _qunit.test)('Mixin removes old & adds new owner\\'s properties (when reference to whole \\'dynamicProperties\\' object changes)', function (assert) {\n    assert.expect(22);\n\n    var propertyValue = 'MyProperty';\n    var anotherPropertyValue = 'MyAnotherProperty';\n    var dynamicProperties = { property: propertyValue, anotherProperty: anotherPropertyValue };\n\n    var usualPropertyValue = 'MyUsualProperty';\n\n    var mixinOwner = ClassWithDynamicPropertiesMixin.create({\n      usualProperty: usualPropertyValue,\n      dynamicProperties: dynamicProperties\n    });\n\n    assert.strictEqual(mixinOwner.get('usualProperty'), usualPropertyValue, 'Owner\\'s \\'usualProperty\\' is equals to it\\'s initially defined value');\n    assert.strictEqual(mixinOwner.get('property'), propertyValue, 'Owner\\'s \\'property\\' is equals to related dynamicProperty');\n    assert.strictEqual(mixinOwner.get('anotherProperty'), anotherPropertyValue, 'Owner\\'s \\'anotherProperty\\' is equals to related dynamicProperty');\n\n    var ownerPropertiesNames = Ember.A(Object.keys(mixinOwner));\n    assert.strictEqual(ownerPropertiesNames.includes('usualProperty'), true, 'Owner\\'s properties keys contains \\'usualProperty\\'');\n    assert.strictEqual(ownerPropertiesNames.includes('property'), true, 'Owner\\'s properties keys contains \\'property\\'');\n    assert.strictEqual(ownerPropertiesNames.includes('anotherProperty'), true, 'Owner\\'s properties keys contains \\'anotherProperty\\'');\n\n    var newPropertyValue = 'MyNewProperty';\n    var newAnotherPropertyValue = 'MyNewAnotherProperty';\n    var newDynamicProperties = { newProperty: newPropertyValue, newAnotherProperty: newAnotherPropertyValue };\n    mixinOwner.set('dynamicProperties', newDynamicProperties);\n\n    assert.strictEqual(mixinOwner.get('usualProperty'), usualPropertyValue, 'Owner\\'s \\'usualProperty\\' is equals to it\\'s initially defined value (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(Ember.typeOf(mixinOwner.get('property')), 'undefined', 'Owner\\'s \\'property\\' is undefined (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(Ember.typeOf(mixinOwner.get('anotherProperty')), 'undefined', 'Owner\\'s \\'anotherProperty\\' is undefined (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(mixinOwner.get('newProperty'), newPropertyValue, 'Owner\\'s \\'newProperty\\' is equals to related dynamicProperty (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(mixinOwner.get('newAnotherProperty'), newAnotherPropertyValue, 'Owner\\'s \\'newAnotherProperty\\' is equals to related dynamicProperty (after change of whole \\'dynamicProperties\\' object)');\n\n    ownerPropertiesNames = Ember.A(Object.keys(mixinOwner));\n    assert.strictEqual(ownerPropertiesNames.includes('usualProperty'), true, 'Owner\\'s properties keys contains \\'usualProperty\\' (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(ownerPropertiesNames.includes('property'), false, 'Owner\\'s properties keys doesn\\'t contains \\'property\\' (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(ownerPropertiesNames.includes('anotherProperty'), false, 'Owner\\'s properties keys doesn\\'t contains \\'anotherProperty\\' (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(ownerPropertiesNames.includes('newProperty'), true, 'Owner\\'s properties keys contains \\'newProperty\\' (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(ownerPropertiesNames.includes('newAnotherProperty'), true, 'Owner\\'s properties keys contains \\'newAnotherProperty\\' (after change of whole \\'dynamicProperties\\' object)');\n\n    mixinOwner.set('dynamicProperties', null);\n    assert.strictEqual(mixinOwner.get('usualProperty'), usualPropertyValue, 'Owner\\'s \\'usualProperty\\' is equals to it\\'s initially defined value (after change of whole \\'dynamicProperties\\' object to null)');\n    assert.strictEqual(Ember.typeOf(mixinOwner.get('newProperty')), 'undefined', 'Owner\\'s \\'newProperty\\' is undefined (after change of whole \\'dynamicProperties\\' object to null)');\n    assert.strictEqual(Ember.typeOf(mixinOwner.get('newAnotherProperty')), 'undefined', 'Owner\\'s \\'newAnotherProperty\\' is undefined (after change of whole \\'dynamicProperties\\' object to null)');\n\n    ownerPropertiesNames = Ember.A(Object.keys(mixinOwner));\n    assert.strictEqual(ownerPropertiesNames.includes('usualProperty'), true, 'Owner\\'s properties keys contains \\'usualProperty\\' (after change of whole \\'dynamicProperties\\' object to null)');\n    assert.strictEqual(ownerPropertiesNames.includes('newProperty'), false, 'Owner\\'s properties keys doesn\\'t contains \\'newProperty\\' (after change of whole \\'dynamicProperties\\' object to null)');\n    assert.strictEqual(ownerPropertiesNames.includes('newAnotherProperty'), false, 'Owner\\'s properties keys doesn\\'t contains \\'newAnotherProperty\\' (after change of whole \\'dynamicProperties\\' object to null)');\n  });\n\n  (0, _qunit.test)('Mixin removes assigned \\'dynamicProperties\\' before owner will be destroyed', function (assert) {\n    assert.expect(12);\n\n    var propertyValue = 'MyProperty';\n    var anotherPropertyValue = 'MyAnotherProperty';\n    var dynamicProperties = { property: propertyValue, anotherProperty: anotherPropertyValue };\n\n    var usualPropertyValue = 'MyUsualProperty';\n\n    var mixinOwner = ClassWithDynamicPropertiesMixin.create({\n      usualProperty: usualPropertyValue,\n      dynamicProperties: dynamicProperties\n    });\n\n    assert.strictEqual(mixinOwner.get('usualProperty'), usualPropertyValue, 'Owner\\'s \\'usualProperty\\' is equals to it\\'s initially defined value');\n    assert.strictEqual(mixinOwner.get('property'), propertyValue, 'Owner\\'s \\'property\\' is equals to related dynamicProperty');\n    assert.strictEqual(mixinOwner.get('anotherProperty'), anotherPropertyValue, 'Owner\\'s \\'anotherProperty\\' is equals to related dynamicProperty');\n\n    var ownerPropertiesNames = Ember.A(Object.keys(mixinOwner));\n    assert.strictEqual(ownerPropertiesNames.includes('usualProperty'), true, 'Owner\\'s properties keys contains \\'usualProperty\\'');\n    assert.strictEqual(ownerPropertiesNames.includes('property'), true, 'Owner\\'s properties keys contains \\'property\\'');\n    assert.strictEqual(ownerPropertiesNames.includes('anotherProperty'), true, 'Owner\\'s properties keys contains \\'anotherProperty\\'');\n\n    mixinOwner.willDestroy();\n\n    assert.strictEqual(mixinOwner.get('usualProperty'), usualPropertyValue, 'Owner\\'s \\'usualProperty\\' is equals to it\\'s initially defined value (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(Ember.typeOf(mixinOwner.get('property')), 'undefined', 'Owner\\'s \\'property\\' is undefined (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(Ember.typeOf(mixinOwner.get('anotherProperty')), 'undefined', 'Owner\\'s \\'anotherProperty\\' is undefined (after change of whole \\'dynamicProperties\\' object)');\n\n    ownerPropertiesNames = Ember.A(Object.keys(mixinOwner));\n    assert.strictEqual(ownerPropertiesNames.includes('usualProperty'), true, 'Owner\\'s properties keys contains \\'usualProperty\\'');\n    assert.strictEqual(ownerPropertiesNames.includes('property'), false, 'Owner\\'s properties keys doesn\\'t contains \\'property\\'');\n    assert.strictEqual(ownerPropertiesNames.includes('anotherProperty'), false, 'Owner\\'s properties keys doesn\\'t contains \\'anotherProperty\\'');\n  });\n});","define('dummy/tests/unit/mixins/errorable-route-test', ['ember-flexberry/mixins/errorable-route', 'qunit'], function (_errorableRoute, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | errorable route');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var ErrorableRouteObject = Ember.Object.extend(_errorableRoute.default);\n    var subject = ErrorableRouteObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/flexberry-file-controller-test', ['ember-flexberry/mixins/flexberry-file-controller', 'qunit'], function (_flexberryFileController, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | flexberry file controller');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var FlexberryFileControllerObject = Ember.Object.extend(_flexberryFileController.default);\n    var subject = FlexberryFileControllerObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/flexberry-groupedit-route-test', ['ember-flexberry/mixins/flexberry-groupedit-route', 'qunit'], function (_flexberryGroupeditRoute, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | flexberry groupedit route');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var FlexberryGroupeditRouteObject = Ember.Object.extend(_flexberryGroupeditRoute.default);\n    var subject = FlexberryGroupeditRouteObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/lock-route-test', ['ember-flexberry/mixins/lock-route', 'qunit'], function (_lockRoute, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | lock-route');\n\n  (0, _qunit.test)('it works', function (assert) {\n    assert.expect(3);\n    var done = assert.async();\n    var EditFormRoute = Ember.Route.extend(_lockRoute.default);\n    var route = EditFormRoute.create();\n    Ember.run(function () {\n      assert.ok(route, 'Route created.');\n      Ember.RSVP.all([route.openReadOnly().then(function (answer) {\n        assert.ok(answer, 'Default \\'openReadOnly\\' === \\'true\\'.');\n      }), route.unlockObject().then(function (answer) {\n        assert.ok(answer, 'Default \\'unlockObject\\' === \\'true\\'.');\n      })]).then(done);\n    });\n  });\n});","define('dummy/tests/unit/mixins/modal-application-route-test', ['ember-flexberry/mixins/modal-application-route', 'qunit'], function (_modalApplicationRoute, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('ModalApplicationRouteMixin');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var ModalApplicationRouteObject = Ember.Object.extend(_modalApplicationRoute.default);\n    var subject = ModalApplicationRouteObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/multi-list-controller-test', ['ember-flexberry/mixins/multi-list-controller', 'qunit'], function (_multiListController, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | multi list controller');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var MultiListControllerObject = Ember.Object.extend(_multiListController.default);\n    var subject = MultiListControllerObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/multi-list-model-edit-test', ['ember-flexberry/mixins/multi-list-model-edit', 'qunit'], function (_multiListModelEdit, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | multi list model edit');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var MultiListModelEditObject = Ember.Object.extend(_multiListModelEdit.default);\n    var subject = MultiListModelEditObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/multi-list-model-test', ['ember-flexberry/mixins/multi-list-model', 'qunit'], function (_multiListModel, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | multi list model');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var MultiListModelObject = Ember.Object.extend(_multiListModel.default);\n    var subject = MultiListModelObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/multi-list-route-test', ['ember-flexberry/mixins/multi-list-route', 'qunit'], function (_multiListRoute, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | multi list route');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var MultiListRouteObject = Ember.Object.extend(_multiListRoute.default);\n    var subject = MultiListRouteObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/paginated-controller-test', ['ember-flexberry/mixins/paginated-controller', 'qunit'], function (_paginatedController, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('PaginatedControllerMixin');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var PaginatedControllerObject = Ember.Object.extend(_paginatedController.default);\n    var subject = PaginatedControllerObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/paginated-route-test', ['ember-flexberry/mixins/paginated-route', 'qunit'], function (_paginatedRoute, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('PaginatedRouteMixin');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var PaginatedRouteObject = Ember.Object.extend(_paginatedRoute.default);\n    var subject = PaginatedRouteObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/predicate-from-filters-test', ['ember-flexberry/mixins/predicate-from-filters', 'qunit'], function (_predicateFromFilters, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | predicate from filters');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var PredicateFromFiltersObject = Ember.Object.extend(_predicateFromFilters.default);\n    var subject = PredicateFromFiltersObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/reload-list-mixin-test', ['ember-data', 'ember-flexberry/mixins/reload-list-mixin', 'qunit', 'dummy/tests/helpers/start-app', 'ember-flexberry-data/models/model', 'ember-flexberry-data/utils/attributes', 'ember-flexberry-data/serializers/odata', 'ember-flexberry-data/query/predicate'], function (_emberData, _reloadListMixin, _qunit, _startApp, _model, _attributes, _odata, _predicate) {\n  'use strict';\n\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  };\n\n  (0, _qunit.module)('Unit | Mixin | reload list mixin');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var ReloadListMixinObject = Ember.Object.extend(_reloadListMixin.default);\n    var subject = ReloadListMixinObject.create();\n    assert.ok(subject);\n  });\n\n  (0, _qunit.test)('it properly generates simple filter predicate', function (assert) {\n    var Model = _model.default.extend({\n      firstName: _emberData.default.attr('string')\n    });\n\n    Model.defineProjection('EmployeeE', 'employeeTest', {\n      firstName: (0, _attributes.attr)()\n    });\n\n    var modelSerializer = _odata.default.extend({});\n    var projection = Ember.get(Model, 'projections').EmployeeE;\n\n    var app = (0, _startApp.default)();\n\n    app.register('model:employeeTest', Model);\n    app.register('serializer:employeeTest', modelSerializer);\n    var store = app.__container__.lookup('service:store');\n\n    var ReloadListMixinObject = Ember.Object.extend(_reloadListMixin.default);\n    var objectInstance = ReloadListMixinObject.create();\n    objectInstance.store = store;\n\n    var result = objectInstance._getFilterPredicate(projection, { filter: 'test' });\n    var resultUndefined = objectInstance._getFilterPredicate(projection, { filter: undefined });\n    var resultEmpty = objectInstance._getFilterPredicate(projection, { filter: '' });\n    Ember.run(app, 'destroy');\n\n    assert.equal(typeof result === 'undefined' ? 'undefined' : _typeof(result), 'object');\n    assert.equal(result.constructor, _predicate.StringPredicate);\n    assert.equal(result.attributePath, 'firstName');\n    assert.equal(result.containsValue, 'test');\n\n    assert.equal(resultUndefined, null);\n    assert.equal(resultEmpty, null);\n  });\n\n  (0, _qunit.test)('it properly generates complex filter predicate', function (assert) {\n    var Model0 = _model.default.extend({\n      firstName: _emberData.default.attr('string'),\n      lastName: _emberData.default.attr('string'),\n      dateField: _emberData.default.attr('date'),\n      numberField: _emberData.default.attr('number')\n    });\n\n    var app = (0, _startApp.default)();\n    app.register('model:employeeTest2', Model0);\n\n    var Model = _model.default.extend({\n      firstName: _emberData.default.attr('string'),\n      lastName: _emberData.default.attr('string'),\n      dateField: _emberData.default.attr('date'),\n      numberField: _emberData.default.attr('number'),\n      masterField: _emberData.default.belongsTo('employeeTest2', { inverse: null, async: false })\n    });\n\n    app.register('model:employeeTest', Model);\n\n    Model.defineProjection('EmployeeE', 'employeeTest', {\n      firstName: (0, _attributes.attr)(),\n      lastName: (0, _attributes.attr)(),\n      dateField: (0, _attributes.attr)(),\n      numberField: (0, _attributes.attr)(),\n      reportsTo: (0, _attributes.belongsTo)('employeeTest2', 'Reports To', {\n        firstName: (0, _attributes.attr)('Reports To - First Name', {\n          hidden: true\n        })\n      }, {\n        displayMemberPath: 'firstName'\n      })\n    });\n\n    var modelSerializer = _odata.default.extend({});\n    var modelSerializer0 = _odata.default.extend({});\n    var projection = Ember.get(Model, 'projections').EmployeeE;\n\n    app.register('serializer:employeeTest2', modelSerializer0);\n    app.register('serializer:employeeTest', modelSerializer);\n    var store = app.__container__.lookup('service:store');\n\n    var ReloadListMixinObject = Ember.Object.extend(_reloadListMixin.default);\n    var objectInstance = ReloadListMixinObject.create();\n    objectInstance.store = store;\n    var result = objectInstance._getFilterPredicate(projection, { filter: '123' });\n    Ember.run(app, 'destroy');\n\n    assert.equal(typeof result === 'undefined' ? 'undefined' : _typeof(result), 'object');\n    assert.equal(result.constructor, _predicate.ComplexPredicate);\n    assert.equal(result.condition, 'or');\n\n    // It counts only string fields.\n    assert.equal(result.predicates.length, 4);\n    assert.equal(result.predicates[0].constructor, _predicate.StringPredicate);\n    assert.equal(result.predicates[0].attributePath, 'firstName');\n    assert.equal(result.predicates[0].containsValue, '123');\n    assert.equal(result.predicates[2].constructor, _predicate.SimplePredicate);\n    assert.equal(result.predicates[2].attributePath, 'numberField');\n    assert.equal(result.predicates[2].operator, 'eq');\n    assert.equal(result.predicates[2].value, '123');\n    assert.equal(result.predicates[3].constructor, _predicate.StringPredicate);\n    assert.equal(result.predicates[3].attributePath, 'reportsTo.firstName');\n    assert.equal(result.predicates[3].containsValue, '123');\n  });\n});","define('dummy/tests/unit/mixins/sortable-controller-test', ['ember-flexberry/mixins/sortable-controller', 'qunit'], function (_sortableController, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('SortableControllerMixin');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var SortableControllerObject = Ember.Object.extend(_sortableController.default);\n    var subject = SortableControllerObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/sortable-route-test', ['ember-flexberry/mixins/sortable-route', 'qunit'], function (_sortableRoute, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('SortableRouteMixin');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var SortableRouteObject = Ember.Object.extend(_sortableRoute.default);\n    var subject = SortableRouteObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-flexberry-user-setting-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-flexberry-user-setting', 'Unit | Model | new-platform-flexberry-flexberry-user-setting', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    assert.ok(!!model);\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-services-lock-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-services-lock', 'Unit | Model | new-platform-flexberry-services-lock');\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    assert.ok(!!model);\n  });\n});","define('dummy/tests/unit/routes/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:application', {\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/edit-form-new-test', ['ember-qunit', 'ember-flexberry/routes/edit-form-new'], function (_emberQunit, _editFormNew) {\n  'use strict';\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = _editFormNew.default.create();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/edit-form-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:edit-form', 'Unit | Route | edit form', {\n    needs: ['service:cols-config-menu', 'service:detail-interaction', 'service:objectlistview-events', 'service:user-settings', 'service:app-state', 'service:adv-limit']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/list-form-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:list-form', 'Unit | Route | list form', {\n    needs: ['service:cols-config-menu', 'service:form-load-time-tracker', 'service:objectlistview-events', 'service:app-state', 'service:adv-limit']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/new-platform-flexberry-services-lock-list-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:new-platform-flexberry-services-lock-list', 'Unit | Route | new-platform-flexberry-services-lock-list', {\n    needs: ['service:cols-config-menu', 'service:form-load-time-tracker', 'service:objectlistview-events', 'service:app-state', 'service:adv-limit']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/projected-model-form-test', ['qunit', 'ember-flexberry/routes/projected-model-form'], function (_qunit, _projectedModelForm) {\n  'use strict';\n\n  (0, _qunit.module)('route:projected-model-form');\n\n  (0, _qunit.test)('it exists', function (assert) {\n    var route = _projectedModelForm.default.create();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-services-lock-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-services-lock', 'Unit | Serializer | new-platform-flexberry-services-lock', {\n    needs: ['serializer:new-platform-flexberry-services-lock']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n    var serializedRecord = record.serialize();\n    assert.ok(serializedRecord);\n  });\n});","define('dummy/tests/unit/services/app-state-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:app-state', 'Unit | Service | app-state', {});\n\n  (0, _emberQunit.test)('it exists and works', function (assert) {\n    var service = this.subject();\n\n    assert.throws(function () {\n      service.set('state', 'invalid');\n    });\n    assert.equal(service.get('state'), '', 'By default is empty string.');\n\n    service.loading();\n    assert.equal(service.get('state'), 'loading', 'Change to \\'loading\\'.');\n\n    service.success();\n    assert.equal(service.get('state'), 'success', 'Change to \\'success\\'.');\n\n    service.error();\n    assert.equal(service.get('state'), 'error', 'Change to \\'error\\'.');\n\n    service.warning();\n    assert.equal(service.get('state'), 'warning', 'Change to \\'warning\\'.');\n\n    service.reset();\n    assert.equal(service.get('state'), '', 'Reset to the default value.');\n  });\n});","define('dummy/tests/unit/services/detail-interaction-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:detail-interaction', 'Unit | Service | detail interaction', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('dummy/tests/unit/services/form-load-time-tracker-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:form-load-time-tracker', 'Unit | Service | form load time tracker', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('dummy/tests/unit/services/log-test', ['ember-data', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app', 'dummy/config/environment'], function (_emberData, _qunit, _startApp, _destroyApp, _environment) {\n  'use strict';\n\n  var app = void 0; //TODO Import Module. Replace Ember.Logger, Ember.testing = false;\n\n  var adapter = void 0;\n  var saveModel = void 0;\n\n  (0, _qunit.module)('Unit | Service | log', {\n    beforeEach: function beforeEach() {\n      app = (0, _startApp.default)();\n\n      adapter = Ember.Test.adapter;\n      Ember.Test.adapter = null;\n      Ember.testing = false;\n\n      saveModel = _emberData.default.Model.prototype.save;\n      _emberData.default.Model.prototype.save = function () {\n        return Ember.RSVP.resolve(this);\n      };\n    },\n    afterEach: function afterEach() {\n      Ember.Test.adapter = adapter;\n      Ember.testing = true;\n\n      _emberData.default.Model.prototype.save = saveModel;\n\n      (0, _destroyApp.default)(app);\n    }\n  });\n\n  (0, _qunit.test)('error works properly', function (assert) {\n    var done = assert.async();\n    assert.expect(10);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeErrorMessages = true;\n    var errorMessage = 'The system generated an error';\n    var errorMachineName = location.hostname;\n    var errorAppDomainName = window.navigator.userAgent;\n    var errorProcessId = document.location.href;\n\n    logService.on('error', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('category')), 'ERROR');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('eventId')), '0');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('priority')), '1');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('machineName')), errorMachineName);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('appDomainName')), errorAppDomainName);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('processId')), errorProcessId);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('threadName')), _environment.default.modulePrefix);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('message')), errorMessage);\n      var formattedMessageIsOk = savedLogRecord.get('formattedMessage') === '';\n      assert.ok(formattedMessageIsOk);\n\n      done();\n    });\n\n    // Call to Ember.Logger.error.\n    Ember.run(function () {\n      Ember.Logger.error(errorMessage);\n    });\n  });\n  (0, _qunit.test)('logService works properly when storeErrorMessages disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeErrorMessages = false;\n    var errorMessage = 'The system generated an error';\n\n    logService.on('error', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.notOk(savedLogRecord);\n\n      done();\n    });\n\n    // Call to Ember.Logger.error.\n    Ember.run(function () {\n      Ember.Logger.error(errorMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService for error works properly when it\\'s disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = false;\n    logService.storeErrorMessages = true;\n    var errorMessage = 'The system generated an error';\n\n    logService.on('error', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      if (savedLogRecord) {\n        throw new Error('Log is disabled, DB isn\\'t changed');\n      } else {\n        assert.ok(true, 'Check log call, DB isn\\'t changed');\n      }\n\n      done();\n    });\n\n    // Call to Ember.Logger.error.\n    Ember.run(function () {\n      Ember.Logger.error(errorMessage);\n    });\n  });\n\n  (0, _qunit.test)('warn works properly', function (assert) {\n    var done = assert.async();\n    assert.expect(10);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeWarnMessages = true;\n    var warnMessage = 'The system generated an warn';\n    var warnMachineName = location.hostname;\n    var warnAppDomainName = window.navigator.userAgent;\n    var warnProcessId = document.location.href;\n\n    logService.on('warn', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('category')), 'WARN');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('eventId')), '0');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('priority')), '2');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('machineName')), warnMachineName);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('appDomainName')), warnAppDomainName);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('processId')), warnProcessId);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('threadName')), _environment.default.modulePrefix);\n      var savedMessageContainsWarnMessage = savedLogRecord.get('message').indexOf(warnMessage) > -1;\n      assert.ok(savedMessageContainsWarnMessage);\n      var formattedMessageIsOk = savedLogRecord.get('formattedMessage') === '';\n      assert.ok(formattedMessageIsOk);\n\n      done();\n    });\n\n    // Call to warn.\n    Ember.run(function () {\n      (true && Ember.warn(warnMessage, false, { id: 'ember-flexberry-tests.log-test.warn-works-properly' }));\n    });\n  });\n\n  (0, _qunit.test)('logService works properly when storeWarnMessages disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeWarnMessages = false;\n    var warnMessage = 'The system generated an warn';\n\n    logService.on('warn', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.notOk(savedLogRecord);\n\n      done();\n    });\n\n    // Call to warn.\n    Ember.run(function () {\n      (true && Ember.warn(warnMessage, false, { id: 'ember-flexberry-tests.log-test.warn-works-properly-when-store-warn-messages-is-disabled' }));\n    });\n  });\n\n  (0, _qunit.test)('logService for warn works properly when it\\'s disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = false;\n    logService.storeWarnMessages = true;\n    var warnMessage = 'The system generated an warn';\n\n    logService.on('warn', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      if (savedLogRecord) {\n        throw new Error('Log is disabled, DB isn\\'t changed');\n      } else {\n        assert.ok(true, 'Check log call, DB isn\\'t changed');\n      }\n\n      done();\n    });\n\n    // Call to warn.\n    Ember.run(function () {\n      (true && Ember.warn(warnMessage, false, { id: 'ember-flexberry-tests.log-test.warn-works-properly-when-log-service-is-disabled' }));\n    });\n  });\n\n  (0, _qunit.test)('log works properly', function (assert) {\n    var done = assert.async();\n    assert.expect(10);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeLogMessages = true;\n    var logMessage = 'Logging log message';\n    var logMachineName = location.hostname;\n    var logAppDomainName = window.navigator.userAgent;\n    var logProcessId = document.location.href;\n\n    logService.on('log', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('category')), 'LOG');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('eventId')), '0');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('priority')), '3');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('machineName')), logMachineName);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('appDomainName')), logAppDomainName);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('processId')), logProcessId);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('threadName')), _environment.default.modulePrefix);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('message')), logMessage);\n      var formattedMessageIsOk = savedLogRecord.get('formattedMessage') === '';\n      assert.ok(formattedMessageIsOk);\n\n      done();\n    });\n\n    // Call to Ember.Logger.log.\n    Ember.run(function () {\n      Ember.Logger.log(logMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService works properly when storeLogMessages disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeLogMessages = false;\n    var logMessage = 'Logging log message';\n\n    logService.on('log', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.notOk(savedLogRecord);\n\n      done();\n    });\n\n    // Call to Ember.Logger.log.\n    Ember.run(function () {\n      Ember.Logger.log(logMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService for log works properly when it\\'s disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = false;\n    logService.storeLogMessages = true;\n    var logMessage = 'Logging log message';\n\n    logService.on('log', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      if (savedLogRecord) {\n        throw new Error('Log is disabled, DB isn\\'t changed');\n      } else {\n        assert.ok(true, 'Check log call, DB isn\\'t changed');\n      }\n\n      done();\n    });\n\n    // Call to Ember.Logger.log.\n    Ember.run(function () {\n      Ember.Logger.log(logMessage);\n    });\n  });\n\n  (0, _qunit.test)('info works properly', function (assert) {\n    var done = assert.async();\n    assert.expect(10);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeInfoMessages = true;\n    var infoMessage = 'Logging info message';\n    var infoMachineName = location.hostname;\n    var infoAppDomainName = window.navigator.userAgent;\n    var infoProcessId = document.location.href;\n\n    logService.on('info', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('category')), 'INFO');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('eventId')), '0');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('priority')), '4');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('machineName')), infoMachineName);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('appDomainName')), infoAppDomainName);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('processId')), infoProcessId);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('threadName')), _environment.default.modulePrefix);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('message')), infoMessage);\n      var formattedMessageIsOk = savedLogRecord.get('formattedMessage') === '';\n      assert.ok(formattedMessageIsOk);\n\n      done();\n    });\n\n    // Call to Ember.Logger.info.\n    Ember.run(function () {\n      Ember.Logger.info(infoMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService works properly when storeInfoMessages disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeInfoMessages = false;\n    var infoMessage = 'Logging info message';\n\n    logService.on('info', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.notOk(savedLogRecord);\n\n      done();\n    });\n\n    // Call to Ember.Logger.info.\n    Ember.run(function () {\n      Ember.Logger.info(infoMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService for info works properly when it\\'s disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = false;\n    logService.storeInfoMessages = true;\n    var infoMessage = 'Logging info message';\n\n    logService.on('info', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      if (savedLogRecord) {\n        throw new Error('Log is disabled, DB isn\\'t changed');\n      } else {\n        assert.ok(true, 'Check log call, DB isn\\'t changed');\n      }\n\n      done();\n    });\n\n    // Call to Ember.Logger.info.\n    Ember.run(function () {\n      Ember.Logger.info(infoMessage);\n    });\n  });\n\n  (0, _qunit.test)('debug works properly', function (assert) {\n    var done = assert.async();\n    assert.expect(10);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeDebugMessages = true;\n    var debugMessage = 'Logging debug message';\n    var debugMachineName = location.hostname;\n    var debugAppDomainName = window.navigator.userAgent;\n    var debugProcessId = document.location.href;\n\n    logService.on('debug', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('category')), 'DEBUG');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('eventId')), '0');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('priority')), '5');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('machineName')), debugMachineName);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('appDomainName')), debugAppDomainName);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('processId')), debugProcessId);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('threadName')), _environment.default.modulePrefix);\n      var savedMessageContainsDebugMessage = savedLogRecord.get('message').indexOf(debugMessage) > -1;\n      assert.ok(savedMessageContainsDebugMessage);\n      var formattedMessageIsOk = savedLogRecord.get('formattedMessage') === '';\n      assert.ok(formattedMessageIsOk);\n\n      done();\n    });\n\n    // Call to debug.\n    Ember.run(function () {\n      Ember.debug(debugMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService works properly when storeDebugMessages disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeDebugMessages = false;\n    var debugMessage = 'Logging debug message';\n\n    logService.on('debug', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.notOk(savedLogRecord);\n\n      done();\n    });\n\n    // Call to debug.\n    Ember.run(function () {\n      Ember.debug(debugMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService for debug works properly when it\\'s disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = false;\n    logService.storeDebugMessages = true;\n    var debugMessage = 'Logging debug message';\n\n    logService.on('debug', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      if (savedLogRecord) {\n        throw new Error('Log is disabled, DB isn\\'t changed');\n      } else {\n        assert.ok(true, 'Check log call, DB isn\\'t changed');\n      }\n\n      done();\n    });\n\n    // Call to debug.\n    Ember.run(function () {\n      Ember.debug(debugMessage);\n    });\n  });\n\n  (0, _qunit.test)('deprecate works properly', function (assert) {\n    var done = assert.async();\n    assert.expect(10);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeDeprecationMessages = true;\n    var deprecationMessage = 'The system generated an deprecation';\n    var deprecationMachineName = location.hostname;\n    var deprecationAppDomainName = window.navigator.userAgent;\n    var deprecationProcessId = document.location.href;\n\n    logService.on('deprecation', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('category')), 'DEPRECATION');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('eventId')), '0');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('priority')), '6');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('machineName')), deprecationMachineName);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('appDomainName')), deprecationAppDomainName);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('processId')), deprecationProcessId);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('threadName')), _environment.default.modulePrefix);\n      var savedMessageContainsDeprecationMessage = savedLogRecord.get('message').indexOf(deprecationMessage) > -1;\n      assert.ok(savedMessageContainsDeprecationMessage);\n      var formattedMessageIsOk = savedLogRecord.get('formattedMessage') === '';\n      assert.ok(formattedMessageIsOk);\n\n      done();\n    });\n\n    // Call to deprecate.\n    Ember.run(function () {\n      Ember.deprecate(deprecationMessage, false, { id: 'ember-flexberry-debug.feature-logger-deprecate-test', until: '0' });\n    });\n  });\n\n  (0, _qunit.test)('logService works properly when storeDeprecationMessages disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeDeprecationMessages = false;\n    var deprecationMessage = 'The system generated an deprecation';\n\n    logService.on('deprecation', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.notOk(savedLogRecord);\n\n      done();\n    });\n\n    // Call to deprecate.\n    Ember.run(function () {\n      Ember.deprecate(deprecationMessage, false, { id: 'ember-flexberry-debug.feature-logger-deprecate-test', until: '0' });\n    });\n  });\n\n  (0, _qunit.test)('logService for deprecate works properly when it\\'s disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = false;\n    logService.storeDeprecationMessages = true;\n    var deprecationMessage = 'The system generated an deprecation';\n\n    logService.on('deprecation', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      if (savedLogRecord) {\n        throw new Error('Log is disabled, DB isn\\'t changed');\n      } else {\n        assert.ok(true, 'Check log call, DB isn\\'t changed');\n      }\n\n      done();\n    });\n\n    // Call to deprecate.\n    Ember.run(function () {\n      Ember.deprecate(deprecationMessage, false, { id: 'ember-flexberry-debug.feature-logger-deprecate-test', until: '0' });\n    });\n  });\n\n  (0, _qunit.test)('assert works properly', function (testAssert) {\n    var done = testAssert.async();\n    testAssert.expect(10);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeErrorMessages = true;\n    var assertMessage = 'The system generated an error';\n    var assertMachineName = location.hostname;\n    var assertAppDomainName = window.navigator.userAgent;\n    var assertProcessId = document.location.href;\n\n    logService.on('error', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      testAssert.strictEqual(Ember.$.trim(savedLogRecord.get('category')), 'ERROR');\n      testAssert.strictEqual(Ember.$.trim(savedLogRecord.get('eventId')), '0');\n      testAssert.strictEqual(Ember.$.trim(savedLogRecord.get('priority')), '1');\n      testAssert.strictEqual(Ember.$.trim(savedLogRecord.get('machineName')), assertMachineName);\n      testAssert.strictEqual(Ember.$.trim(savedLogRecord.get('appDomainName')), assertAppDomainName);\n      testAssert.strictEqual(Ember.$.trim(savedLogRecord.get('processId')), assertProcessId);\n      testAssert.strictEqual(Ember.$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n      testAssert.strictEqual(Ember.$.trim(savedLogRecord.get('threadName')), _environment.default.modulePrefix);\n      var savedMessageContainsAssertMessage = savedLogRecord.get('message').indexOf(assertMessage) > -1;\n      testAssert.ok(savedMessageContainsAssertMessage);\n      var formattedMessageContainsAssertMessage = savedLogRecord.get('formattedMessage').indexOf(assertMessage) > -1;\n      testAssert.ok(formattedMessageContainsAssertMessage);\n\n      done();\n    });\n\n    // Call to assert.\n    Ember.run(function () {\n      (true && !(false) && Ember.assert(assertMessage, false));\n    });\n  });\n\n  (0, _qunit.test)('logService works properly when storeErrorMessages for assert disabled', function (testAssert) {\n    var done = testAssert.async();\n    testAssert.expect(1);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeErrorMessages = false;\n    var assertMessage = 'The system generated an error';\n\n    logService.on('error', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      testAssert.notOk(savedLogRecord);\n\n      done();\n    });\n\n    // Call to assert.\n    Ember.run(function () {\n      (true && !(false) && Ember.assert(assertMessage, false));\n    });\n  });\n\n  (0, _qunit.test)('logService for assert works properly when it\\'s disabled', function (testAssert) {\n    var done = testAssert.async();\n    testAssert.expect(1);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = false;\n    logService.storeErrorMessages = true;\n    var assertMessage = 'The system generated an error';\n\n    logService.on('error', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      if (savedLogRecord) {\n        throw new Error('Log is disabled, DB isn\\'t changed');\n      } else {\n        testAssert.ok(true, 'Check log call, DB isn\\'t changed');\n      }\n\n      done();\n    });\n\n    // Call to assert.\n    Ember.run(function () {\n      (true && !(false) && Ember.assert(assertMessage, false));\n    });\n  });\n\n  (0, _qunit.test)('throwing exceptions logs properly', function (assert) {\n    var done = assert.async();\n    assert.expect(10);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeErrorMessages = true;\n    var errorMessage = 'The system thrown an exception';\n    var errorMachineName = location.hostname;\n    var errorAppDomainName = window.navigator.userAgent;\n    var errorProcessId = document.location.href;\n\n    logService.on('error', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('category')), 'ERROR');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('eventId')), '0');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('priority')), '1');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('machineName')), errorMachineName);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('appDomainName')), errorAppDomainName);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('processId')), errorProcessId);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('threadName')), _environment.default.modulePrefix);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('message')), errorMessage);\n      var formattedMessageContainsErrorMessage = savedLogRecord.get('formattedMessage').indexOf(errorMessage) > -1;\n      assert.ok(formattedMessageContainsErrorMessage);\n\n      done();\n    });\n\n    // Throwing an exception.\n    Ember.run(function () {\n      throw new Error(errorMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService works properly when storeErrorMessages for throw disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeErrorMessages = false;\n    var errorMessage = 'The system thrown an exception';\n\n    logService.on('error', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.notOk(savedLogRecord);\n\n      done();\n    });\n\n    // Throwing an exception.\n    Ember.run(function () {\n      throw new Error(errorMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService for throw works properly when it\\'s disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = false;\n    logService.storeErrorMessages = true;\n    var errorMessage = 'The system thrown an exception';\n\n    logService.on('error', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      if (savedLogRecord) {\n        throw new Error('Log is disabled, DB isn\\'t changed');\n      } else {\n        assert.ok(true, 'Check log call, DB isn\\'t changed');\n      }\n\n      done();\n    });\n\n    // Throwing an exception.\n    Ember.run(function () {\n      throw new Error(errorMessage);\n    });\n  });\n\n  (0, _qunit.test)('promise errors logs properly', function (assert) {\n    var done = assert.async();\n    assert.expect(10);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storePromiseErrors = true;\n    logService.showPromiseErrors = false;\n    var promiseErrorMessage = 'Promise error';\n    var promiseMachineName = location.hostname;\n    var promiseAppDomainName = window.navigator.userAgent;\n    var promiseProcessId = document.location.href;\n\n    logService.on('promise', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('category')), 'PROMISE');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('eventId')), '0');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('priority')), '7');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('machineName')), promiseMachineName);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('appDomainName')), promiseAppDomainName);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('processId')), promiseProcessId);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('threadName')), _environment.default.modulePrefix);\n      assert.strictEqual(Ember.$.trim(savedLogRecord.get('message')), promiseErrorMessage);\n\n      var formattedMessageContainsPromiseErrorMessage = savedLogRecord.get('formattedMessage').indexOf(promiseErrorMessage) > -1;\n      assert.ok(formattedMessageContainsPromiseErrorMessage);\n\n      done();\n    });\n\n    // Throwing an exception.\n    Ember.run(function () {\n      Ember.RSVP.reject(promiseErrorMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService works properly when storePromiseErrors disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storePromiseErrors = false;\n    logService.showPromiseErrors = false;\n    var promiseErrorMessage = 'Promise error';\n\n    logService.on('promise', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.notOk(savedLogRecord);\n\n      done();\n    });\n\n    // Throwing an exception.\n    Ember.run(function () {\n      Ember.RSVP.reject(promiseErrorMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService for promise works properly when it\\'s disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = false;\n    logService.storePromiseErrors = true;\n    var promiseErrorMessage = 'Promise error';\n\n    logService.on('promise', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      if (savedLogRecord) {\n        throw new Error('Log is disabled, DB isn\\'t changed');\n      } else {\n        assert.ok(true, 'Check log call, DB isn\\'t changed');\n      }\n\n      done();\n    });\n\n    // Throwing an exception.\n    Ember.run(function () {\n      Ember.RSVP.reject(promiseErrorMessage);\n    });\n  });\n});","define('dummy/tests/unit/services/objectlistview-events-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:objectlistview-events', 'Unit | Service | objectlistview events', {\n    // Specify the other units that are required for this test.\n    needs: ['service:app-state']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('dummy/tests/unit/utils/cut-string-by-length-test', ['dummy/utils/cut-string-by-length', 'qunit'], function (_cutStringByLength, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Utility | cut string by length');\n\n  (0, _qunit.test)('cut by length', function (assert) {\n    var result = (0, _cutStringByLength.default)('test string', 6);\n    assert.equal(result, 'test s...');\n\n    result = (0, _cutStringByLength.default)('test string', 20);\n    assert.equal(result, 'test string');\n\n    result = (0, _cutStringByLength.default)('test string', 0);\n    assert.equal(result, 'test string');\n\n    result = (0, _cutStringByLength.default)('test string', 3);\n    assert.equal(result, 'tes...');\n  });\n\n  (0, _qunit.test)('cut by spaces', function (assert) {\n    var result = (0, _cutStringByLength.default)('test string with spaces', 6, true);\n    assert.equal(result, 'test...');\n\n    result = (0, _cutStringByLength.default)('test string with spaces', 50, true);\n    assert.equal(result, 'test string with spaces');\n\n    result = (0, _cutStringByLength.default)('test string with spaces', 0, true);\n    assert.equal(result, 'test string with spaces');\n\n    result = (0, _cutStringByLength.default)('test string with spaces', 3, true);\n    assert.equal(result, 'tes...');\n\n    result = (0, _cutStringByLength.default)('test string with spaces', 18, true);\n    assert.equal(result, 'test string with...');\n\n    result = (0, _cutStringByLength.default)('test string with spaces', 12, true);\n    assert.equal(result, 'test string...');\n  });\n});","define('dummy/tests/unit/utils/deserialize-sorting-param-test', ['dummy/utils/deserialize-sorting-param', 'qunit'], function (_deserializeSortingParam, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Utility | deserialize sorting param');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var stringToDeserialize = '+type.name-moderated';\n    var result = (0, _deserializeSortingParam.default)(stringToDeserialize);\n    assert.ok(result);\n    assert.ok(Ember.isArray(result));\n    assert.equal(result.length, 2);\n    assert.equal(result[0].propName, 'type.name');\n    assert.equal(result[0].direction, 'asc');\n    assert.equal(result[1].propName, 'moderated');\n    assert.equal(result[1].direction, 'desc');\n  });\n\n  (0, _qunit.test)('empty param string', function (assert) {\n    var stringToDeserialize = '';\n    var result = (0, _deserializeSortingParam.default)(stringToDeserialize);\n    assert.ok(result);\n    assert.ok(Ember.isArray(result));\n    assert.equal(result.length, 0);\n  });\n});","define('dummy/tests/unit/utils/get-current-agregator-test', ['qunit', 'dummy/tests/helpers/start-app', 'dummy/utils/get-current-agregator'], function (_qunit, _startApp, _getCurrentAgregator) {\n  'use strict';\n\n  var App = void 0;\n\n  (0, _qunit.module)('Unit | Utility | get current agregator', {\n    beforeEach: function beforeEach() {\n      App = (0, _startApp.default)();\n    },\n    afterEach: function afterEach() {\n      Ember.run(App, 'destroy');\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var detailInteractionService = App.__container__.lookup('service:detail-interaction');\n    var agregator = void 0;\n    Ember.run(function () {\n      agregator = App.__container__.lookup('service:store').createRecord('ember-flexberry-dummy-localization', { name: 'Localization' });\n    });\n\n    var agregatorsArray = Ember.A();\n    detailInteractionService.pushValue('modelCurrentAgregators', agregatorsArray, agregator);\n    var result = _getCurrentAgregator.default.call(agregator);\n    assert.ok(result);\n  });\n});","define('dummy/tests/unit/utils/get-projection-by-name-test', ['dummy/utils/get-projection-by-name', 'qunit'], function (_getProjectionByName, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Utility | get projection by name');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var store = {};\n    store.modelFor = function () {\n      return { projections: { testProjection: { success: true } } };\n    };\n\n    var result = (0, _getProjectionByName.default)('testProjection', 'testModel', store);\n    assert.ok(result && result.success);\n  });\n});","define('dummy/tests/unit/utils/need-save-current-agregator-test', ['qunit', 'dummy/tests/helpers/start-app', 'dummy/utils/need-save-current-agregator'], function (_qunit, _startApp, _needSaveCurrentAgregator) {\n  'use strict';\n\n  var App = void 0;\n\n  (0, _qunit.module)('Unit | Utility | need save current agregator', {\n    beforeEach: function beforeEach() {\n      App = (0, _startApp.default)();\n      var offlineGlobals = App.__container__.lookup('service:offline-globals');\n      offlineGlobals.setOnlineAvailable(false);\n    },\n    afterEach: function afterEach() {\n      Ember.run(App, 'destroy');\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var agregator = void 0;\n    Ember.run(function () {\n      agregator = App.__container__.lookup('service:store').createRecord('ember-flexberry-dummy-localization', { name: 'Localization' });\n    });\n\n    var resultOk = _needSaveCurrentAgregator.default.call(agregator, agregator);\n    assert.ok(resultOk);\n\n    var resultNotOk = _needSaveCurrentAgregator.default.call(agregator);\n    assert.notOk(resultNotOk);\n  });\n});","define('dummy/tests/unit/utils/serialize-sorting-param-test', ['dummy/utils/serialize-sorting-param', 'qunit'], function (_serializeSortingParam, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Utility | serialize sorting param');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var sortingObject = [{ propName: 'type.name', direction: 'asc' }, { propName: 'moderated', direction: 'desc' }];\n\n    var result = (0, _serializeSortingParam.default)(sortingObject);\n    assert.ok(result);\n    assert.equal(result, '+type.name-moderated');\n  });\n\n  (0, _qunit.test)('empty array', function (assert) {\n    var sortingObject = [];\n\n    var result = (0, _serializeSortingParam.default)(sortingObject, null);\n    assert.equal(result, null);\n  });\n});","define('dummy/tests/unit/utils/string-test', ['qunit', 'ember-flexberry/utils/string'], function (_qunit, _string) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Util | render-string');\n\n  (0, _qunit.test)('Util is function', function (assert) {\n    assert.expect(1);\n\n    assert.strictEqual(Ember.typeOf(_string.render) === 'function', true, 'Imported \\'render-string\\' util is function');\n  });\n\n  (0, _qunit.test)('Util returns null for calls with unexpected arguments', function (assert) {\n    assert.expect(9);\n\n    assert.strictEqual((0, _string.render)(), null, 'Returns null for calls without arguments');\n\n    Ember.A([null, 1, true, false, {}, [], function () {}, new Date()]).forEach(function (wrongFirstArgument) {\n      assert.strictEqual((0, _string.render)(wrongFirstArgument), null, 'Returns null for calls with first argument not of string type');\n    });\n  });\n\n  (0, _qunit.test)('Util returns same string for calls with unexpected render arguments', function (assert) {\n    assert.expect(4);\n\n    var stringWithTemplates = 'I have {{ one }} dollar in my wallet, {{ two }} apples in my bag, and {{ three }} hours of free time';\n    assert.strictEqual((0, _string.render)(stringWithTemplates), stringWithTemplates, 'Returns same string for calls without render options');\n\n    assert.strictEqual((0, _string.render)(stringWithTemplates, { context: null }), stringWithTemplates, 'Returns same string for calls without render context');\n\n    assert.strictEqual((0, _string.render)(stringWithTemplates, { context: { 'ONE': 1, 'TWO': 2, 'THREE': 3 } }), stringWithTemplates, 'Returns same string for calls with context without templates-related keys');\n\n    assert.strictEqual((0, _string.render)(stringWithTemplates, { context: { 'one': 1, 'two': 2, 'three': 3 }, delimiters: ['<<', '>>'] }), stringWithTemplates, 'Returns same string for calls with unexpected delimiters');\n  });\n\n  (0, _qunit.test)('Util returns rendered string for calls with expected render arguments', function (assert) {\n    assert.expect(2);\n\n    var stringWithTemplatesAndDefaultDelimiters = 'I have {{ one }} dollar in my wallet, {{ two }} apples in my bag, and {{ three }} hours of free time';\n    assert.strictEqual((0, _string.render)(stringWithTemplatesAndDefaultDelimiters, { context: { 'one': 1, 'two': 2, 'three': 3 } }), 'I have 1 dollar in my wallet, 2 apples in my bag, and 3 hours of free time', 'Returns rendered string for calls with default delimiters');\n\n    var stringWithTemplatesAndCustomDelimiters = 'I have {% one %} dollar in my wallet, {% two %} apples in my bag, and {% three %} hours of free time';\n    assert.strictEqual((0, _string.render)(stringWithTemplatesAndCustomDelimiters, { context: { 'one': 1, 'two': 2, 'three': 3 }, delimiters: ['{%', '%}'] }), 'I have 1 dollar in my wallet, 2 apples in my bag, and 3 hours of free time', 'Returns rendered string for calls with custom delimiters');\n  });\n});","define('dummy/config/environment', [], function() {\n  var prefix = 'dummy';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjznJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACptDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtxphCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACprpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChvUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzlvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACllhzhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfpxSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrrgrtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACljrwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxlinIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACltHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}