"use strict";

/* jshint ignore:start */



/* jshint ignore:end */

define('dummy/adapters/application', ['exports', 'ember-flexberry-data', 'dummy/config/environment'], function (exports, _emberFlexberryData, _dummyConfigEnvironment) {
  exports['default'] = _emberFlexberryData.Adapter.Odata.extend(_emberFlexberryData.Projection.AdapterMixin, {
    host: _dummyConfigEnvironment['default'].APP.backendUrls.api
  });
});
define('dummy/adapters/odata', ['exports', 'ember-flexberry-data/adapters/odata'], function (exports, _emberFlexberryDataAdaptersOdata) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataAdaptersOdata['default'];
    }
  });
});
define('dummy/adapters/offline', ['exports', 'ember-flexberry-data/adapters/offline'], function (exports, _emberFlexberryDataAdaptersOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataAdaptersOffline['default'];
    }
  });
});
define('dummy/app', ['exports', 'ember', 'dummy/resolver', 'ember-load-initializers', 'dummy/config/environment', 'dummy/default-user-settings/index', 'dummy/models/custom-inflector-rules'], function (exports, _ember, _dummyResolver, _emberLoadInitializers, _dummyConfigEnvironment, _dummyDefaultUserSettingsIndex, _dummyModelsCustomInflectorRules) {

  var App = undefined;

  _ember['default'].MODEL_FACTORY_INJECTIONS = true;

  App = _ember['default'].Application.extend({
    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,
    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix,
    Resolver: _dummyResolver['default']
  });
  (0, _emberLoadInitializers['default'])(App, _dummyConfigEnvironment['default'].modulePrefix);

  exports['default'] = App;
});
define('dummy/browserify', ['exports', 'npm:dexie', 'npm:node-uuid'], function (exports, _npmDexie, _npmNodeUuid) {});
// Requirement of ember-browserify.
// In order to use NPM pacakges inside the addon, we have to import
// them from somewhere in /app directory.
// See: https://github.com/ef4/ember-browserify#using-ember-browserify-in-addons
define('dummy/components/advlimit-dialog-content', ['exports', 'ember-flexberry/components/advlimit-dialog-content'], function (exports, _emberFlexberryComponentsAdvlimitDialogContent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsAdvlimitDialogContent['default'];
    }
  });
});
define('dummy/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'dummy/config/environment'], function (exports, _emberCliAppVersionComponentsAppVersion, _dummyConfigEnvironment) {

  var name = _dummyConfigEnvironment['default'].APP.name;
  var version = _dummyConfigEnvironment['default'].APP.version;

  exports['default'] = _emberCliAppVersionComponentsAppVersion['default'].extend({
    version: version,
    name: name
  });
});
define('dummy/components/block-slot', ['exports', 'ember-block-slots/components/block-slot'], function (exports, _emberBlockSlotsComponentsBlockSlot) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBlockSlotsComponentsBlockSlot['default'];
    }
  });
});
define('dummy/components/colsconfig-dialog-content', ['exports', 'ember-flexberry/components/colsconfig-dialog-content'], function (exports, _emberFlexberryComponentsColsconfigDialogContent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsColsconfigDialogContent['default'];
    }
  });
});
define('dummy/components/css-picker', ['exports', 'ember'], function (exports, _ember) {

  /**
    CSS picker component.
  
    @class CssPickerComponent
    @extends <a href="http://emberjs.com/api/classes/Ember.Component.html">Ember.Component</a>
  */
  exports['default'] = _ember['default'].Component.extend({
    /**
      Items containing possible CSS classes names with flags indicating whether class is selected or not.
       @private
      @property _items
      @type Object[]
    */
    _items: undefined,

    actions: {
      /**
        Handles changes in checkboxes related to CSS classes names.
         @method actions.onChange
      */
      onChange: function onChange() {
        var classNames = _ember['default'].A();
        this.$('input').each(function (index, input) {
          if (input.checked) {
            classNames.pushObject(input.name);
          }
        });

        this.set('value', classNames.join(' '));
      }
    },

    /**
      Items containing possible CSS classes names.
       @property items
      @type Object[]
    */
    items: undefined,

    /**
      Single value combined from selected CSS classes names.
       @property value
      @type String
     */
    value: undefined,

    /**
      Initializes component.
    */
    init: function init() {
      this._super.apply(this, arguments);

      this._generateItems();
      this._checkItems();
    },

    /**
      Observes changes in items collection.
    */
    _itemsDidChange: _ember['default'].observer('items.[]', function () {
      this._generateItems();
      this._checkItems();
    }),

    /**
      Observes changes in value combined from selected CSS classes names.
    */
    _valueDidChange: _ember['default'].observer('value', function () {
      this._checkItems();
    }),

    /**
      Generates items containing possible CSS classes names with flags indicating whether class is selected or not..
       @method _generateItems
    */
    _generateItems: function _generateItems() {
      var items = _ember['default'].A(this.get('items'));

      this.set('_items', items.map(function (item) {
        return {
          name: item,
          checked: false
        };
      }));
    },

    /**
      Changes items flags indicating whether class is selected or not
      (depending on current value combined from selected CSS classes names).
       @method _checkItems
    */
    _checkItems: function _checkItems() {
      var classNames = _ember['default'].A((this.get('value') || '').split(' '));
      this.get('_items').forEach(function (item) {
        _ember['default'].set(item, 'checked', classNames.contains(item.name));
      });
    }
  });
});
/**
  @module ember-flexberry-dummy
*/
define('dummy/components/filters-dialog-content', ['exports', 'ember-flexberry/components/filters-dialog-content'], function (exports, _emberFlexberryComponentsFiltersDialogContent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFiltersDialogContent['default'];
    }
  });
});
define('dummy/components/flexberry-button', ['exports', 'ember-flexberry/components/flexberry-button'], function (exports, _emberFlexberryComponentsFlexberryButton) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryButton['default'];
    }
  });
});
define('dummy/components/flexberry-checkbox', ['exports', 'ember-flexberry/components/flexberry-checkbox'], function (exports, _emberFlexberryComponentsFlexberryCheckbox) {
  exports['default'] = _emberFlexberryComponentsFlexberryCheckbox['default'];
});
define('dummy/components/flexberry-colorpicker', ['exports', 'ember-flexberry/components/flexberry-colorpicker'], function (exports, _emberFlexberryComponentsFlexberryColorpicker) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryColorpicker['default'];
    }
  });
});
define('dummy/components/flexberry-datepicker', ['exports', 'ember-flexberry/components/flexberry-datepicker'], function (exports, _emberFlexberryComponentsFlexberryDatepicker) {
  exports['default'] = _emberFlexberryComponentsFlexberryDatepicker['default'];
});
define('dummy/components/flexberry-ddau-checkbox', ['exports', 'ember-flexberry/components/flexberry-ddau-checkbox'], function (exports, _emberFlexberryComponentsFlexberryDdauCheckbox) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryDdauCheckbox['default'];
    }
  });
});
define('dummy/components/flexberry-ddau-slider', ['exports', 'ember-flexberry/components/flexberry-ddau-slider'], function (exports, _emberFlexberryComponentsFlexberryDdauSlider) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryDdauSlider['default'];
    }
  });
});
define('dummy/components/flexberry-dialog', ['exports', 'ember-flexberry/components/flexberry-dialog'], function (exports, _emberFlexberryComponentsFlexberryDialog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryDialog['default'];
    }
  });
});
define('dummy/components/flexberry-dropdown', ['exports', 'ember-flexberry/components/flexberry-dropdown'], function (exports, _emberFlexberryComponentsFlexberryDropdown) {
  exports['default'] = _emberFlexberryComponentsFlexberryDropdown['default'];
});
define('dummy/components/flexberry-error', ['exports', 'ember-flexberry/components/flexberry-error'], function (exports, _emberFlexberryComponentsFlexberryError) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryError['default'];
    }
  });
});
define('dummy/components/flexberry-field', ['exports', 'ember-flexberry/components/flexberry-field'], function (exports, _emberFlexberryComponentsFlexberryField) {
  exports['default'] = _emberFlexberryComponentsFlexberryField['default'];
});
define('dummy/components/flexberry-file', ['exports', 'ember-flexberry/components/flexberry-file'], function (exports, _emberFlexberryComponentsFlexberryFile) {
  exports['default'] = _emberFlexberryComponentsFlexberryFile['default'];
});
define('dummy/components/flexberry-groupedit', ['exports', 'ember-flexberry/components/flexberry-groupedit'], function (exports, _emberFlexberryComponentsFlexberryGroupedit) {
  exports['default'] = _emberFlexberryComponentsFlexberryGroupedit['default'];
});
define('dummy/components/flexberry-icon', ['exports', 'ember-flexberry/components/flexberry-icon'], function (exports, _emberFlexberryComponentsFlexberryIcon) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryIcon['default'];
    }
  });
});
define('dummy/components/flexberry-jsonarea', ['exports', 'ember-flexberry/components/flexberry-jsonarea'], function (exports, _emberFlexberryComponentsFlexberryJsonarea) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryJsonarea['default'];
    }
  });
});
define('dummy/components/flexberry-lookup', ['exports', 'ember-flexberry/components/flexberry-lookup'], function (exports, _emberFlexberryComponentsFlexberryLookup) {
  exports['default'] = _emberFlexberryComponentsFlexberryLookup['default'];
});
define('dummy/components/flexberry-menu', ['exports', 'ember-flexberry/components/flexberry-menu'], function (exports, _emberFlexberryComponentsFlexberryMenu) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryMenu['default'];
    }
  });
});
define('dummy/components/flexberry-menuitem', ['exports', 'ember-flexberry/components/flexberry-menuitem'], function (exports, _emberFlexberryComponentsFlexberryMenuitem) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryMenuitem['default'];
    }
  });
});
define('dummy/components/flexberry-objectlistview', ['exports', 'ember-flexberry/components/flexberry-objectlistview'], function (exports, _emberFlexberryComponentsFlexberryObjectlistview) {
  exports['default'] = _emberFlexberryComponentsFlexberryObjectlistview['default'];
});
define('dummy/components/flexberry-simpledatetime', ['exports', 'ember-flexberry/components/flexberry-simpledatetime'], function (exports, _emberFlexberryComponentsFlexberrySimpledatetime) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberrySimpledatetime['default'];
    }
  });
});
define('dummy/components/flexberry-simpleolv', ['exports', 'ember-flexberry/components/flexberry-simpleolv'], function (exports, _emberFlexberryComponentsFlexberrySimpleolv) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberrySimpleolv['default'];
    }
  });
});
define('dummy/components/flexberry-tab-bar', ['exports', 'ember-flexberry/components/flexberry-tab-bar'], function (exports, _emberFlexberryComponentsFlexberryTabBar) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryTabBar['default'];
    }
  });
});
define('dummy/components/flexberry-text-cell', ['exports', 'ember-flexberry/components/flexberry-text-cell'], function (exports, _emberFlexberryComponentsFlexberryTextCell) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryTextCell['default'];
    }
  });
});
define('dummy/components/flexberry-textarea', ['exports', 'ember-flexberry/components/flexberry-textarea'], function (exports, _emberFlexberryComponentsFlexberryTextarea) {
  exports['default'] = _emberFlexberryComponentsFlexberryTextarea['default'];
});
define('dummy/components/flexberry-textbox', ['exports', 'ember-flexberry/components/flexberry-textbox'], function (exports, _emberFlexberryComponentsFlexberryTextbox) {
  exports['default'] = _emberFlexberryComponentsFlexberryTextbox['default'];
});
define('dummy/components/flexberry-toggler', ['exports', 'ember-flexberry/components/flexberry-toggler'], function (exports, _emberFlexberryComponentsFlexberryToggler) {
  exports['default'] = _emberFlexberryComponentsFlexberryToggler['default'];
});
define('dummy/components/flexberry-tree', ['exports', 'ember-flexberry/components/flexberry-tree'], function (exports, _emberFlexberryComponentsFlexberryTree) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryTree['default'];
    }
  });
});
define('dummy/components/flexberry-treenode', ['exports', 'ember-flexberry/components/flexberry-treenode'], function (exports, _emberFlexberryComponentsFlexberryTreenode) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryTreenode['default'];
    }
  });
});
define('dummy/components/flexberry-validationmessage', ['exports', 'ember-flexberry/components/flexberry-validationmessage'], function (exports, _emberFlexberryComponentsFlexberryValidationmessage) {
  exports['default'] = _emberFlexberryComponentsFlexberryValidationmessage['default'];
});
define('dummy/components/flexberry-validationsummary', ['exports', 'ember-flexberry/components/flexberry-validationsummary'], function (exports, _emberFlexberryComponentsFlexberryValidationsummary) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryValidationsummary['default'];
    }
  });
});
define('dummy/components/form-load-time-tracker', ['exports', 'ember-flexberry/components/form-load-time-tracker'], function (exports, _emberFlexberryComponentsFormLoadTimeTracker) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFormLoadTimeTracker['default'];
    }
  });
});
define('dummy/components/groupedit-toolbar', ['exports', 'ember-flexberry/components/groupedit-toolbar'], function (exports, _emberFlexberryComponentsGroupeditToolbar) {
  exports['default'] = _emberFlexberryComponentsGroupeditToolbar['default'];
});
define('dummy/components/mobile/flexberry-file', ['exports', 'ember-flexberry/components/mobile/flexberry-file'], function (exports, _emberFlexberryComponentsMobileFlexberryFile) {
  exports['default'] = _emberFlexberryComponentsMobileFlexberryFile['default'];
});
define('dummy/components/mobile/flexberry-groupedit', ['exports', 'ember-flexberry/components/mobile/flexberry-groupedit'], function (exports, _emberFlexberryComponentsMobileFlexberryGroupedit) {
  exports['default'] = _emberFlexberryComponentsMobileFlexberryGroupedit['default'];
});
define('dummy/components/mobile/flexberry-objectlistview', ['exports', 'ember-flexberry/components/mobile/flexberry-objectlistview'], function (exports, _emberFlexberryComponentsMobileFlexberryObjectlistview) {
  exports['default'] = _emberFlexberryComponentsMobileFlexberryObjectlistview['default'];
});
define('dummy/components/mobile/object-list-view-row', ['exports', 'ember-flexberry/components/mobile/object-list-view-row'], function (exports, _emberFlexberryComponentsMobileObjectListViewRow) {
  exports['default'] = _emberFlexberryComponentsMobileObjectListViewRow['default'];
});
define('dummy/components/mobile/object-list-view', ['exports', 'ember-flexberry/components/mobile/object-list-view'], function (exports, _emberFlexberryComponentsMobileObjectListView) {
  exports['default'] = _emberFlexberryComponentsMobileObjectListView['default'];
});
define('dummy/components/modal-dialog', ['exports', 'ember-flexberry/components/modal-dialog'], function (exports, _emberFlexberryComponentsModalDialog) {
  exports['default'] = _emberFlexberryComponentsModalDialog['default'];
});
define('dummy/components/number-input', ['exports', 'ember'], function (exports, _ember) {

  /**
    Number input component.
  
    @class NumberInputComponent
    @extends <a href="http://emberjs.com/api/classes/Ember.Component.html">Ember.Component</a>
   */
  exports['default'] = _ember['default'].Component.extend({
    /**
      Override wrapper tag name to disable component's wrapping div.
       @property tagName
      @type String
      @default ''
     */
    tagName: '',

    /**
      Value typed through component's input.
       @property inputValue
      @type String
     */
    inputValue: undefined,

    /**
      Value typed through component's input & converted to number.
       @property value
      @type Number
     */
    value: undefined,

    /**
      Handles changes in inputValue.
     */
    inputValueDidChange: _ember['default'].observer('inputValue', function () {
      var value = parseInt(this.get('inputValue'), 10);
      this.set('value', isNaN(value) ? undefined : value);
    }),

    /**
      Initializes component.
     */
    init: function init() {
      this._super.apply(this, arguments);

      var value = this.get('value');
      if (!_ember['default'].isNone(value)) {
        this.set('inputValue', '' + value);
      }
    }
  });
});
/**
  @module ember-flexberry-dummy
 */
define('dummy/components/object-list-view-cell', ['exports', 'ember-flexberry/components/object-list-view-cell'], function (exports, _emberFlexberryComponentsObjectListViewCell) {
  exports['default'] = _emberFlexberryComponentsObjectListViewCell['default'];
});
define('dummy/components/object-list-view-row', ['exports', 'ember-flexberry/components/object-list-view-row'], function (exports, _emberFlexberryComponentsObjectListViewRow) {
  exports['default'] = _emberFlexberryComponentsObjectListViewRow['default'];
});
define('dummy/components/object-list-view-single-column-cell', ['exports', 'ember-flexberry/components/object-list-view-single-column-cell'], function (exports, _emberFlexberryComponentsObjectListViewSingleColumnCell) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsObjectListViewSingleColumnCell['default'];
    }
  });
});
define('dummy/components/object-list-view', ['exports', 'ember-flexberry/components/object-list-view'], function (exports, _emberFlexberryComponentsObjectListView) {
  exports['default'] = _emberFlexberryComponentsObjectListView['default'];
});
define('dummy/components/olv-filter-interval', ['exports', 'ember-flexberry/components/olv-filter-interval'], function (exports, _emberFlexberryComponentsOlvFilterInterval) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsOlvFilterInterval['default'];
    }
  });
});
define('dummy/components/olv-setconfigdialogbutton', ['exports', 'ember-flexberry/components/olv-setconfigdialogbutton'], function (exports, _emberFlexberryComponentsOlvSetconfigdialogbutton) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsOlvSetconfigdialogbutton['default'];
    }
  });
});
define('dummy/components/olv-toolbar', ['exports', 'ember-flexberry/components/olv-toolbar'], function (exports, _emberFlexberryComponentsOlvToolbar) {
  exports['default'] = _emberFlexberryComponentsOlvToolbar['default'];
});
define('dummy/components/range-slider', ['exports', 'ui-slider/components/range-slider'], function (exports, _uiSliderComponentsRangeSlider) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _uiSliderComponentsRangeSlider['default'];
    }
  });
});
define('dummy/components/settings-example', ['exports', 'ember'], function (exports, _ember) {

  /**
    Settings example component.
  
    @class SettingsExampleComponent
    @extends Ember.Component
   */
  exports['default'] = _ember['default'].Component.extend({
    /**
      A hash of controller properties.
       @property controllerProperties
      @type Object
      @default null
     */
    controllerProperties: null,

    /**
      Settings metadata for component used in example.
       @property componentSettingsMetadata
      @type Object
      @default null
     */
    componentSettingsMetadata: null,

    /**
      Template text for component used in example.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: null,

    /**
      Overflow style of component block.
       @property componentBlockOverflow
      @type String
     */
    componentBlockOverflow: 'scroll'
  });
});
/**
  @module ember-flexberry-dummy
 */
define('dummy/components/ui-accordion', ['exports', 'semantic-ui-ember/components/ui-accordion'], function (exports, _semanticUiEmberComponentsUiAccordion) {
  exports['default'] = _semanticUiEmberComponentsUiAccordion['default'];
});
define('dummy/components/ui-checkbox', ['exports', 'semantic-ui-ember/components/ui-checkbox'], function (exports, _semanticUiEmberComponentsUiCheckbox) {
  exports['default'] = _semanticUiEmberComponentsUiCheckbox['default'];
});
define('dummy/components/ui-dropdown-item', ['exports', 'semantic-ui-ember/components/ui-dropdown-item'], function (exports, _semanticUiEmberComponentsUiDropdownItem) {
  exports['default'] = _semanticUiEmberComponentsUiDropdownItem['default'];
});
define('dummy/components/ui-dropdown', ['exports', 'semantic-ui-ember/components/ui-dropdown'], function (exports, _semanticUiEmberComponentsUiDropdown) {
  exports['default'] = _semanticUiEmberComponentsUiDropdown['default'];
});
define('dummy/components/ui-embed', ['exports', 'semantic-ui-ember/components/ui-embed'], function (exports, _semanticUiEmberComponentsUiEmbed) {
  exports['default'] = _semanticUiEmberComponentsUiEmbed['default'];
});
define('dummy/components/ui-message', ['exports', 'ember-flexberry/components/ui-message'], function (exports, _emberFlexberryComponentsUiMessage) {
  exports['default'] = _emberFlexberryComponentsUiMessage['default'];
});
define('dummy/components/ui-modal', ['exports', 'semantic-ui-ember/components/ui-modal'], function (exports, _semanticUiEmberComponentsUiModal) {
  exports['default'] = _semanticUiEmberComponentsUiModal['default'];
});
define('dummy/components/ui-nag', ['exports', 'semantic-ui-ember/components/ui-nag'], function (exports, _semanticUiEmberComponentsUiNag) {
  exports['default'] = _semanticUiEmberComponentsUiNag['default'];
});
define('dummy/components/ui-popup', ['exports', 'semantic-ui-ember/components/ui-popup'], function (exports, _semanticUiEmberComponentsUiPopup) {
  exports['default'] = _semanticUiEmberComponentsUiPopup['default'];
});
define('dummy/components/ui-progress', ['exports', 'semantic-ui-ember/components/ui-progress'], function (exports, _semanticUiEmberComponentsUiProgress) {
  exports['default'] = _semanticUiEmberComponentsUiProgress['default'];
});
define('dummy/components/ui-radio', ['exports', 'semantic-ui-ember/components/ui-radio'], function (exports, _semanticUiEmberComponentsUiRadio) {
  exports['default'] = _semanticUiEmberComponentsUiRadio['default'];
});
define('dummy/components/ui-rating', ['exports', 'semantic-ui-ember/components/ui-rating'], function (exports, _semanticUiEmberComponentsUiRating) {
  exports['default'] = _semanticUiEmberComponentsUiRating['default'];
});
define('dummy/components/ui-search', ['exports', 'semantic-ui-ember/components/ui-search'], function (exports, _semanticUiEmberComponentsUiSearch) {
  exports['default'] = _semanticUiEmberComponentsUiSearch['default'];
});
define('dummy/components/ui-shape', ['exports', 'semantic-ui-ember/components/ui-shape'], function (exports, _semanticUiEmberComponentsUiShape) {
  exports['default'] = _semanticUiEmberComponentsUiShape['default'];
});
define('dummy/components/ui-sidebar', ['exports', 'semantic-ui-ember/components/ui-sidebar'], function (exports, _semanticUiEmberComponentsUiSidebar) {
  exports['default'] = _semanticUiEmberComponentsUiSidebar['default'];
});
define('dummy/components/ui-slider', ['exports', 'ui-slider/components/ui-slider'], function (exports, _uiSliderComponentsUiSlider) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _uiSliderComponentsUiSlider['default'];
    }
  });
});
define('dummy/components/ui-sticky', ['exports', 'semantic-ui-ember/components/ui-sticky'], function (exports, _semanticUiEmberComponentsUiSticky) {
  exports['default'] = _semanticUiEmberComponentsUiSticky['default'];
});
define('dummy/components/yield-slot', ['exports', 'ember-block-slots/components/yield-slot'], function (exports, _emberBlockSlotsComponentsYieldSlot) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBlockSlotsComponentsYieldSlot['default'];
    }
  });
});
define('dummy/controllers/advlimit-dialog', ['exports', 'ember-flexberry/controllers/advlimit-dialog'], function (exports, _emberFlexberryControllersAdvlimitDialog) {
  exports['default'] = _emberFlexberryControllersAdvlimitDialog['default'];
});
define('dummy/controllers/application', ['exports', 'ember', 'dummy/config/environment'], function (exports, _ember, _dummyConfigEnvironment) {

  var version = _dummyConfigEnvironment['default'].APP.version;

  exports['default'] = _ember['default'].Controller.extend({
    /**
      Service that triggers objectlistview events.
       @property objectlistviewEventsService
      @type Service
    */
    objectlistviewEventsService: _ember['default'].inject.service('objectlistview-events'),

    /**
      Service for managing the state of the application.
       @property appState
      @type AppStateService
    */
    appState: _ember['default'].inject.service(),

    actions: {
      /**
        Call `updateWidthTrigger` for `objectlistviewEventsService`.
         @method actions.updateWidth
      */
      updateWidth: function updateWidth() {
        this.get('objectlistviewEventsService').updateWidthTrigger();
      },

      /**
        Toggles application sitemap's side bar.
         @method actions.toggleSidebar
      */
      toggleSidebar: function toggleSidebar() {
        var sidebar = _ember['default'].$('.ui.sidebar.main.menu');
        sidebar.sidebar('toggle');

        _ember['default'].$('.full.height').css({
          transition: 'width 0.35s ease-in-out 0s',
          width: sidebar.sidebar('is visible') ? '100%' : 'calc(100% - ' + sidebar.width() + 'px)'
        });

        _ember['default'].$('.sidebar.icon .text_menu').toggleClass('hidden');
        _ember['default'].$('.sidebar.icon').toggleClass('text-menu-show');
        _ember['default'].$('.sidebar.icon').toggleClass('text-menu-hide');
        _ember['default'].$('.bgw-opacity').toggleClass('hidden');
      },

      /**
        Toggles application sitemap's side bar in mobile view.
         @method actions.toggleSidebarMobile
      */
      toggleSidebarMobile: function toggleSidebarMobile() {
        _ember['default'].$('.ui.sidebar.main.menu').sidebar('toggle');

        _ember['default'].$('.sidebar.icon').toggleClass('text-menu-show');
        _ember['default'].$('.sidebar.icon').toggleClass('text-menu-hide');
        _ember['default'].$('.sidebar.icon').toggleClass('hidden-text');
        _ember['default'].$('.bgw-opacity').toggleClass('hidden');
      }
    },

    /**
      Flag: indicates that form to which controller is related designed for acceptance tests &
      all additional markup in application.hbs mustn't be rendered.
       @property isInAcceptanceTestMode
      @type Boolean
      @default false
    */
    isInAcceptanceTestMode: false,

    /**
      Currernt addon version.
       @property addonVersion
      @type String
    */
    addonVersion: version,

    /**
      Link to GitHub commit related to current addon version.
       @property addonVersionHref
      @type String
    */
    addonVersionHref: _ember['default'].computed('addonVersion', function () {
      var addonVersion = this.get('addonVersion');
      var commitSha = addonVersion.split('+')[1];

      return 'https://github.com/Flexberry/ember-flexberry/commit/' + commitSha;
    }),

    /**
      Flag: indicates whether current browser is internet explorer.
       @property browserIsInternetExplorer
      @type Boolean
    */
    browserIsInternetExplorer: _ember['default'].computed(function () {
      var userAgent = window.navigator.userAgent;

      return userAgent.indexOf('MSIE ') > 0 || userAgent.indexOf('Trident/') > 0 || userAgent.indexOf('Edge/') > 0;
    }),

    /**
      Locales supported by application.
       @property locales
      @type String[]
      @default undefined
    */
    locales: undefined,

    /**
      Handles changes in userSettingsService.isUserSettingsServiceEnabled.
       @method _userSettingsServiceChanged
      @private
    */
    _userSettingsServiceChanged: _ember['default'].observer('userSettingsService.isUserSettingsServiceEnabled', function () {
      this.get('target.router').refresh();
    }),

    /**
      Initializes controller.
    */
    init: function init() {
      this._super.apply(this, arguments);

      var i18n = this.get('i18n');
      if (_ember['default'].isNone(i18n)) {
        return;
      }

      // Add locales.
      this.set('locales', ['ru', 'en']);

      // If i18n.locale is long value like 'ru-RU', 'en-GB', ... this code will return short variant 'ru', 'en', etc.
      var shortCurrentLocale = this.get('i18n.locale').split('-')[0];
      var availableLocales = _ember['default'].A(this.get('locales'));

      // Force current locale to be one of available,
      // if browser's current language is not supported by dummy application,
      // or if browser's current locale is long value like 'ru-RU', 'en-GB', etc.
      if (!availableLocales.contains(shortCurrentLocale)) {
        i18n.set('locale', 'en');
      } else {
        i18n.set('locale', shortCurrentLocale);
      }
    },

    /**
      Application sitemap.
       @property sitemap
      @type Object
    */
    sitemap: _ember['default'].computed('i18n.locale', function () {
      var i18n = this.get('i18n');

      return {
        nodes: [{
          link: 'index',
          caption: i18n.t('forms.application.sitemap.index.caption'),
          title: i18n.t('forms.application.sitemap.index.title'),
          children: null
        }, {
          link: null,
          caption: i18n.t('forms.application.sitemap.application.caption'),
          title: i18n.t('forms.application.sitemap.application.title'),
          children: [{
            link: 'ember-flexberry-dummy-application-user-list',
            caption: i18n.t('forms.application.sitemap.application.application-users.caption'),
            title: i18n.t('forms.application.sitemap.application.application-users.title'),
            children: null
          }, {
            link: 'ember-flexberry-dummy-localization-list',
            caption: i18n.t('forms.application.sitemap.application.localizations.caption'),
            title: i18n.t('forms.application.sitemap.application.localizations.title'),
            children: null
          }, {
            link: 'ember-flexberry-dummy-suggestion-list',
            caption: i18n.t('forms.application.sitemap.application.suggestions.caption'),
            title: i18n.t('forms.application.sitemap.application.suggestions.title'),
            children: null
          }, {
            link: 'ember-flexberry-dummy-suggestion-type-list',
            caption: i18n.t('forms.application.sitemap.application.suggestion-types.caption'),
            title: i18n.t('forms.application.sitemap.application.suggestion-types.title'),
            children: null
          }, {
            link: 'ember-flexberry-dummy-multi-list',
            caption: i18n.t('forms.application.sitemap.application.multi.caption'),
            title: i18n.t('forms.application.sitemap.application.multi.title'),
            children: null
          }, {
            link: 'ember-flexberry-dummy-suggestion-file-list',
            caption: i18n.t('forms.application.sitemap.application.suggestion-file.caption'),
            title: i18n.t('forms.application.sitemap.application.suggestion-file.title'),
            children: null
          }]
        }, {
          link: null,
          caption: i18n.t('forms.application.sitemap.log-service-examples.caption'),
          title: i18n.t('forms.application.sitemap.log-service-examples.title'),
          children: [{
            link: 'i-i-s-caseberry-logging-objects-application-log-l',
            caption: i18n.t('forms.application.sitemap.log-service-examples.application-log.caption'),
            title: i18n.t('forms.application.sitemap.log-service-examples.application-log.title'),
            children: null
          }, {
            link: 'log-service-examples/settings-example',
            caption: i18n.t('forms.application.sitemap.log-service-examples.settings-example.caption'),
            title: i18n.t('forms.application.sitemap.log-service-examples.settings-example.title'),
            children: null
          }, {
            link: 'log-service-examples/clear-log-form',
            caption: i18n.t('forms.application.sitemap.log-service-examples.clear-log-form.caption'),
            title: i18n.t('forms.application.sitemap.log-service-examples.clear-log-form.title'),
            children: null
          }]
        }, {
          link: null,
          caption: i18n.t('forms.application.sitemap.lock.caption'),
          title: i18n.t('forms.application.sitemap.lock.caption'),
          children: [{
            link: 'new-platform-flexberry-services-lock-list',
            caption: i18n.t('forms.application.sitemap.lock.title'),
            title: i18n.t('forms.application.sitemap.lock.title'),
            children: null
          }]
        }, {
          link: null,
          caption: i18n.t('forms.application.sitemap.components-examples.caption'),
          title: i18n.t('forms.application.sitemap.components-examples.title'),
          children: [{
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-button.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-button.title'),
            children: [{
              link: 'components-examples/flexberry-button/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-button.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-button.settings-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-checkbox.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-checkbox.title'),
            children: [{
              link: 'components-examples/flexberry-checkbox/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-checkbox.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-checkbox.settings-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-checkbox/three-state-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-checkbox.three-state-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-checkbox.three-state-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-ddau-checkbox.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-ddau-checkbox.title'),
            children: [{
              link: 'components-examples/flexberry-ddau-checkbox/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-ddau-checkbox.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-ddau-checkbox.settings-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-datepicker.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-datepicker.title'),
            children: [{
              link: 'components-examples/flexberry-datepicker/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-datepicker.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-datepicker.settings-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.title'),
            children: [{
              link: 'components-examples/flexberry-dropdown/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.settings-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-dropdown/conditional-render-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.conditional-render-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.conditional-render-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-dropdown/empty-value-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.empty-value-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.empty-value-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-dropdown/items-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.items-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.items-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-field.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-field.title'),
            children: [{
              link: 'components-examples/flexberry-field/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-field.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-field.settings-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-file.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-file.title'),
            children: [{
              link: 'components-examples/flexberry-file/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-file.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-file.settings-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-file/flexberry-file-in-modal',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-file.flexberry-file-in-modal.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-file.flexberry-file-in-modal.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.title'),
            children: [{
              link: 'components-examples/flexberry-groupedit/model-update-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.model-update-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.model-update-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-groupedit/custom-buttons-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.custom-buttons-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.custom-buttons-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-groupedit/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.settings-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-groupedit/configurate-row-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.configurate-row-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.configurate-row-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-groupedit-with-lookup-with-computed-atribute',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.groupedit-with-lookup-with-computed-atribute.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.groupedit-with-lookup-with-computed-atribute.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-readonly-columns-by-configurate-row-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.readonly-columns-by-configurate-row-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.readonly-columns-by-configurate-row-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.title'),
            children: [{
              link: 'components-examples/flexberry-lookup/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.settings-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-lookup/customizing-window-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.customizing-window-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.customizing-window-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-lookup/hierarchy-olv-in-lookup-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.hierarchy-olv-in-lookup-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.hierarchy-olv-in-lookup-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-lookup/limit-function-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.limit-function-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.limit-function-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.limit-function-through-dynamic-properties-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.limit-function-through-dynamic-properties-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-lookup/lookup-block-form-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.lookup-block-form-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.lookup-block-form-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-lookup/lookup-in-modal',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.lookup-in-modal.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.lookup-in-modal.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-lookup/dropdown-mode-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.dropdown-mode-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.dropdown-mode-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-lookup/default-ordering-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.default-ordering-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.default-ordering-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-lookup/autocomplete-order-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.autocomplete-order-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.autocomplete-order-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-list',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.compute-autocomplete.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.compute-autocomplete.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-lookup/numeric-autocomplete',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.numeric-autocomplete.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.numeric-autocomplete.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-lookup/autofill-by-limit-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.autofill-by-limit-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.autofill-by-limit-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-lookup/user-settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.user-settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.user-settings-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-menu.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-menu.title'),
            children: [{
              link: 'components-examples/flexberry-menu/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-menu.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-menu.settings-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.title'),
            children: [{
              link: 'components-examples/flexberry-objectlistview/limit-function-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.limit-function-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.limit-function-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-objectlistview/inheritance-models',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.inheritance-models.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.inheritance-models.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-objectlistview/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.settings-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-objectlistview/toolbar-custom-buttons-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-objectlistview/on-edit-form',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.on-edit-form.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.on-edit-form.title')
            }, {
              link: 'components-examples/flexberry-objectlistview/list-on-editform',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.list-on-editform.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.list-on-editform.title')
            }, {
              link: 'components-examples/flexberry-objectlistview/custom-filter',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.custom-filter.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.custom-filter.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-objectlistview/edit-form-with-detail-list',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.edit-form-with-detail-list.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.edit-form-with-detail-list.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-objectlistview/hierarchy-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.hierarchy-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.hierarchy-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-objectlistview/hierarchy-paging-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.hierarchy-paging-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.hierarchy-paging-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-objectlistview/configurate-rows',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.configurate-rows.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.configurate-rows.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-objectlistview/downloading-files-from-olv-list',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.downloading-files-from-olv-list.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.downloading-files-from-olv-list.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-objectlistview/selected-rows',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.selected-rows.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.selected-rows.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-objectlistview/object-list-view-resize',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.object-list-view-resize.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.object-list-view-resize.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-list',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.return-from-ediform.title'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.return-from-ediform.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-objectlistview/lock-services-editor-view-list',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.lock-services-editor-view-list.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.lock-services-editor-view-list.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-objectlistview/limited-text-size-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.limited-text-size-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.limited-text-size-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: 'flexberry-simpleolv',
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.title'),
            children: [{
              link: 'components-examples/flexberry-simpleolv/limit-function-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.limit-function-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.limit-function-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-simpleolv/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.settings-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-simpleolv/toolbar-custom-buttons-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-simpleolv/on-edit-form',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.on-edit-form.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.on-edit-form.title')
            }, {
              link: 'components-examples/flexberry-simpleolv/custom-filter',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.custom-filter.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.custom-filter.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-simpleolv/configurate-rows',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.configurate-rows.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.configurate-rows.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-simpleolv/selected-rows',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.selected-rows.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.selected-rows.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-simpledatetime.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-simpledatetime.title'),
            children: [{
              link: 'components-examples/flexberry-simpledatetime/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-simpledatetime.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-simpledatetime.settings-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-text-cell.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-text-cell.title'),
            children: [{
              link: 'components-examples/flexberry-text-cell/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-text-cell.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-text-cell.settings-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-textarea.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-textarea.title'),
            children: [{
              link: 'components-examples/flexberry-textarea/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-textarea.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-textarea.settings-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-textbox.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-textbox.title'),
            children: [{
              link: 'components-examples/flexberry-textbox/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-textbox.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-textbox.settings-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-toggler.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-toggler.title'),
            children: [{
              link: 'components-examples/flexberry-toggler/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-toggler.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-toggler.settings-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-toggler/settings-example-inner',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-toggler.settings-example-inner.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-toggler.settings-example-inner.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-toggler/ge-into-toggler-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-toggler.ge-into-toggler-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-toggler.ge-into-toggler-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-tree.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-tree.title'),
            children: [{
              link: 'components-examples/flexberry-tree/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-tree.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-tree.settings-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.ui-message.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.ui-message.title'),
            children: [{
              link: 'components-examples/ui-message/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.ui-message.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.ui-message.settings-example.title'),
              children: null
            }]
          }]
        }, {
          link: null,
          caption: i18n.t('forms.application.sitemap.integration-examples.caption'),
          title: i18n.t('forms.application.sitemap.integration-examples.title'),
          children: [{
            link: null,
            caption: i18n.t('forms.application.sitemap.integration-examples.edit-form.caption'),
            title: i18n.t('forms.application.sitemap.integration-examples.edit-form.title'),
            children: [{
              link: 'integration-examples/edit-form/readonly-mode',
              caption: i18n.t('forms.application.sitemap.integration-examples.edit-form.readonly-mode.caption'),
              title: i18n.t('forms.application.sitemap.integration-examples.edit-form.readonly-mode.title'),
              children: null
            }, {
              link: 'integration-examples/edit-form/validation',
              caption: i18n.t('forms.application.sitemap.integration-examples.edit-form.validation.caption'),
              title: i18n.t('forms.application.sitemap.integration-examples.edit-form.validation.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.integration-examples.odata-examples.caption'),
            title: i18n.t('forms.application.sitemap.integration-examples.odata-examples.title'),
            children: [{
              link: null,
              caption: i18n.t('forms.application.sitemap.integration-examples.odata-examples.get-masters.caption'),
              title: i18n.t('forms.application.sitemap.integration-examples.odata-examples.get-masters.title'),
              children: [{
                link: 'integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-l',
                caption: i18n.t('forms.application.sitemap.integration-examples.odata-examples.get-masters.sotrudnik.caption'),
                title: i18n.t('forms.application.sitemap.integration-examples.odata-examples.get-masters.sotrudnik.title'),
                children: null
              }, {
                link: 'integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-l',
                caption: i18n.t('forms.application.sitemap.integration-examples.odata-examples.get-masters.departament.caption'),
                title: i18n.t('forms.application.sitemap.integration-examples.odata-examples.get-masters.departament.title'),
                children: null
              }, {
                link: 'integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-l',
                caption: i18n.t('forms.application.sitemap.integration-examples.odata-examples.get-masters.vid-departamenta.caption'),
                title: i18n.t('forms.application.sitemap.integration-examples.odata-examples.get-masters.vid-departamenta.title'),
                children: null
              }]
            }]
          }]
        }, {
          link: null,
          caption: i18n.t('forms.application.sitemap.user-setting-forms.caption'),
          title: i18n.t('forms.application.sitemap.user-setting-forms.title'),
          children: [{
            link: 'user-setting-forms/user-setting-delete',
            caption: i18n.t('forms.application.sitemap.user-setting-forms.user-setting-delete.caption'),
            title: i18n.t('forms.application.sitemap.user-setting-forms.user-setting-delete.title'),
            children: null
          }]
        }]
      };
    })
  });
});
define('dummy/controllers/colsconfig-dialog', ['exports', 'ember-flexberry/controllers/colsconfig-dialog'], function (exports, _emberFlexberryControllersColsconfigDialog) {
  exports['default'] = _emberFlexberryControllersColsconfigDialog['default'];
});
define('dummy/controllers/components-acceptance-tests/edit-form-readonly', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Flag: indicates whether the form is in readonly mode or not.
       @property readonly
      @type Boolean
      @default true
     */
    readonly: true,

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr, bindingPath, model) {
      var cellComponent = this._super.apply(this, arguments);

      if (attr.kind === 'belongsTo' && bindingPath === 'master') {
        cellComponent.componentProperties = {
          projection: 'MasterL',
          displayAttributeName: 'text',
          title: 'Master',
          relationName: 'master',
          choose: 'showLookupDialog',
          remove: 'removeLookupValue'
        };
      }

      if (bindingPath === 'longText') {
        return {
          componentName: 'flexberry-textarea',
          componentProperties: {}
        };
      }

      if (bindingPath === 'date') {
        return {
          componentName: 'flexberry-datepicker',
          componentProperties: {}
        };
      }

      if (attr.kind === 'belongsTo' && bindingPath === 'masterDropdown') {
        cellComponent.componentProperties = {
          projection: 'MasterDropdownL',
          displayAttributeName: 'text',
          title: 'Master dropdown',
          relationName: 'masterDropdown',
          choose: 'showLookupDialog',
          remove: 'removeLookupValue'
        };
      }

      return cellComponent;
    }
  });
});
define('dummy/controllers/components-acceptance-tests/edit-form-validation/validation', ['exports', 'ember', 'moment', 'ember-flexberry/controllers/edit-form'], function (exports, _ember, _moment, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Lookup events service.
    */
    lookupEvents: _ember['default'].inject.service('lookup-events'),

    actions: {
      /**
        Handles click on lookup's choose button.
      */
      showLookupDialog: function showLookupDialog() {
        // Create new master & add to model.
        var master = this.get('store').createRecord('integration-examples/edit-form/validation/master', { text: 'Master text' });
        this.get('model').set('master', master);

        this.get('lookupEvents').lookupDialogOnHiddenTrigger('IntegrationExamplesValidationsMaster');

        // Create temp file and add to model.
        var tempFile = { fileName: 'Ждём НГ.png', fileSize: '27348', fileMimeType: '27348' };
        this.get('model').set('file', tempFile);

        // Set date.
        this.get('model').set('date', (0, _moment['default'])());
      }
    }
  });
});
define('dummy/controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {

    /**
      Route name for transition after close edit form.
       @property parentRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-list'
     */
    parentRoute: 'ember-flexberry-dummy-suggestion-list'
  });
});
define('dummy/controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-edit'
     */
    editFormRoute: 'components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox',

    exportExcelProjection: 'SuggestionL'
  });
});
define('dummy/controllers/components-acceptance-tests/flexberry-lookup/base-operations', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-i18n'], function (exports, _emberFlexberryControllersEditForm, _emberI18n) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property placeholder
      @type String
      @default 't('components.flexberry-lookup.placeholder')'
    */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-lookup.placeholder'),

    /**
      Name for 'flexberry-lookup' component 'componentName' property.
       @property componentName
      @type String
      @default 'flexberry-lookup'
    */
    componentName: 'flexberry-lookup',

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
      @default false
    */
    readonly: false,

    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property title
      @type String
      @default 'Master'
    */
    title: 'Master',

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'autocomplete' mode or not.
       @property autocomplete
      @type Boolean
      @default false
    */
    autocomplete: false,

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'dropdown' mode or not.
       @property dropdown
      @type Boolean
      @default false
    */
    dropdown: false,

    /**
      Content for 'flexberry-lookup' component 'chooseText' property.
       @property chooseText
      @type String
      @default 't('components.flexberry-lookup.choose-button-text')'
    */
    chooseText: (0, _emberI18n.translationMacro)('components.flexberry-lookup.choose-button-text'),

    /**
      Content for 'flexberry-lookup' component 'removeText' property.
       @property removeText
      @type String
      @default t('components.flexberry-lookup.remove-button-text')
    */
    removeText: (0, _emberI18n.translationMacro)('components.flexberry-lookup.remove-button-text'),

    /**
      Text for 'flexberry-lookup' component 'chooseButtonClass' property.
       @property chooseButtonClass
      @type String
      @default 'purple'
    */
    chooseButtonClass: '',

    /**
      Text for 'flexberry-lookup' component 'removeButtonClass' property.
       @property removeButtonClass
      @type String
      @default 'olive'
    */
    removeButtonClass: '',

    /**
      Projection name for 'flexberry-lookup' component 'projection' property.
       @property projection
      @type String
      @default 'SettingLookupExampleView'
    */
    projection: 'SettingLookupExampleView',

    /**
      Attribute name name for 'flexberry-lookup' component 'displayAttributeName' property.
       @property projection
      @type String
      @default 'name'
    */
    displayAttributeName: 'name',

    /**
      Name for 'flexberry-lookup' component 'relationName' property.
       @property relationName
      @type String
      @default 'type'
    */
    relationName: 'type'
  });
});
define('dummy/controllers/components-acceptance-tests/flexberry-lookup/settings-example-actions', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-i18n'], function (exports, _emberFlexberryControllersEditForm, _emberI18n) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property placeholder
      @type String
      @default 't('components.flexberry-lookup.placeholder')'
    */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-lookup.placeholder'),

    /**
      Name for 'flexberry-lookup' component 'componentName' property.
       @property componentName
      @type String
      @default 'flexberry-lookup'
    */
    componentName: 'flexberry-lookup',

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
      @default false
    */
    readonly: false,

    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property title
      @type String
      @default 'Master'
    */
    title: 'Master',

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'autocomplete' mode or not.
       @property autocomplete
      @type Boolean
      @default false
    */
    autocomplete: false,

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'dropdown' mode or not.
       @property dropdown
      @type Boolean
      @default false
    */
    dropdown: false,

    /**
      Content for 'flexberry-lookup' component 'chooseText' property.
       @property chooseText
      @type String
      @default 't('components.flexberry-lookup.choose-button-text')'
    */
    chooseText: (0, _emberI18n.translationMacro)('components.flexberry-lookup.choose-button-text'),

    /**
      Content for 'flexberry-lookup' component 'removeText' property.
       @property removeText
      @type String
      @default t('components.flexberry-lookup.remove-button-text')
    */
    removeText: (0, _emberI18n.translationMacro)('components.flexberry-lookup.remove-button-text'),

    /**
      Text for 'flexberry-lookup' component 'chooseButtonClass' property.
       @property chooseButtonClass
      @type String
      @default 'purple'
    */
    chooseButtonClass: '',

    /**
      Text for 'flexberry-lookup' component 'removeButtonClass' property.
       @property removeButtonClass
      @type String
      @default 'olive'
    */
    removeButtonClass: '',

    /**
      Projection name for 'flexberry-lookup' component 'projection' property.
       @property projection
      @type String
      @default 'SettingLookupExampleView'
    */
    projection: 'SettingLookupExampleView',

    /**
      Attribute name name for 'flexberry-lookup' component 'displayAttributeName' property.
       @property projection
      @type String
      @default 'name'
    */
    displayAttributeName: 'name',

    /**
      Name for 'flexberry-lookup' component 'relationName' property.
       @property relationName
      @type String
      @default 'type'
    */
    relationName: 'type'
  });
});
define('dummy/controllers/components-acceptance-tests/flexberry-lookup/settings-example-autocomplete', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-i18n'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberI18n) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property placeholder
      @type String
      @default 't('components.flexberry-lookup.placeholder')'
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-lookup.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-lookup.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-lookup.placeholder'));
      }
    }),
    /**
      Flag indicates whether 'flexberry-lookup' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
      @default false
    */
    readonly: false,

    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property title
      @type String
      @default 'Master'
    */
    title: 'Temp title',

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'autocomplete' mode or not.
       @property autocomplete
      @type Boolean
      @default false
    */
    autocomplete: false,

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'dropdown' mode or not.
       @property dropdown
      @type Boolean
      @default false
    */
    dropdown: false,

    /**
      Content for 'flexberry-lookup' component 'chooseText' property.
       @property chooseText
      @type String
      @default 't('components.flexberry-lookup.choose-button-text')'
    */
    chooseText: (0, _emberI18n.translationMacro)('components.flexberry-lookup.choose-button-text'),

    /**
      Content for 'flexberry-lookup' component 'removeText' property.
       @property removeText
      @type String
      @default '<i class="remove icon"></i>'
    */
    removeText: '<i class="remove icon"></i>',

    /**
      Text for 'flexberry-lookup' component 'chooseButtonClass' property.
       @property chooseButtonClass
      @type String
      @default 'purple'
    */
    chooseButtonClass: '',

    /**
      Text for 'flexberry-lookup' component 'removeButtonClass' property.
       @property removeButtonClass
      @type String
      @default 'olive'
    */
    removeButtonClass: ''
  });
});
define('dummy/controllers/components-acceptance-tests/flexberry-lookup/settings-example-autofill-by-limit', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-flexberry-data'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberFlexberryData) {
  var SimplePredicate = _emberFlexberryData.Query.SimplePredicate;
  var FilterOperator = _emberFlexberryData.Query.FilterOperator;
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({

    /**
      Current predicate to limit values for lookup.
       @property limitValue
      @type BasePredicate
      @default undefined
     */
    limitValue: undefined,

    /**
      Current values for lookup.
       @property limitValue
      @type BasePredicate
      @default undefined
     */
    defaultValue: undefined,

    /**
      Current predicate to limit accessible values for lookup.
       @property lookupCustomLimitPredicate
      @type BasePredicate
      @default undefined
     */
    lookupCustomLimitPredicate: _ember['default'].computed(function () {
      var limitValue = this.get('limitValue');

      return new SimplePredicate('id', FilterOperator.Eq, limitValue.get('id'));
    })
  });
});
define('dummy/controllers/components-acceptance-tests/flexberry-lookup/settings-example-dropdown', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-i18n'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberI18n) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property placeholder
      @type String
      @default 't('components.flexberry-lookup.placeholder')'
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-lookup.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-lookup.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-lookup.placeholder'));
      }
    }),
    /**
      Flag indicates whether 'flexberry-lookup' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
      @default false
    */
    readonly: false,

    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property title
      @type String
      @default 'Master'
    */
    title: 'Temp title',

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'autocomplete' mode or not.
       @property autocomplete
      @type Boolean
      @default false
    */
    autocomplete: false,

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'dropdown' mode or not.
       @property dropdown
      @type Boolean
      @default false
    */
    dropdown: false,

    /**
      Content for 'flexberry-lookup' component 'chooseText' property.
       @property chooseText
      @type String
      @default 't('components.flexberry-lookup.choose-button-text')'
    */
    chooseText: (0, _emberI18n.translationMacro)('components.flexberry-lookup.choose-button-text'),

    /**
      Content for 'flexberry-lookup' component 'removeText' property.
       @property removeText
      @type String
      @default '<i class="remove icon"></i>'
    */
    removeText: '<i class="remove icon"></i>',

    /**
      Text for 'flexberry-lookup' component 'chooseButtonClass' property.
       @property chooseButtonClass
      @type String
      @default 'purple'
    */
    chooseButtonClass: '',

    /**
      Text for 'flexberry-lookup' component 'removeButtonClass' property.
       @property removeButtonClass
      @type String
      @default 'olive'
    */
    removeButtonClass: ''
  });
});
define('dummy/controllers/components-acceptance-tests/flexberry-lookup/settings-example-limit-function', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry-data'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberryData) {
  var StringPredicate = _emberFlexberryData.Query.StringPredicate;
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Object containing dynamic properties that must be assigned to
      component using {{#crossLink "DynamicPropertiesMixin"}}dynamic-properties mixin{{/crossLink}}.
       @property dynamicProperties
      @type Object
      @default undefined
    */
    dynamicProperties: undefined,

    /**
      Current predicate to limit accessible values for lookup.
       @property limitType
      @type BasePredicate
      @default undefined
     */
    limitType: undefined,

    actions: {

      /**
        This method set dynamicProperties.lookupLimitPredicate for lookup window.
         @method limitFunction
       */
      limitFunction: function limitFunction() {
        var currentLookupValue = this.get('limitType');
        var limitFunction = new StringPredicate('name').contains(currentLookupValue);
        this.set('dynamicProperties.lookupLimitPredicate', limitFunction);
      }
    },

    /**
      Set limit accessible values for lookup.
       @method init
     */
    init: function init() {
      this._super.apply(this, arguments);
      this.set('dynamicProperties', {
        lookupLimitPredicate: null
      });
      this.set('limitType', this.get('controller.limitType'));
    }
  });
});
define('dummy/controllers/components-acceptance-tests/flexberry-lookup/settings-example-preview-page', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {});
});
define('dummy/controllers/components-acceptance-tests/flexberry-lookup/settings-example-preview', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-i18n'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberI18n) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({

    /**
      Current values name for lookup.
       @property testName
      @type BasePredicate
      @default undefined
     */
    testName: undefined,

    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property placeholder
      @type String
      @default 't('components.flexberry-lookup.placeholder')'
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-lookup.placeholder'),

    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-lookup.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-lookup.placeholder'));
      }
    }),

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
      @default false
    */
    readonly: false,

    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property title
      @type String
      @default 'Master'
    */
    title: 'Temp title',

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'autocomplete' mode or not.
       @property autocomplete
      @type Boolean
      @default false
    */
    autocomplete: false,

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'dropdown' mode or not.
       @property dropdown
      @type Boolean
      @default false
    */
    dropdown: false,

    /**
      Content for 'flexberry-lookup' component 'chooseText' property.
       @property chooseText
      @type String
      @default 't('components.flexberry-lookup.choose-button-text')'
    */
    chooseText: (0, _emberI18n.translationMacro)('components.flexberry-lookup.choose-button-text'),

    /**
      Content for 'flexberry-lookup' component 'removeText' property.
       @property removeText
      @type String
      @default '<i class="remove icon"></i>'
    */
    removeText: '<i class="remove icon"></i>',

    /**
      Text for 'flexberry-lookup' component 'chooseButtonClass' property.
       @property chooseButtonClass
      @type String
      @default 'purple'
    */
    chooseButtonClass: '',

    /**
      Text for 'flexberry-lookup' component 'removeButtonClass' property.
       @property removeButtonClass
      @type String
      @default 'olive'
    */
    removeButtonClass: '',

    /**
      Text for 'flexberry-lookup' component 'previewButtonClass' property.
       @property previewButtonClass
      @type String
    */
    previewButtonClass: '',

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr, bindingPath, model) {
      var cellComponent = this._super.apply(this, arguments);
      if (attr.kind === 'belongsTo') {
        switch (model.modelName + '+' + bindingPath) {
          case 'ember-flexberry-dummy-vote+author':
            cellComponent.componentProperties = {
              choose: 'showLookupDialog',
              remove: 'removeLookupValue',
              preview: 'previewLookupValue',
              displayAttributeName: 'name',
              required: true,
              relationName: 'author',
              projection: 'ApplicationUserL',
              autocomplete: true,
              showPreviewButton: true,
              previewFormRoute: 'components-acceptance-tests/flexberry-lookup/settings-example-preview-page'
            };
            break;
        }
      }

      return cellComponent;
    }
  });
});
define('dummy/controllers/components-acceptance-tests/flexberry-lookup/settings-example-projection', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-i18n'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberI18n) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property placeholder
      @type String
      @default 't('components.flexberry-lookup.placeholder')'
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-lookup.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-lookup.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-lookup.placeholder'));
      }
    }),
    /**
      Flag indicates whether 'flexberry-lookup' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
      @default false
    */
    readonly: false,

    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property title
      @type String
      @default 'Master'
    */
    title: 'Temp title',

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'autocomplete' mode or not.
       @property autocomplete
      @type Boolean
      @default false
    */
    autocomplete: false,

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'dropdown' mode or not.
       @property dropdown
      @type Boolean
      @default false
    */
    dropdown: false,

    /**
      Content for 'flexberry-lookup' component 'chooseText' property.
       @property chooseText
      @type String
      @default 't('components.flexberry-lookup.choose-button-text')'
    */
    chooseText: (0, _emberI18n.translationMacro)('components.flexberry-lookup.choose-button-text'),

    /**
      Content for 'flexberry-lookup' component 'removeText' property.
       @property removeText
      @type String
      @default '<i class="remove icon"></i>'
    */
    removeText: '<i class="remove icon"></i>',

    /**
      Text for 'flexberry-lookup' component 'chooseButtonClass' property.
       @property chooseButtonClass
      @type String
      @default 'purple'
    */
    chooseButtonClass: '',

    /**
      Text for 'flexberry-lookup' component 'removeButtonClass' property.
       @property removeButtonClass
      @type String
      @default 'olive'
    */
    removeButtonClass: '',

    /**
      Flag indicates whether 'flexberry-lookup' component use user settings or not.
       @property removeButtonClass
      @type String
      @default 'olive'
    */
    notUseUserSettings: false
  });
});
define('dummy/controllers/components-acceptance-tests/flexberry-lookup/settings-example-relation-name', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-i18n'], function (exports, _emberFlexberryControllersEditForm, _emberI18n) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property placeholder
      @type String
      @default 't('components.flexberry-lookup.placeholder')'
    */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-lookup.placeholder'),

    /**
      Name for 'flexberry-lookup' component 'componentName' property.
       @property componentName
      @type String
      @default 'flexberry-lookup'
    */
    componentName: 'flexberry-lookup',

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
      @default false
    */
    readonly: false,

    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property title
      @type String
      @default 'Master'
    */
    title: 'Master',

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'autocomplete' mode or not.
       @property autocomplete
      @type Boolean
      @default false
    */
    autocomplete: false,

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'dropdown' mode or not.
       @property dropdown
      @type Boolean
      @default false
    */
    dropdown: false,

    /**
      Content for 'flexberry-lookup' component 'chooseText' property.
       @property chooseText
      @type String
      @default 't('components.flexberry-lookup.choose-button-text')'
    */
    chooseText: (0, _emberI18n.translationMacro)('components.flexberry-lookup.choose-button-text'),

    /**
      Content for 'flexberry-lookup' component 'removeText' property.
       @property removeText
      @type String
      @default t('components.flexberry-lookup.remove-button-text')
    */
    removeText: (0, _emberI18n.translationMacro)('components.flexberry-lookup.remove-button-text'),

    /**
      Text for 'flexberry-lookup' component 'chooseButtonClass' property.
       @property chooseButtonClass
      @type String
      @default 'purple'
    */
    chooseButtonClass: '',

    /**
      Text for 'flexberry-lookup' component 'removeButtonClass' property.
       @property removeButtonClass
      @type String
      @default 'olive'
    */
    removeButtonClass: '',

    /**
      Projection name for 'flexberry-lookup' component 'projection' property.
       @property projection
      @type String
      @default 'SettingLookupExampleView'
    */
    projection: 'SettingLookupExampleView',

    /**
      Attribute name name for 'flexberry-lookup' component 'displayAttributeName' property.
       @property projection
      @type String
      @default 'name'
    */
    displayAttributeName: 'name',

    /**
      Name for 'flexberry-lookup' component 'relationName' property.
       @property relationName
      @type String
      @default 'type'
    */
    relationName: 'Temp relation name'
  });
});
define('dummy/controllers/components-acceptance-tests/flexberry-lookup/settings-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-i18n'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberI18n) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property placeholder
      @type String
      @default 't('components.flexberry-lookup.placeholder')'
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-lookup.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-lookup.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-lookup.placeholder'));
      }
    }),
    /**
      Flag indicates whether 'flexberry-lookup' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
      @default false
    */
    readonly: false,

    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property title
      @type String
      @default 'Master'
    */
    title: 'Temp title',

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'autocomplete' mode or not.
       @property autocomplete
      @type Boolean
      @default false
    */
    autocomplete: false,

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'dropdown' mode or not.
       @property dropdown
      @type Boolean
      @default false
    */
    dropdown: false,

    /**
      Content for 'flexberry-lookup' component 'chooseText' property.
       @property chooseText
      @type String
      @default 't('components.flexberry-lookup.choose-button-text')'
    */
    chooseText: (0, _emberI18n.translationMacro)('components.flexberry-lookup.choose-button-text'),

    /**
      Content for 'flexberry-lookup' component 'removeText' property.
       @property removeText
      @type String
      @default '<i class="remove icon"></i>'
    */
    removeText: '<i class="remove icon"></i>',

    /**
      Text for 'flexberry-lookup' component 'chooseButtonClass' property.
       @property chooseButtonClass
      @type String
      @default 'purple'
    */
    chooseButtonClass: '',

    /**
      Text for 'flexberry-lookup' component 'removeButtonClass' property.
       @property removeButtonClass
      @type String
      @default 'olive'
    */
    removeButtonClass: ''
  });
});
define('dummy/controllers/components-acceptance-tests/flexberry-objectlistview/base-operations', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({

    /**
      Model projection for 'flexberry-objectlistview' component 'modelProjection' property.
       @property projection
      @type Object
     */
    projection: 'SuggestionE',

    /**
      Name of related edit form route (for 'flexberry-objectlistview' component 'editFormRoute' property).
       @property editFormRoute
      @type String
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-edit',

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Flag for 'flexberry-objectlistview' component 'tableStriped' property.
       @property tableStriped
      @type Boolean
     */
    tableStriped: true,

    /**
      Flag for 'flexberry-objectlistview' component 'allowColumnResize' property.
       @property allowColumnResize
      @type Boolean
     */
    allowColumnResize: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'createNewButton' mode or not.
       @property createNewButton
      @type Boolean
     */
    createNewButton: true,

    /**
      Flag for 'flexberry-objectlistview' component 'deleteButton' property.
       @property deleteButton
      @type Boolean
     */
    deleteButton: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'enableFilters' mode or not.
       @property enableFilters
      @type Boolean
     */
    enableFilters: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'filterButton' mode or not.
       @property filterButton
      @type Boolean
     */
    filterButton: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'refreshButton' mode or not.
       @property refreshButton
      @type Boolean
     */
    refreshButton: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showCheckBoxInRow' mode or not.
       @property showCheckBoxInRow
      @type Boolean
     */
    showCheckBoxInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showDeleteButtonInRow' mode or not.
       @property showDeleteButtonInRow
      @type Boolean
     */
    showDeleteButtonInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showEditMenuItemInRow' mode or not.
       @property showEditMenuItemInRow
      @type Boolean
     */
    showEditMenuItemInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showDeleteMenuItemInRow' mode or not.
       @property showDeleteMenuItemInRow
      @type Boolean
     */
    showDeleteMenuItemInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'rowClickable' mode or not.
       @property rowClickable
      @type Boolean
     */
    rowClickable: false,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'orderable' mode or not.
       @property orderable
      @type Boolean
     */
    orderable: true,

    /**
      Тext for 'flexberry-objectlistview' component 'singleColumnHeaderTitle' property.
       @property singleColumnHeaderTitle
      @type String
     */
    singleColumnHeaderTitle: undefined,

    /**
      Cout of list loading.
       @property loadCount
      @type Int
    */
    loadCount: 0,

    /**
      Current records.
       @property _records
      @type Object[]
      @protected
      @readOnly
    */
    records: []
  });
});
define('dummy/controllers/components-acceptance-tests/flexberry-objectlistview/computable-field', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({

    /**
      Model projection for 'flexberry-objectlistview' component 'modelProjection' property.
       @property projection
      @type Object
     */
    projection: 'SuggestionL',

    /**
      Name of related edit form route (for 'flexberry-objectlistview' component 'editFormRoute' property).
       @property editFormRoute
      @type String
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-edit',

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Flag for 'flexberry-objectlistview' component 'tableStriped' property.
       @property tableStriped
      @type Boolean
     */
    tableStriped: true,

    /**
      Flag for 'flexberry-objectlistview' component 'allowColumnResize' property.
       @property allowColumnResize
      @type Boolean
     */
    allowColumnResize: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'createNewButton' mode or not.
       @property createNewButton
      @type Boolean
     */
    createNewButton: true,

    /**
      Flag for 'flexberry-objectlistview' component 'deleteButton' property.
       @property deleteButton
      @type Boolean
     */
    deleteButton: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'enableFilters' mode or not.
       @property enableFilters
      @type Boolean
     */
    enableFilters: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'filterButton' mode or not.
       @property filterButton
      @type Boolean
     */
    filterButton: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'refreshButton' mode or not.
       @property refreshButton
      @type Boolean
     */
    refreshButton: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showCheckBoxInRow' mode or not.
       @property showCheckBoxInRow
      @type Boolean
     */
    showCheckBoxInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showDeleteButtonInRow' mode or not.
       @property showDeleteButtonInRow
      @type Boolean
     */
    showDeleteButtonInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showEditMenuItemInRow' mode or not.
       @property showEditMenuItemInRow
      @type Boolean
     */
    showEditMenuItemInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showDeleteMenuItemInRow' mode or not.
       @property showDeleteMenuItemInRow
      @type Boolean
     */
    showDeleteMenuItemInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'rowClickable' mode or not.
       @property rowClickable
      @type Boolean
     */
    rowClickable: false,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'orderable' mode or not.
       @property orderable
      @type Boolean
     */
    orderable: true,

    /**
      Тext for 'flexberry-objectlistview' component 'singleColumnHeaderTitle' property.
       @property singleColumnHeaderTitle
      @type String
     */
    singleColumnHeaderTitle: undefined,

    /**
      Cout of list loading.
       @property loadCount
      @type Int
    */
    loadCount: 0,

    /**
      Current records.
       @property _records
      @type Object[]
      @protected
      @readOnly
    */
    records: []
  });
});
define('dummy/controllers/components-acceptance-tests/flexberry-objectlistview/custom-filter', ['exports', 'ember', 'ember-flexberry/controllers/list-form'], function (exports, _ember, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    filterByAnyWord: false,

    filterByAllWords: false,

    /**
      Cout of list loading.
       @property loadCount
      @type Int
    */
    loadCount: 0,

    customButtons: _ember['default'].computed('filterByAnyWord', 'filterByAllWords', function () {
      return [{
        buttonName: 'filterByAnyWord',
        buttonAction: 'toggleFilterByAnyWord',
        buttonClasses: this.get('filterByAnyWord') ? 'positive' : ''
      }, {
        buttonName: 'filterByAllWords',
        buttonAction: 'toggleFilterByAllWords',
        buttonClasses: this.get('filterByAllWords') ? 'positive' : ''
      }];
    }),

    actions: {
      toggleFilterByAnyWord: function toggleFilterByAnyWord() {
        this.toggleProperty('filterByAnyWord');
        if (this.get('filterByAnyWord')) {
          this.set('filterByAllWords', false);
        }
      },

      toggleFilterByAllWords: function toggleFilterByAllWords() {
        this.toggleProperty('filterByAllWords');
        if (this.get('filterByAllWords')) {
          this.set('filterByAnyWord', false);
        }
      },

      componentForFilter: function componentForFilter(type, relation) {
        switch (type) {
          case 'date':
            return { name: 'flexberry-datepicker' };
          case 'decimal':
            return { name: 'flexberry-textbox', properties: { 'class': 'compact fluid' } };
          default:
            return {};
        }
      },

      conditionsByType: function conditionsByType(type) {
        switch (type) {
          case 'file':
            return null;

          case 'date':
          case 'number':
            return ['eq', 'neq', 'le', 'ge'];

          case 'string':
            return ['eq', 'neq', 'like', 'empty'];

          case 'boolean':
            return ['eq'];

          default:
            return ['eq', 'neq'];
        }
      }
    }
  });
});
define('dummy/controllers/components-acceptance-tests/flexberry-objectlistview/date-format', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({

    /**
      Model projection for 'flexberry-objectlistview' component 'modelProjection' property.
       @property projection
      @type Object
     */
    projection: 'SuggestionE',

    /**
      Name of related edit form route (for 'flexberry-objectlistview' component 'editFormRoute' property).
       @property editFormRoute
      @type String
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-edit',

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Flag for 'flexberry-objectlistview' component 'tableStriped' property.
       @property tableStriped
      @type Boolean
     */
    tableStriped: true,

    /**
      Flag for 'flexberry-objectlistview' component 'allowColumnResize' property.
       @property allowColumnResize
      @type Boolean
     */
    allowColumnResize: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'createNewButton' mode or not.
       @property createNewButton
      @type Boolean
     */
    createNewButton: true,

    /**
      Flag for 'flexberry-objectlistview' component 'deleteButton' property.
       @property deleteButton
      @type Boolean
     */
    deleteButton: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'enableFilters' mode or not.
       @property enableFilters
      @type Boolean
     */
    enableFilters: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'filterButton' mode or not.
       @property filterButton
      @type Boolean
     */
    filterButton: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'refreshButton' mode or not.
       @property refreshButton
      @type Boolean
     */
    refreshButton: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showCheckBoxInRow' mode or not.
       @property showCheckBoxInRow
      @type Boolean
     */
    showCheckBoxInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showDeleteButtonInRow' mode or not.
       @property showDeleteButtonInRow
      @type Boolean
     */
    showDeleteButtonInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showEditMenuItemInRow' mode or not.
       @property showEditMenuItemInRow
      @type Boolean
     */
    showEditMenuItemInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showDeleteMenuItemInRow' mode or not.
       @property showDeleteMenuItemInRow
      @type Boolean
     */
    showDeleteMenuItemInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'rowClickable' mode or not.
       @property rowClickable
      @type Boolean
     */
    rowClickable: false,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'orderable' mode or not.
       @property orderable
      @type Boolean
     */
    orderable: true,

    /**
      Тext for 'flexberry-objectlistview' component 'singleColumnHeaderTitle' property.
       @property singleColumnHeaderTitle
      @type String
     */
    singleColumnHeaderTitle: undefined,

    /**
      Cout of list loading.
       @property loadCount
      @type Int
    */
    loadCount: 0,

    /**
      Current records.
       @property _records
      @type Object[]
      @protected
      @readOnly
    */
    records: [],

    dateFormat: '1',

    getCellComponent: function getCellComponent(attr, bindingPath, modelClass) {
      if (attr.kind === 'attr') {
        if (bindingPath === 'date') {
          switch (this.dateFormat) {
            case '1':
              return {
                componentName: 'object-list-view-cell',
                componentProperties: {
                  dateFormat: 'YYYY-MM-DD'
                }
              };
            case '2':
              return {
                componentName: 'object-list-view-cell',
                componentProperties: {
                  dateFormat: 'DD.MM.YYYY, hh:mm:ss'
                }
              };
            case '3':
              return {
                componentName: 'object-list-view-cell',
                componentProperties: {
                  dateFormat: 'll'
                }
              };
          }
        }
      }

      return this._super.apply(this, arguments);
    }
  });
});
define('dummy/controllers/components-acceptance-tests/flexberry-objectlistview/folv-filter', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({

    /**
      Model projection for 'flexberry-objectlistview' component 'modelProjection' property.
       @property projection
      @type Object
     */
    projection: 'FlexberryObjectlistviewFilterTest',

    /**
      Name of related edit form route (for 'flexberry-objectlistview' component 'editFormRoute' property).
       @property editFormRoute
      @type String
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-edit',

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'enableFilters' mode or not.
       @property enableFilters
      @type Boolean
     */
    enableFilters: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'refreshButton' mode or not.
       @property refreshButton
      @type Boolean
     */
    refreshButton: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showEditMenuItemInRow' mode or not.
       @property showEditMenuItemInRow
      @type Boolean
     */
    showEditMenuItemInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'rowClickable' mode or not.
       @property rowClickable
      @type Boolean
     */
    rowClickable: false,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'orderable' mode or not.
       @property orderable
      @type Boolean
     */
    orderable: false,

    /**
      Flag to use colsConfigButton button at toolbar.
       @property colsConfigButton
      @type Boolean
    */
    colsConfigButton: false,

    /**
      Cout of list loading.
       @property loadCount
      @type Int
    */
    loadCount: 0
  });
});
define('dummy/controllers/components-acceptance-tests/flexberry-objectlistview/folv-paging', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({

    /**
      Model projection for 'flexberry-objectlistview' component 'modelProjection' property.
       @property projection
      @type Object
     */
    projection: 'SuggestionTypeL',

    /**
      Name of related edit form route (for 'flexberry-objectlistview' component 'editFormRoute' property).
       @property editFormRoute
      @type String
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-type-edit',

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Flag for 'flexberry-objectlistview' component 'tableStriped' property.
       @property tableStriped
      @type Boolean
     */
    tableStriped: true,

    /**
      Flag for 'flexberry-objectlistview' component 'allowColumnResize' property.
       @property allowColumnResize
      @type Boolean
     */
    allowColumnResize: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'createNewButton' mode or not.
       @property createNewButton
      @type Boolean
     */
    createNewButton: true,

    /**
      Flag for 'flexberry-objectlistview' component 'deleteButton' property.
       @property deleteButton
      @type Boolean
     */
    deleteButton: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'enableFilters' mode or not.
       @property enableFilters
      @type Boolean
     */
    enableFilters: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'filterButton' mode or not.
       @property filterButton
      @type Boolean
     */
    filterButton: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'refreshButton' mode or not.
       @property refreshButton
      @type Boolean
     */
    refreshButton: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showCheckBoxInRow' mode or not.
       @property showCheckBoxInRow
      @type Boolean
     */
    showCheckBoxInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showDeleteButtonInRow' mode or not.
       @property showDeleteButtonInRow
      @type Boolean
     */
    showDeleteButtonInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showEditButtonInRow' mode or not.
       @property showEditButtonInRow
      @type Boolean
     */
    showEditButtonInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showEditMenuItemInRow' mode or not.
       @property showEditMenuItemInRow
      @type Boolean
     */
    showEditMenuItemInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showDeleteMenuItemInRow' mode or not.
       @property showDeleteMenuItemInRow
      @type Boolean
     */
    showDeleteMenuItemInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'rowClickable' mode or not.
       @property rowClickable
      @type Boolean
     */
    rowClickable: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'orderable' mode or not.
       @property orderable
      @type Boolean
     */
    orderable: true,

    /**
      ext for 'flexberry-objectlistview' component 'singleColumnHeaderTitle' property.
       @property singleColumnHeaderTitle
      @type String
     */
    singleColumnHeaderTitle: undefined,

    /**
      Cout of list loading.
       @property loadCount
      @type Int
    */
    loadCount: 0,

    /**
      Current records.
       @property _records
      @type Object[]
      @protected
      @readOnly
    */
    records: []
  });
});
define('dummy/controllers/components-examples/flexberry-button/settings-example', ['exports', 'ember', 'ember-flexberry/mixins/flexberry-ddau-checkbox-actions-handler'], function (exports, _ember, _emberFlexberryMixinsFlexberryDdauCheckboxActionsHandler) {
  exports['default'] = _ember['default'].Controller.extend(_emberFlexberryMixinsFlexberryDdauCheckboxActionsHandler['default'], {
    /**
      Component's wrapper CSS-classes.
       @property class
      @type String
    */
    'class': '',

    /**
      Component's icon CSS-class names.
       @property iconClass
      @type String
      @default null
    */
    iconClass: null,

    /**
      Text for 'flexberry-button' 'caption' property.
       @property caption
      @type String
      @default null
    */
    caption: null,

    /**
      Component's tooltip text.
      Will be added as wrapper's element 'title' attribute.
       @property tooltip
      @default null
    */
    tooltip: null,

    /**
      Flag: indicates whether 'flexberry-button' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Template text for 'flexberry-button' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-button<br>' + '  class=class<br>' + '  iconClass=class<br>' + '  caption=caption<br>' + '  tooltip=tooltip<br>' + '  readonly=readonly<br>' + '  click=(action \"onButtonClick\")<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();

      componentSettingsMetadata.pushObject({
        settingName: 'class',
        settingType: 'css',
        settingDefaultValue: '',
        settingAvailableItems: ['circular', 'fluid', 'loading', 'red', 'green', 'blue', 'top attached', 'bottom attached', 'left attached', 'right attached'],
        bindedControllerPropertieName: 'class'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'iconClass',
        settingType: 'enumeration',
        settingAvailableItems: ['edit icon', 'cut icon', 'attach icon', 'add square icon', 'download icon'],
        settingDefaultValue: null,
        bindedControllerPropertieName: 'iconClass'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'caption',
        settingType: 'string',
        settingDefaultValue: null,
        bindedControllerPropertieName: 'caption'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'tooltip',
        settingType: 'string',
        settingDefaultValue: null,
        bindedControllerPropertieName: 'tooltip'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });

      return componentSettingsMetadata;
    }),

    actions: {
      onButtonClick: function onButtonClick(e) {
        console.log('Button clicked. Click event-object: ', e);
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-checkbox/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    /**
      Text for 'flexberry-checkbox' component 'label' property.
       @property label
      @type String
     */
    label: undefined,

    /**
      Flag: indicates whether 'flexberry-checkbox' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Component's wrapper CSS classes.
       @property class
      @type String
    */
    'class': '',

    /**
      Template text for 'flexberry-checkbox' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-checkbox<br>' + '  value=model.flag<br>' + '  label=label<br>' + '  readonly=readonly<br>' + '  class=class<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();
      componentSettingsMetadata.pushObject({
        settingName: 'value',
        settingType: 'boolean',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'model.flag'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'label',
        settingType: 'string',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'label'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'class',
        settingType: 'css',
        settingDefaultValue: '',
        settingAvailableItems: ['radio', 'slider', 'toggle'],
        bindedControllerPropertieName: 'class'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-checkbox/three-state-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({

    actions: {
      setIndeterminate: function setIndeterminate() {
        _ember['default'].set(this, 'model.flag', null);
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-datepicker/settings-example', ['exports', 'ember', 'ember-i18n'], function (exports, _ember, _emberI18n) {
  exports['default'] = _ember['default'].Controller.extend({
    /**
      Serialized model date.
       @property _serializedModelDate
      @type String
      @private
     */
    _serializedModelDate: undefined,

    /**
      Serialized min date.
       @property _serializedMinDate
      @type String
      @private
     */
    _serializedMinDate: null,

    /**
      Serialized max date.
       @property _serializedMaxDate
      @type String
      @private
     */
    _serializedMaxDate: null,

    /**
      Handles changes in serialized model date.
       @method _serializedModelDateDidChange
      @private
     */
    _serializedModelDateDidChange: _ember['default'].observer('_serializedModelDate', function () {
      _ember['default'].run.once(this, '_changeDateProperty', '_serializedModelDate', 'model.date');
    }),

    /**
      Handles changes in min date.
       @method _serializedMinDateDidChange
      @private
     */
    _serializedMinDateDidChange: _ember['default'].observer('_serializedMinDate', function () {
      _ember['default'].run.once(this, '_changeDateProperty', '_serializedMinDate', 'minDate');
    }),

    /**
      Handles changes in serialized max date.
       @method _serializedMaxDateDidChange
      @private
     */
    _serializedMaxDateDidChange: _ember['default'].observer('_serializedMaxDate', function () {
      _ember['default'].run.once(this, '_changeDateProperty', '_serializedMaxDate', 'maxDate');
    }),

    /**
      Handles changes in model date.
       @method _modelDateDidChange
      @private
     */
    _modelDateDidChange: _ember['default'].observer('model.date', function () {
      _ember['default'].run.once(this, '_changeSerializedDateProperty', '_serializedModelDate', 'model.date');
    }),

    /**
      Handles changes in some of the serialized date properties.
       @method _changeDateProperty
      @param {String} serializedDatePropertyName Name of serialized date property.
      @param {Date} datePropertyName Name of date property which need to be parsed.
      @private
     */
    _changeDateProperty: function _changeDateProperty(serializedDatePropertyName, datePropertyName) {
      var serializedDate = this.get(serializedDatePropertyName);
      if (_ember['default'].typeOf(serializedDate) === 'undefined') {
        return;
      }

      if (serializedDate === '') {
        this.set(datePropertyName, null);
        return;
      }

      var momentDate = this.get('moment').moment(serializedDate);
      if (momentDate.isValid()) {
        this.set(datePropertyName, momentDate.toDate());
      } else {
        this.set(datePropertyName, new Date('invalid'));
      }
    },

    /**
      Handles changes in some of the date properties.
       @method _changeSerializedDateProperty
      @param {String} serializedDatePropertyName Name of serialized date property which need to be changed.
      @param {Date} datePropertyName Name of date property which contains value.
      @private
     */
    _changeSerializedDateProperty: function _changeSerializedDateProperty(serializedDatePropertyName, datePropertyName) {
      var date = this.get(datePropertyName);
      if (date === null || _ember['default'].typeOf(date) === 'undefined') {
        return;
      }

      var momentDate = this.get('moment').moment(date);
      if (momentDate.isValid()) {
        this.set(serializedDatePropertyName, momentDate.format('YYYY-MM-DDTHH:MM'));
      } else {
        this.set(serializedDatePropertyName, '' + new Date('invalid'));
      }
    },

    /**
      Possible date time formats.
       @property _dateTimeFormats
      @type String[]
     */
    _dateTimeFormats: ['DD.MM.YYYY', 'DD-MM-YYYY', 'HH.MM.SS', 'HH-MM-SS', 'DD.MM.YYYY HH.MM.SS', 'DD-MM-YYYY HH-MM-SS'],

    _drops: ['up', 'down'],

    /**
      Default display format.
       @property dateTimeFormat
      @type String
     */
    dateTimeFormat: 'DD.MM.YYYY',
    /**
      Flag: show time in control and time picker inside date picker.
       @property hasTimePicker
      @type Boolean
     */
    hasTimePicker: false,
    /**
      The earliest date a user may select.
       @property minDate
      @type Date
     */
    minDate: null,
    /**
      The latest date a user may select.
       @property maxDate
      @type date
     */
    maxDate: null,
    /**
      Text for 'flexberry-datepicker' component 'placeholder' property.
       @property placeholder
      @type String
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-datepicker.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-datepicker.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-datepicker.placeholder'));
      }
    }),

    /**
      Flag: indicates whether 'flexberry-datepicker' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Template text for 'flexberry-datepicker' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-datepicker<br>' + '  dateTimeFormat=dateTimeFormat<br>' + '  hasTimePicker=hasTimePicker<br>' + '  minDate=minDate<br>' + '  maxDate=maxDate<br>' + '  value=model.date<br>' + '  placeholder=placeholder<br>' + '  readonly=readonly<br>' + '  drops=\'up\'<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();

      componentSettingsMetadata.pushObject({
        settingName: 'dateTimeFormat',
        settingType: 'enumeration',
        settingAvailableItems: this.get('_dateTimeFormats'),
        settingDefaultValue: null,
        bindedControllerPropertieName: 'dateTimeFormat',
        bindedControllerPropertieDisplayName: 'dateTimeFormat'
      });

      componentSettingsMetadata.pushObject({
        settingName: 'hasTimePicker',
        settingType: 'boolean',
        settingDefaultValue: 'false',
        bindedControllerPropertieName: 'hasTimePicker'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'minDate',
        settingType: 'date',
        settingDefaultValue: null,
        bindedControllerPropertieName: '_serializedMinDate',
        bindedControllerPropertieDisplayName: 'minDate'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'maxDate',
        settingType: 'date',
        settingDefaultValue: null,
        bindedControllerPropertieName: '_serializedMaxDate',
        bindedControllerPropertieDisplayName: 'maxDate'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'value',
        settingType: 'date',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: '_serializedModelDate',
        bindedControllerPropertieDisplayName: 'model.date'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'placeholder',
        settingType: 'string',
        settingDefaultValue: this.get('i18n').t('components.flexberry-datepicker.placeholder'),
        bindedControllerPropertieName: 'placeholder'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: 'false',
        bindedControllerPropertieName: 'readonly'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-ddau-checkbox/settings-example', ['exports', 'ember', 'ember-flexberry/mixins/flexberry-ddau-checkbox-actions-handler'], function (exports, _ember, _emberFlexberryMixinsFlexberryDdauCheckboxActionsHandler) {
  exports['default'] = _ember['default'].Controller.extend(_emberFlexberryMixinsFlexberryDdauCheckboxActionsHandler['default'], {
    /**
      Component's wrapper CSS classes.
      @property class
      @type String
    */
    'class': '',

    /**
      Text for 'flexberry-ddau-checkbox' 'caption' property.
       @property caption
      @type String
      @default null
    */
    caption: null,

    /**
      Flag: indicates whether 'flexberry-ddau-checkbox' component is in 'readonly' mode or not.
      @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Template text for 'flexberry-ddau-checkbox' component.
      @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-ddau-checkbox<br>' + '  class=class<br>' + '  value=model.flag<br>' + '  caption=caption<br>' + '  readonly=readonly<br>' + '  change=(action \"onCheckboxChange\" \"model.flag\")<br>' + '}}'),

    /**
      Component settings metadata.
      @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();

      componentSettingsMetadata.pushObject({
        settingName: 'class',
        settingType: 'enumeration',
        settingAvailableItems: ['radio', 'slider', 'toggle'],
        settingDefaultValue: '',
        bindedControllerPropertieName: 'class'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'value',
        settingType: 'boolean',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'model.flag'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'caption',
        settingType: 'string',
        settingDefaultValue: null,
        bindedControllerPropertieName: 'caption'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-dropdown/conditional-render-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form'], function (exports, _ember, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Message to be displayed in 'ui-message' component.
       @property infoMessage
      @type String
     */
    infoMessage: _ember['default'].computed('i18n.locale', function () {
      var message = this.get('i18n').t('forms.components-examples.flexberry-dropdown.conditional-render-example.info-message', {
        pageTemplate: new _ember['default'].Handlebars.SafeString('<pre><code>' + '{{#if model.enumeration}}<br>' + '  &lt;span&gt;{{model.enumeration}}&lt;/span&gt;<br>' + '{{else}}<br>' + '  {{flexberry-dropdown<br>' + '    items=(flexberry-enum \"components-examples/flexberry-dropdown/conditional-render-example/enumeration\")<br>' + '    value=model.enumeration<br>' + '  }}<br>' + '{{/if}}' + '</code></pre>')
      });

      return new _ember['default'].Handlebars.SafeString(message);
    })
  });
});
define('dummy/controllers/components-examples/flexberry-dropdown/empty-value-example', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({});
});
define('dummy/controllers/components-examples/flexberry-dropdown/items-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    /**
      Message to be displayed in 'ui-message' component.
    */
    message: new _ember['default'].Handlebars.SafeString('<pre><code>' + '<strong>itemsArray: </strong>' + '[\"itemsArray1\", \"itemsArray2\", \"itemsArray3\"]' + '<br><br>' + '<strong>itemsObject:</strong> {<br>' + '  itemsObject1: \"itemsObject1\",<br>' + '  itemsObject2: \"itemsObject2\",<br>' + '  itemsObject3: \"itemsObject3\"<br>' + '}' + '</code></pre>'),

    /**
      Items. Type array.
    */
    itemsArray: ['itemsArray1', 'itemsArray2', 'itemsArray3'],

    /**
      Items. Type object.
    */
    itemsObject: {
      itemsObject1: 'itemsObject1',
      itemsObject2: 'itemsObject2',
      itemsObject3: 'itemsObject3'
    },

    value: undefined,

    /**
      Flag indicates whether use `itemsArray` or `itemsObject`.
    */
    usedArray: true,

    /**
      Current items in `flexberry-objectlistview`.
    */
    currentItems: _ember['default'].computed('usedArray', function () {
      var usedArray = this.get('usedArray');
      var currentItems = null;

      if (usedArray) {
        currentItems = this.get('itemsArray');
      } else {
        currentItems = this.get('itemsObject');
      }

      return currentItems;
    }),

    actions: {
      /**
        This action is called when `flexberry-checkox` change its value.
      */
      checked: function checked() {
        var usedArray = this.get('usedArray');
        this.set('usedArray', !usedArray);
      },

      /**
        This action is called when user clicks on reset button.
      */
      resetValue: function resetValue() {
        this.set('value', null);
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-dropdown/settings-example', ['exports', 'ember', 'dummy/enums/components-examples/flexberry-dropdown/settings-example/enumeration', 'ember-i18n'], function (exports, _ember, _dummyEnumsComponentsExamplesFlexberryDropdownSettingsExampleEnumeration, _emberI18n) {
  exports['default'] = _ember['default'].Controller.extend({
    /**
      Component's wrapper CSS classes.
       @property class
      @type String
    */
    'class': '',

    /**
      Text for 'flexberry-dropdown' component 'placeholder' property.
       @property placeholder
      @type String
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-dropdown.placeholder'),

    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-dropdown.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-dropdown.placeholder'));
      }
    }),

    /**
      Flag: indicates whether 'flexberry-dropdown' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Template text for 'flexberry-dropdown' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-dropdown<br>' + '  items=(flexberry-enum \"components-examples/flexberry-dropdown/settings-example/enumeration\")<br>' + '  value=model.enumeration<br>' + '  placeholder=placeholder<br>' + '  readonly=readonly<br>' + '  class=class<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();
      var enumCaptions = _ember['default'].A(Object.keys(_dummyEnumsComponentsExamplesFlexberryDropdownSettingsExampleEnumeration['default'])).map(function (key) {
        return _dummyEnumsComponentsExamplesFlexberryDropdownSettingsExampleEnumeration['default'][key];
      });

      componentSettingsMetadata.pushObject({
        settingName: 'value',
        settingType: 'enumeration',
        settingAvailableItems: enumCaptions,
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'model.enumeration'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'placeholder',
        settingType: 'string',
        settingDefaultValue: this.get('i18n').t('components.flexberry-dropdown.placeholder'),
        bindedControllerPropertieName: 'placeholder'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'class',
        settingType: 'css',
        settingDefaultValue: '',
        settingAvailableItems: ['scrolling', 'compact', 'fluid'],
        bindedControllerPropertieName: 'class'
      });
      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-field/settings-example', ['exports', 'ember', 'ember-i18n'], function (exports, _ember, _emberI18n) {
  exports['default'] = _ember['default'].Controller.extend({
    /**
      Text for 'flexberry-field' component 'label' property.
       @property label
      @type String
     */
    label: undefined,

    /**
      Text for 'flexberry-field' component 'placeholder' property.
       @property placeholder
      @type String
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-field.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-field.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-field.placeholder'));
      }
    }),
    /**
      Flag: indicates whether 'flexberry-field' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Type of 'flexberry-field' component.
       @property type
      @type String
     */
    type: 'text',

    /**
      Maxlength of 'flexberry-field' component.
       @property maxlength
      @type Number
     */
    maxlength: undefined,

    /**
      Template text for 'flexberry-field' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-field<br>' + '  value=model.text<br>' + '  label=label<br>' + '  placeholder=placeholder<br>' + '  readonly=readonly<br>' + '  type=type<br>' + '  maxlength=maxlength<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();
      componentSettingsMetadata.pushObject({
        settingName: 'type',
        settingType: 'enumeration',
        settingDefaultValue: 'text',
        settingAvailableItems: ['text', 'number', 'password', 'color', 'button', 'hidden'],
        bindedControllerPropertieName: 'type'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'value',
        settingType: 'string',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'model.text'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'label',
        settingType: 'string',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'label'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'placeholder',
        settingType: 'string',
        settingDefaultValue: this.get('i18n').t('components.flexberry-field.placeholder'),
        bindedControllerPropertieName: 'placeholder'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'maxlength',
        settingType: 'number',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'maxlength'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-file/flexberry-file-in-modal', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'dummy/config/environment'], function (exports, _ember, _emberFlexberryControllersEditForm, _dummyConfigEnvironment) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Defaul style of modal context.
       @property readonly
      @type String
      @default #example
    */
    _style: '#example',

    /**
      File upload URL for 'flexberry-file' component 'uploadUrl' property.
       @property uploadUrl
      @type String
     */
    uploadUrl: _dummyConfigEnvironment['default'].APP.components.flexberryFile.uploadUrl,

    /**
      Flag for 'flexberry-file' component 'showPreview' property.
       @property showPreview
      @type Boolean
     */
    showPreview: true,

    /**
      Flag for 'flexberry-file' component 'showUploadButton' property.
       @property showUploadButton
      @type Boolean
     */
    showUploadButton: true,

    /**
      Flag for 'flexberry-file' component 'showDownloadButton' property.
       @property showDownloadButton
      @type Boolean
     */
    showDownloadButton: true,

    /**
      Settings for preview modal dialog.
       @property previewSettings
      @type Object
    */
    previewSettings: {
      detachable: true,
      context: 'body'
    },

    actions: {
      modalWindow: function modalWindow(style) {
        if (!_ember['default'].isNone(style)) {
          this.set('_style', style);
        }

        var repeatWindow = _ember['default'].$('#repeat-window').modal({
          closable: false,
          autofocus: false,
          detachable: true,
          allowMultiple: true
        });

        this.set('repeatWindow', repeatWindow);
        this.get('repeatWindow').modal('show').modal('refresh');
      },

      logOut: function logOut() {
        this.get('repeatWindow').modal('hide');
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-file/settings-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-i18n', 'dummy/config/environment'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberI18n, _dummyConfigEnvironment) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Text for 'flexberry-file' component 'placeholder' property.
       @property placeholder
      @type String
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-file.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-file.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-file.placeholder'));
      }
    }),
    /**
      Flag: indicates whether 'flexberry-file' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      File upload URL for 'flexberry-file' component 'uploadUrl' property.
       @property uploadUrl
      @type String
     */
    uploadUrl: _dummyConfigEnvironment['default'].APP.components.flexberryFile.uploadUrl,

    /**
      Max upload file size (in bytes) for 'flexberry-file' component 'maxUploadFileSize' property.
       @property maxUploadFileSize
      @type Number
     */
    maxUploadFileSize: null,

    /**
      Max upload file size (in bytes) for 'flexberry-file' component 'maxUploadFileSizeUnit' property.
       @property maxUploadFileSizeUnit
      @type String
     */
    maxUploadFileSizeUnit: 'Bt',

    /**
      Flag for 'flexberry-file' component 'showPreview' property.
       @property showPreview
      @type Boolean
     */
    showPreview: false,

    /**
      Flag for 'flexberry-file' component 'showUploadButton' property.
       @property showUploadButton
      @type Boolean
     */
    showUploadButton: false,

    /**
      Flag for 'flexberry-file' component 'showDownloadButton' property.
       @property showDownloadButton
      @type Boolean
     */
    showDownloadButton: true,

    /**
      Flag for 'flexberry-file' component 'showModalDialogOnUploadError' property.
       @property showModalDialogOnUploadError
      @type Boolean
     */
    showModalDialogOnUploadError: false,

    /**
      Flag for 'flexberry-file' component 'showModalDialogOnDownloadError' property.
       @property showModalDialogOnDownloadError
      @type Boolean
     */
    showModalDialogOnDownloadError: true,

    /**
      Flag: download by clicking download or open file in new window.
       @property openInNewWindowInsteadOfLoading
      @type Boolean
      @default false
    */
    openFileInNewWindowInsteadOfLoading: false,

    base64Value: null,

    base64FileName: null,

    base64FileExtension: null,

    /**
      Template text for 'flexberry-textbox' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-file<br>' + '  value=model.file<br>' + '  placeholder=placeholder<br>' + '  readonly=readonly<br>' + '  uploadUrl=uploadUrl<br>' + '  maxUploadFileSize=maxUploadFileSize<br>' + '  maxUploadFileSizeUnit=maxUploadFileSizeUnit<br>' + '  showPreview=showPreview<br>' + '  showUploadButton=showUploadButton<br>' + '  showDownloadButton=showDownloadButton<br>' + '  showModalDialogOnUploadError=showModalDialogOnUploadError<br>' + '  showModalDialogOnDownloadError=showModalDialogOnDownloadError<br>' + '  inputClass=inputClass<br>' + '  buttonClass=buttonClass<br>' + '  openFileInNewWindowInsteadOfLoading=openFileInNewWindowInsteadOfLoading<br>' + '  base64Value=base64Value<br>' + '  base64FileName=base64FileName<br>' + '  base64FileExtension=base64FileExtension<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();
      componentSettingsMetadata.pushObject({
        settingName: 'value',
        settingType: 'string',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'model.file'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'placeholder',
        settingType: 'string',
        settingDefaultValue: this.get('i18n').t('components.flexberry-file.placeholder'),
        bindedControllerPropertieName: 'placeholder'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'uploadUrl',
        settingType: 'string',
        settingDefaultValue: null,
        bindedControllerPropertieName: 'uploadUrl'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'maxUploadFileSize',
        settingType: 'number',
        settingDefaultValue: null,
        bindedControllerPropertieName: 'maxUploadFileSize'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'maxUploadFileSizeUnit',
        settingType: 'enumeration',
        settingAvailableItems: ['Bt', 'Kb', 'Mb', 'Gb'],
        settingDefaultValue: 'Bt',
        bindedControllerPropertieName: 'maxUploadFileSizeUnit'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showPreview',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showPreview'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showUploadButton',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showUploadButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showDownloadButton',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'showDownloadButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showModalDialogOnUploadError',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showModalDialogOnUploadError'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showModalDialogOnDownloadError',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'showModalDialogOnDownloadError'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'inputClass',
        settingType: 'css',
        settingDefaultValue: '',
        settingAvailableItems: ['fluid input', 'transparent input', 'mini input', 'huge input', 'field error'],
        bindedControllerPropertieName: 'inputClass'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'buttonClass',
        settingType: 'css',
        settingDefaultValue: '',
        settingAvailableItems: ['purple basic', 'inverted violet', 'green colored', 'mini', 'huge'],
        bindedControllerPropertieName: 'buttonClass'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'openFileInNewWindowInsteadOfLoading',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'openFileInNewWindowInsteadOfLoading'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'base64Value',
        settingType: 'string',
        settingDefaultValue: null,
        bindedControllerPropertieName: 'base64Value'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'base64FileName',
        settingType: 'string',
        settingDefaultValue: null,
        bindedControllerPropertieName: 'base64FileName'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'base64FileExtension',
        settingType: 'string',
        settingDefaultValue: null,
        bindedControllerPropertieName: 'base64FileExtension'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-groupedit/configurate-row-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-i18n'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberI18n) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({

    title: (0, _emberI18n.translationMacro)('forms.application.delete-rows-modal-dialog.delete-rows-caption'),

    /**
      Configurate rows 'flexberry-groupedit' component by address.
       @property configurateRowByFlag
      @type String
    */
    configurateRowByFlag: 1,

    /**
      Current records.
       @property _records
      @type Object[]
      @protected
      @readOnly
    */
    records: [],

    actions: {
      /**
        Configurate rows on the condition.
      */
      configurateRow: function configurateRow(rowConfig, record) {
        if (record) {
          this.get('records').push(record);
        }

        if (record.get('flag') === this.get('configurateRowByFlag')) {
          _ember['default'].set(rowConfig, 'canBeDeleted', false);
        }
      },

      /**
        Confirm delete rows.
         @param {Object} data Row data.
      */
      confirmDeleteRows: function confirmDeleteRows(data) {
        var _this = this;

        return new _ember['default'].RSVP.Promise(function (resolve, reject) {
          _this.set('approveDeleting', resolve);
          _this.set('denyDeleting', reject);

          _this.send('showModalDialog', 'delete-rows-modal-dialog', {
            controller: 'components-examples/flexberry-groupedit/configurate-row-example'
          });
        });
      },

      /**
        Close modal dialog and clear actions.
      */
      closeModalDialog: function closeModalDialog() {
        this.set('approveDeleting', null);
        this.set('denyDeleting', null);

        this.send('removeModalDialog');
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-groupedit/custom-buttons-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form'], function (exports, _ember, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Property to count clicks on user button.
       @property clickCounter
      @type Number
      @default 1
    */
    clickCounter: 1,

    /**
      Property to show user message after click on user button.
       @property messageForUser
      @type String
    */
    messageForUser: undefined,

    /**
      The state of the hi button, is disabled if `true` or enabled if `false`.
       @property hiButtonState
      @type Boolean
      @default true
    */
    hiButtonState: true,

    customButtons: _ember['default'].computed('i18n.locale', 'hiButtonState', function () {
      var i18n = this.get('i18n');
      var hiButtonState = this.get('hiButtonState');
      var togglerButtonType = hiButtonState ? 'enable' : 'disable';
      var hiButtonText = i18n.t('forms.components-examples.flexberry-groupedit.custom-buttons-example.custom-button-name');
      var togglerButtonText = i18n.t('forms.components-examples.flexberry-groupedit.custom-buttons-example.' + togglerButtonType + '-button-name');
      return [{
        buttonName: hiButtonText,
        buttonAction: 'customButtonActionTest',
        buttonClasses: 'test-click-button',
        buttonTitle: hiButtonText,
        disabled: hiButtonState
      }, {
        buttonName: togglerButtonText,
        buttonAction: 'toggleHideCustomButton',
        buttonClasses: 'toggle-hi-button',
        buttonTitle: togglerButtonText,
        disabled: false
      }];
    }),

    /**
      Current records.
       @property _records
      @type Object[]
      @protected
      @readOnly
    */
    records: [],

    actions: {
      /**
        Handler for click on custom user button.
         @method actions.customButtonActionTest
      */
      customButtonActionTest: function customButtonActionTest() {
        var i18n = this.get('i18n');
        var clickCounter = this.get('clickCounter');
        this.set('clickCounter', clickCounter + 1);
        this.set('messageForUser', i18n.t('forms.components-examples.flexberry-groupedit.custom-buttons-example.custom-message').string + ' ' + clickCounter);
      },

      /**
        Toggles the state of the hi button.
         @method actions.toggleHideCustomButton
      */
      toggleHideCustomButton: function toggleHideCustomButton() {
        this.toggleProperty('hiButtonState');
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-groupedit-with-lookup-with-computed-atribute', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication', 'ember-flexberry-data'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication, _emberFlexberryData) {
  var StringPredicate = _emberFlexberryData.Query.StringPredicate;
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {
    /**
      Route name for transition after close edit form.
       @property parentRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-list'
     */
    parentRoute: 'components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-groupedit-with-lookup-with-computed-atribute',

    /**
      Name of model.comments edit route.
       @property commentsEditRoute
      @type String
      @default 'ember-flexberry-dummy-comment-edit'
     */
    commentsEditRoute: 'ember-flexberry-dummy-comment-edit',

    checkboxValue: false,

    fieldvalue: 'Vasya',

    lookupReadonly: _ember['default'].observer('checkboxValue', function () {
      this.set('lookupDynamicProperties.readonly', this.get('checkboxValue'));
    }),

    lookupLimitFunction: _ember['default'].observer('fieldvalue', function () {
      this.set('lookupDynamicProperties.lookupLimitPredicate', new StringPredicate('name').contains(this.get('fieldvalue')));
    }),

    /**
      An object with properties for the component `flexberry-lookup` in the component `flexberry-groupedit`.
       @property lookupDynamicProperties
      @type Object
      @readOnly
    */
    lookupDynamicProperties: _ember['default'].computed(function () {
      var lookupLimitPredicate = undefined;
      var lookupAdditionalLimitFunction = undefined;
      var fieldvalue = this.get('fieldvalue');
      if (fieldvalue) {
        lookupLimitPredicate = new StringPredicate('name').contains(fieldvalue);
      }

      lookupAdditionalLimitFunction = function (relationModel) {
        return new StringPredicate('eMail').contains(relationModel.get('voteType'));
      };

      return {
        choose: 'showLookupDialog',
        remove: 'removeLookupValue',
        displayAttributeName: 'name',
        required: true,
        relationName: 'author',
        projection: 'ApplicationUserL',
        autocomplete: true,
        readonly: this.get('checkboxValue'),
        lookupLimitPredicate: lookupLimitPredicate,
        lookupAdditionalLimitFunction: lookupAdditionalLimitFunction
      };
    }).readOnly(),

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr, bindingPath, model) {
      var cellComponent = this._super.apply(this, arguments);
      if (attr.kind === 'belongsTo') {
        switch (model.modelName + '+' + bindingPath) {
          case 'ember-flexberry-dummy-vote+author':
            cellComponent.componentProperties = this.get('lookupDynamicProperties');
            break;

          case 'ember-flexberry-dummy-comment+author':
            cellComponent.componentProperties = {
              choose: 'showLookupDialog',
              remove: 'removeLookupValue',
              displayAttributeName: 'name',
              required: true,
              relationName: 'author',
              projection: 'ApplicationUserL',
              autocomplete: true
            };
            break;

        }
      }

      return cellComponent;
    }
  });
});
define('dummy/controllers/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-readonly-columns-by-configurate-row-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication', 'ember-flexberry-data'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication, _emberFlexberryData) {
  var StringPredicate = _emberFlexberryData.Query.StringPredicate;
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {
    /**
      Route name for transition after close edit form.
       @property parentRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-list'
     */
    parentRoute: 'components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-readonly-columns-by-configurate-row-example',

    /**
      Name of model.comments edit route.
       @property commentsEditRoute
      @type String
      @default 'ember-flexberry-dummy-comment-edit'
     */
    commentsEditRoute: 'ember-flexberry-dummy-comment-edit',

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr, bindingPath, model) {
      var cellComponent = this._super.apply(this, arguments);
      var limitFunction = new StringPredicate('name').contains('Vasya');
      if (attr.kind === 'belongsTo') {
        switch (model.modelName + '+' + bindingPath) {
          case 'ember-flexberry-dummy-vote+author':
            cellComponent.componentProperties = {
              choose: 'showLookupDialog',
              remove: 'removeLookupValue',
              displayAttributeName: 'name',
              required: true,
              relationName: 'author',
              projection: 'ApplicationUserL',
              autocomplete: true,
              lookupLimitPredicate: limitFunction,
              computedProperties: { thisController: this },
              readonly: false
            };
            break;

          case 'ember-flexberry-dummy-comment+author':
            cellComponent.componentProperties = {
              choose: 'showLookupDialog',
              remove: 'removeLookupValue',
              displayAttributeName: 'name',
              required: true,
              relationName: 'author',
              projection: 'ApplicationUserL',
              autocomplete: true
            };
            break;

        }
      }

      return cellComponent;
    },

    actions: {
      configurateFilesRow: function configurateFilesRow(rowConfig, record) {
        _ember['default'].set(rowConfig, 'customClass', 'positive ');
        var readonlyColumns = [];
        if (record.get('order') === 1) {
          readonlyColumns.push('order');
          readonlyColumns.push('file');
        }

        _ember['default'].set(rowConfig, 'readonlyColumns', readonlyColumns);
      },

      configurateVotesRow: function configurateVotesRow(rowConfig, record) {
        var readonlyColumns = [];
        if (record.get('author.name') === 'Иван') {
          readonlyColumns.push('author');
        }

        _ember['default'].set(rowConfig, 'readonlyColumns', readonlyColumns);
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-groupedit-with-lookup-with-computed-atribute', ['exports', 'ember-flexberry/controllers/list-form', 'dummy/mixins/list-form-controller-operations-indication'], function (exports, _emberFlexberryControllersListForm, _dummyMixinsListFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend(_dummyMixinsListFormControllerOperationsIndication['default'], {
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-edit'
     */
    editFormRoute: 'components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-groupedit-with-lookup-with-computed-atribute',

    exportExcelProjection: 'SuggestionL'
  });
});
define('dummy/controllers/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-readonly-columns-by-configurate-row-example', ['exports', 'ember-flexberry/controllers/list-form', 'dummy/mixins/list-form-controller-operations-indication'], function (exports, _emberFlexberryControllersListForm, _dummyMixinsListFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend(_dummyMixinsListFormControllerOperationsIndication['default'], {
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-edit'
     */
    editFormRoute: 'components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-readonly-columns-by-configurate-row-example',

    exportExcelProjection: 'SuggestionL'
  });
});
define('dummy/controllers/components-examples/flexberry-groupedit/model-update-example', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Counter to mark created records.
       @property _itemsCounter
      @private
      @type Number
      @default 0
    */
    _itemsCounter: 0,

    /**
      Flag indicates that component have to check on model changes and display it.
       @property searchForContentChange
      @type Boolean
      @default true
    */
    searchForContentChange: true,

    actions: {
      /**
        Adds detail to the end of the array.
         @method actions.addDetail.
      */
      addDetail: function addDetail() {
        var store = this.get('store');
        var itemsCounter = this.get('_itemsCounter') + 1;
        var detailModel = this.get('model.details');
        var newRecord = store.createRecord('components-examples/flexberry-groupedit/shared/detail', {
          text: itemsCounter
        });

        detailModel.addObject(newRecord);
        this.set('_itemsCounter', itemsCounter);
      },

      /**
        Removes first element of the detail array.
         @method actions.deleteDetail.
      */
      deleteDetail: function deleteDetail() {
        var recordToDelete = this.get('model.details').get('firstObject');
        if (recordToDelete) {
          recordToDelete.deleteRecord();
        }
      }
    },

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
    */
    getCellComponent: function getCellComponent(attr, bindingPath) {
      var cellComponent = this._super.apply(this, arguments);

      if (attr.kind === 'belongsTo' && bindingPath === 'master') {
        cellComponent.componentProperties = {
          projection: 'MasterL',
          displayAttributeName: 'text',
          title: 'Master',
          relationName: 'master',
          choose: 'showLookupDialog',
          remove: 'removeLookupValue'
        };
      }

      return cellComponent;
    }
  });
});
define('dummy/controllers/components-examples/flexberry-groupedit/settings-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-i18n'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberI18n) {
  var getOwner = _ember['default'].getOwner;
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Name of selected detail's model projection.
       @property _detailsProjectionName
      @type String
      @private
     */
    _detailsProjectionName: 'DetailE',

    /**
      Array of available detail's model projections.
       @property _detailsProjections
      @type Object[]
     */
    _detailsProjections: _ember['default'].computed('model.details.relationship.belongsToType', function () {
      var detailsModelName = this.get('model.details.relationship.belongsToType');
      var detailsClass = getOwner(this)._lookupFactory('model:' + detailsModelName);

      return _ember['default'].get(detailsClass, 'projections');
    }),

    /**
      Array of available detail's model projections names.
       @property _detailsProjectionsNames
      @type String[]
     */
    _detailsProjectionsNames: _ember['default'].computed('_detailsProjections.[]', function () {
      var detailsProjections = this.get('_detailsProjections');
      if (_ember['default'].isNone(detailsProjections)) {
        return [];
      }

      var detailsProjectionNames = Object.keys(detailsProjections);
      detailsProjectionNames.splice(detailsProjectionNames.indexOf('modelName'), 1);
      return detailsProjectionNames;
    }),

    /**
      Model projection for 'flexberry-groupedit' component 'modelProjection' property.
       @property detailsProjection
      @type Object
     */
    detailsProjection: _ember['default'].computed('_detailsProjections.[]', '_detailsProjectionName', function () {
      var detailsProjectionName = this.get('_detailsProjectionName');
      if (_ember['default'].isBlank(detailsProjectionName)) {
        return null;
      }

      var detailsModelName = this.get('model.details.relationship.belongsToType');
      var detailsClass = getOwner(this)._lookupFactory('model:' + detailsModelName);
      var detailsClassProjections = _ember['default'].get(detailsClass, 'projections');
      if (_ember['default'].isNone(detailsClassProjections)) {
        return null;
      }

      return detailsClassProjections[detailsProjectionName];
    }),

    /**
      Text for 'flexberry-groupedit' component 'placeholder' property.
       @property placeholder
      @type String
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-groupedit.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-groupedit.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-groupedit.placeholder'));
      }
    }),
    /**
      Flag: indicates whether 'flexberry-groupedit' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Flag: indicates whether to show default settings button at toolbar.
       @property defaultSettingsButton
      @type Boolean
      @default false
     */
    defaultSettingsButton: false,

    /**
      Flag for 'flexberry-groupedit' component 'tableStriped' property.
       @property tableStriped
      @type Boolean
     */
    tableStriped: true,

    /**
      Flag for 'flexberry-groupedit' component 'createNewButton' property.
       @property createNewButton
      @type Boolean
     */
    createNewButton: true,

    /**
      Flag for 'flexberry-groupedit' component 'deleteButton' property.
       @property deleteButton
      @type Boolean
     */
    deleteButton: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'defaultSortingButton' mode or not
       @property defaultSortingButton
      @type Boolean
      @default true
    */
    defaultSortingButton: true,

    /**
      Flag indicates whether to fix the table head (if `true`) or not (if `false`).
       @property fixedHeader
      @type Boolean
      @default true
    */
    fixedHeader: false,

    /**
      Flag for 'flexberry-groupedit' component 'allowColumnResize' property.
       @property allowColumnResize
      @type Boolean
     */
    allowColumnResize: true,

    /**
      Flag for 'flexberry-groupedit' component 'showAsteriskInRow' property.
       @property showAsteriskInRow
      @type Boolean
     */
    showAsteriskInRow: true,

    /**
      Flag for 'flexberry-groupedit' component 'showCheckBoxInRow' property.
       @property showCheckBoxInRow
      @type Boolean
     */
    showCheckBoxInRow: true,

    /**
      Flag for 'flexberry-groupedit' component 'showDeleteButtonInRow' property.
       @property showDeleteButtonInRow
      @type Boolean
     */
    showDeleteButtonInRow: false,

    /**
      Flag for 'flexberry-groupedit' component 'showDeleteButtonInRow' property.
       @property showDeleteButtonInRow
      @type Boolean
     */
    showEditMenuItemInRow: false,

    /**
      Flag for 'flexberry-groupedit' component 'showDeleteButtonInRow' property.
       @property showDeleteButtonInRow
      @type Boolean
     */
    showDeleteMenuItemInRow: false,

    /**
      Text for 'flexberry-groupedit' component 'singleColumnHeaderTitle' property.
       @property singleColumnHeaderTitle
      @type Boolean
     */
    singleColumnHeaderTitle: undefined,

    /**
      Flag for 'flexberry-groupedit' component 'rowClickable' property.
       @property rowClickable
      @type Boolean
     */
    rowClickable: false,

    /**
      Flag for 'flexberry-groupedit' component 'immediateDelete' property.
       @property immediateDelete
      @type Boolean
     */
    immediateDelete: false,

    /**
      Template text for 'flexberry-groupedit' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-groupedit<br>' + '  componentName=\"aggregatorDetailsGroupedit\"<br>' + '  content=model.details<br>' + '  modelProjection=detailsProjection<br>' + '  placeholder=placeholder<br>' + '  readonly=readonly<br>' + '  tableStriped=tableStriped<br>' + '  createNewButton=createNewButton<br>' + '  deleteButton=deleteButton<br>' + '  defaultSortingButton=defaultSortingButton<br>' + '  allowColumnResize=allowColumnResize<br>' + '  showAsteriskInRow=showAsteriskInRow<br>' + '  showCheckBoxInRow=showCheckBoxInRow<br>' + '  showDeleteButtonInRow=showDeleteButtonInRow<br>' + '  showEditMenuItemInRow=showEditMenuItemInRow<br>' + '  showDeleteMenuItemInRow=showDeleteMenuItemInRow<br>' + '  singleColumnHeaderTitle=singleColumnHeaderTitle<br>' + '  rowClickable=rowClickable<br>' + '  immediateDelete=immediateDelete<br>' + '  defaultSettingsButton=defaultSettingsButton<br>' + '  fixedHeader=fixedHeader<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();

      componentSettingsMetadata.pushObject({
        settingName: 'componentName',
        settingType: 'string',
        settingValue: 'aggregatorDetailsGroupedit',
        settingDefaultValue: undefined,
        settingIsWithoutUI: true
      });
      componentSettingsMetadata.pushObject({
        settingName: 'content',
        settingType: 'hasManyArray',
        settingValue: this.get('model.details'),
        settingDefaultValue: null,
        settingIsWithoutUI: true,
        bindedControllerPropertieName: 'model.details'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'modelProjection',
        settingType: 'enumeration',
        settingAvailableItems: this.get('_detailsProjectionsNames'),
        settingDefaultValue: null,
        bindedControllerPropertieName: '_detailsProjectionName',
        bindedControllerPropertieDisplayName: 'detailsProjection'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'placeholder',
        settingType: 'string',
        settingDefaultValue: this.get('i18n').t('components.flexberry-groupedit.placeholder'),
        bindedControllerPropertieName: 'placeholder'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'tableStriped',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'tableStriped'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'createNewButton',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'createNewButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'deleteButton',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'deleteButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'allowColumnResize',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'allowColumnResize'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showAsteriskInRow',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'showAsteriskInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showCheckBoxInRow',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'showCheckBoxInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showDeleteButtonInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showDeleteButtonInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'defaultSortingButton',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'defaultSortingButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showEditMenuItemInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showEditMenuItemInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showDeleteMenuItemInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showDeleteMenuItemInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'singleColumnHeaderTitle',
        settingType: 'string',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'singleColumnHeaderTitle'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'rowClickable',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'rowClickable'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'immediateDelete',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'immediateDelete'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'defaultSettingsButton',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'defaultSettingsButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'fixedHeader',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'fixedHeader'
      });

      return componentSettingsMetadata;
    }),

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr, bindingPath) {
      var cellComponent = this._super.apply(this, arguments);

      if (attr.kind === 'belongsTo' && bindingPath === 'master') {
        cellComponent.componentProperties = {
          componentName: 'GroupEditSettingExampleMaster',
          projection: 'MasterL',
          displayAttributeName: 'text',
          title: 'Master',
          relationName: 'master',
          choose: 'showLookupDialog',
          remove: 'removeLookupValue'
        };
      }

      return cellComponent;
    },

    /**
      Lookup events service.
    */
    lookupEvents: _ember['default'].inject.service('lookup-events'),

    actions: {
      /**
        Handles click on lookup's choose button.
      */
      showLookupDialog: function showLookupDialog() {
        // Create new master & add to model.
        var master = this.get('store').createRecord('components-examples/flexberry-groupedit/shared/master', { text: 'Master text' });
        var deteils = this.get('model.details');

        deteils.forEach(function (item) {
          item.set('master', master);
        });

        this.get('lookupEvents').lookupDialogOnHiddenTrigger('GroupEditSettingExampleMaster');
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-lookup/autocomplete-order-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-i18n'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberI18n) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property placeholder
      @type String
      @default 't('components.flexberry-lookup.placeholder')'
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-lookup.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-lookup.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-lookup.placeholder'));
      }
    }),
    /**
      Flag indicates whether 'flexberry-lookup' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
      @default false
    */
    readonly: false,

    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property title
      @type String
      @default 'Master'
    */
    title: 'Master',

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'autocomplete' mode or not.
       @property autocomplete
      @type Boolean
      @default false
    */
    autocomplete: false
  });
});
define('dummy/controllers/components-examples/flexberry-lookup/autofill-by-limit-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-flexberry-data'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberFlexberryData) {
  var SimplePredicate = _emberFlexberryData.Query.SimplePredicate;
  var FilterOperator = _emberFlexberryData.Query.FilterOperator;
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({

    /**
      Current predicate to limit values for lookup.
       @property limitValue
      @type BasePredicate
      @default undefined
     */
    limitValue: undefined,

    /**
      Indicates when limit predicate is enabled.
       @property limitEnabled
      @type Boolean
      @default true
     */
    limitEnabled: true,

    /**
      Current readonly property value.
       @property readonly
      @type Boolean
      @default false
     */
    readonly: false,

    /**
      Current autofillByLimit property value.
       @property autofillByLimit
      @type Boolean
      @default true
     */
    autofillByLimit: true,

    /**
      Current predicate to limit accessible values for lookup.
       @property lookupCustomLimitPredicate
      @type BasePredicate
      @default undefined
     */
    lookupCustomLimitPredicate: _ember['default'].computed('limitEnabled', function () {
      if (!this.get('limitEnabled')) {
        return undefined;
      }

      var limitValue = this.get('limitValue');

      return new SimplePredicate('id', FilterOperator.Eq, limitValue.get('id'));
    }),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
    */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();
      componentSettingsMetadata.pushObject({
        settingName: 'autofillByLimit',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'autofillByLimit'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'limitEnabled',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'limitEnabled'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {
    /**
      Route name for transition after close edit form.
       @property parentRoute
      @type String
      @default 'ember-flexberry-dummy-application-user-list'
     */
    parentRoute: 'compute-autocomplete-list',

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr, bindingPath, model) {
      var cellComponent = this._super.apply(this, arguments);

      if (attr.kind === 'belongsTo') {
        if (model.modelName === 'ember-flexberry-dummy-localized-suggestion-type' && bindingPath === 'localization') {
          cellComponent.componentProperties = {
            projection: 'LocalizationL',
            displayAttributeName: 'name',
            title: 'Localization',
            relationName: 'localization',
            choose: 'showLookupDialog',
            remove: 'removeLookupValue'
          };
        }
      }

      return cellComponent;
    }
  });
});
define('dummy/controllers/components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-list', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-type-edit'
     */
    editFormRoute: 'components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-edit',

    exportExcelProjection: 'SuggestionTypeEWithComputedField'
  });
});
define('dummy/controllers/components-examples/flexberry-lookup/customizing-window-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form'], function (exports, _ember, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    actions: {
      /**
        This method returns custom properties for lookup window.
        @method getLookupFolvProperties
         @param {Object} options Parameters of lookup that called this method.
        @param {String} [options.projection] Lookup projection.
        @param {String} [options.relationName] Lookup relation name.
        @return {Object} Set of options for lookup window.
       */
      getLookupFolvProperties: function getLookupFolvProperties(options) {
        var methodArgs = _ember['default'].merge({
          projection: undefined,
          relationName: undefined
        }, options);

        if (methodArgs.relationName === 'type') {
          return {
            filterButton: true
          };
        }

        return undefined;
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-lookup/default-ordering-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/utils/serialize-sorting-param', 'ember-i18n'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberFlexberryUtilsSerializeSortingParam, _emberI18n) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    lookupComponentName: 'lookupUserSettings',

    actions: {
      /**
        This method returns custom properties for lookup window.
         @method getLookupFolvProperties
        @param {Object} options Parameters of lookup that called this method.
        @param {String} [options.projection] Lookup projection.
        @param {String} [options.relationName] Lookup relation name.
        @return {Object} Set of options for lookup window.
       */
      getLookupFolvProperties: function getLookupFolvProperties(options) {
        var _this = this;

        var methodArgs = _ember['default'].merge({
          projection: undefined,
          relationName: undefined
        }, options);

        if (methodArgs.relationName === 'type') {
          return {
            filterButton: true,
            customButtons: [{
              i18n: this.get('i18n'),
              buttonName: (0, _emberI18n.translationMacro)('components.olv-toolbar.clear-sorting-button-text'),
              buttonAction: function buttonAction() {
                var defaultUserSetting = _this.get('userSettingsService').getDefaultDeveloperUserSetting(_this.get('lookupComponentName'));
                _this.set('lookupController.sort', (0, _emberFlexberryUtilsSerializeSortingParam['default'])(defaultUserSetting.sorting || []));
              }
            }]
          };
        }

        return undefined;
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-lookup/dropdown-mode-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-flexberry-data'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberFlexberryData) {
  var StringPredicate = _emberFlexberryData.Query.StringPredicate;
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Current predicate to limit accessible values for lookup in dropdown mode.
       @property lookupCustomLimitPredicate
      @type BasePredicate
      @default undefined
     */
    lookupCustomLimitPredicate: _ember['default'].computed(function () {
      return new StringPredicate('name').contains('Type');
    })
  });
});
define('dummy/controllers/components-examples/flexberry-lookup/hierarchy-olv-in-lookup-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form'], function (exports, _ember, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    actions: {
      /**
        This method returns custom properties for lookup window.
         @method getLookupFolvProperties
        @param {Object} options Parameters of lookup that called this method.
        @param {String} [options.projection] Lookup projection.
        @param {String} [options.relationName] Lookup relation name.
        @return {Object} Set of options for lookup window.
       */
      getLookupFolvProperties: function getLookupFolvProperties(options) {
        var methodArgs = _ember['default'].merge({
          projection: undefined,
          relationName: undefined,
          componentName: undefined
        }, options);

        if (methodArgs.relationName === 'type') {
          if (methodArgs.componentName === 'HierarchyLookup') {
            return {
              modelName: 'ember-flexberry-dummy-suggestion-type',
              modelProjection: 'SettingLookupExampleView',
              inHierarchicalMode: true,
              hierarchicalAttribute: 'parent'
            };
          }

          if (methodArgs.componentName === 'NoHierarchyLookup') {
            return {
              modelName: 'ember-flexberry-dummy-suggestion-type',
              modelProjection: 'SettingLookupExampleView',
              inHierarchicalMode: false,
              hierarchicalAttribute: 'parent'
            };
          }

          if (methodArgs.componentName === 'DisabledHierarchyLookup') {
            return {
              disableHierarchicalMode: true,
              modelName: 'ember-flexberry-dummy-suggestion-type',
              modelProjection: 'SettingLookupExampleView',
              inHierarchicalMode: false,
              hierarchicalAttribute: 'parent'
            };
          }
        }

        return undefined;
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-lookup/limit-function-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-flexberry-data'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberFlexberryData) {
  var StringPredicate = _emberFlexberryData.Query.StringPredicate;
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Current predicate to limit accessible values for lookup.
       @property lookupCustomLimitPredicate
      @type BasePredicate
      @default undefined
     */
    lookupCustomLimitPredicate: _ember['default'].computed('model.type', function () {
      var currentLookupValue = this.get('model.type');
      if (currentLookupValue) {
        var currentLookupText = this.get('model.type.name');
        return new StringPredicate('name').contains(currentLookupText);
      }

      return undefined;
    }),

    actions: {
      /**
        This method returns custom properties for lookup window.
         @method getLookupFolvProperties
        @param {Object} options Parameters of lookup that called this method.
        @param {String} [options.projection] Lookup projection.
        @param {String} [options.relationName] Lookup relation name.
        @return {Object} Set of options for lookup window.
       */
      getLookupFolvProperties: function getLookupFolvProperties(options) {
        var methodArgs = _ember['default'].merge({
          projection: undefined,
          relationName: undefined
        }, options);

        if (methodArgs.relationName === 'type') {
          return {
            filterButton: true
          };
        }

        return undefined;
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry-data'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberryData) {
  var StringPredicate = _emberFlexberryData.Query.StringPredicate;
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Object containing dynamic properties that must be assigned to
      component using {{#crossLink "DynamicPropertiesMixin"}}dynamic-properties mixin{{/crossLink}}.
       @property dynamicProperties
      @type Object
      @default undefined
    */
    dynamicProperties: undefined,

    /**
      Current predicate to limit accessible values for lookup.
       @property firstLimitType
      @type BasePredicate
      @default undefined
     */
    firstLimitType: undefined,

    /**
      Current predicate to limit accessible values for lookup.
       @property secondLimitType
      @type BasePredicate
      @default undefined
     */
    secondLimitType: undefined,

    lookupCustomLimitPredicate: undefined,

    actions: {

      /**
        This method set dynamicProperties.lookupLimitPredicate for lookup window.
         @method firstLimitFunction
       */
      firstLimitFunction: function firstLimitFunction() {
        var currentLookupValue = this.get('firstLimitType');
        var limitFunction = new StringPredicate('name').contains(currentLookupValue);
        this.set('dynamicProperties.lookupLimitPredicate', limitFunction);
      },

      /**
        This method set dynamicProperties.lookupLimitPredicate for lookup window.
         @method secondLimitFunction
       */
      secondLimitFunction: function secondLimitFunction() {
        var currentLookupValue = this.get('secondLimitType');
        var limitFunction = new StringPredicate('name').contains(currentLookupValue);
        this.set('dynamicProperties.lookupLimitPredicate', limitFunction);
      },

      /**
        This method set dynamicProperties.lookupLimitPredicate for lookup window.
         @method clearLimitFunction
       */
      clearLimitFunction: function clearLimitFunction() {
        this.set('dynamicProperties.lookupLimitPredicate', undefined);
      }
    },

    /**
      Set limit accessible values for lookup.
       @method init
     */
    init: function init() {
      this._super.apply(this, arguments);
      this.set('dynamicProperties', {
        lookupLimitPredicate: null
      });
      this.set('firstLimitType', this.get('controller.firstLimitType'));
      this.set('secondLimitType', this.get('controller.secondLimitType'));
    }
  });
});
define('dummy/controllers/components-examples/flexberry-lookup/lookup-block-form-example', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({});
});
define('dummy/controllers/components-examples/flexberry-lookup/lookup-in-modal', ['exports', 'ember', 'ember-flexberry/controllers/edit-form'], function (exports, _ember, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Defaul style of modal context.
       @property readonly
      @type String
      @default #example
    */
    _style: '#example',

    actions: {
      modalWindow: function modalWindow(style) {
        if (!_ember['default'].isNone(style)) {
          this.set('_style', style);
        }

        var repeatWindow = _ember['default'].$('#repeat-window').modal({
          closable: false,
          autofocus: false,
          detachable: false,
          allowMultiple: true,
          context: this.get('_style')
        });
        this.set('repeatWindow', repeatWindow);
        this.get('repeatWindow').modal('show').modal('refresh');
      },

      modalWindowDouble: function modalWindowDouble(style) {
        if (!_ember['default'].isNone(style)) {
          this.set('_style', style);
        }

        var repeatWindow = _ember['default'].$('#repeat-window-double').modal({
          closable: false,
          autofocus: false,
          detachable: false,
          allowMultiple: true,
          context: this.get('_style')
        });
        this.set('repeatWindowdouble', repeatWindow);
        this.get('repeatWindowdouble').modal('show').modal('refresh');
      },

      logOut: function logOut() {
        this.get('repeatWindow').modal('hide');
      },

      logOutDouble: function logOutDouble() {
        this.get('repeatWindowdouble').modal('hide');
      }

    }
  });
});
define('dummy/controllers/components-examples/flexberry-lookup/numeric-autocomplete', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {});
});
define('dummy/controllers/components-examples/flexberry-lookup/settings-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-i18n'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberI18n) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property placeholder
      @type String
      @default 't('components.flexberry-lookup.placeholder')'
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-lookup.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-lookup.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-lookup.placeholder'));
      }
    }),
    /**
      Flag indicates whether 'flexberry-lookup' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
      @default false
    */
    readonly: false,

    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property title
      @type String
      @default 'Master'
    */
    title: 'Master',

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'autocomplete' mode or not.
       @property autocomplete
      @type Boolean
      @default false
    */
    autocomplete: false,

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'autocompletePersistValue' mode or not.
       @property autocompletePersistValue
      @type Boolean
      @default false
    */
    autocompletePersistValue: false,

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'dropdown' mode or not.
       @property dropdown
      @type Boolean
      @default false
    */
    dropdown: false,

    /**
      Flag indicates whether 'flexberry-lookup' component  in 'dropdown' mode is search.
       @property dropdownIsSearch
      @type Boolean
      @default false
    */
    dropdownIsSearch: false,

    /**
      Content for 'flexberry-lookup' component 'chooseText' property.
       @property chooseText
      @type String
      @default '<i class="remove icon"></i>'
    */
    chooseText: '<i class="change icon"></i>',

    /**
      Content for 'flexberry-lookup' component 'removeText' property.
       @property removeText
      @type String
      @default '<i class="remove icon"></i>'
    */
    removeText: '<i class="remove icon"></i>',

    /**
      Text for 'flexberry-lookup' component 'chooseButtonClass' property.
       @property chooseButtonClass
      @type String
      @default 'purple'
    */
    chooseButtonClass: '',

    /**
      Text for 'flexberry-lookup' component 'dropdownClass' property.
       @property dropdownClass
      @type String
      @default 'blue'
    */
    dropdownClass: '',

    /**
      Text for 'flexberry-lookup' component 'removeButtonClass' property.
       @property removeButtonClass
      @type String
      @default 'olive'
    */
    removeButtonClass: '',

    /**
      Flag to show in lookup preview button.
       @property showPreviewButton
      @type Boolean
      @default false
    */
    showPreviewButton: false,

    /**
      Flag to show the selected object in separate route.
       @property previewOnSeparateRoute
      @type Boolean
      @default false
    */
    previewOnSeparateRoute: false,

    /**
      If `true`, page switching buttons will be available in the results for autocomplete.
       @property usePaginationForAutocomplete
      @type Boolean
      @default false
    */
    usePaginationForAutocomplete: false,

    /**
      Max number of the results for autocomplete.
       @property maxResults
      @type Integer
      @default 10
    */
    maxResults: 10,

    /**
      Template text for 'flexberry-lookup' component.
       @property componentTemplateText
      @type String
    */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-lookup<br>' + '  placeholder=placeholder<br>' + '  readonly=readonly<br>' + '  value=model.type<br>' + '  projection="SettingLookupExampleView"<br>' + '  displayAttributeName="name"<br>' + '  title="Master"<br>' + '  relatedModel=model<br>' + '  relationName="type"<br>' + '  choose="showLookupDialog"<br>' + '  remove="removeLookupValue"<br>' + '  autocomplete=autocomplete<br>' + '  autocompletePersistValue=autocompletePersistValue<br>' + '  autocompleteDirection=autocompleteDirection<br>' + '  usePaginationForAutocomplete=usePaginationForAutocomplete<br>' + '  maxResults=maxResults<br>' + '  displayValue=model.lookupDisplayValue<br>' + '  dropdown=dropdown<br>' + '  dropdownIsSearch=dropdownIsSearch<br>' + '  chooseText=chooseText<br>' + '  removeText=removeText<br>' + '  chooseButtonClass=chooseButtonClass<br>' + '  removeButtonClass=removeButtonClass<br>' + '  showPreviewButton=showPreviewButton<br>' + '  previewOnSeparateRoute=previewOnSeparateRoute<br>' + '  previewFormRoute="ember-flexberry-dummy-suggestion-type-edit"<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
    */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();
      componentSettingsMetadata.pushObject({
        settingName: 'placeholder',
        settingType: 'string',
        settingDefaultValue: this.get('i18n').t('components.flexberry-lookup.placeholder'),
        bindedControllerPropertieName: 'placeholder'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'title',
        settingType: 'string',
        settingDefaultValue: 'Master',
        bindedControllerPropertieName: 'title'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'autocomplete',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'autocomplete'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'autocompletePersistValue',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'autocompletePersistValue'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'usePaginationForAutocomplete',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'usePaginationForAutocomplete'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'autocompleteDirection',
        settingType: 'enumeration',
        settingDefaultValue: 'downward',
        settingAvailableItems: ['downward', 'upward', 'auto'],
        bindedControllerPropertieName: 'autocompleteDirection'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'maxResults',
        settingType: 'number',
        settingDefaultValue: 10,
        bindedControllerPropertieName: 'maxResults'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'dropdown',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'dropdown'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'dropdownIsSearch',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'dropdownIsSearch'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'chooseText',
        settingType: 'string',
        settingDefaultValue: this.get('i18n').t('components.flexberry-lookup.choose-button-text'),
        bindedControllerPropertieName: 'chooseText'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'removeText',
        settingType: 'string',
        settingDefaultValue: '<i class="remove icon"></i>',
        bindedControllerPropertieName: 'removeText'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'chooseButtonClass',
        settingType: 'css',
        settingDefaultValue: '',
        settingAvailableItems: ['blue basic', 'positive', 'teal colored'],
        bindedControllerPropertieName: 'chooseButtonClass'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'removeButtonClass',
        settingType: 'css',
        settingDefaultValue: '',
        settingAvailableItems: ['purple basic', 'negative', 'yellow colored'],
        bindedControllerPropertieName: 'removeButtonClass'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'dropdownClass',
        settingType: 'css',
        settingDefaultValue: '',
        settingAvailableItems: ['blue'],
        bindedControllerPropertieName: 'dropdownClass'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showPreviewButton',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showPreviewButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'previewOnSeparateRoute',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'previewOnSeparateRoute'
      });
      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-lookup/user-settings-example', ['exports', 'ember-flexberry/controllers/edit-form', 'ember'], function (exports, _emberFlexberryControllersEditForm, _ember) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({

    userSettings: _ember['default'].inject.service(),

    /**
      Flag indicates whether 'flexberry-lookup' component use user settings or not.
       @property notUseUserSettings
      @type Boolean
      @default false
     */
    notUseUserSettings: false,

    actions: {
      getLookupFolvProperties: function getLookupFolvProperties() {
        return {
          colsConfigButton: true
        };
      },

      clearUserSetting: function clearUserSetting() {
        _ember['default'].get(this, 'userSettings').deleteUserSetting('ApplicationUserObjectlistView');
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-menu/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    actions: {
      onMenuItemClick: function onMenuItemClick(e) {
        var clickedMenu = _ember['default'].$(e.delegateTarget);
        var clickedMenuItem = _ember['default'].$(e.currentTarget);
        if (e.currentTarget) {
          this.set('currentItem', clickedMenuItem.data('flexberry-menuitem.item'));
        } else {
          var selectMenu = _ember['default'].$.trim(e.delegateTarget.innerText);
          var selectValue = undefined;
          if (selectMenu === this.get('i18n').t('forms.components-examples.flexberry-menu.settings-example.titleIcon1').toString()) {
            selectValue = 'itemsLeft';
          }

          if (selectMenu === this.get('i18n').t('forms.components-examples.flexberry-menu.settings-example.titleIcon2').toString()) {
            selectValue = 'itemsRight';
          }

          if (selectMenu === this.get('i18n').t('forms.components-examples.flexberry-menu.settings-example.titleIcon3').toString()) {
            selectValue = 'itemsSubmenu';
          }

          if (selectValue) {
            var selectElement = this.get(selectValue)[0];
            this.set('currentItem', selectElement);
          }
        }

        clickedMenu.popup({
          content: 'This menu item has been clicked',
          position: 'top right',
          color: 'teal',
          delay: {
            show: 0,
            hide: 200
          },
          on: 'manual',
          onHidden: function onHidden(e) {
            var owner = _ember['default'].$(e);
            owner.popup('destroy');
          }
        });

        clickedMenu.popup('show');

        window.setTimeout((function () {
          clickedMenu.popup('hide');
        }).bind(this), 3000);
      }
    },

    /**
      Menu items for 'flexberry-menu' component.
       @property items
      @type Object
    */
    items: null,

    /**
      Selected menu item for 'flexberry-menu' component.
       @property currentItem
      @type Object
    */
    currentItem: null,

    /**
      @property collapseMenuOnItemClick
      @type Boolean
      @default true
    */
    collapseMenuOnItemClick: true,

    /**
      @property isVertical
      @type Boolean
      @default false
    */
    isVertical: false,

    /**
      Template text for 'flexberry-menu' component.
       @property componentTemplateText
      @type String
    */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-menu<br>' + '  placeholder=placeholder<br>' + '  class="compact"<br>' + '  items=items<br>' + '  collapseMenuOnItemClick=collapseMenuOnItemClick<br>' + '  onItemClick=(action "onMenuItemClick")<br>' + '}}'),

    /**
      Initializes controller.
       @method init
    */
    init: function init() {
      this._super.apply(this, arguments);

      var i18n = this.get('i18n');
      var itemsLeft = [{
        icon: 'search icon',
        title: i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon1'),
        items: null
      }];

      var itemsRight = [{
        icon: 'setting icon',
        iconAlignment: 'right',
        title: i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon2'),
        items: null
      }];

      var itemsSubmenu = [{
        icon: 'list layout icon',
        title: i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon3'),
        itemsAlignment: null,
        items: [{
          icon: 'search icon',
          title: i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon1'),
          items: null
        }, {
          title: i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon4'),
          buttons: [{
            buttonClasses: 'icon',
            iconClass: 'delete icon',
            disabled: false,
            buttonAction: function buttonAction() {
              window.alert('btn1');
            }
          }, {
            buttonClasses: 'icon',
            iconClass: 'edit icon',
            disabled: false,
            buttonAction: function buttonAction() {
              window.alert('btn2');
            }
          }],
          items: null
        }, {
          icon: 'setting icon',
          iconAlignment: 'right',
          title: i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon2'),
          items: null
        }, {
          icon: 'list layout icon',
          title: i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon3'),
          itemsAlignment: 'left',
          items: [{
            icon: 'search icon',
            title: i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon1'),
            items: null
          }, {
            icon: 'setting icon',
            iconAlignment: 'right',
            title: i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon2'),
            items: null
          }, {
            icon: 'list layout icon',
            title: i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon3'),
            itemsAlignment: 'right',
            items: [{
              icon: 'search icon',
              title: i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon1'),
              items: null
            }]
          }]
        }]
      }];

      this.set('itemsLeft', itemsLeft);
      this.set('itemsRight', itemsRight);
      this.set('itemsSubmenu', itemsSubmenu);
    },

    /**
      Handles changes in i18n.locale.
       @method _menuTitle
      @private
     */
    _menuTitle: _ember['default'].observer('i18n.locale', function () {
      var i18n = this.get('i18n');
      if (typeof this.get('itemsLeft.0.title') === 'object') {
        this.set('itemsLeft.0.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon1'));
      }

      if (typeof this.get('itemsRight.0.title') === 'object') {
        this.set('itemsRight.0.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon2'));
      }

      if (typeof this.get('itemsSubmenu.0.title') === 'object') {
        this.set('itemsSubmenu.0.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon3'));
      }

      if (typeof this.get('itemsSubmenu.0.items.0.title') === 'object') {
        this.set('itemsSubmenu.0.items.0.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon1'));
      }

      if (typeof this.get('itemsSubmenu.0.items.1.title') === 'object') {
        this.set('itemsSubmenu.0.items.1.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon2'));
      }

      if (typeof this.get('itemsSubmenu.0.items.2.title') === 'object') {
        this.set('itemsSubmenu.0.items.2.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon3'));
      }

      if (typeof this.get('itemsSubmenu.0.items.2.items.0.title') === 'object') {
        this.set('itemsSubmenu.0.items.2.items.0.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon1'));
      }

      if (typeof this.get('itemsSubmenu.0.items.2.items.1.title') === 'object') {
        this.set('itemsSubmenu.0.items.2.items.1.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon2'));
      }

      if (typeof this.get('itemsSubmenu.0.items.2.items.2.title') === 'object') {
        this.set('itemsSubmenu.0.items.2.items.2.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon3'));
      }

      if (typeof this.get('itemsSubmenu.0.items.2.items.2.items.0.title') === 'object') {
        this.set('itemsSubmenu.0.items.2.items.2.items.0.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon1'));
      }
    }),

    /**
      Handles changes in currentItem.title.
       @method _titleChanged
      @private
     */
    _titleChanged: _ember['default'].observer('currentItem.title', function () {
      var i18n = this.get('i18n');
      if (this.get('currentItem.title') === this.get('i18n').t('forms.components-examples.flexberry-menu.settings-example.titleIcon1').toString()) {
        this.set('currentItem.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon1'));
      }

      if (this.get('currentItem.title') === this.get('i18n').t('forms.components-examples.flexberry-menu.settings-example.titleIcon2').toString()) {
        this.set('currentItem.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon2'));
      }

      if (this.get('currentItem.title') === this.get('i18n').t('forms.components-examples.flexberry-menu.settings-example.titleIcon3').toString()) {
        this.set('currentItem.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon3'));
      }
    }),

    menuPosition: _ember['default'].computed('isVertical', function () {
      var isVertical = this.get('isVertical');
      if (isVertical === true) {
        return 'ui basic vertical buttons';
      } else {
        return 'ui basic buttons';
      }
    }),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
    */
    componentSettingsMetadata: _ember['default'].computed(function () {
      var componentSettingsMetadata = _ember['default'].A();
      componentSettingsMetadata.pushObject({
        settingName: 'icon',
        settingType: 'enumeration',
        settingDefaultValue: 'undefined',
        settingAvailableItems: ['search icon', 'bordered setting icon', 'inverted teal paw icon', 'big green tree icon', 'circular small record icon', 'olive list layout icon'],
        bindedControllerPropertieName: 'currentItem.icon'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'iconAlignment',
        settingType: 'enumeration',
        settingDefaultValue: 'undefined',
        settingAvailableItems: ['left', 'right'],
        bindedControllerPropertieName: 'currentItem.iconAlignment'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'title',
        settingType: 'string',
        settingDefaultValue: 'undefined',
        bindedControllerPropertieName: 'currentItem.title'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'itemsAlignment',
        settingType: 'enumeration',
        settingDefaultValue: 'undefined',
        settingAvailableItems: ['left', 'right'],
        bindedControllerPropertieName: 'currentItem.itemsAlignment'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'collapseMenuOnItemClick',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'collapseMenuOnItemClick'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'isVertical',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'isVertical'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-cancel', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({

    /**
      Parameter for use in the test beforeDeleteRecord.
       @property recordWasNotDelete
      @type bool
      @default false
     */
    recordWasNotDelete: false,

    actions: {
      beforeDeleteRecord: function beforeDeleteRecord(record, data) {
        this.set('recordWasNotDelete', !record.get('isDeleted'));
        data.cancel = true;
        return;
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-immediately', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({

    /**
      Parameter for use in the test beforeDeleteRecord.
       @property recordWasNotDelete
      @type bool
      @default false
     */
    recordWasNotDelete: false,

    actions: {
      beforeDeleteRecord: function beforeDeleteRecord(record, data) {
        this.set('recordWasNotDelete', !record.get('isDeleted'));
        data.immediately = false;
        return;
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-cancel', ['exports', 'ember', 'ember-flexberry/controllers/list-form'], function (exports, _ember, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({

    /**
      Parameter for use in the test beforeDeleteRecord.
       @property recordWasNotDelete
      @type bool
      @default false
     */
    recordWasNotDelete: false,

    actions: {
      beforeDeleteRecord: function beforeDeleteRecord(record, data) {
        var _this = this;

        return new _ember['default'].RSVP.Promise(function (resolve) {
          _this.set('recordWasNotDelete', !record.get('isDeleted'));
          data.cancel = true;
          resolve();
        });
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-immediately', ['exports', 'ember', 'ember-flexberry/controllers/list-form'], function (exports, _ember, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({

    /**
      Parameter for use in the test beforeDeleteRecord.
       @property recordWasNotDelete
      @type bool
      @default false
     */
    recordWasNotDelete: false,

    actions: {
      beforeDeleteRecord: function beforeDeleteRecord(record, data) {
        var _this = this;

        return new _ember['default'].RSVP.Promise(function (resolve) {
          _this.set('recordWasNotDelete', !record.get('isDeleted'));
          data.immediately = false;
          resolve();
        });
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise', ['exports', 'ember', 'ember-flexberry/controllers/list-form'], function (exports, _ember, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({

    /**
      Parameter for use in the test beforeDeleteRecord.
       @property recordWasNotDelete
      @type bool
      @default false
     */
    recordWasNotDelete: false,

    actions: {
      beforeDeleteRecord: function beforeDeleteRecord(record, data) {
        var _this = this;

        return new _ember['default'].RSVP.Promise(function (resolve) {
          _this.set('recordWasNotDelete', !record.get('isDeleted'));
          resolve();
        });
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({

    /**
      Parameter for use in the test beforeDeleteRecord.
       @property recordWasNotDelete
      @type bool
      @default false
     */
    recordWasNotDelete: false,

    actions: {
      beforeDeleteRecord: function beforeDeleteRecord(record, data) {
        this.set('recordWasNotDelete', !record.get('isDeleted'));
        return;
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/configurate-rows', ['exports', 'ember', 'ember-flexberry/controllers/list-form'], function (exports, _ember, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of selected detail's model projection.
       @property _projectionName
      @type String
      @private
     */
    _projectionName: 'SuggestionL',

    /**
      Array of available model projections.
       @property _projections
      @type Object[]
     */
    _projections: _ember['default'].computed('model.[]', function () {
      var records = this.get('model');
      var modelClass = _ember['default'].get(records, 'length') > 0 ? _ember['default'].get(records, 'firstObject').constructor : {};

      return _ember['default'].get(modelClass, 'projections');
    }),

    /**
      Array of available model projections names.
       @property _projectionsNames
      @type String[]
     */
    _projectionsNames: _ember['default'].computed('_projections.[]', function () {
      var projections = this.get('_projections');
      if (_ember['default'].isNone(projections)) {
        return [];
      }

      return Object.keys(projections);
    }),

    /**
      Model projection for 'flexberry-objectlistview' component 'modelProjection' property.
       @property projection
      @type Object
     */
    projection: _ember['default'].computed('_projections.[]', '_projectionName', function () {
      var projectionName = this.get('_projectionName');
      if (_ember['default'].isBlank(projectionName)) {
        return null;
      }

      var projections = this.get('_projections');
      if (_ember['default'].isNone(projections)) {
        return null;
      }

      return projections[projectionName];
    }),

    /**
      Name of related edit form route (for 'flexberry-objectlistview' component 'editFormRoute' property).
       @property editFormRoute
      @type String
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-edit',

    /**
      Current records.
       @property _records
      @type Object[]
      @protected
      @readOnly
    */
    records: [],

    /**
      Configurate rows 'flexberry-objectlistview' component by address.
       @property configurateRowByAddress
      @type String
     */
    configurateRowByAddress: undefined,

    _configurateRowByAddress: _ember['default'].observer('configurateRowByAddress', function () {
      var _this = this;

      var rowConfig = { customClass: '' };

      this.get('records').forEach(function (record, index, records) {
        _this.send('configurateRow', rowConfig, record);
      });
    }),

    /**
      Template text for 'flexberry-objectlistview' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-objectlistview<br>' + '  configurateRow=(action \"configurateRow\")<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();

      componentSettingsMetadata.pushObject({
        settingName: 'configurateRowByAddress',
        settingType: 'string',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'configurateRowByAddress'
      });

      return componentSettingsMetadata;
    }),

    actions: {
      /**
        Configurate rows on the condition.
      */
      configurateRow: function configurateRow(rowConfig, record) {
        if (record) {
          this.get('records').push(record);
        }

        if (record.get('address') === this.get('configurateRowByAddress')) {
          _ember['default'].set(rowConfig, 'customClass', 'positive ');
        } else {
          _ember['default'].set(rowConfig, 'customClass', 'negative ');
        }
      },

      /**
        Change attribute 2.
      */
      changeAttribute2: function changeAttribute2() {
        this.get('records')[1].set('address', 'Street, 200');
      }
    }

  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/custom-filter', ['exports', 'ember', 'ember-flexberry/controllers/list-form'], function (exports, _ember, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    filterByAnyWord: false,

    filterByAllWords: false,

    queryParams: ['filterCondition'],
    filterCondition: undefined,

    /**
      Observes current state of FilterCondition parameter
      & set right filter option after reload page.
       @method  _currentFilterCondition
      @private
    */
    _currentFilterCondition: _ember['default'].observer('filterCondition', function () {
      var filterCondition = this.get('filterCondition');
      if (filterCondition === 'or') {
        this.set('filterByAnyWord', true);
        this.set('filterByAllWords', false);
      } else if (filterCondition === 'and') {
        this.set('filterByAnyWord', false);
        this.set('filterByAllWords', true);
      }

      return filterCondition;
    }),

    customButtons: _ember['default'].computed('filterByAnyWord', 'filterByAllWords', function () {
      return [{
        buttonName: 'filterByAnyWord',
        buttonAction: 'toggleFilterByAnyWord',
        buttonClasses: this.get('filterByAnyWord') ? 'positive' : ''
      }, {
        buttonName: 'filterByAllWords',
        buttonAction: 'toggleFilterByAllWords',
        buttonClasses: this.get('filterByAllWords') ? 'positive' : ''
      }];
    }),

    actions: {
      toggleFilterByAnyWord: function toggleFilterByAnyWord() {
        this.toggleProperty('filterByAnyWord');
        if (this.get('filterByAnyWord')) {
          this.set('filterByAllWords', false);
        }
      },

      toggleFilterByAllWords: function toggleFilterByAllWords() {
        this.toggleProperty('filterByAllWords');
        if (this.get('filterByAllWords')) {
          this.set('filterByAnyWord', false);
        }
      },

      componentForFilter: function componentForFilter(type, relation) {
        switch (type) {
          case 'decimal':
            return { name: 'flexberry-textbox', properties: { 'class': 'compact fluid' } };
          default:
            return {};
        }
      },

      conditionsByType: function conditionsByType(type) {
        switch (type) {
          case 'file':
            return null;

          case 'date':
          case 'number':
            return ['eq', 'neq', 'le', 'ge'];

          case 'string':
            return ['eq', 'neq', 'like', 'empty'];

          case 'boolean':
            return ['eq'];

          default:
            return ['eq', 'neq'];
        }
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {
    /**
      Route name for transition after close edit form.
       @property parentRoute
      @type String
      @default 'components-examples/flexberry-objectlistview/downloading-files-from-olv-list'
     */
    parentRoute: 'components-examples/flexberry-objectlistview/downloading-files-from-olv-list'

  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-list', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'components-examples/flexberry-objectlistview/downloading-files-from-olv-edit'
     */
    editFormRoute: 'components-examples/flexberry-objectlistview/downloading-files-from-olv-edit',

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr, bindingPath, model) {
      var cellComponent = this._super.apply(this, arguments);
      if (bindingPath === 'file') {
        cellComponent = {
          componentName: 'flexberry-file',
          componentProperties: {
            readonly: true,
            showUploadButton: false,
            showModalDialogOnUploadError: true,
            showModalDialogOnDownloadError: true
          }
        };
      }

      return cellComponent;
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {
    /**
      Route name for transition after close edit form.
       @property parentRoute
      @type String
      @default 'components-examples/flexberry-objectlistview/edit-form-with-detail-list'
     */
    parentRoute: 'components-examples/flexberry-objectlistview/edit-form-with-detail-list',

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr, bindingPath, model) {
      var cellComponent = this._super.apply(this, arguments);

      if (attr.kind === 'belongsTo') {
        if (model.modelName === 'ember-flexberry-dummy-localized-suggestion-type' && bindingPath === 'localization') {
          cellComponent.componentProperties = {
            projection: 'LocalizationL',
            displayAttributeName: 'name',
            title: 'Localization',
            relationName: 'localization',
            choose: 'showLookupDialog',
            remove: 'removeLookupValue'
          };
        }
      }

      return cellComponent;
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new', ['exports', 'dummy/controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit'], function (exports, _dummyControllersComponentsExamplesFlexberryObjectlistviewEditFormWithDetailEdit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _dummyControllersComponentsExamplesFlexberryObjectlistviewEditFormWithDetailEdit['default'];
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-list', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'components-examples/flexberry-objectlistview/edit-form-with-detail-edit'
     */
    editFormRoute: 'components-examples/flexberry-objectlistview/edit-form-with-detail-edit'
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/multi-list-controller', 'ember-flexberry/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberryMixinsMultiListController, _emberFlexberryMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsMultiListController['default'], _emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {
    /**
      Route name for transition after close edit form.
       @property parentRoute
      @type String
      @default 'ember-flexberry-dummy-multi-list'
     */
    parentRoute: 'ember-flexberry-dummy-multi-list',

    /**
      Name of model.comments edit route.
       @property commentsEditRoute
      @type String
      @default 'ember-flexberry-dummy-comment-edit'
     */
    commentsEditRoute: 'ember-flexberry-dummy-comment-edit',

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr, bindingPath, model) {
      var cellComponent = this._super.apply(this, arguments);
      if (model !== null) {
        if (attr.kind === 'belongsTo') {
          switch (model.modelName + '+' + bindingPath) {
            case 'ember-flexberry-dummy-vote+author':
              cellComponent.componentProperties = {
                choose: 'showLookupDialog',
                remove: 'removeLookupValue',
                preview: 'previewLookupValue',
                displayAttributeName: 'name',
                required: true,
                relationName: 'author',
                projection: 'ApplicationUserL',
                autocomplete: true,
                showPreviewButton: true,
                previewFormRoute: 'ember-flexberry-dummy-application-user-edit'
              };
              break;

            case 'ember-flexberry-dummy-comment+author':
              cellComponent.componentProperties = {
                choose: 'showLookupDialog',
                remove: 'removeLookupValue',
                displayAttributeName: 'name',
                required: true,
                relationName: 'author',
                projection: 'ApplicationUserL',
                autocomplete: true
              };
              break;

          }
        } else if (attr.kind === 'attr') {
          switch (model.modelName + '+' + bindingPath) {
            case 'ember-flexberry-dummy-vote+author.eMail':
              cellComponent.componentProperties = {
                readonly: true
              };
          }
        }

        if (model.modelName === 'ember-flexberry-dummy-application-user' || model.modelName === 'ember-flexberry-dummy-suggestion' || model.modelName === 'ember-flexberry-dummy-suggestion-type') {
          cellComponent.componentName = undefined;
        }
      }

      return cellComponent;
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit/new', ['exports', 'dummy/controllers/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit'], function (exports, _dummyControllersComponentsExamplesFlexberryObjectlistviewEmberFlexberryDummySuggestionMultiListEdit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _dummyControllersComponentsExamplesFlexberryObjectlistviewEmberFlexberryDummySuggestionMultiListEdit['default'];
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/hierarchy-example', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({

    /**
      Flag indicate when component is in the hierarchical mode.
       @property inHierarchicalMode
      @type Boolean
      @default false
      @private
    */
    inHierarchicalMode: true,

    /**
      Store the attribute parent set by `hierarchyByAttribute`.
       @property _hierarchicalAttribute
      @type String
      @private
    */
    hierarchicalAttribute: 'parent',

    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-type-edit'
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-type-edit'

  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/hierarchy-paging-example', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({

    /**
      Flag indicate when component is in the hierarchical mode.
       @property inHierarchicalMode
      @type Boolean
      @default false
      @private
    */
    inHierarchicalMode: true,

    /**
      Flag used for disable the hierarchical paging.
       @property hierarchyPaging
      @type Boolean
      @default false
      @private
    */
    hierarchyPaging: true,

    /**
      Store the attribute parent set by `hierarchyByAttribute`.
       @property _hierarchicalAttribute
      @type String
      @private
    */
    hierarchicalAttribute: 'parent',

    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-type-edit'
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-type-edit'

  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/inheritance-models', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({

    actions: {

      root: function root() {
        this.transitionToRoute('components-examples/flexberry-objectlistview/inheritance-models/parent-list');
      },

      successorPhone: function successorPhone() {
        this.transitionToRoute('components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list');
      },

      successorSoc: function successorSoc() {
        this.transitionToRoute('components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list');
      }

    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {
    /**
     Route name for transition after close edit form.
      @property parentRoute
     @type String
     @default 'components-examples/flexberry-objectlistview/inheritance-models/base-list'
    */
    parentRoute: 'components-examples/flexberry-objectlistview/inheritance-models/parent-list'
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new', ['exports', 'dummy/controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit'], function (exports, _dummyControllersComponentsExamplesFlexberryObjectlistviewInheritanceModelsParentEdit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _dummyControllersComponentsExamplesFlexberryObjectlistviewInheritanceModelsParentEdit['default'];
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-list', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'components-examples/flexberry-objectlistview/inheritance-models/base-edit'
     */
    editFormRoute: 'components-examples/flexberry-objectlistview/inheritance-models/parent-edit'
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {
    /**
     Route name for transition after close edit form.
      @property parentRoute
     @type String
     @default 'components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list'
    */
    parentRoute: 'components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list'
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new', ['exports', 'dummy/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit'], function (exports, _dummyControllersComponentsExamplesFlexberryObjectlistviewInheritanceModelsSuccessorPhoneEdit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _dummyControllersComponentsExamplesFlexberryObjectlistviewInheritanceModelsSuccessorPhoneEdit['default'];
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit'
     */
    editFormRoute: 'components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit'
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {
    /**
     Route name for transition after close edit form.
      @property parentRoute
     @type String
     @default 'components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list'
    */
    parentRoute: 'components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list'
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new', ['exports', 'dummy/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit'], function (exports, _dummyControllersComponentsExamplesFlexberryObjectlistviewInheritanceModelsSuccessorSocialNetworkEdit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _dummyControllersComponentsExamplesFlexberryObjectlistviewInheritanceModelsSuccessorSocialNetworkEdit['default'];
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit'
     */
    editFormRoute: 'components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit'
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/limit-function-example', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Current predicate to limit accessible values for olv.
      @property firstLimitType
      @type BasePredicate
      @default undefined
     */
    firstLimitType: undefined,

    /**
      Current predicate to limit accessible values for olv.
      @property secondLimitType
      @type BasePredicate
      @default undefined
     */
    secondLimitType: undefined,

    /**
      Current predicate to limit accessible values for olv.
      @property secondLimitType
      @type BasePredicate
      @default undefined
     */
    limitFunction: undefined,

    loadCount: 0,

    actions: {
      /**
        This method set controller.limitFunction for olv window.
        @method firstLimitFunction
       */
      firstLimitFunction: function firstLimitFunction() {
        this.set('limitFunction', this.get('firstLimitType'));
        this.send('refreshModel');
      },

      /**
        This method set controller.limitFunction for olv window.
        @method secondLimitFunction
       */
      secondLimitFunction: function secondLimitFunction() {
        this.set('limitFunction', this.get('secondLimitType'));
        this.send('refreshModel');
      },

      /**
        This method set controller.limitFunction for olv window.
        @method clearLimitFunction
       */
      clearLimitFunction: function clearLimitFunction() {
        this.set('limitFunction', undefined);
        this.send('refreshModel');
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/limited-text-size-example', ['exports', 'ember', 'ember-flexberry/controllers/list-form'], function (exports, _ember, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route (for 'flexberry-objectlistview' component 'editFormRoute' property).
       @property editFormRoute
      @type String
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-edit',

    /**
      'flexberry-text-cell' component's 'maxTextLength' property.
       @property maxTextLength
      @type Number
     */
    maxTextLength: 10,

    /**
      Flag for 'flexberry-text-cell' component 'cutBySpaces' property.
       @property cutBySpaces
      @type Boolean
     */
    cutBySpaces: false,

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', 'model.content', function () {
      var componentSettingsMetadata = _ember['default'].A();
      componentSettingsMetadata.pushObject({
        settingName: 'maxTextLength',
        settingType: 'number',
        settingDefaultValue: 10,
        bindedControllerPropertieName: 'maxTextLength'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'cutBySpaces',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'cutBySpaces'
      });
      return componentSettingsMetadata;
    }),

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr) {
      var cellComponent = {
        componentName: 'object-list-view-cell',
        componentProperties: {
          maxTextLength: this.get('maxTextLength'),
          cutBySpaces: this.get('cutBySpaces'),
          displayMemberPath: _ember['default'].get(attr, 'options.displayMemberPath')
        }
      };

      if (attr.caption === 'Text') {
        cellComponent = {
          componentName: 'flexberry-text-cell',
          componentProperties: {
            maxTextLength: this.get('maxTextLength'),
            cutBySpaces: this.get('cutBySpaces')
          }
        };
      }

      return cellComponent;
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/list-on-editform', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-edit'
     */
    editFormRoute: 'components-examples/flexberry-objectlistview/on-edit-form/suggestion',

    exportExcelProjection: 'SuggestionL',

    actions: {
      /**
        Hook that executes before deleting all records on all pages.
        Need to be overriden in corresponding application controller.
      */
      beforeDeleteAllRecords: function beforeDeleteAllRecords(modelName, data) {
        data.cancel = false;
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/lock-services-editor-view-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {
    /**
      Route name for transition after close edit form.
       @property parentRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-list'
     */
    parentRoute: 'components-examples/flexberry-objectlistview/lock-services-editor-view-list',

    /**
      Name of model.comments edit route.
       @property commentsEditRoute
      @type String
      @default 'ember-flexberry-dummy-comment-edit'
     */
    commentsEditRoute: 'ember-flexberry-dummy-comment-edit',

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr, bindingPath, model) {
      var cellComponent = this._super.apply(this, arguments);
      if (attr.kind === 'belongsTo') {
        switch (model.modelName + '+' + bindingPath) {
          case 'ember-flexberry-dummy-vote+author':
            cellComponent.componentProperties = {
              choose: 'showLookupDialog',
              remove: 'removeLookupValue',
              displayAttributeName: 'name',
              required: true,
              relationName: 'author',
              projection: 'ApplicationUserL',
              autocomplete: true
            };
            break;

          case 'ember-flexberry-dummy-comment+author':
            cellComponent.componentProperties = {
              choose: 'showLookupDialog',
              remove: 'removeLookupValue',
              displayAttributeName: 'name',
              required: true,
              relationName: 'author',
              projection: 'ApplicationUserL',
              autocomplete: true
            };
            break;

        }
      }

      return cellComponent;
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/lock-services-editor-view-list', ['exports', 'ember-flexberry/controllers/list-form', 'dummy/mixins/list-form-controller-operations-indication'], function (exports, _emberFlexberryControllersListForm, _dummyMixinsListFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend(_dummyMixinsListFormControllerOperationsIndication['default'], {
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-edit'
     */
    editFormRoute: 'components-examples/flexberry-objectlistview/lock-services-editor-view-edit',

    exportExcelProjection: 'SuggestionL'
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/object-list-view-resize', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({

    /**
      Flag indicates that component have to check on model changes and display it.
       @property searchForContentChange
      @type Boolean
      @default true
    */
    searchForContentChange: true,

    actions: {
      addRecord: function addRecord() {
        var store = this.get('store');
        var model = this.get('model');
        var newRecord = store.createRecord('ember-flexberry-dummy-suggestion', {
          text: 'modelRecord'
        });
        model.addObject(newRecord);
      }
    }

  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/on-edit-form', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-application-user-edit'
     */
    editFormRoute: 'components-examples/flexberry-objectlistview/on-edit-form/user'
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/on-edit-form/suggestion', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication', 'ember-flexberry/mixins/flexberry-objectlistview-on-edit-form-controller', 'ember-flexberry-data'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication, _emberFlexberryMixinsFlexberryObjectlistviewOnEditFormController, _emberFlexberryData) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsFlexberryObjectlistviewOnEditFormController['default'], _emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {
    /**
      Route name for transition after close edit form.
       @property parentRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-list'
     */
    parentRoute: 'components-examples/flexberry-objectlistview/on-edit-form',

    /**
      Name of model.comments edit route.
       @property commentsEditRoute
      @type String
      @default 'ember-flexberry-dummy-comment-edit'
     */
    commentsEditRoute: 'ember-flexberry-dummy-comment-edit',

    folvModelName: 'ember-flexberry-dummy-localized-suggestion-type',
    folvProjection: 'LocalizedSuggestionTypeE',

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr, bindingPath, model) {
      var cellComponent = this._super.apply(this, arguments);
      if (_ember['default'].isNone(model)) {
        return cellComponent;
      }

      if (attr.kind === 'belongsTo') {
        switch (model.modelName + '+' + bindingPath) {
          case 'ember-flexberry-dummy-vote+author':
            cellComponent.componentProperties = {
              choose: 'showLookupDialog',
              remove: 'removeLookupValue',
              displayAttributeName: 'name',
              required: true,
              relationName: 'author',
              projection: 'ApplicationUserL',
              autocomplete: true
            };
            break;

          case 'ember-flexberry-dummy-comment+author':
            cellComponent.componentProperties = {
              choose: 'showLookupDialog',
              remove: 'removeLookupValue',
              displayAttributeName: 'name',
              required: true,
              relationName: 'author',
              projection: 'ApplicationUserL',
              autocomplete: true
            };
            break;

        }
      } else if (attr.kind === 'attr') {
        switch (model.modelName + '+' + bindingPath) {
          case 'ember-flexberry-dummy-vote+author.eMail':
            cellComponent.componentProperties = {
              readonly: true
            };
        }
      }

      return cellComponent;
    },

    objectListViewLimitPredicate: function objectListViewLimitPredicate(options) {
      var methodOptions = _ember['default'].merge({
        modelName: undefined,
        projectionName: undefined,
        params: undefined
      }, options);

      if (methodOptions.modelName === this.get('folvModelName') && methodOptions.projectionName === this.get('folvProjection')) {
        var id = this.get('model.type.id');
        var limitFunction = new _emberFlexberryData.Query.SimplePredicate('suggestionType', _emberFlexberryData.Query.FilterOperator.Eq, id);
        return limitFunction;
      }

      return undefined;
    },

    customFolvContentObserver: _ember['default'].observer('model', 'model.type', 'perPage', 'page', 'sorting', 'filter', 'filters', function () {

      _ember['default'].run.scheduleOnce('afterRender', this, this.getCustomContent);
    })
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/on-edit-form/user', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/flexberry-objectlistview-on-edit-form-controller', 'ember-flexberry/mixins/edit-form-controller-operations-indication', 'ember-flexberry-data/query/predicate'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberFlexberryMixinsFlexberryObjectlistviewOnEditFormController, _emberFlexberryMixinsEditFormControllerOperationsIndication, _emberFlexberryDataQueryPredicate) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsFlexberryObjectlistviewOnEditFormController['default'], _emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {
    /**
     Route name for transition after close edit form.
      @property parentRoute
     @type String
     @default 'ember-flexberry-dummy-application-user-list'
    */
    parentRoute: 'components-examples/flexberry-objectlistview/on-edit-form',

    store: _ember['default'].inject.service(),

    getCellComponent: null,

    /**
      Name of related to FOLV edit form route.
       @property folvEditFormRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-type-edit'
     */
    folvEditFormRoute: 'ember-flexberry-dummy-suggestion-type-edit',

    /**
      Name of FOLV model.
       @property folvModelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-type'
     */
    folvModelName: 'ember-flexberry-dummy-suggestion-type',

    /**
      Name of FOLV projection.
       @property folvProjection
      @type String
      @default 'SuggestionTypeL'
     */
    folvProjection: 'SuggestionTypeL',

    objectListViewLimitPredicate: function objectListViewLimitPredicate(options) {
      var methodOptions = _ember['default'].merge({
        modelName: undefined,
        projectionName: undefined,
        params: undefined
      }, options);

      if (methodOptions.modelName === this.get('folvModelName') && methodOptions.projectionName === this.get('folvProjection') && !this.get('inHierarchicalMode')) {
        var limitFunction = new _emberFlexberryDataQueryPredicate.ComplexPredicate('or', new _emberFlexberryDataQueryPredicate.StringPredicate('name').contains('1'), new _emberFlexberryDataQueryPredicate.StringPredicate('name').contains('Type'));
        return limitFunction;
      }

      return undefined;
    },

    /**
      Property to form array of special structures of custom user buttons.
       @property customButtons
      @type Array
     */
    customButtons: _ember['default'].computed('i18n.locale', function () {
      var i18n = this.get('i18n');
      return [{
        buttonName: i18n.t('forms.components-examples.flexberry-objectlistview.on-edit-form.add-button-name'),
        buttonAction: 'userButtonAddAction',
        buttonClasses: 'my-add-user-button add-click-button positive'
      }];
    }),

    actions: {
      /**
        Handler for click on custom user button.
         @method userButtonAddAction
       */
      userButtonAddAction: function userButtonAddAction() {
        var thisUrl = this.get('target.url');
        this.transitionToRoute(this.get('folvEditFormRoute') + '.new').then(function (newRoute) {
          newRoute.controller.set('parentRoute', thisUrl);
        });
      },

      componentForFilter: function componentForFilter(type, relation) {
        switch (type) {
          case 'string':
            return { name: 'flexberry-textbox', properties: { 'class': 'compact fluid' } };
          default:
            return {};
        }
      },

      conditionsByType: function conditionsByType(type) {
        switch (type) {
          case 'file':
            return null;

          case 'date':
          case 'number':
            return ['eq', 'neq', 'le', 'ge'];

          case 'string':
            return ['eq', 'neq', 'like'];

          case 'boolean':
            return ['eq'];

          default:
            return ['eq', 'neq'];
        }
      }
    }

  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {
    /**
      Route name for transition after close edit form.
       @property parentRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-list'
     */
    parentRoute: 'components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-list',

    /**
      Name of model.comments edit route.
       @property commentsEditRoute
      @type String
      @default 'ember-flexberry-dummy-comment-edit'
     */
    commentsEditRoute: 'ember-flexberry-dummy-comment-edit',

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr, bindingPath, model) {
      var cellComponent = this._super.apply(this, arguments);
      if (attr.kind === 'belongsTo') {
        switch (model.modelName + '+' + bindingPath) {
          case 'ember-flexberry-dummy-vote+author':
            cellComponent.componentProperties = {
              choose: 'showLookupDialog',
              remove: 'removeLookupValue',
              displayAttributeName: 'name',
              required: true,
              relationName: 'author',
              projection: 'ApplicationUserL',
              autocomplete: true
            };
            break;

          case 'ember-flexberry-dummy-comment+author':
            cellComponent.componentProperties = {
              choose: 'showLookupDialog',
              remove: 'removeLookupValue',
              displayAttributeName: 'name',
              required: true,
              relationName: 'author',
              projection: 'ApplicationUserL',
              autocomplete: true
            };
            break;

        }
      }

      return cellComponent;
    },

    actions: {
      /**
        This method set controller.limitFunction for olv window.
        @method onButtonClick
       */
      onButtonClick: function onButtonClick() {
        this.transitionToRoute(this.parentRoute, { queryParams: { perPage: 1 } });
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-list', ['exports', 'ember-flexberry/controllers/list-form', 'dummy/mixins/list-form-controller-operations-indication'], function (exports, _emberFlexberryControllersListForm, _dummyMixinsListFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend(_dummyMixinsListFormControllerOperationsIndication['default'], {
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-edit'
     */
    editFormRoute: 'components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-edit',

    exportExcelProjection: 'SuggestionL',

    /**
      Cout of list loading.
       @property loadCount
      @type Int
    */
    loadCount: 0
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/selected-rows', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-type-edit'
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-type-edit',

    /**
      Name of compoent.
       @property componentName
      @type String
      @default 'suggestionTypeLocalizedTypesObjectListView'
     */
    componentName: 'suggestionTypeLocalizedTypesObjectListView',

    /**
      Count selected rows.
       @property countSelectedRows
      @type Number
      @default 0
    */
    countSelectedRows: 0,

    actions: {
      configurateSelectedRows: function configurateSelectedRows(selectedRecords) {
        if (this.get('allSelect')) {
          this.set('countSelectedRows', this.model.meta.count);
        } else {
          this.set('countSelectedRows', selectedRecords.length);
        }
      }
    },

    _selectAll: function _selectAll(componentName, selectAllParameter, skipConfugureRows) {
      if (componentName === this.get('componentName')) {
        this.set('allSelect', selectAllParameter);
      }
    },

    init: function init() {
      this.get('objectlistviewEventsService').on('updateSelectAll', this, this._selectAll);
      this._super.apply(this, arguments);
    },

    willDestroyElement: function willDestroyElement() {
      this.get('objectlistviewEventsService').off('updateSelectAll', this, this._selectAll);
      this._super.apply(this, arguments);
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/settings-example', ['exports', 'ember', 'ember-flexberry/controllers/list-form', 'ember-i18n'], function (exports, _ember, _emberFlexberryControllersListForm, _emberI18n) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of selected detail's model projection.
       @property _projectionName
      @type String
      @private
     */
    _projectionName: 'SuggestionL',

    /**
      Array of available model projections.
       @property _projections
      @type Object[]
     */
    _projections: _ember['default'].computed('model.[]', function () {
      var records = this.get('model');
      var modelClass = _ember['default'].get(records, 'length') > 0 ? _ember['default'].get(records, 'firstObject').constructor : {};

      return _ember['default'].get(modelClass, 'projections');
    }),

    /**
      Array of available model projections names.
       @property _projectionsNames
      @type String[]
     */
    _projectionsNames: _ember['default'].computed('_projections.[]', function () {
      var projections = this.get('_projections');
      if (_ember['default'].isNone(projections)) {
        return [];
      }

      return Object.keys(projections);
    }),

    /**
      Model projection for 'flexberry-objectlistview' component 'modelProjection' property.
       @property projection
      @type Object
     */
    projection: _ember['default'].computed('_projections.[]', '_projectionName', function () {
      var projectionName = this.get('_projectionName');
      if (_ember['default'].isBlank(projectionName)) {
        return null;
      }

      var projections = this.get('_projections');
      if (_ember['default'].isNone(projections) && this.get('model.content') === undefined) {
        return {}; // модель не загрузилась ещё, свойство пересчитывается, потому что грузится страница.
      }

      if (_ember['default'].isNone(projections)) {
        return null;
      }

      return projections[projectionName];
    }),

    /**
      Name of related edit form route (for 'flexberry-objectlistview' component 'editFormRoute' property).
       @property editFormRoute
      @type String
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-edit',

    /**
      Text for 'flexberry-objectlistview' component 'placeholder' property.
       @property placeholder
      @type String
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-objectlistview.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
    **/
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-objectlistview.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-objectlistview.placeholder'));
      }
    }),

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Flag for 'flexberry-objectlistview' component 'colsConfigButton' property.
       @property colsConfigButton
      @type Boolean
     */
    colsConfigButton: true,

    /**
      Flag for 'flexberry-objectlistview' component 'exportExcelButton' property.
       @property exportExcelButton
      @type Boolean
     */
    exportExcelButton: false,

    /**
      Flag for 'flexberry-objectlistview' component 'tableStriped' property.
       @property tableStriped
      @type Boolean
     */
    tableStriped: true,

    /**
      Flag for 'flexberry-objectlistview' component 'allowColumnResize' property.
       @property allowColumnResize
      @type Boolean
     */
    allowColumnResize: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'createNewButton' mode or not.
       @property createNewButton
      @type Boolean
     */
    createNewButton: false,

    /**
      Flag for 'flexberry-objectlistview' component 'deleteButton' property.
       @property deleteButton
      @type Boolean
     */
    deleteButton: false,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showFiltersInModal' mode or not.
       @property showFiltersInModal
      @type Boolean
      @default false
    */
    showFiltersInModal: false,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'enableFilters' mode or not.
       @property enableFilters
      @type Boolean
     */
    enableFilters: false,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'filterButton' mode or not.
       @property filterButton
      @type Boolean
     */
    filterButton: false,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'refreshButton' mode or not.
       @property refreshButton
      @type Boolean
     */
    refreshButton: false,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'defaultSortingButton' mode or not
       @property defaultSortingButton
      @type Boolean
      @default true
    */
    defaultSortingButton: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showCheckBoxInRow' mode or not.
       @property showCheckBoxInRow
      @type Boolean
     */
    showCheckBoxInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showDeleteButtonInRow' mode or not.
       @property showDeleteButtonInRow
      @type Boolean
     */
    showDeleteButtonInRow: false,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showEditButtonInRow' mode or not.
       @property showEditButtonInRow
      @type Boolean
     */
    showEditButtonInRow: false,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showPrototypeButtonInRow' mode or not.
       @property showPrototypeButtonInRow
      @type Boolean
     */
    showPrototypeButtonInRow: false,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showDeleteMenuItemInRow' mode or not.
       @property showDeleteMenuItemInRow
      @type Boolean
     */
    showDeleteMenuItemInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showEditMenuItemInRow' mode or not.
       @property showEditMenuItemInRow
      @type Boolean
     */
    showEditMenuItemInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showPrototypeMenuItemInRow' mode or not.
       @property showPrototypeMenuItemInRow
      @type Boolean
     */
    showPrototypeMenuItemInRow: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'rowClickable' mode or not.
       @property rowClickable
      @type Boolean
     */
    rowClickable: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'orderable' mode or not.
       @property orderable
      @type Boolean
     */
    orderable: true,

    /**
      ext for 'flexberry-objectlistview' component 'singleColumnHeaderTitle' property.
       @property singleColumnHeaderTitle
      @type String
     */
    singleColumnHeaderTitle: undefined,

    /**
      'Flexberry-objectlistview' component's 'minAutoColumnWidth' property.
       @property minAutoColumnWidth
      @type Number
     */
    minAutoColumnWidth: 150,

    /**
      Flag for 'flexberry-objectlistview' component 'columnsWidthAutoresize' property.
       @property columnsWidthAutoresize
      @type Boolean
     */
    columnsWidthAutoresize: false,

    /**
      Flag indicate when available the hierarchical mode.
       @property availableHierarchicalMode
      @type Boolean
      @default false
      @private
    */
    availableHierarchicalMode: false,

    /**
      Flag indicate when available the collapse/expand all hierarchies mode.
       @property availableCollExpandMode
      @type Boolean
      @default false
      @private
    */
    availableCollExpandMode: false,

    /**
      Flag for 'flexberry-objectlistview' component 'fixedHeader' property.
       @property fixedHeader
      @type Boolean
     */
    fixedHeader: false,

    /**
      Flag for 'flexberry-objectlistview' component 'advLimitButton' property.
       @property fixedHeader
      @type Boolean
     */
    advLimitButton: false,

    /**
      Current records.
       @property _records
      @type Object[]
      @protected
      @readOnly
    */
    records: [],

    /**
      Template text for 'flexberry-objectlistview' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-objectlistview<br>' + '  componentName=\"SuggestionsObjectListView\"<br>' + '  colsConfigButton=colsConfigButton<br>' + '  exportExcelButton=exportExcelButton<br>' + '  content=model<br>' + '  modelName=\"ember-flexberry-dummy-suggestion\"<br>' + '  editFormRoute=\"ember-flexberry-dummy-suggestion\"<br>' + '  modelProjection=projection<br>' + '  placeholder=placeholder<br>' + '  readonly=readonly<br>' + '  tableStriped=tableStriped<br>' + '  allowColumnResize=allowColumnResize<br>' + '  minAutoColumnWidth=minAutoColumnWidth<br>' + '  columnsWidthAutoresize=columnsWidthAutoresize<br>' + '  createNewButton=createNewButton<br>' + '  deleteButton=deleteButton<br>' + '  showFiltersInModal=showFiltersInModal<br>' + '  enableFilters=enableFilters<br>' + '  filters=filters<br>' + '  applyFilters=(action "applyFilters")<br>' + '  resetFilters=(action "resetFilters")<br>' + '  refreshButton=refreshButton<br>' + '  defaultSortingButton=defaultSortingButton<br>' + '  filterButton=filterButton<br>' + '  showCheckBoxInRow=showCheckBoxInRow<br>' + '  showEditButtonInRow=showEditButtonInRow<br>' + '  showPrototypeButtonInRow=showPrototypeButtonInRow<br>' + '  showDeleteButtonInRow=showDeleteButtonInRow<br>' + '  showEditMenuItemInRow=showEditMenuItemInRow<br>' + '  showPrototypeMenuItemInRow=showPrototypeMenuItemInRow<br>' + '  showDeleteMenuItemInRow=showDeleteMenuItemInRow<br>' + '  rowClickable=rowClickable<br>' + '  orderable=orderable<br>' + '  filterByAnyMatch=(action \"filterByAnyMatch\"")<br>' + '  filterText=filter<br>' + '  filterByAnyWord=filterByAnyWord<br>' + '  filterByAllWords=filterByAllWords<br>' + '  sorting=computedSorting<br>' + '  sortByColumn=(action \"sortByColumn\")<br>' + '  addColumnToSorting=(action \"addColumnToSorting\")<br>' + '  _availableHierarchicalMode=availableHierarchicalMode<br>' + '  availableCollExpandMode=availableCollExpandMode<br>' + '  pages=pages<br>' + '  perPageValue=perPageValue<br>' + '  perPageValues=perPageValues<br>' + '  hasPreviousPage=hasPreviousPage<br>' + '  hasNextPage=hasNextPage<br>' + '  previousPage=(action \"previousPage\")<br>' + '  gotoPage=(action \"gotoPage\")<br>' + '  nextPage=(action \"nextPage\")<br>' + '  fixedHeader=fixedHeader<br>' + '  advLimitButton=advLimitButton<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', 'model.content', function () {
      var componentSettingsMetadata = _ember['default'].A();

      componentSettingsMetadata.pushObject({
        settingName: 'componentName',
        settingType: 'string',
        settingValue: 'SuggestionsObjectListView',
        settingDefaultValue: undefined,
        settingIsWithoutUI: true
      });
      componentSettingsMetadata.pushObject({
        settingName: 'colsConfigButton',
        settingType: 'boolean',
        settingValue: true,
        settingDefaultValue: true,
        bindedControllerPropertieName: 'colsConfigButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'exportExcelButton',
        settingType: 'boolean',
        settingValue: false,
        settingDefaultValue: false,
        bindedControllerPropertieName: 'exportExcelButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'content',
        settingType: 'hasManyArray',
        settingValue: this.get('model'),
        settingDefaultValue: null,
        settingIsWithoutUI: true,
        bindedControllerPropertieName: 'model'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'modelProjection',
        settingType: 'enumeration',
        settingAvailableItems: this.get('_projectionsNames'),
        settingDefaultValue: null,
        bindedControllerPropertieName: '_projectionName',
        bindedControllerPropertieDisplayName: 'projection'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'modelName',
        settingType: 'string',
        settingValue: 'ember-flexberry-dummy-suggestion',
        settingDefaultValue: undefined,
        settingIsWithoutUI: true
      });
      componentSettingsMetadata.pushObject({
        settingName: 'placeholder',
        settingType: 'string',
        settingDefaultValue: this.get('i18n').t('components.flexberry-objectlistview.placeholder'),
        bindedControllerPropertieName: 'placeholder'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'tableStriped',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'tableStriped'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'allowColumnResize',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'allowColumnResize'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'minAutoColumnWidth',
        settingType: 'number',
        settingDefaultValue: 150,
        bindedControllerPropertieName: 'minAutoColumnWidth'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'columnsWidthAutoresize',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'columnsWidthAutoresize'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'createNewButton',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'createNewButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'deleteButton',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'deleteButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showFiltersInModal',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showFiltersInModal'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'enableFilters',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'enableFilters'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'filterButton',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'filterButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'filterByAnyWord',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'filterByAnyWord'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'filterByAllWords',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'filterByAllWords'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'refreshButton',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'refreshButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'defaultSortingButton',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'defaultSortingButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showCheckBoxInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showCheckBoxInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showEditButtonInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showEditButtonInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showPrototypeButtonInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showPrototypeButtonInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showDeleteButtonInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showDeleteButtonInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showEditMenuItemInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showEditMenuItemInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showPrototypeMenuItemInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showPrototypeMenuItemInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showDeleteMenuItemInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showDeleteMenuItemInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'rowClickable',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'rowClickable'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'orderable',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'orderable'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'singleColumnHeaderTitle',
        settingType: 'string',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'singleColumnHeaderTitle'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'availableHierarchicalMode',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'availableHierarchicalMode'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'availableCollExpandMode',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'availableCollExpandMode'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'fixedHeader',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'fixedHeader'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'advLimitButton',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'advLimitButton'
      });

      return componentSettingsMetadata;
    }),

    _enableFilters: _ember['default'].observer('enableFilters', function () {
      if (this.get('enableFilters')) {
        this.set('refreshButton', true);
      }
    })
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example', ['exports', 'ember', 'ember-flexberry/controllers/list-form'], function (exports, _ember, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Property to count clicks on user button.
       @property clickCounter
      @type Number
      @default 1
    */
    clickCounter: 1,

    /**
      Property to show user message after click on user button.
       @property messageForUser
      @type String
    */
    messageForUser: undefined,

    /**
      The state of the hi button, is disabled if `true` or enabled if `false`.
       @property hiButtonState
      @type Boolean
      @default true
    */
    hiButtonState: true,

    /**
      Property to form array of special structures of custom user buttons.
       @property customButtons
      @type Array
    */
    customButtons: _ember['default'].computed('i18n.locale', 'hiButtonState', function () {
      var i18n = this.get('i18n');
      var hiButtonState = this.get('hiButtonState');
      var togglerButtonType = hiButtonState ? 'enable' : 'disable';
      var hiButtonText = i18n.t('forms.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.custom-button-name');
      var togglerButtonText = i18n.t('forms.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.' + togglerButtonType + '-button-name');
      return [{
        buttonName: hiButtonText,
        buttonAction: 'userButtonActionTest',
        buttonClasses: 'test-click-button',
        iconClasses: 'paw icon',
        buttonTitle: hiButtonText,
        disabled: hiButtonState
      }, {
        buttonName: togglerButtonText,
        buttonAction: 'toggleHiButton',
        buttonClasses: 'toggle-hi-button',
        buttonTitle: togglerButtonText,
        disabled: false
      }];
    }),

    customButtonsInRow: _ember['default'].computed('i18n.locale', function () {
      var i18n = this.get('i18n');
      return [{
        buttonName: i18n.t('forms.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.custom-row-button-name'),
        buttonAction: 'userButtonInRowActionTest',
        buttonClasses: 'icon',
        buttonIcon: 'bug icon',
        buttonTitle: i18n.t('forms.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.custom-row-button-name')
      }];
    }),

    actions: {
      /**
        Handler for click on custom user button.
         @method actions.userButtonActionTest
      */
      userButtonActionTest: function userButtonActionTest() {
        var i18n = this.get('i18n');
        var clickCounter = this.get('clickCounter');
        this.set('clickCounter', clickCounter + 1);
        this.set('messageForUser', i18n.t('forms.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.custom-message').string + ' ' + clickCounter);
      },

      /**
        Toggles the state of the hi button.
         @method actions.toggleHiButton
      */
      toggleHiButton: function toggleHiButton() {
        this.toggleProperty('hiButtonState');
      },

      /**
        Handler for click on custom user button in row.
         @method userButtonActionTest
      */
      userButtonInRowActionTest: function userButtonInRowActionTest(model) {
        this.set('modelFromClickedRow', model);
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-simpledatetime/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    /**
      Datetime picker type.
       @property type
      @type String
      @default 'datetime-local'
    */
    type: 'datetime-local',

    /**
      Enabled default date value.
       @property _value
      @type Boolean
      @default false
      @private
    */
    _value: false,

    /**
      Store real date value.
       @property __value
      @type Date
    */
    __value: undefined,

    /**
      Instead of `model.date` value.
       @property value
      @type Date
    */
    value: _ember['default'].computed('_value', '__value', {
      get: function get() {
        var value = this.get('__value');
        if (value === undefined) {
          return this.get('_value') ? new Date() : undefined;
        } else {
          return value;
        }
      },
      set: function set(key, value) {
        if (typeof value === 'boolean') {
          return this.set('_value', value) ? new Date() : undefined;
        } else {
          return this.set('__value', value);
        }
      }
    }),

    /**
      Enabled min date value.
       @property _min
      @type Boolean
      @default true
      @private
    */
    _min: true,

    /**
      Minimum value of this component.
       @property min
      @type Date
      @default 'seven days under'
    */
    min: _ember['default'].computed('_min', {
      get: function get() {
        var min = new Date();
        min.setDate(min.getDate() - 7);
        return this.get('_min') ? min : null;
      },
      set: function set(key, value) {
        var min = new Date();
        min.setDate(min.getDate() - 7);
        return this.set('_min', value) ? min : null;
      }
    }),

    /**
      Enabled max date value.
       @property _max
      @type Boolean
      @default true
      @private
    */
    _max: true,

    /**
      Maximum value of this component.
       @property max
      @type Date
      @default 'seven days older'
     */
    max: _ember['default'].computed('_max', {
      get: function get() {
        var max = new Date();
        max.setDate(max.getDate() + 7);
        return this.get('_max') ? max : null;
      },
      set: function set(key, value) {
        var max = new Date();
        max.setDate(max.getDate() + 7);
        return this.set('_max', value) ? max : null;
      }
    }),

    /**
      Flag indicates whether 'flexberry-simpledatetime' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Flag indicates whether 'flexberry-simpledatetime' component has remove button or not.
       @property removeButton
      @type Boolean
      @default true
     */
    removeButton: true,

    /**
      Template text for 'flexberry-simpledatetime' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-simpledatetime<br>' + '  type=type<br>' + '  removeButton=removeButton<br>' + '  value=model.date<br>' + '  min=min<br>' + '  max=max<br>' + '  readonly=readonly<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();

      componentSettingsMetadata.pushObject({
        settingName: 'type',
        settingType: 'enumeration',
        settingAvailableItems: ['datetime-local', 'datetime', 'date'],
        settingDefaultValue: 'datetime-local',
        bindedControllerPropertieName: 'type',
        bindedControllerPropertieDisplayName: 'type'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'removeButton',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'removeButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'min',
        settingType: 'boolean',
        settingDefaultValue: this.get('min'),
        bindedControllerPropertieName: 'min'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'max',
        settingType: 'boolean',
        settingDefaultValue: this.get('max'),
        bindedControllerPropertieName: 'max'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'value',
        settingType: 'boolean',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'value',
        bindedControllerPropertieDisplayName: 'model.date'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: 'false',
        bindedControllerPropertieName: 'readonly'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-simpleolv/configurate-rows', ['exports', 'ember', 'ember-flexberry/controllers/list-form'], function (exports, _ember, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of selected detail's model projection.
       @property _projectionName
      @type String
      @private
     */
    _projectionName: 'SuggestionL',

    /**
      Array of available model projections.
       @property _projections
      @type Object[]
     */
    _projections: _ember['default'].computed('model.[]', function () {
      var records = this.get('model');
      var modelClass = _ember['default'].get(records, 'length') > 0 ? _ember['default'].get(records, 'firstObject').constructor : {};

      return _ember['default'].get(modelClass, 'projections');
    }),

    /**
      Array of available model projections names.
       @property _projectionsNames
      @type String[]
     */
    _projectionsNames: _ember['default'].computed('_projections.[]', function () {
      var projections = this.get('_projections');
      if (_ember['default'].isNone(projections)) {
        return [];
      }

      return Object.keys(projections);
    }),

    /**
      Model projection for 'flexberry-simpleolv' component 'modelProjection' property.
       @property projection
      @type Object
     */
    projection: _ember['default'].computed('_projections.[]', '_projectionName', function () {
      var projectionName = this.get('_projectionName');
      if (_ember['default'].isBlank(projectionName)) {
        return null;
      }

      var projections = this.get('_projections');
      if (_ember['default'].isNone(projections)) {
        return null;
      }

      return projections[projectionName];
    }),

    /**
      Name of related edit form route (for 'flexberry-simpleolv' component 'editFormRoute' property).
       @property editFormRoute
      @type String
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-edit',

    /**
      Current records.
       @property _records
      @type Object[]
      @protected
      @readOnly
    */
    records: [],

    /**
      Configurate rows 'flexberry-simpleolv' component by address.
       @property configurateRowByAddress
      @type String
     */
    configurateRowByAddress: 'Street, 200',

    _configurateRowByAddress: _ember['default'].observer('configurateRowByAddress', function () {
      var _this = this;

      var rowConfig = { customClass: '' };

      this.get('records').forEach(function (record, index, records) {
        _this.send('configurateRow', rowConfig, record);
      });
    }),

    /**
      Template text for 'flexberry-simpleolv' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-simpleolv<br>' + '  configurateRow=(action \"configurateRow\")<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();

      componentSettingsMetadata.pushObject({
        settingName: 'configurateRowByAddress',
        settingType: 'string',
        settingDefaultValue: 'Street, 200',
        bindedControllerPropertieName: 'configurateRowByAddress'
      });

      return componentSettingsMetadata;
    }),

    actions: {
      /**
        Configurate rows on the condition.
      */
      configurateRow: function configurateRow(rowConfig, record) {
        if (record) {
          this.get('records').push(record);
        }

        if (record.get('address') === this.get('configurateRowByAddress')) {
          _ember['default'].set(rowConfig, 'customClass', 'positive ');
        } else {
          _ember['default'].set(rowConfig, 'customClass', 'negative ');
        }
      },

      /**
        Change attribute 2.
      */
      changeAttribute2: function changeAttribute2() {
        this.get('records')[1].set('address', 'Street, 200');
      }
    }

  });
});
define('dummy/controllers/components-examples/flexberry-simpleolv/custom-filter', ['exports', 'ember', 'ember-flexberry/controllers/list-form', 'ember-flexberry-data/utils/generate-unique-id'], function (exports, _ember, _emberFlexberryControllersListForm, _emberFlexberryDataUtilsGenerateUniqueId) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    filterByAnyWord: false,

    filterByAllWords: false,

    queryParams: ['filterCondition'],
    filterCondition: undefined,

    /**
      Observes current state of FilterCondition parameter
      & set right filter option after reload page.
       @method  _currentFilterCondition
      @private
    */
    _currentFilterCondition: _ember['default'].observer('filterCondition', function () {
      var filterCondition = this.get('filterCondition');
      if (filterCondition === 'or') {
        this.set('filterByAnyWord', true);
        this.set('filterByAllWords', false);
      } else if (filterCondition === 'and') {
        this.set('filterByAnyWord', false);
        this.set('filterByAllWords', true);
      }

      return filterCondition;
    }),

    customButtons: _ember['default'].computed('filterByAnyWord', 'filterByAllWords', 'i18n.locale', function () {
      var i18n = this.get('i18n');
      return [{
        buttonName: 'filterByAnyWord',
        buttonAction: 'toggleFilterByAnyWord',
        buttonClasses: this.get('filterByAnyWord') ? 'positive' : ''
      }, {
        buttonName: 'filterByAllWords',
        buttonAction: 'toggleFilterByAllWords',
        buttonClasses: this.get('filterByAllWords') ? 'positive' : ''
      }, {
        buttonName: i18n.t('forms.components-examples.flexberry-simpleolv.custom-filter.addObjects-button'),
        buttonAction: 'addObjects'
      }];
    }),

    actions: {
      toggleFilterByAnyWord: function toggleFilterByAnyWord() {
        this.toggleProperty('filterByAnyWord');
        if (this.get('filterByAnyWord')) {
          this.set('filterByAllWords', false);
        }
      },

      toggleFilterByAllWords: function toggleFilterByAllWords() {
        this.toggleProperty('filterByAllWords');
        if (this.get('filterByAllWords')) {
          this.set('filterByAnyWord', false);
        }
      },

      addObjects: function addObjects() {
        var _this = this;

        var store = this.get('store');

        var user1 = store.createRecord('ember-flexberry-dummy-application-user', {
          name: 'NameForTest',
          eMail: 'ya@.test',
          id: (0, _emberFlexberryDataUtilsGenerateUniqueId['default'])()
        });
        var type1 = store.createRecord('ember-flexberry-dummy-suggestion-type', {
          name: 'typeForTest',
          id: (0, _emberFlexberryDataUtilsGenerateUniqueId['default'])()
        });
        var user2 = store.createRecord('ember-flexberry-dummy-application-user', {
          name: 'Different NameForTest',
          eMail: 'ti@.test',
          id: (0, _emberFlexberryDataUtilsGenerateUniqueId['default'])()
        });
        var type2 = store.createRecord('ember-flexberry-dummy-suggestion-type', {
          name: 'Another typeForTest',
          id: (0, _emberFlexberryDataUtilsGenerateUniqueId['default'])()
        });

        var record1 = store.createRecord(this.get('modelName'), {
          address: 'TestingAddress',
          type: type1,
          author: user1,
          editor1: user2,
          id: (0, _emberFlexberryDataUtilsGenerateUniqueId['default'])()
        });
        var record2 = store.createRecord(this.get('modelName'), {
          address: '',
          type: type1,
          author: user2,
          editor1: user2,
          id: (0, _emberFlexberryDataUtilsGenerateUniqueId['default'])()
        });
        var record3 = store.createRecord(this.get('modelName'), {
          address: 'new address',
          type: type2,
          author: user1,
          editor1: user1,
          id: (0, _emberFlexberryDataUtilsGenerateUniqueId['default'])()
        });
        var record4 = store.createRecord(this.get('modelName'), {
          address: 'address with several words for testing',
          type: type2,
          author: user2,
          editor1: user1,
          id: (0, _emberFlexberryDataUtilsGenerateUniqueId['default'])()
        });

        store.batchUpdate([user1, type1, user2, type2, record1, record2, record3, record4]).then(function () {
          _this.send('refreshList', _this.get('componentName'));
        });
      },

      componentForFilter: function componentForFilter(type, relation) {
        switch (type) {
          case 'decimal':
            return { name: 'flexberry-textbox', properties: { 'class': 'compact fluid' } };
          default:
            return {};
        }
      },

      conditionsByType: function conditionsByType(type) {
        switch (type) {
          case 'file':
            return null;

          case 'date':
          case 'number':
            return ['eq', 'neq', 'le', 'ge'];

          case 'string':
            return ['eq', 'neq', 'like', 'empty'];

          case 'boolean':
            return ['eq'];

          default:
            return ['eq', 'neq'];
        }
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-simpleolv/limit-function-example', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Current predicate to limit accessible values for olv.
      @property firstLimitType
      @type BasePredicate
      @default undefined
     */
    firstLimitType: undefined,

    /**
      Current predicate to limit accessible values for olv.
      @property secondLimitType
      @type BasePredicate
      @default undefined
     */
    secondLimitType: undefined,

    /**
      Current predicate to limit accessible values for olv.
      @property secondLimitType
      @type BasePredicate
      @default undefined
     */
    limitFunction: undefined,

    actions: {
      /**
        This method set controller.limitFunction for olv window.
        @method firstLimitFunction
       */
      firstLimitFunction: function firstLimitFunction() {
        this.set('limitFunction', this.get('firstLimitType'));
        this.send('refreshModel');
      },

      /**
        This method set controller.limitFunction for olv window.
        @method secondLimitFunction
       */
      secondLimitFunction: function secondLimitFunction() {
        this.set('limitFunction', this.get('secondLimitType'));
        this.send('refreshModel');
      },

      /**
        This method set controller.limitFunction for olv window.
        @method clearLimitFunction
       */
      clearLimitFunction: function clearLimitFunction() {
        this.set('limitFunction', undefined);
        this.send('refreshModel');
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-simpleolv/on-edit-form', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-application-user-edit'
     */
    editFormRoute: 'components-examples/flexberry-simpleolv/on-edit-form/user'
  });
});
define('dummy/controllers/components-examples/flexberry-simpleolv/on-edit-form/user', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication', 'ember-flexberry-data'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication, _emberFlexberryData) {
  var Builder = _emberFlexberryData.Query.Builder;
  var StringPredicate = _emberFlexberryData.Query.StringPredicate;
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {
    /**
     Route name for transition after close edit form.
      @property parentRoute
     @type String
     @default 'ember-flexberry-dummy-application-user-list'
    */
    parentRoute: 'components-examples/flexberry-simpleolv/on-edit-form',

    store: _ember['default'].inject.service(),

    getCellComponent: null,

    perPageValues: [],

    customContent: _ember['default'].computed('model.name', function () {
      var name = this.get('model.name');
      var builder = new Builder(this.get('store')).from('ember-flexberry-dummy-suggestion').selectByProjection('SuggestionL').where(new StringPredicate('author.name').contains(name));
      return this.get('store').query('ember-flexberry-dummy-suggestion', builder.build());
    })
  });
});
define('dummy/controllers/components-examples/flexberry-simpleolv/selected-rows', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-type-edit'
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-type-edit',

    /**
      Name of compoent.
       @property componentName
      @type String
      @default 'suggestionTypeLocalizedTypesObjectListView'
     */
    componentName: 'SOLVsuggestionTypeLocalizedTypesObjectListView',

    /**
      Count selected rows.
       @property countSelectedRows
      @type Number
      @default 0
    */
    countSelectedRows: 0,

    actions: {
      configurateSelectedRows: function configurateSelectedRows(selectedRecords) {
        if (this.get('allSelect')) {
          this.set('countSelectedRows', this.model.meta.count);
        } else {
          this.set('countSelectedRows', selectedRecords.length);
        }
      }
    },

    _selectAll: function _selectAll(componentName, selectAllParameter, skipConfugureRows) {
      if (componentName === this.get('componentName')) {
        this.set('allSelect', selectAllParameter);
      }
    },

    init: function init() {
      this._super.apply(this, arguments);
      this.get('objectlistviewEventsService').on('updateSelectAll', this, this._selectAll);
    },

    willDestroyElement: function willDestroyElement() {
      this.get('objectlistviewEventsService').off('updateSelectAll', this, this._selectAll);
      this._super.apply(this, arguments);
    }
  });
});
define('dummy/controllers/components-examples/flexberry-simpleolv/settings-example', ['exports', 'ember', 'ember-flexberry/controllers/list-form', 'ember-i18n'], function (exports, _ember, _emberFlexberryControllersListForm, _emberI18n) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of selected detail's model projection.
       @property _projectionName
      @type String
      @private
     */
    _projectionName: 'SuggestionL',

    /**
      Name of related edit form route (for 'flexberry-simpleolv' component 'editFormRoute' property).
       @property editFormRoute
      @type String
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-edit',

    /**
      Text for 'flexberry-simpleolv' component 'placeholder' property.
       @property placeholder
      @type String
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-objectlistview.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
    **/
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-objectlistview.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-objectlistview.placeholder'));
      }
    }),

    /**
      Flag: indicates whether 'flexberry-simpleolv' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Flag for 'flexberry-objectlistview' component 'colsConfigButton' property.
       @property colsConfigButton
      @type Boolean
     */
    colsConfigButton: true,

    /**
      Flag for 'flexberry-objectlistview' component 'exportExcelButton' property.
       @property exportExcelButton
      @type Boolean
     */
    exportExcelButton: false,

    /**
      Flag for 'flexberry-simpleolv' component 'tableStriped' property.
       @property tableStriped
      @type Boolean
     */
    tableStriped: true,

    /**
      Flag for 'flexberry-simpleolv' component 'allowColumnResize' property.
       @property allowColumnResize
      @type Boolean
     */
    allowColumnResize: true,

    /**
      Flag for 'flexberry-objectlistview' component 'fixedHeader' property.
       @property fixedHeader
      @type Boolean
     */
    fixedHeader: false,

    /**
      Flag: indicates whether 'flexberry-simpleolv' component is in 'createNewButton' mode or not.
       @property createNewButton
      @type Boolean
     */
    createNewButton: false,

    /**
      Flag for 'flexberry-simpleolv' component 'deleteButton' property.
       @property deleteButton
      @type Boolean
     */
    deleteButton: false,

    /**
      Flag: indicates whether 'flexberry-simpleolv' component is in 'enableFilters' mode or not.
       @property enableFilters
      @type Boolean
     */
    enableFilters: true,

    /**
      Flag: indicates whether 'flexberry-simpleolv' component is in 'filterButton' mode or not.
       @property filterButton
      @type Boolean
     */
    filterButton: false,

    /**
      Flag: indicates whether 'flexberry-simpleolv' component is in 'refreshButton' mode or not.
       @property refreshButton
      @type Boolean
     */
    refreshButton: false,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'defaultSortingButton' mode or not
       @property defaultSortingButton
      @type Boolean
      @default true
    */
    defaultSortingButton: true,

    /**
      Flag: indicates whether 'flexberry-simpleolv' component is in 'showCheckBoxInRow' mode or not.
       @property showCheckBoxInRow
      @type Boolean
     */
    showCheckBoxInRow: true,

    /**
      Flag: indicates whether 'flexberry-simpleolv' component is in 'showDeleteButtonInRow' mode or not.
       @property showDeleteButtonInRow
      @type Boolean
     */
    showDeleteButtonInRow: false,

    /**
      Flag: indicates whether 'flexberry-simpleolv' component is in 'showEditButtonInRow' mode or not.
       @property showEditButtonInRow
      @type Boolean
     */
    showEditButtonInRow: false,

    /**
      Flag: indicates whether 'flexberry-simpleolv' component is in 'showEditMenuItemInRow' mode or not.
       @property showEditMenuItemInRow
      @type Boolean
     */
    showEditMenuItemInRow: false,

    /**
      Flag: indicates whether 'flexberry-simpleolv' component is in 'showDeleteMenuItemInRow' mode or not.
       @property showDeleteMenuItemInRow
      @type Boolean
     */
    showDeleteMenuItemInRow: false,

    /**
      Flag: indicates whether 'flexberry-simpleolv' component is in 'rowClickable' mode or not.
       @property rowClickable
      @type Boolean
     */
    rowClickable: true,

    /**
      Flag: indicates whether 'flexberry-simpleolv' component is in 'orderable' mode or not.
       @property orderable
      @type Boolean
     */
    orderable: true,

    /**
      ext for 'flexberry-simpleolv' component 'singleColumnHeaderTitle' property.
       @property singleColumnHeaderTitle
      @type String
     */
    singleColumnHeaderTitle: undefined,

    /**
      'Flexberry-objectlistview' component's 'minAutoColumnWidth' property.
       @property minAutoColumnWidth
      @type Number
     */
    minAutoColumnWidth: 150,

    /**
      Flag for 'flexberry-objectlistview' component 'columnsWidthAutoresize' property.
       @property columnsWidthAutoresize
      @type Boolean
     */
    columnsWidthAutoresize: false,

    /**
      Current records.
       @property _records
      @type Object[]
      @protected
      @readOnly
    */
    records: [],

    /**
      Template text for 'flexberry-simpleolv' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-simpleolv<br>' + '  componentName=\"SuggestionsObjectListView\"<br>' + '  colsConfigButton=colsConfigButton<br>' + '  exportExcelButton=exportExcelButton<br>' + '  content=model<br>' + '  modelName=\"ember-flexberry-dummy-suggestion\"<br>' + '  editFormRoute=\"ember-flexberry-dummy-suggestion\"<br>' + '  modelProjection=modelProjection<br>' + '  placeholder=placeholder<br>' + '  readonly=readonly<br>' + '  tableStriped=tableStriped<br>' + '  allowColumnResize=allowColumnResize<br>' + '  minAutoColumnWidth=minAutoColumnWidth<br>' + '  columnsWidthAutoresize=columnsWidthAutoresize<br>' + '  createNewButton=createNewButton<br>' + '  deleteButton=deleteButton<br>' + '  enableFilters=enableFilters<br>' + '  filters=filters<br>' + '  applyFilters=(action "applyFilters")<br>' + '  resetFilters=(action "resetFilters")<br>' + '  refreshButton=refreshButton<br>' + '  defaultSortingButton=defaultSortingButton<br>' + '  filterButton=filterButton<br>' + '  showCheckBoxInRow=showCheckBoxInRow<br>' + '  showDeleteButtonInRow=showDeleteButtonInRow<br>' + '  showEditButtonInRow=showEditButtonInRow<br>' + '  showEditMenuItemInRow=showEditMenuItemInRow<br>' + '  showDeleteMenuItemInRow=showDeleteMenuItemInRow<br>' + '  rowClickable=rowClickable<br>' + '  orderable=orderable<br>' + '  filterByAnyMatch=(action \"filterByAnyMatch\"")<br>' + '  filterText=filter<br>' + '  filterByAnyWord=filterByAnyWord<br>' + '  filterByAllWords=filterByAllWords<br>' + '  sorting=computedSorting<br>' + '  sortByColumn=(action \"sortByColumn\")<br>' + '  addColumnToSorting=(action \"addColumnToSorting\")<br>' + '  pages=pages<br>' + '  perPageValue=perPageValue<br>' + '  perPageValues=perPageValues<br>' + '  hasPreviousPage=hasPreviousPage<br>' + '  hasNextPage=hasNextPage<br>' + '  previousPage=(action \"previousPage\")<br>' + '  gotoPage=(action \"gotoPage\")<br>' + '  nextPage=(action \"nextPage\")<br>' + '  fixedHeader=fixedHeader<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', 'model.content', function () {
      var componentSettingsMetadata = _ember['default'].A();

      componentSettingsMetadata.pushObject({
        settingName: 'componentName',
        settingType: 'string',
        settingValue: 'SuggestionsObjectListView',
        settingDefaultValue: undefined,
        settingIsWithoutUI: true
      });
      componentSettingsMetadata.pushObject({
        settingName: 'colsConfigButton',
        settingType: 'boolean',
        settingValue: true,
        settingDefaultValue: true,
        bindedControllerPropertieName: 'colsConfigButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'exportExcelButton',
        settingType: 'boolean',
        settingValue: false,
        settingDefaultValue: false,
        bindedControllerPropertieName: 'exportExcelButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'content',
        settingType: 'hasManyArray',
        settingValue: this.get('model'),
        settingDefaultValue: null,
        settingIsWithoutUI: true,
        bindedControllerPropertieName: 'model'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'modelProjection',
        settingType: 'hasManyArray',
        settingAvailableItems: this.get('_projectionName'),
        settingDefaultValue: null,
        bindedControllerPropertieName: '_projectionName',
        bindedControllerPropertieDisplayName: 'projection'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'modelName',
        settingType: 'string',
        settingValue: 'ember-flexberry-dummy-suggestion',
        settingDefaultValue: undefined,
        settingIsWithoutUI: true
      });
      componentSettingsMetadata.pushObject({
        settingName: 'placeholder',
        settingType: 'string',
        settingDefaultValue: this.get('i18n').t('components.flexberry-objectlistview.placeholder'),
        bindedControllerPropertieName: 'placeholder'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'tableStriped',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'tableStriped'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'allowColumnResize',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'allowColumnResize'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'minAutoColumnWidth',
        settingType: 'number',
        settingDefaultValue: 150,
        bindedControllerPropertieName: 'minAutoColumnWidth'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'columnsWidthAutoresize',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'columnsWidthAutoresize'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'createNewButton',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'createNewButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'deleteButton',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'deleteButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'enableFilters',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'enableFilters'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'filterButton',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'filterButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'filterByAnyWord',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'filterByAnyWord'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'filterByAllWords',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'filterByAllWords'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'refreshButton',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'refreshButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'defaultSortingButton',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'defaultSortingButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showCheckBoxInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showCheckBoxInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showDeleteButtonInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showDeleteButtonInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showEditButtonInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showEditButtonInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showEditMenuItemInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showEditMenuItemInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showDeleteMenuItemInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showDeleteMenuItemInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'rowClickable',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'rowClickable'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'orderable',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'orderable'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'singleColumnHeaderTitle',
        settingType: 'string',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'singleColumnHeaderTitle'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'fixedHeader',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'fixedHeader'
      });

      return componentSettingsMetadata;
    }),

    _enableFilters: _ember['default'].observer('enableFilters', function () {
      if (this.get('enableFilters')) {
        this.set('refreshButton', true);
      }
    })
  });
});
define('dummy/controllers/components-examples/flexberry-simpleolv/toolbar-custom-buttons-example', ['exports', 'ember', 'ember-flexberry/controllers/list-form'], function (exports, _ember, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Property to count clicks on user button.
       @property clickCounter
      @type Number
      @default 1
     */
    clickCounter: 1,

    /**
      Property to show user message after click on user button.
       @property messageForUser
      @type String
     */
    messageForUser: undefined,

    /**
      The state of the hi button, is disabled if `true` or enabled if `false`.
       @property hiButtonState
      @type Boolean
      @default true
    */
    hiButtonState: true,

    /**
      Property to form array of special structures of custom user buttons.
       @property customButtons
      @type Array
    */
    customButtons: _ember['default'].computed('i18n.locale', 'hiButtonState', function () {
      var i18n = this.get('i18n');
      var hiButtonState = this.get('hiButtonState');
      var togglerButtonType = hiButtonState ? 'enable' : 'disable';
      var hiButtonText = i18n.t('forms.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.custom-button-name');
      var togglerButtonText = i18n.t('forms.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.' + togglerButtonType + '-button-name');
      return [{
        buttonName: hiButtonText,
        buttonAction: 'userButtonActionTest',
        buttonClasses: 'test-click-button',
        buttonTitle: hiButtonText,
        disabled: hiButtonState
      }, {
        buttonName: togglerButtonText,
        buttonAction: 'toggleHiButton',
        buttonTitle: togglerButtonText,
        disabled: false
      }];
    }),

    actions: {
      /**
        Handler for click on custom user button.
         @method actions.userButtonActionTest
       */
      userButtonActionTest: function userButtonActionTest() {
        var i18n = this.get('i18n');
        var clickCounter = this.get('clickCounter');
        this.set('clickCounter', clickCounter + 1);
        this.set('messageForUser', i18n.t('forms.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.custom-message').string + ' ' + clickCounter);
      },

      /**
        Toggles the state of the hi button.
         @method actions.toggleHiButton
      */
      toggleHiButton: function toggleHiButton() {
        this.toggleProperty('hiButtonState');
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-text-cell/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    /**
      'flexberry-text-cell' component's 'value' property.
       @property value
      @type String
    */
    value: 'test string',

    /**
      'flexberry-text-cell' component's 'maxTextLength' property.
       @property maxTextLength
      @type Number
    */
    maxTextLength: 7,

    /**
      Flag for 'flexberry-text-cell' component 'cutBySpaces' property.
       @property cutBySpaces
      @type Boolean
    */
    cutBySpaces: false,

    /**
      Template text for 'flexberry-textarea' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-text-cell<br>' + '  value=value<br>' + '  maxTextLength=maxTextLength<br>' + '  cutBySpaces=cutBySpaces<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
    */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', 'model.content', function () {
      var componentSettingsMetadata = _ember['default'].A();
      componentSettingsMetadata.pushObject({
        settingName: 'value',
        settingType: 'string',
        settingDefaultValue: 'test string',
        bindedControllerPropertieName: 'value'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'maxTextLength',
        settingType: 'number',
        settingDefaultValue: 7,
        bindedControllerPropertieName: 'maxTextLength'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'cutBySpaces',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'cutBySpaces'
      });
      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-textarea/settings-example', ['exports', 'ember', 'ember-i18n'], function (exports, _ember, _emberI18n) {
  exports['default'] = _ember['default'].Controller.extend({
    /**
      Text for 'flexberry-textarea' component 'placeholder' property.
       @property placeholder
      @type String
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-textarea.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-textarea.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-textarea.placeholder'));
      }
    }),

    /**
      Possible selectionDirection values.
       @property _selectionDirections
      @type String[]
     */
    _selectionDirections: ['forward', 'backward', 'none'],

    /**
      Possible wrap values.
       @property _wrapValues
      @type String[]
     */
    _wrapValues: ['soft', 'hard', 'off'],

    /**
      Flag: indicates whether 'flexberry-textarea' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
      @default false
     */
    readonly: false,

    /**
      Flag: indicates whether 'flexberry-textarea' component is required for complete or not.
       @property required
      @type Boolean
      @default false
     */
    required: false,

    /**
      Flag: indicates whether 'flexberry-textarea' component is in 'disabled' mode or not.
       @property disabled
      @type Boolean
      @default false
     */
    disabled: false,

    /**
      Flag: indicates whether 'flexberry-textarea' component should be autofocused on page open or not.
       @property autofocus
      @type Boolean
      @default false
     */
    autofocus: false,

    /**
      Flag: indicates whether 'flexberry-textarea' component is in 'spellcheck' mode or not.
       @property spellcheck
      @type Boolean
      @default true
     */
    spellcheck: true,

    /**
      Number of columns for 'textarea' element.
       @property cols
      @type Number
      @default 20
     */
    cols: 20,

    /**
      Number of rows for 'textarea' element.
       @property rows
      @type Number
      @default 8
     */
    rows: 8,

    /**
      Wrap value for 'textarea' element.
       @property wrap
      @type String
      @default 'soft'
     */
    wrap: 'soft',

    /**
      Template text for 'flexberry-textarea' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{textarea<br>' + '  value=model.text<br>' + '  placeholder=placeholder<br>' + '  readonly=readonly<br>' + '  class=class<br>' + '  required=required<br>' + '  rows=rows<br>' + '  cols=cols<br>' + '  disabled=disabled<br>' + '  maxlength=maxlength<br>' + '  selectionStart=selectionStart<br>' + '  selectionEnd=selectionEnd<br>' + '  selectionDirection=selectionDirection<br>' + '  wrap=wrap<br>' + '  autofocus=autofocus<br>' + '  spellcheck=spellcheck<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();
      componentSettingsMetadata.pushObject({
        settingName: 'value',
        settingType: 'string',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'model.text'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'placeholder',
        settingType: 'string',
        settingDefaultValue: this.get('i18n').t('components.flexberry-textarea.placeholder'),
        bindedControllerPropertieName: 'placeholder'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'class',
        settingType: 'css',
        settingDefaultValue: '',
        settingAvailableItems: ['fluid input', 'mini input', 'huge input'],
        bindedControllerPropertieName: 'class'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'required',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'required'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'rows',
        settingType: 'number',
        settingDefaultValue: 8,
        bindedControllerPropertieName: 'rows'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'cols',
        settingType: 'number',
        settingDefaultValue: 20,
        bindedControllerPropertieName: 'cols'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'disabled',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'disabled'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'maxlength',
        settingType: 'number',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'maxlength'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'selectionStart',
        settingType: 'number',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'selectionStart'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'selectionEnd',
        settingType: 'number',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'selectionEnd'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'selectionDirection',
        settingType: 'enumeration',
        settingAvailableItems: this.get('_selectionDirections'),
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'selectionDirection',
        bindedControllerPropertieDisplayName: 'selectionDirection'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'wrap',
        settingType: 'enumeration',
        settingAvailableItems: this.get('_wrapValues'),
        settingDefaultValue: 'soft',
        bindedControllerPropertieName: 'wrap',
        bindedControllerPropertieDisplayName: 'wrap'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'autofocus',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'autofocus'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'spellcheck',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'spellcheck'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-textbox/settings-example', ['exports', 'ember', 'ember-i18n'], function (exports, _ember, _emberI18n) {
  exports['default'] = _ember['default'].Controller.extend({
    /**
      Text for 'flexberry-textbox' component 'placeholder' property.
       @property placeholder
      @type String
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-textbox.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-textbox.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-textbox.placeholder'));
      }
    }),
    /**
      Flag: indicates whether 'flexberry-textbox' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Maxlength of 'flexberry-textbox' component.
       @property maxlength
      @type Number
     */
    maxlength: undefined,

    /**
      Template text for 'flexberry-textbox' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-textbox<br>' + '  value=model.text<br>' + '  placeholder=placeholder<br>' + '  readonly=readonly<br>' + '  class=class<br>' + '  maxlength=maxlength<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();
      componentSettingsMetadata.pushObject({
        settingName: 'value',
        settingType: 'string',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'model.text'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'placeholder',
        settingType: 'string',
        settingDefaultValue: this.get('i18n').t('components.flexberry-textbox.placeholder'),
        bindedControllerPropertieName: 'placeholder'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'class',
        settingType: 'css',
        settingDefaultValue: '',
        settingAvailableItems: ['fluid input', 'transparent input', 'mini input', 'huge input', 'input error'],
        bindedControllerPropertieName: 'class'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'maxlength',
        settingType: 'number',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'maxlength'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-toggler/ge-into-toggler-example', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-toggler-example-master-e'
    */
    editFormRoute: 'ember-flexberry-dummy-toggler-example-master-e'
  });
});
define('dummy/controllers/components-examples/flexberry-toggler/settings-example-inner', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    /**
      Text for 'flexberry-togggler' component 'caption' property.
       @property caption
      @type String
     */
    caption: '',

    /**
      Text for inner 'flexberry-togggler' component 'caption' property.
       @property innerCaption
      @type String
     */
    innerCaption: '',

    /**
      Text for 'flexberry-togggler' component 'expandedCaption' property.
       @property expandedCaption
      @type String
     */
    expandedCaption: null,

    /**
      Text for inner 'flexberry-togggler' component 'expandedCaption' property.
       @property expandedInnerCaption
      @type String
     */
    expandedInnerCaption: null,

    /**
      Text for 'flexberry-togggler' component 'collapsedCaption' property.
       @property collapsedCaption
      @type String
     */
    collapsedCaption: null,

    /**
      Text for inner 'flexberry-togggler' component 'collapsedCaption' property.
       @property collapsedInnerCaption
      @type String
     */
    collapsedInnerCaption: null,

    /**
      CSS clasess for i tag.
       @property iconClass
      @type String
    */
    iconClass: '',

    /**
      Is accordion expanded?
       @property expanded
      @type Boolean
      @default true
    */
    expanded: true,

    /**
      Is inner accordion expanded?
       @property innerExpanded
      @type Boolean
      @default true
    */
    innerExpanded: false,

    /**
      Template text for 'flexberry-textbox' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{#flexberry-toggler<br>' + '  caption=caption<br>' + '  expandedCaption=expandedCaption<br>' + '  collapsedCaption=collapsedCaption<br>' + '  expanded=expanded<br>' + '  iconClass=iconClass<br>' + '  componentName="myToggler"<br>' + '}}<br>' + '  {{t "forms.components-examples.flexberry-toggler.settings-example-inner.togglerContent"}}<br>' + '  {{#flexberry-toggler<br>' + '    caption=innerCaption<br>' + '    expandedCaption=expandedInnerCaption<br>' + '    collapsedCaption=collapsedInnerCaption<br>' + '    expanded=innerExpanded<br>' + '    iconClass=iconClass<br>' + '    componentName="myInnerToggler"<br>' + '  }}<br>' + '    {{t "forms.components-examples.flexberry-toggler.settings-example-inner.innerTogglerContent"}}<br>' + '  {{/flexberry-toggler}}<br>' + '{{/flexberry-toggler}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed(function () {
      var componentSettingsMetadata = _ember['default'].A();
      componentSettingsMetadata.pushObject({
        settingName: 'caption',
        settingType: 'string',
        settingDefaultValue: '',
        bindedControllerPropertieName: 'caption'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'expandedCaption',
        settingType: 'string',
        settingDefaultValue: null,
        bindedControllerPropertieName: 'expandedCaption'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'collapsedCaption',
        settingType: 'string',
        settingDefaultValue: null,
        bindedControllerPropertieName: 'collapsedCaption'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'expanded',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'expanded'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'innerCaption',
        settingType: 'string',
        settingDefaultValue: '',
        bindedControllerPropertieName: 'innerCaption'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'expandedInnerCaption',
        settingType: 'string',
        settingDefaultValue: null,
        bindedControllerPropertieName: 'expandedInnerCaption'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'collapsedInnerCaption',
        settingType: 'string',
        settingDefaultValue: null,
        bindedControllerPropertieName: 'collapsedInnerCaption'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'innerExpanded',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'innerExpanded'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'iconClass',
        settingType: 'string',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'iconClass'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-toggler/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    /**
      Text for 'flexberry-togggler' component 'caption' property.
       @property caption
      @type String
     */
    caption: '',

    /**
      Text for 'flexberry-togggler' component 'expandedCaption' property.
       @property expandedCaption
      @type String
     */
    expandedCaption: null,

    /**
      Text for 'flexberry-togggler' component 'collapsedCaption' property.
       @property collapsedCaption
      @type String
     */
    collapsedCaption: null,

    /**
      CSS clasess for i tag.
       @property iconClass
      @type String
    */
    iconClass: '',

    /**
      Current visibility state.
       @property expanded
      @type Boolean
      @default true
    */
    expanded: true,

    /**
      If true - border with a border appears for toggler. If false - border doesn't appear.
       @property hasBorder
      @type Boolean
      @default false
    */
    hasBorder: false,

    /**
     * If true - border with a subtle shadow appears for toggler. If false - shadow doesn't appear.
      @property hasShadow
     @type Boolean
     @default false
     */
    hasShadow: false,

    /**
      Template text for 'flexberry-textbox' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{#flexberry-toggler<br>' + '  caption=caption<br>' + '  expandedCaption=expandedCaption<br>' + '  collapsedCaption=collapsedCaption<br>' + '  expanded=true<br>' + '  componentName="myToggler"<br>' + '  iconClass=iconClass<br>' + '  hasBorder=hasBorder<br>' + '  hasShadow=hasShadow<br>' + '}}<br>' + '  {{t "forms.components-examples.flexberry-toggler.settings-example.togglerContent"}}<br>' + '{{/flexberry-toggler}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed(function () {
      var componentSettingsMetadata = _ember['default'].A();
      componentSettingsMetadata.pushObject({
        settingName: 'caption',
        settingType: 'string',
        settingDefaultValue: '',
        bindedControllerPropertieName: 'caption'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'expandedCaption',
        settingType: 'string',
        settingDefaultValue: null,
        bindedControllerPropertieName: 'expandedCaption'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'collapsedCaption',
        settingType: 'string',
        settingDefaultValue: null,
        bindedControllerPropertieName: 'collapsedCaption'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'expanded',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'expanded'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'hasBorder',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'hasBorder'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'hasShadow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'hasShadow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'iconClass',
        settingType: 'string',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'iconClass'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-tree/settings-example', ['exports', 'ember', 'ember-flexberry/mixins/flexberry-treenode-actions-handler', 'ember-flexberry/objects/tree-node'], function (exports, _ember, _emberFlexberryMixinsFlexberryTreenodeActionsHandler, _emberFlexberryObjectsTreeNode) {
  exports['default'] = _ember['default'].Controller.extend(_emberFlexberryMixinsFlexberryTreenodeActionsHandler['default'], {
    /**
      Component's wrapper CSS classes.
       @property jsonTreeClass
      @type String
    */
    jsonTreeClass: '',

    /**
      Flag: indicates whether only one tree node can be expanded at the same time.
      If true, all expanded tree nodes will be automatically collapsed, on some other node expand.
       @property jsonTreeExclusive
      @type Boolean
      @default false
    */
    jsonTreeExclusive: false,

    /**
      Flag: indicates whether it is allowed for already expanded tree nodes to collapse.
       @property jsonTreeCollapsible
      @type Boolean
      @default true
    */
    jsonTreeCollapsible: true,

    /**
      Flag: indicates whether nested child nodes content opacity should be animated
      (if true, it may cause performance issues with many nested child nodes).
       @property jsonTreeAnimateChildren
      @type Boolean
      @default false
    */
    jsonTreeAnimateChildren: false,

    /**
      Tree nodes expand/collapse animation duration in milliseconds.
       @property jsonTreeDuration
      @type Number
      @default 350
    */
    jsonTreeDuration: 350,

    /**
      Tree nodes hierarchy with nodes settings.
       @property jsonTreeNodes
      @type TreeNodeObject[]
    */
    jsonTreeNodes: _ember['default'].A([_emberFlexberryObjectsTreeNode['default'].create({
      caption: 'Node 1 (with child nodes)',
      nodes: _ember['default'].A([_emberFlexberryObjectsTreeNode['default'].create({
        caption: 'Node 1.1 (leaf node)',
        nodes: null
      }), _emberFlexberryObjectsTreeNode['default'].create({
        caption: 'Node 1.2 (with child nodes)',
        nodes: _ember['default'].A([_emberFlexberryObjectsTreeNode['default'].create({
          caption: 'Node 1.2.1 (with child nodes)',
          nodes: _ember['default'].A([_emberFlexberryObjectsTreeNode['default'].create({
            caption: 'Node 1.2.1.1 (leaf node)',
            nodes: null
          })])
        }), _emberFlexberryObjectsTreeNode['default'].create({
          caption: 'Node 1.2.2 (leaf node)',
          nodes: null
        })])
      })])
    }), _emberFlexberryObjectsTreeNode['default'].create({
      caption: 'Node 2 (leaf node)',
      nodes: null
    }), _emberFlexberryObjectsTreeNode['default'].create({
      caption: 'Node 3 (with child nodes)',
      nodes: _ember['default'].A([_emberFlexberryObjectsTreeNode['default'].create({
        caption: 'Node 3.1 (leaf node)',
        nodes: null
      })])
    })]),

    /**
      Component's template text.
       @property jsonTreeComponentTemplateText
      @type String
    */
    jsonTreeComponentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-tree<br>' + '  class=jsonTreeClass<br>' + '  exclusive=jsonTreeExclusive<br>' + '  collapsible=jsonTreeCollapsible<br>' + '  animateChildren=jsonTreeAnimateChildren<br>' + '  duration=jsonTreeDuration<br>' + '  nodes=(get-with-dynamic-actions this "jsonTreeNodes"<br>' + '    hierarchyPropertyName="nodes"<br>' + '    pathKeyword="nodePath"<br>' + '    dynamicActions=(array<br>' + '      (hash<br>' + '        on="headerClick"<br>' + '        actionName="onTreenodeHeaderClick"<br>' + '        actionArguments=(array "{% nodePath %}")<br>' + '      )<br>' + '    )<br>' + '  )<br>' + '}}'),

    /**
      Component settings metadata.
      @property jsonTreeComponentSettingsMetadata
      @type Object[]
    */
    jsonTreeComponentSettingsMetadata: _ember['default'].computed(function () {
      var componentSettingsMetadata = _ember['default'].A();

      componentSettingsMetadata.pushObject({
        settingName: 'class',
        settingType: 'css',
        settingDefaultValue: '',
        settingAvailableItems: ['styled', 'fluid'],
        bindedControllerPropertieName: 'jsonTreeClass'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'exclusive',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'jsonTreeExclusive'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'collapsible',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'jsonTreeCollapsible'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'animateChildren',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'jsonTreeAnimateChildren'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'duration',
        settingType: 'number',
        settingDefaultValue: 350,
        bindedControllerPropertieName: 'jsonTreeDuration'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'nodes',
        settingType: 'object',
        settingDefaultValue: null,
        bindedControllerPropertieName: 'jsonTreeNodes'
      });

      return componentSettingsMetadata;
    }),

    /**
      Path to controller's property representing latest clicked tree node.
       @property jsonTreeLatestClickedNodePath
      @type String
      @default null
    */
    jsonTreeLatestClickedNodePath: null,

    /**
      Component settings metadata for latest clicked tree node.
       @property jsonTreeLatestClickedNodeComponentSettingsMetadata
      @type Object[]
    */
    jsonTreeLatestClickedNodeComponentSettingsMetadata: _ember['default'].computed('jsonTreeLatestClickedNodePath', function () {
      var jsonTreeLatestClickedNodePath = this.get('jsonTreeLatestClickedNodePath');
      var componentSettingsMetadata = _ember['default'].A();

      if (_ember['default'].isBlank(jsonTreeLatestClickedNodePath)) {
        return componentSettingsMetadata;
      }

      componentSettingsMetadata.pushObject({
        settingName: 'caption',
        settingType: 'string',
        settingDefaultValue: null,
        bindedControllerPropertieName: jsonTreeLatestClickedNodePath + '.caption'
      });

      return componentSettingsMetadata;
    }),

    actions: {
      /**
        Handles tree nodes 'headerClick' action.
         @method actions.onTreenodeHeaderClick
        @param {String} clickedNodePropertiesPath Path to controller's property representing clicked tree node.
        @param {Object} e Action's event object
        @param {Object} e.originalEvent [jQuery event object](http://api.jquery.com/category/events/event-object/)
        which describes event that triggers this action.
      */
      onTreenodeHeaderClick: function onTreenodeHeaderClick() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var actionEventObject = args[args.length - 1];
        var clickedNodePropertiesPath = args[0];
        var clickedNodeSettingsPrefix = _ember['default'].$(actionEventObject.originalEvent.currentTarget).closest('.tab.segment').attr('data-tab');

        // Remember latest clicked node path to a tree-related controller's property.
        this.set(clickedNodeSettingsPrefix + 'LatestClickedNodePath', clickedNodePropertiesPath);
      },

      onMyButtonClick: function onMyButtonClick() {
        window.alert('My button clicked');
      }
    }
  });
});
define('dummy/controllers/components-examples/ui-message/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({

    module: 'message',

    /**
      A message can be set to visible to force itself to be shown.
       @property visible
      @type Boolean
      @default true
    */
    visible: true,

    /**
      A message can float above content that it is related to content.
       @property floating
      @type Boolean
      @default false
    */
    floating: false,

    /**
      A message can only take up the width of its content.
       @property compact
      @type Boolean
      @default false
    */
    compact: false,

    /**
      A message can be formatted to attach itself to other content.
       @property attached
      @type Boolean
      @default false
    */
    attached: false,

    /**
      A message that the user can choose to hide.
       @property closeable
      @type Boolean
      @default false
    */
    closeable: false,

    /**
      Message type.
       @property type
      @type String
      @default null
    */
    type: null,

    /**
      A message can be formatted to be different colors.
       @property color
      @type String
      @default null
    */
    color: null,

    /**
      A message can have different sizes.
        @property size
      @type String
      @default null
    */
    size: null,

    /**
      A message can contain an icon.
       @property icon
      @type String
      @default null
    */
    icon: null,

    /**
      Message title.
       @property caption
      @type String
      @default null
    */
    caption: null,

    /**
      Message body.
       @property message
      @type String
      @default null
    */
    message: null
  });
});
define('dummy/controllers/detail-edit-form', ['exports', 'ember-flexberry/controllers/detail-edit-form'], function (exports, _emberFlexberryControllersDetailEditForm) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersDetailEditForm['default'];
    }
  });
});
define('dummy/controllers/edit-form', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersEditForm['default'];
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-application-user-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {
    /**
     Route name for transition after close edit form.
      @property parentRoute
     @type String
     @default 'ember-flexberry-dummy-application-user-list'
    */
    parentRoute: 'ember-flexberry-dummy-application-user-list'
  });
});
define('dummy/controllers/ember-flexberry-dummy-application-user-edit/new', ['exports', 'dummy/controllers/ember-flexberry-dummy-application-user-edit'], function (exports, _dummyControllersEmberFlexberryDummyApplicationUserEdit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _dummyControllersEmberFlexberryDummyApplicationUserEdit['default'];
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-application-user-list', ['exports', 'ember-flexberry/controllers/list-form', 'dummy/mixins/list-form-controller-operations-indication'], function (exports, _emberFlexberryControllersListForm, _dummyMixinsListFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend(_dummyMixinsListFormControllerOperationsIndication['default'], {
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-application-user-edit'
     */
    editFormRoute: 'ember-flexberry-dummy-application-user-edit'
  });
});
define('dummy/controllers/ember-flexberry-dummy-comment-edit', ['exports', 'ember-flexberry/controllers/detail-edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersDetailEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersDetailEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {
    /**
      Name of model.commentsVote edit route.
       @property commentsVoteEditRoute
      @type String
      @default 'ember-flexberry-dummy-comment-vote-edit'
     */
    commentsVoteEditRoute: 'ember-flexberry-dummy-comment-vote-edit',

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr, bindingPath, model) {
      var cellComponent = this._super.apply(this, arguments);

      if (attr.kind === 'belongsTo') {
        if (model.modelName === 'ember-flexberry-dummy-comment-vote' && bindingPath === 'applicationUser') {
          cellComponent.componentProperties = {
            projection: 'ApplicationUserL',
            displayAttributeName: 'name',
            title: 'Application user',
            relationName: 'applicationUser',
            choose: 'showLookupDialog',
            remove: 'removeLookupValue'
          };
        }
      }

      return cellComponent;
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-comment-edit/new', ['exports', 'dummy/controllers/ember-flexberry-dummy-comment-edit'], function (exports, _dummyControllersEmberFlexberryDummyCommentEdit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _dummyControllersEmberFlexberryDummyCommentEdit['default'];
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-comment-vote-edit', ['exports', 'ember-flexberry/controllers/detail-edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersDetailEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersDetailEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {});
});
define('dummy/controllers/ember-flexberry-dummy-comment-vote-edit/new', ['exports', 'dummy/controllers/ember-flexberry-dummy-comment-vote-edit'], function (exports, _dummyControllersEmberFlexberryDummyCommentVoteEdit) {

  var EmberFlexberryDummyCommentVoteEditNewController = _dummyControllersEmberFlexberryDummyCommentVoteEdit['default'];
  exports['default'] = EmberFlexberryDummyCommentVoteEditNewController;
});
define('dummy/controllers/ember-flexberry-dummy-localization-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {
    /**
      Route name for transition after close edit form.
       @property parentRoute
      @type String
      @default 'ember-flexberry-dummy-localization-list'
    */
    parentRoute: 'ember-flexberry-dummy-localization-list'
  });
});
define('dummy/controllers/ember-flexberry-dummy-localization-edit/new', ['exports', 'dummy/controllers/ember-flexberry-dummy-localization-edit'], function (exports, _dummyControllersEmberFlexberryDummyLocalizationEdit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _dummyControllersEmberFlexberryDummyLocalizationEdit['default'];
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-localization-list', ['exports', 'ember-flexberry/controllers/list-form', 'dummy/mixins/list-form-controller-operations-indication'], function (exports, _emberFlexberryControllersListForm, _dummyMixinsListFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend(_dummyMixinsListFormControllerOperationsIndication['default'], {
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-localization-edit'
     */
    editFormRoute: 'ember-flexberry-dummy-localization-edit'
  });
});
define('dummy/controllers/ember-flexberry-dummy-multi-list-user-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/multi-list-controller', 'ember-flexberry/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberryMixinsMultiListController, _emberFlexberryMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], _emberFlexberryMixinsMultiListController['default'], {
    /**
     Route name for transition after close edit form.
      @property parentRoute
     @type String
     @default 'ember-flexberry-dummy-application-user-list'
    */
    parentRoute: 'ember-flexberry-dummy-multi-list',

    getCellComponent: null
  });
});
define('dummy/controllers/ember-flexberry-dummy-multi-list-user-edit/new', ['exports', 'dummy/controllers/ember-flexberry-dummy-multi-list-user-edit'], function (exports, _dummyControllersEmberFlexberryDummyMultiListUserEdit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _dummyControllersEmberFlexberryDummyMultiListUserEdit['default'];
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-multi-list', ['exports', 'ember-flexberry/controllers/list-form', 'ember-flexberry/mixins/multi-list-controller'], function (exports, _emberFlexberryControllersListForm, _emberFlexberryMixinsMultiListController) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend(_emberFlexberryMixinsMultiListController['default'], {});
});
define('dummy/controllers/ember-flexberry-dummy-suggestion-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {
    /**
      Route name for transition after close edit form.
       @property parentRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-list'
     */
    parentRoute: 'ember-flexberry-dummy-suggestion-list',

    /**
      Available file extensions for upload. In MIME type format.
       @property availableMimeTypes
      @type String
    */
    availableMimeTypes: 'text/plain,video/mp4',

    /**
      Maximum file size in bytes for uploading files.
      It should be greater then 0 and less or equal then APP.components.file.maxUploadFileSize from application config\environment.
      If null or undefined, then APP.components.file.maxUploadFileSize from application config\environment will be used.
       @property maxUploadFileSize
      @type Number
    */
    maxUploadFileSize: 10,

    /**
      Maximum file size unit. May be 'Bt' 'Kb' 'Mb' or 'Gb'.
       @property maxUploadFileSizeUnit
      @type String
    */
    maxUploadFileSizeUnit: 'Mb',

    /**
      Name of model.comments edit route.
       @property commentsEditRoute
      @type String
      @default 'ember-flexberry-dummy-comment-edit'
     */
    commentsEditRoute: 'ember-flexberry-dummy-comment-edit',

    /**
      Function for check uploaded file type.
       @method checkFileType
      @param {String} fileType file type as MIME TYPES.
      @param {String} accept available MIME TYPES.
     */
    checkFileType: function checkFileType(fileType, accept) {
      return true;
    },

    actions: {

      getLookupFolvProperties: function getLookupFolvProperties() {
        return {
          colsConfigButton: true
        };
      }
    },

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr, bindingPath, model) {
      var cellComponent = this._super.apply(this, arguments);
      if (attr.kind === 'belongsTo') {
        switch (model.modelName + '+' + bindingPath) {
          case 'ember-flexberry-dummy-vote+author':
            cellComponent.componentProperties = {
              choose: 'showLookupDialog',
              remove: 'removeLookupValue',
              preview: 'previewLookupValue',
              displayAttributeName: 'name',
              required: true,
              relationName: 'author',
              projection: 'ApplicationUserL',
              autocomplete: true,
              showPreviewButton: true,
              previewFormRoute: 'ember-flexberry-dummy-application-user-edit'
            };
            break;

          case 'ember-flexberry-dummy-comment+author':
            cellComponent.componentProperties = {
              choose: 'showLookupDialog',
              remove: 'removeLookupValue',
              displayAttributeName: 'name',
              required: true,
              relationName: 'author',
              projection: 'ApplicationUserL',
              autocomplete: true
            };
            break;

        }
      } else if (attr.kind === 'attr') {
        switch (model.modelName + '+' + bindingPath) {
          case 'ember-flexberry-dummy-vote+author.eMail':
            cellComponent.componentProperties = {
              readonly: true
            };
            break;

          case 'ember-flexberry-dummy-suggestion-file+file':
            cellComponent.componentProperties = {
              accept: this.get('availableMimeTypes'),
              isValidTypeFileCustom: this.get('checkFileType'),
              maxUploadFileSize: this.get('maxUploadFileSize'),
              maxUploadFileSizeUnit: this.get('maxUploadFileSizeUnit')
            };
            break;
        }
      }

      return cellComponent;
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-suggestion-edit/new', ['exports', 'dummy/controllers/ember-flexberry-dummy-suggestion-edit'], function (exports, _dummyControllersEmberFlexberryDummySuggestionEdit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _dummyControllersEmberFlexberryDummySuggestionEdit['default'];
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-suggestion-file-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {
    /**
      Route name for transition after close edit form.
       @property parentRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-file-list'
    */
    parentRoute: 'ember-flexberry-dummy-suggestion-file-list'
  });
});
define('dummy/controllers/ember-flexberry-dummy-suggestion-file-edit/new', ['exports', 'dummy/controllers/ember-flexberry-dummy-suggestion-file-edit'], function (exports, _dummyControllersEmberFlexberryDummySuggestionFileEdit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _dummyControllersEmberFlexberryDummySuggestionFileEdit['default'];
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-suggestion-file-list', ['exports', 'ember-flexberry/controllers/list-form', 'dummy/mixins/list-form-controller-operations-indication'], function (exports, _emberFlexberryControllersListForm, _dummyMixinsListFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend(_dummyMixinsListFormControllerOperationsIndication['default'], {
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-file-edit'
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-file-edit'
  });
});
define('dummy/controllers/ember-flexberry-dummy-suggestion-list', ['exports', 'ember-flexberry/controllers/list-form', 'dummy/mixins/list-form-controller-operations-indication'], function (exports, _emberFlexberryControllersListForm, _dummyMixinsListFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend(_dummyMixinsListFormControllerOperationsIndication['default'], {
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-edit'
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-edit',

    exportExcelProjection: 'SuggestionL',

    actions: {
      /**
        Hook that executes before deleting all records on all pages.
        Need to be overriden in corresponding application controller.
      */
      beforeDeleteAllRecords: function beforeDeleteAllRecords(modelName, data) {
        data.cancel = false;
      }
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-suggestion-type-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberryMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberryMixinsEditFormControllerOperationsIndication['default'], {
    /**
      Route name for transition after close edit form.
       @property parentRoute
      @type String
      @default 'ember-flexberry-dummy-application-user-list'
     */
    parentRoute: 'ember-flexberry-dummy-suggestion-type-list',

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr, bindingPath, model) {
      var cellComponent = this._super.apply(this, arguments);

      if (attr.kind === 'belongsTo') {
        if (model.modelName === 'ember-flexberry-dummy-localized-suggestion-type' && bindingPath === 'localization') {
          cellComponent.componentProperties = {
            projection: 'LocalizationL',
            displayAttributeName: 'name',
            title: 'Localization',
            relationName: 'localization',
            choose: 'showLookupDialog',
            remove: 'removeLookupValue'
          };
        }
      }

      return cellComponent;
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-suggestion-type-edit/new', ['exports', 'dummy/controllers/ember-flexberry-dummy-suggestion-type-edit'], function (exports, _dummyControllersEmberFlexberryDummySuggestionTypeEdit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _dummyControllersEmberFlexberryDummySuggestionTypeEdit['default'];
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-suggestion-type-list', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-type-edit'
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-type-edit',

    exportExcelProjection: 'SuggestionTypeL'
  });
});
define('dummy/controllers/ember-flexberry-dummy-toggler-example-master-e', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
     Route name for transition after close edit form.
      @property parentRoute
     @type String
     @default 'components-examples/flexberry-toggler/ge-into-toggler-example'
    */
    parentRoute: 'components-examples/flexberry-toggler/ge-into-toggler-example'
  });
});
define('dummy/controllers/ember-flexberry-dummy-toggler-example-master-e/new', ['exports', 'dummy/controllers/ember-flexberry-dummy-toggler-example-master-e'], function (exports, _dummyControllersEmberFlexberryDummyTogglerExampleMasterE) {

  var EmberFlexberryDummyTogglerExampleMasterENewController = _dummyControllersEmberFlexberryDummyTogglerExampleMasterE['default'];
  exports['default'] = EmberFlexberryDummyTogglerExampleMasterENewController;
});
define('dummy/controllers/filters-dialog', ['exports', 'ember-flexberry/controllers/filters-dialog'], function (exports, _emberFlexberryControllersFiltersDialog) {
  exports['default'] = _emberFlexberryControllersFiltersDialog['default'];
});
define('dummy/controllers/flexberry-file-view-dialog', ['exports', 'ember-flexberry/controllers/flexberry-file-view-dialog'], function (exports, _emberFlexberryControllersFlexberryFileViewDialog) {
  exports['default'] = _emberFlexberryControllersFlexberryFileViewDialog['default'];
});
define('dummy/controllers/i-i-s-caseberry-logging-objects-application-log-e', ['exports', 'ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-e'], function (exports, _emberFlexberryControllersIISCaseberryLoggingObjectsApplicationLogE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersIISCaseberryLoggingObjectsApplicationLogE['default'];
    }
  });
});
define('dummy/controllers/i-i-s-caseberry-logging-objects-application-log-l', ['exports', 'ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-l'], function (exports, _emberFlexberryControllersIISCaseberryLoggingObjectsApplicationLogL) {
  /**
   * @module ember-flexberry
   */
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersIISCaseberryLoggingObjectsApplicationLogL['default'];
    }
  });
});
define('dummy/controllers/integration-examples/edit-form/readonly-mode', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Flag: indicates whether the form is in readonly mode or not.
       @property readonly
      @type Boolean
      @default true
     */
    readonly: true,

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr, bindingPath, model) {
      var cellComponent = this._super.apply(this, arguments);

      if (attr.kind === 'belongsTo' && bindingPath === 'master') {
        cellComponent.componentProperties = {
          projection: 'MasterL',
          displayAttributeName: 'text',
          title: 'Master',
          relationName: 'master',
          choose: 'showLookupDialog',
          remove: 'removeLookupValue'
        };
      }

      return cellComponent;
    }
  });
});
define('dummy/controllers/integration-examples/edit-form/validation', ['exports', 'ember', 'ember-flexberry/controllers/edit-form'], function (exports, _ember, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Lookup events service.
    */
    lookupEvents: _ember['default'].inject.service('lookup-events'),

    actions: {
      /**
        Handles click on lookup's choose button.
      */
      showLookupDialog: function showLookupDialog() {
        // Create new master & add to model.
        var master = this.get('store').createRecord('integration-examples/edit-form/validation/master', { text: 'Master text' });
        this.get('model').set('master', master);

        this.get('lookupEvents').lookupDialogOnHiddenTrigger('IntegrationExamplesValidationsMaster');
      }
    }
  });
});
define('dummy/controllers/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-e', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({

    /**
      Route name for transition after close edit form.
       @property parentRoute
      @type String
     */
    parentRoute: 'integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-l'
  });
});
define('dummy/controllers/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-e/new', ['exports', 'dummy/controllers/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-e'], function (exports, _dummyControllersIntegrationExamplesOdataExamplesGetMastersEmberFlexberryDummyDepartamentE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _dummyControllersIntegrationExamplesOdataExamplesGetMastersEmberFlexberryDummyDepartamentE['default'];
    }
  });
});
define('dummy/controllers/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-l', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-departament-e'
     */
    editFormRoute: 'integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-e'
  });
});
define('dummy/controllers/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-e', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({

    /**
      Route name for transition after close edit form.
       @property parentRoute
      @type String
     */
    parentRoute: 'integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-l'
  });
});
define('dummy/controllers/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-e/new', ['exports', 'dummy/controllers/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-e'], function (exports, _dummyControllersIntegrationExamplesOdataExamplesGetMastersEmberFlexberryDummySotrudnikE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _dummyControllersIntegrationExamplesOdataExamplesGetMastersEmberFlexberryDummySotrudnikE['default'];
    }
  });
});
define('dummy/controllers/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-l', ['exports', 'ember', 'ember-flexberry/controllers/list-form'], function (exports, _ember, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({

    dataReceived: false,
    receivedMasters: false,
    receivedMasterMasters: false,

    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-sotrudnik-e'
     */
    editFormRoute: 'integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-e',

    actions: {
      doOdataFunction: function doOdataFunction() {
        var _this = this;

        var adapter = _ember['default'].get(this, 'store').adapterFor('application');
        var args = {
          functionName: 'GetMastersForTest',
          store: _ember['default'].get(this, 'store'),
          modelName: 'ember-flexberry-dummy-sotrudnik',
          modelProjection: 'SotrudnikE'
        };

        adapter.callFunction(args).then(function (sotrudniks) {
          if (!_ember['default'].isEmpty(sotrudniks)) {
            _ember['default'].set(_this, 'dataReceived', true);
            var departaments = sotrudniks.map(function (a) {
              return _ember['default'].get(a, 'departament');
            });
            var departamentsIsNull = sotrudniks.find(function (a) {
              return _ember['default'].isNone(_ember['default'].get(a, 'departament'));
            });
            if (!_ember['default'].isEmpty(departaments) && _ember['default'].isNone(departamentsIsNull)) {
              _ember['default'].set(_this, 'receivedMasters', true);
              var vid = departaments.map(function (a) {
                return _ember['default'].get(a, 'vid');
              });
              var vidIsNull = departaments.find(function (a) {
                return _ember['default'].isNone(_ember['default'].get(a, 'vid'));
              });
              if (!_ember['default'].isEmpty(vid) && _ember['default'].isNone(vidIsNull)) {
                _ember['default'].set(_this, 'receivedMasterMasters', true);
              }
            }
          }
        });
      }
    }
  });
});
define('dummy/controllers/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-e', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Route name for transition after close edit form.
       @property parentRoute
      @type String
     */
    parentRoute: 'integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-l'
  });
});
define('dummy/controllers/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-e/new', ['exports', 'dummy/controllers/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-e'], function (exports, _dummyControllersIntegrationExamplesOdataExamplesGetMastersEmberFlexberryDummyVidDepartamentaE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _dummyControllersIntegrationExamplesOdataExamplesGetMastersEmberFlexberryDummyVidDepartamentaE['default'];
    }
  });
});
define('dummy/controllers/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-l', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-vid-departamenta-e'
     */
    editFormRoute: 'integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-e'
  });
});
define('dummy/controllers/list-form', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersListForm['default'];
    }
  });
});
define('dummy/controllers/log-service-examples/clear-log-form', ['exports', 'ember', 'dummy/config/environment', 'ember-flexberry-data', 'ember-flexberry-data/utils/get-serialized-date-value'], function (exports, _ember, _dummyConfigEnvironment, _emberFlexberryData, _emberFlexberryDataUtilsGetSerializedDateValue) {
  var Builder = _emberFlexberryData.Query.Builder;
  exports['default'] = _ember['default'].Controller.extend({
    logRecordsTotalCount: 0,
    logRecordsOlderDate: null,
    logRecordsOlderDateCount: 0,
    queryInExecutingState: false,
    getCounts: function getCounts() {
      var _this2 = this;

      var _this = this;
      this.set('queryInExecutingState', true);
      var modelName = 'i-i-s-caseberry-logging-objects-application-log';
      var builder = new Builder(this.store, modelName).top(1).count();
      this.store.query(modelName, builder.build()).then(function (data) {
        _this.set('logRecordsTotalCount', data.meta.count);
        if (_this.logRecordsOlderDate) {
          builder = new Builder(_this2.store, modelName).top(1).where('timestamp', _emberFlexberryData.Query.FilterOperator.Leq, _this.logRecordsOlderDate).count();
          _this2.store.query(modelName, builder.build()).then(function (data) {
            _this.set('logRecordsOlderDateCount', data.meta.count);
            _this2.set('queryInExecutingState', false);
          });
        } else {
          _this2.set('queryInExecutingState', false);
        }
      });
    },
    actions: {
      getCounts: function getCounts() {
        this.getCounts();
      },
      clearLogRecords: function clearLogRecords() {
        var _this = this;
        this.set('queryInExecutingState', true);
        var date = _this.logRecordsOlderDate;
        if (!date) {
          date = new Date();
        }

        var stringedDate = _emberFlexberryDataUtilsGetSerializedDateValue['default'].call(_this, date);
        stringedDate = stringedDate.substring(0, stringedDate.indexOf('T'));

        _ember['default'].$.ajax({
          type: 'GET',
          url: _dummyConfigEnvironment['default'].APP.backendUrls.api + '/ClearLogRecords(dateTime=\'' + stringedDate + '\')',
          success: function success(result) {
            _this.set('queryInExecutingState', false);
            _this.getCounts();
          },
          error: function error(xhr, textStatus, errorThrown) {
            _this.set('queryInExecutingState', false);
            window.alert(textStatus + ' ' + errorThrown + ' Please check browser error console.');
          }
        });
      }
    }
  });
});
define('dummy/controllers/log-service-examples/settings-example', ['exports', 'ember', 'ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-l'], function (exports, _ember, _emberFlexberryControllersIISCaseberryLoggingObjectsApplicationLogL) {
  exports['default'] = _emberFlexberryControllersIISCaseberryLoggingObjectsApplicationLogL['default'].extend({
    /**
      Object list view custom buttons, which will be used to imitate different log service events.
       @property objectListViewCustomButtons
      @type Object[]
    */
    objectListViewCustomButtons: _ember['default'].computed('i18n.locale', function () {
      return [{
        buttonName: this.get('i18n').t('forms.log-service-examples.settings-example.throw-exception-button-caption'),
        buttonAction: 'onThrowExceptionButtonClick',
        buttonClasses: 'small red'
      }, {
        buttonName: this.get('i18n').t('forms.log-service-examples.settings-example.reject-rsvp-promise-button-caption'),
        buttonAction: 'onRejectRsvpPromiseButtonClick',
        buttonClasses: 'small red'
      }, {
        buttonName: this.get('i18n').t('forms.log-service-examples.settings-example.ember-assert-button-caption'),
        buttonAction: 'onEmberAssertButtonClick',
        buttonClasses: 'small red'
      }, {
        buttonName: this.get('i18n').t('forms.log-service-examples.settings-example.ember-logger-error-button-caption'),
        buttonAction: 'onEmberLoggerErrorButtonClick',
        buttonClasses: 'small red'
      }, {
        buttonName: this.get('i18n').t('forms.log-service-examples.settings-example.ember-logger-warn-button-caption'),
        buttonAction: 'onEmberLoggerWarnButtonClick',
        buttonClasses: 'small orange'
      }, {
        buttonName: this.get('i18n').t('forms.log-service-examples.settings-example.ember-deprecate-button-caption'),
        buttonAction: 'onEmberDeprecateButtonClick',
        buttonClasses: 'small yellow'
      }, {
        buttonName: this.get('i18n').t('forms.log-service-examples.settings-example.ember-logger-log-button-caption'),
        buttonAction: 'onEmberLoggerLogButtonClick',
        buttonClasses: 'small green'
      }, {
        buttonName: this.get('i18n').t('forms.log-service-examples.settings-example.ember-logger-info-button-caption'),
        buttonAction: 'onEmberLoggerInfoButtonClick',
        buttonClasses: 'small teal'
      }, {
        buttonName: this.get('i18n').t('forms.log-service-examples.settings-example.ember-logger-debug-button-caption'),
        buttonAction: 'onEmberLoggerDebugButtonClick',
        buttonClasses: 'small blue'
      }];
    }),

    messagesToRefreshList: null,

    init: function init() {
      this._super.apply(this, arguments);
      this.get('logService').on('error', this, this._refreshList);
      this.get('logService').on('warn', this, this._refreshList);
      this.get('logService').on('info', this, this._refreshList);
      this.get('logService').on('log', this, this._refreshList);
      this.get('logService').on('debug', this, this._refreshList);
      this.get('logService').on('deprecation', this, this._refreshList);
      this.get('logService').on('promise', this, this._refreshList);

      var i18nService = this.get('i18n');
      var messagesToRefreshList = [i18nService.t('forms.log-service-examples.settings-example.throw-exception-button-message'), i18nService.t('forms.log-service-examples.settings-example.reject-rsvp-promise-button-message'), i18nService.t('forms.log-service-examples.settings-example.ember-assert-button-message'), i18nService.t('forms.log-service-examples.settings-example.ember-logger-error-button-message'), i18nService.t('forms.log-service-examples.settings-example.ember-logger-warn-button-message'), i18nService.t('forms.log-service-examples.settings-example.ember-deprecate-button-message'), i18nService.t('forms.log-service-examples.settings-example.ember-logger-log-button-message'), i18nService.t('forms.log-service-examples.settings-example.ember-logger-info-button-message'), i18nService.t('forms.log-service-examples.settings-example.ember-logger-debug-button-message')];

      this.set('messagesToRefreshList', messagesToRefreshList);
    },

    willDestroy: function willDestroy() {
      this.get('logService').off('error', this, this._refreshList);
      this.get('logService').off('warn', this, this._refreshList);
      this.get('logService').off('info', this, this._refreshList);
      this.get('logService').off('log', this, this._refreshList);
      this.get('logService').off('debug', this, this._refreshList);
      this.get('logService').off('deprecation', this, this._refreshList);
      this.get('logService').off('promise', this, this._refreshList);
    },

    actions: {
      /**
        Handles throw exception button click.
        Emulates exception thrown somewhere in application.
         @method actions.onThrowExceptionButtonClick
        @public
      */
      onThrowExceptionButtonClick: function onThrowExceptionButtonClick() {
        throw new Error(this._generateUniqueMessagePrefix() + this.get('i18n').t('forms.log-service-examples.settings-example.throw-exception-button-message'));
      },

      /**
        Handles throw exception button click.
        Emulates exception thrown somewhere in application.
         @method actions.onRejectRsvpPromiseButtonClick
        @public
      */
      onRejectRsvpPromiseButtonClick: function onRejectRsvpPromiseButtonClick() {
        _ember['default'].RSVP.reject(this._generateUniqueMessagePrefix() + this.get('i18n').t('forms.log-service-examples.settings-example.reject-rsvp-promise-button-message'));
      },

      /**
        Handles ember assert button click.
        Emulates failed Ember.assert call happened somewhere in application.
         @method actions.onEmberAssertButtonClick
        @public
      */
      onEmberAssertButtonClick: function onEmberAssertButtonClick() {
        _ember['default'].assert(this._generateUniqueMessagePrefix() + this.get('i18n').t('forms.log-service-examples.settings-example.ember-assert-button-message'), false);
      },

      /**
        Handles ember logger error button click.
        Emulates Ember.Logger.error call happened somewhere in application.
         @method actions.onEmberLoggerErrorButtonClick
        @public
      */
      onEmberLoggerErrorButtonClick: function onEmberLoggerErrorButtonClick() {
        _ember['default'].Logger.error(this._generateUniqueMessagePrefix() + this.get('i18n').t('forms.log-service-examples.settings-example.ember-logger-error-button-message'));
      },

      /**
        Handles ember logger warn button click.
        Emulates Ember.warn call happened somewhere in application.
         @method actions.onEmberLoggerWarnButtonClick
        @public
      */
      onEmberLoggerWarnButtonClick: function onEmberLoggerWarnButtonClick() {
        _ember['default'].warn(this._generateUniqueMessagePrefix() + this.get('i18n').t('forms.log-service-examples.settings-example.ember-logger-warn-button-message'), false, { id: 'ember-flexberry-debug.feature-logger-warn-test' });
      },

      /**
        Handles ember deprecate button click.
        Emulates Ember.deprecate call happened somewhere in application.
         @method actions.onEmberDeprecateButtonClick
        @public
      */
      onEmberDeprecateButtonClick: function onEmberDeprecateButtonClick() {
        _ember['default'].deprecate(this._generateUniqueMessagePrefix() + this.get('i18n').t('forms.log-service-examples.settings-example.ember-deprecate-button-message'), false, { id: 'ember-flexberry-debug.feature-logger-deprecate-test', until: '0' });
      },

      /**
        Handles ember logger log button click.
        Emulates Ember.Logger.log call happened somewhere in application.
         @method actions.onEmberLoggerLogButtonClick
        @public
      */
      onEmberLoggerLogButtonClick: function onEmberLoggerLogButtonClick() {
        _ember['default'].Logger.log(this._generateUniqueMessagePrefix() + this.get('i18n').t('forms.log-service-examples.settings-example.ember-logger-log-button-message'));
      },

      /**
        Handles ember logger info button click.
        Emulates Ember.Logger.info call happened somewhere in application.
         @method actions.onEmberLoggerInfoButtonClick
        @public
      */
      onEmberLoggerInfoButtonClick: function onEmberLoggerInfoButtonClick() {
        _ember['default'].Logger.info(this._generateUniqueMessagePrefix() + this.get('i18n').t('forms.log-service-examples.settings-example.ember-logger-info-button-message'));
      },

      /**
        Handles ember logger debug button click.
        Emulates Ember.debug call happened somewhere in application.
         @method actions.onEmberLoggerDebugButtonClick
        @public
      */
      onEmberLoggerDebugButtonClick: function onEmberLoggerDebugButtonClick() {
        _ember['default'].debug(this._generateUniqueMessagePrefix() + this.get('i18n').t('forms.log-service-examples.settings-example.ember-logger-debug-button-message'));
      }
    },

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {Object} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
    */
    getCellComponent: function getCellComponent(attr, bindingPath, modelClass) {
      if (bindingPath === 'timestamp') {
        return {
          componentName: 'object-list-view-cell',
          componentProperties: {
            dateFormat: 'DD.MM.YYYY, hh:mm:ss'
          }
        };
      }

      return this._super.apply(this, arguments);
    },

    /**
      Generates unique message prefix to avoid possible lost of same messages.
      If several message have same content logging service send only first to avoid possible loop on error sending stage.
       @method _generateUniqueMessagePrefix
      @return {String} Unique message prefix.
      @private
    */
    _generateUniqueMessagePrefix: function _generateUniqueMessagePrefix() {
      return '№' + _ember['default'].generateGuid(null, '') + ': ';
    },

    /**
      Refreshes list of log messages on form.
       @method _refreshList
      @private
    */
    _refreshList: function _refreshList(applicationLogModel) {
      var messagesToRefreshList = this.get('messagesToRefreshList');
      if (applicationLogModel) {
        var message = applicationLogModel.get('message');
        var needToRefresh = false;
        for (var i = 0; i < messagesToRefreshList.length; i++) {
          if (message.indexOf(messagesToRefreshList[i]) > -1) {
            needToRefresh = true;
            break;
          }
        }

        if (needToRefresh) {
          this.send('refreshList');
        }
      }
    }
  });
});
define('dummy/controllers/lookup-dialog', ['exports', 'ember-flexberry/controllers/lookup-dialog'], function (exports, _emberFlexberryControllersLookupDialog) {
  exports['default'] = _emberFlexberryControllersLookupDialog['default'];
});
define('dummy/controllers/new-platform-flexberry-services-lock-list', ['exports', 'ember', 'ember-flexberry/routes/edit-form', 'ember-flexberry/controllers/new-platform-flexberry-services-lock-list'], function (exports, _ember, _emberFlexberryRoutesEditForm, _emberFlexberryControllersNewPlatformFlexberryServicesLockList) {
  exports['default'] = _emberFlexberryControllersNewPlatformFlexberryServicesLockList['default'].extend({
    /**
      Current value `defaultBehaviorLock.openReadOnly` from {{#crossLink "EditFormRoute"}}{{/crossLink}}.
       @property openReadOnly
      @type Boolean
      @default false
    */
    openReadOnly: false,

    /**
      Current value `defaultBehaviorLock.unlockObject` from {{#crossLink "EditFormRoute"}}{{/crossLink}}.
       @property unlockObject
      @type Boolean
      @default false
    */
    unlockObject: false,

    /**
      Custom buttons for `flexberry-objectlistview` on `new-platform-flexberry-services-lock-list` route.
       @property customButtons
      @type Array
    */
    customButtons: _ember['default'].computed('i18n.locale', 'openReadOnly', 'unlockObject', function () {
      var i18n = this.get('i18n');
      var baseClasses = 'floated tiny compact';
      var openReadOnly = this.get('openReadOnly') ? 'positive' : 'negative';
      var unlockObject = this.get('unlockObject') ? 'positive' : 'negative';
      return [{
        buttonName: i18n.t('forms.new-platform-flexberry-services-lock-list.change-user-name'),
        buttonAction: 'changeUserName',
        buttonClasses: baseClasses
      }, {
        buttonName: i18n.t('forms.new-platform-flexberry-services-lock-list.open-read-only'),
        buttonAction: 'openReadOnly',
        buttonClasses: baseClasses + ' ' + openReadOnly
      }, {
        buttonName: i18n.t('forms.new-platform-flexberry-services-lock-list.unlock-object'),
        buttonAction: 'unlockObject',
        buttonClasses: baseClasses + ' ' + unlockObject
      }];
    }),

    actions: {
      /**
        Change current value `userName` for {{#crossLink "EditFormRoute"}}{{/crossLink}}.
         @method actions.changeUserName
      */
      changeUserName: function changeUserName() {
        var i18n = this.get('i18n');
        var userService = _ember['default'].getOwner(this).lookup('service:user');
        var currentUserName = userService.getCurrentUserName();
        var newUserName = window.prompt(i18n.t('forms.new-platform-flexberry-services-lock-list.enter-new-user-name'), currentUserName);
        if (typeof newUserName === 'string') {
          userService.set('userName', newUserName);
        }
      },

      /**
        Change current value `defaultBehaviorLock.openReadOnly` for {{#crossLink "EditFormRoute"}}{{/crossLink}}.
         @method actions.openReadOnly
      */
      openReadOnly: function openReadOnly() {
        var currentDefaultBehaviorLock = _emberFlexberryRoutesEditForm['default'].create().get('defaultBehaviorLock');
        currentDefaultBehaviorLock.openReadOnly = !currentDefaultBehaviorLock.openReadOnly;
        _emberFlexberryRoutesEditForm['default'].reopen({ defaultBehaviorLock: currentDefaultBehaviorLock });
        this.set('openReadOnly', currentDefaultBehaviorLock.openReadOnly);
      },

      /**
        Change current value `defaultBehaviorLock.unlockObject` for {{#crossLink "EditFormRoute"}}{{/crossLink}}.
         @method actions.unlockObject
      */
      unlockObject: function unlockObject() {
        var currentDefaultBehaviorLock = _emberFlexberryRoutesEditForm['default'].create().get('defaultBehaviorLock');
        currentDefaultBehaviorLock.unlockObject = !currentDefaultBehaviorLock.unlockObject;
        _emberFlexberryRoutesEditForm['default'].reopen({ defaultBehaviorLock: currentDefaultBehaviorLock });
        this.set('unlockObject', currentDefaultBehaviorLock.unlockObject);
      }
    },

    /**
      An overridable method called when objects are instantiated.
      [More info](http://emberjs.com/api/classes/Ember.Route.html#method_init).
       @method init
    */
    init: function init() {
      this._super.apply(this, arguments);
      var currentDefaultBehaviorLock = _emberFlexberryRoutesEditForm['default'].create().get('defaultBehaviorLock');
      if (currentDefaultBehaviorLock) {
        this.set('openReadOnly', currentDefaultBehaviorLock.openReadOnly);
        this.set('unlockObject', currentDefaultBehaviorLock.unlockObject);
      }
    }
  });
});
define('dummy/controllers/sitemap-node', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    actions: {
      /**
        Hide Sidebar by clicking submenu item.
         @method actions.subMenuEl
      */
      hideSidebar: function hideSidebar() {
        _ember['default'].$('.ui.sidebar').sidebar('hide');
      },
      /**
        Expand menu items by click.
         @method actions.subMenuEl
      */
      subMenuEl: function subMenuEl(event) {
        var $this = _ember['default'].$(event.currentTarget).parent().find('.subMenu:first');
        if ($this.hasClass('hidden')) {
          $this.removeClass('hidden');
          _ember['default'].$(event.target).parent().find('.item-minus:first').removeClass('hidden');
          _ember['default'].$(event.target).parent().find('.item-plus:first').addClass('hidden');
        } else {
          $this.addClass('hidden');
          _ember['default'].$(event.target).parent().find('.item-minus:first').addClass('hidden');
          _ember['default'].$(event.target).parent().find('.item-plus:first').removeClass('hidden');
        }
      }
    }
  });
});
define('dummy/controllers/user-setting-forms/user-setting-delete', ['exports', 'ember', 'ember-flexberry/controllers/list-form'], function (exports, _ember, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Property to form array of special structures of custom user buttons.
       @property customButtons
      @type Array
     */
    customButtons: _ember['default'].computed('i18n.locale', function () {
      var i18n = this.get('i18n');
      return [{
        buttonName: i18n.t('forms.user-setting-forms.user-setting-delete.all-del-button-name'),
        buttonAction: 'allDelButtonAction',
        buttonClasses: 'all-del-user-button'
      }];
    }),

    actions: {
      /**
        Handler for click on custom user button.
         @method userButtonActionTest
       */
      allDelButtonAction: function allDelButtonAction() {
        var _this = this;

        var proms = [];
        this.get('store').findAll('new-platform-flexberry-flexberry-user-setting').then(function (settings) {
          settings.forEach(function (setting) {
            proms.push(setting.destroyRecord());
          });
        }).then(function () {
          _ember['default'].RSVP.all(proms).then(function () {
            _this.get('target').router.refresh();
          });
        });
      }
    }
  });
});
define("dummy/default-user-settings/ember-flexberry-dummy-application-user", ["exports"], function (exports) {
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var UserSetting = function UserSetting() {
    _classCallCheck(this, UserSetting);
  };

  exports["default"] = UserSetting;

  UserSetting.DEFAULT = {
    colsOrder: [{
      propName: "name",
      name: "Name"
    }, {
      propName: "activated",
      name: "Activated"
    }, {
      propName: "gender",
      hide: true,
      name: "Gender"
    }]
  };
});
define('dummy/default-user-settings/index', ['exports', 'dummy/default-user-settings/ember-flexberry-dummy-application-user'], function (exports, _dummyDefaultUserSettingsEmberFlexberryDummyApplicationUser) {});
define('dummy/enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration', ['exports', 'ember-flexberry-data/utils/enum-functions'], function (exports, _emberFlexberryDataUtilsEnumFunctions) {
  exports['default'] = (0, _emberFlexberryDataUtilsEnumFunctions.createEnum)({
    Value1: 'Enum value №1',
    Value2: 'Enum value №2',
    Value3: 'Enum value №3'
  });
});
define('dummy/enums/components-examples/flexberry-dropdown/empty-value-example/enumeration', ['exports', 'ember-flexberry-data/utils/enum-functions'], function (exports, _emberFlexberryDataUtilsEnumFunctions) {
  exports['default'] = (0, _emberFlexberryDataUtilsEnumFunctions.createEnum)({
    Value1: '',
    Value2: 'Enum value №1',
    Value3: 'Enum value №2',
    Value4: 'Enum value №3'
  });
});
define('dummy/enums/components-examples/flexberry-dropdown/settings-example/enumeration', ['exports', 'ember-flexberry-data/utils/enum-functions'], function (exports, _emberFlexberryDataUtilsEnumFunctions) {
  exports['default'] = (0, _emberFlexberryDataUtilsEnumFunctions.createEnum)({
    Value1: 'Enum value №1',
    Value2: 'Enum value №2',
    Value3: 'Enum value №3',
    Value4: 'Enum value №4',
    Value5: 'Enum value №5',
    Value6: 'Enum value №6',
    Value7: 'Enum value №7',
    Value8: 'Enum value №8',
    Value9: 'Enum value №9'
  });
});
define('dummy/enums/components-examples/flexberry-groupedit/shared/detail-enumeration', ['exports', 'ember-flexberry-data/utils/enum-functions'], function (exports, _emberFlexberryDataUtilsEnumFunctions) {
  exports['default'] = (0, _emberFlexberryDataUtilsEnumFunctions.createEnum)({
    Value1: 'Enum value №1',
    Value2: 'Enum value №2',
    Value3: 'Enum value №3'
  });
});
define('dummy/enums/ember-flexberry-dummy-gender', ['exports', 'ember-flexberry-data/utils/enum-functions'], function (exports, _emberFlexberryDataUtilsEnumFunctions) {
  exports['default'] = (0, _emberFlexberryDataUtilsEnumFunctions.createEnum)({
    Male: 'Male',
    Female: 'Female',
    Unknown: 'Unknown'
  });
});
define('dummy/enums/ember-flexberry-dummy-vote-type', ['exports', 'ember-flexberry-data/utils/enum-functions'], function (exports, _emberFlexberryDataUtilsEnumFunctions) {
  exports['default'] = (0, _emberFlexberryDataUtilsEnumFunctions.createEnum)({
    Like: 'Like',
    Dislike: 'Dislike'
  });
});
define('dummy/enums/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-execution-variant', ['exports', 'ember-flexberry-data/enums/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-execution-variant'], function (exports, _emberFlexberryDataEnumsICSSoftSTORMNETBusinessAuditObjectsTExecutionVariant) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataEnumsICSSoftSTORMNETBusinessAuditObjectsTExecutionVariant['default'];
    }
  });
});
define('dummy/enums/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-type-of-audit-operation', ['exports', 'ember-flexberry-data/enums/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-type-of-audit-operation'], function (exports, _emberFlexberryDataEnumsICSSoftSTORMNETBusinessAuditObjectsTTypeOfAuditOperation) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataEnumsICSSoftSTORMNETBusinessAuditObjectsTTypeOfAuditOperation['default'];
    }
  });
});
define('dummy/enums/integration-examples/edit-form/readonly-mode/enumeration', ['exports', 'ember-flexberry-data/utils/enum-functions'], function (exports, _emberFlexberryDataUtilsEnumFunctions) {
  exports['default'] = (0, _emberFlexberryDataUtilsEnumFunctions.createEnum)({
    Value1: 'Enum value №1',
    Value2: 'Enum value №2',
    Value3: 'Enum value №3'
  });
});
define('dummy/enums/integration-examples/edit-form/validation/enumeration', ['exports', 'ember-flexberry-data/utils/enum-functions'], function (exports, _emberFlexberryDataUtilsEnumFunctions) {
  exports['default'] = (0, _emberFlexberryDataUtilsEnumFunctions.createEnum)({
    Value1: 'Enum value №1',
    Value2: 'Enum value №2',
    Value3: 'Enum value №3'
  });
});
define('dummy/helpers/and', ['exports', 'ember', 'ember-truth-helpers/helpers/and'], function (exports, _ember, _emberTruthHelpersHelpersAnd) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersAnd.andHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersAnd.andHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/array-contains', ['exports', 'ember-flexberry/helpers/array-contains'], function (exports, _emberFlexberryHelpersArrayContains) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryHelpersArrayContains['default'];
    }
  });
  Object.defineProperty(exports, 'arrayContains', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryHelpersArrayContains.arrayContains;
    }
  });
});
define('dummy/helpers/array', ['exports', 'ember-flexberry/helpers/array'], function (exports, _emberFlexberryHelpersArray) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryHelpersArray['default'];
    }
  });
});
define('dummy/helpers/block-params', ['exports', 'ember-block-slots/helpers/block-params'], function (exports, _emberBlockSlotsHelpersBlockParams) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBlockSlotsHelpersBlockParams['default'];
    }
  });
  Object.defineProperty(exports, 'blockParams', {
    enumerable: true,
    get: function get() {
      return _emberBlockSlotsHelpersBlockParams.blockParams;
    }
  });
});
define('dummy/helpers/eq', ['exports', 'ember', 'ember-truth-helpers/helpers/equal'], function (exports, _ember, _emberTruthHelpersHelpersEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersEqual.equalHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersEqual.equalHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/flexberry-enum', ['exports', 'ember-flexberry/helpers/flexberry-enum'], function (exports, _emberFlexberryHelpersFlexberryEnum) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryHelpersFlexberryEnum['default'];
    }
  });
});
define('dummy/helpers/get-formatted', ['exports', 'ember-flexberry/helpers/get-formatted'], function (exports, _emberFlexberryHelpersGetFormatted) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryHelpersGetFormatted['default'];
    }
  });
});
define('dummy/helpers/get-with-dynamic-actions', ['exports', 'ember-flexberry/helpers/get-with-dynamic-actions'], function (exports, _emberFlexberryHelpersGetWithDynamicActions) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryHelpersGetWithDynamicActions['default'];
    }
  });
});
define('dummy/helpers/gt', ['exports', 'ember', 'ember-truth-helpers/helpers/gt'], function (exports, _ember, _emberTruthHelpersHelpersGt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGt.gtHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGt.gtHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/gte', ['exports', 'ember', 'ember-truth-helpers/helpers/gte'], function (exports, _ember, _emberTruthHelpersHelpersGte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGte.gteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGte.gteHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/is-array', ['exports', 'ember', 'ember-truth-helpers/helpers/is-array'], function (exports, _ember, _emberTruthHelpersHelpersIsArray) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/is-blank', ['exports', 'ember-flexberry/helpers/is-blank'], function (exports, _emberFlexberryHelpersIsBlank) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryHelpersIsBlank['default'];
    }
  });
});
define('dummy/helpers/lt', ['exports', 'ember', 'ember-truth-helpers/helpers/lt'], function (exports, _ember, _emberTruthHelpersHelpersLt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLt.ltHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLt.ltHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/lte', ['exports', 'ember', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersHelpersLte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLte.lteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/moment-calendar', ['exports', 'ember-moment/helpers/moment-calendar'], function (exports, _emberMomentHelpersMomentCalendar) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentCalendar['default'];
    }
  });
  Object.defineProperty(exports, 'momentCalendar', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentCalendar.momentCalendar;
    }
  });
});
define('dummy/helpers/moment-duration', ['exports', 'ember-moment/helpers/moment-duration'], function (exports, _emberMomentHelpersMomentDuration) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentDuration['default'];
    }
  });
});
define('dummy/helpers/moment-format', ['exports', 'ember', 'dummy/config/environment', 'ember-moment/helpers/moment-format'], function (exports, _ember, _dummyConfigEnvironment, _emberMomentHelpersMomentFormat) {
  exports['default'] = _emberMomentHelpersMomentFormat['default'].extend({
    globalAllowEmpty: !!_ember['default'].get(_dummyConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('dummy/helpers/moment-from-now', ['exports', 'ember', 'dummy/config/environment', 'ember-moment/helpers/moment-from-now'], function (exports, _ember, _dummyConfigEnvironment, _emberMomentHelpersMomentFromNow) {
  exports['default'] = _emberMomentHelpersMomentFromNow['default'].extend({
    globalAllowEmpty: !!_ember['default'].get(_dummyConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('dummy/helpers/moment-to-now', ['exports', 'ember', 'dummy/config/environment', 'ember-moment/helpers/moment-to-now'], function (exports, _ember, _dummyConfigEnvironment, _emberMomentHelpersMomentToNow) {
  exports['default'] = _emberMomentHelpersMomentToNow['default'].extend({
    globalAllowEmpty: !!_ember['default'].get(_dummyConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('dummy/helpers/not-eq', ['exports', 'ember', 'ember-truth-helpers/helpers/not-equal'], function (exports, _ember, _emberTruthHelpersHelpersNotEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/not', ['exports', 'ember', 'ember-truth-helpers/helpers/not'], function (exports, _ember, _emberTruthHelpersHelpersNot) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNot.notHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNot.notHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/or', ['exports', 'ember', 'ember-truth-helpers/helpers/or'], function (exports, _ember, _emberTruthHelpersHelpersOr) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersOr.orHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersOr.orHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _emberInflectorLibHelpersPluralize) {
  exports['default'] = _emberInflectorLibHelpersPluralize['default'];
});
define('dummy/helpers/readonly-cell', ['exports', 'ember-flexberry/helpers/readonly-cell'], function (exports, _emberFlexberryHelpersReadonlyCell) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryHelpersReadonlyCell['default'];
    }
  });
  Object.defineProperty(exports, 'readonlyCell', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryHelpersReadonlyCell.readonlyCell;
    }
  });
});
define('dummy/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _emberInflectorLibHelpersSingularize) {
  exports['default'] = _emberInflectorLibHelpersSingularize['default'];
});
define('dummy/helpers/t', ['exports', 'ember-i18n/helper'], function (exports, _emberI18nHelper) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nHelper['default'];
    }
  });
});
define('dummy/helpers/to-safe-string', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  /**
    Calls [Ember.Handlebars.SafeString] with the provided string.
    This is a convenient way to render JS variables values and HTML-tags.
  
    @method toSafeString
    @for Ember.Templates.helpers
    @param {*} value Value to be formatted as safe string.
    @see {Ember.Handlebars.SafeString}
    @public
  */
  exports['default'] = _ember['default'].Helper.extend({
    compute: function compute(_ref) {
      var _ref2 = _slicedToArray(_ref, 1);

      var value = _ref2[0];

      return new _ember['default'].Handlebars.SafeString(value);
    }
  });
});
define('dummy/helpers/to-string', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  /**
    Casts given value into string.
    This is a convenient way to render JS variables values as their string representations.
  
    @method toString
    @for Ember.Templates.helpers
    @param {*} value Value to be casted into string.
    @public
  */
  exports['default'] = _ember['default'].Helper.extend({
    compute: function compute(_ref) {
      var _ref2 = _slicedToArray(_ref, 1);

      var value = _ref2[0];

      return '' + value;
    }
  });
});
define('dummy/helpers/xor', ['exports', 'ember', 'ember-truth-helpers/helpers/xor'], function (exports, _ember, _emberTruthHelpersHelpersXor) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersXor.xorHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersXor.xorHelper);
  }

  exports['default'] = forExport;
});
define('dummy/initializers/allow-link-action', ['exports', 'ember-link-action/initializers/allow-link-action'], function (exports, _emberLinkActionInitializersAllowLinkAction) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLinkActionInitializersAllowLinkAction['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberLinkActionInitializersAllowLinkAction.initialize;
    }
  });
});
define('dummy/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'dummy/config/environment'], function (exports, _emberCliAppVersionInitializerFactory, _dummyConfigEnvironment) {
  exports['default'] = {
    name: 'App Version',
    initialize: (0, _emberCliAppVersionInitializerFactory['default'])(_dummyConfigEnvironment['default'].APP.name, _dummyConfigEnvironment['default'].APP.version)
  };
});
define('dummy/initializers/component-prop-types', ['exports', 'ember-prop-types/initializers/component-prop-types'], function (exports, _emberPropTypesInitializersComponentPropTypes) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPropTypesInitializersComponentPropTypes['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberPropTypesInitializersComponentPropTypes.initialize;
    }
  });
});
define('dummy/initializers/container-debug-adapter', ['exports', 'ember-resolver/container-debug-adapter'], function (exports, _emberResolverContainerDebugAdapter) {
  exports['default'] = {
    name: 'container-debug-adapter',

    initialize: function initialize() {
      var app = arguments[1] || arguments[0];

      app.register('container-debug-adapter:main', _emberResolverContainerDebugAdapter['default']);
      app.inject('container-debug-adapter:main', 'namespace', 'application:main');
    }
  };
});
define('dummy/initializers/data-adapter', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `data-adapter` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'data-adapter',
    before: 'store',
    initialize: _ember['default'].K
  };
});
define('dummy/initializers/ember-data', ['exports', 'ember-data/setup-container', 'ember-data/-private/core'], function (exports, _emberDataSetupContainer, _emberDataPrivateCore) {

  /*
  
    This code initializes Ember-Data onto an Ember application.
  
    If an Ember.js developer defines a subclass of DS.Store on their application,
    as `App.StoreService` (or via a module system that resolves to `service:store`)
    this code will automatically instantiate it and make it available on the
    router.
  
    Additionally, after an application's controllers have been injected, they will
    each have the store made available to them.
  
    For example, imagine an Ember.js application with the following classes:
  
    App.StoreService = DS.Store.extend({
      adapter: 'custom'
    });
  
    App.PostsController = Ember.ArrayController.extend({
      // ...
    });
  
    When the application is initialized, `App.ApplicationStore` will automatically be
    instantiated, and the instance of `App.PostsController` will have its `store`
    property set to that instance.
  
    Note that this code will only be run if the `ember-application` package is
    loaded. If Ember Data is being used in an environment other than a
    typical application (e.g., node.js where only `ember-runtime` is available),
    this code will be ignored.
  */

  exports['default'] = {
    name: 'ember-data',
    initialize: _emberDataSetupContainer['default']
  };
});
define("dummy/initializers/ember-i18n", ["exports", "dummy/instance-initializers/ember-i18n"], function (exports, _dummyInstanceInitializersEmberI18n) {
  exports["default"] = {
    name: _dummyInstanceInitializersEmberI18n["default"].name,

    initialize: function initialize() {
      var application = arguments[1] || arguments[0]; // depending on Ember version
      if (application.instanceInitializer) {
        return;
      }

      _dummyInstanceInitializersEmberI18n["default"].initialize(application);
    }
  };
});
define('dummy/initializers/ember-run-after', ['exports', 'ember-flexberry/initializers/ember-run-after'], function (exports, _emberFlexberryInitializersEmberRunAfter) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersEmberRunAfter['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersEmberRunAfter.initialize;
    }
  });
});
define('dummy/initializers/ember-validations', ['exports', 'ember-flexberry/initializers/ember-validations'], function (exports, _emberFlexberryInitializersEmberValidations) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersEmberValidations['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersEmberValidations.initialize;
    }
  });
});
define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, _ember, _dummyConfigEnvironment) {
  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_dummyConfigEnvironment['default'].exportApplicationGlobal !== false) {
      var theGlobal;
      if (typeof window !== 'undefined') {
        theGlobal = window;
      } else if (typeof global !== 'undefined') {
        theGlobal = global;
      } else if (typeof self !== 'undefined') {
        theGlobal = self;
      } else {
        // no reasonable global, just bail
        return;
      }

      var value = _dummyConfigEnvironment['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = _ember['default'].String.classify(_dummyConfigEnvironment['default'].modulePrefix);
      }

      if (!theGlobal[globalName]) {
        theGlobal[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete theGlobal[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };
});
define('dummy/initializers/flexberry-enum', ['exports', 'ember-flexberry-data/initializers/flexberry-enum'], function (exports, _emberFlexberryDataInitializersFlexberryEnum) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersFlexberryEnum['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersFlexberryEnum.initialize;
    }
  });
});
define('dummy/initializers/i18n', ['exports', 'ember-flexberry/initializers/i18n'], function (exports, _emberFlexberryInitializersI18n) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersI18n['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersI18n.initialize;
    }
  });
});
define('dummy/initializers/injectStore', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `injectStore` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'injectStore',
    before: 'store',
    initialize: _ember['default'].K
  };
});
define('dummy/initializers/local-store', ['exports', 'ember-flexberry-data/initializers/local-store'], function (exports, _emberFlexberryDataInitializersLocalStore) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersLocalStore['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersLocalStore.initialize;
    }
  });
});
define('dummy/initializers/log', ['exports', 'ember-flexberry/initializers/log'], function (exports, _emberFlexberryInitializersLog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersLog['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersLog.initialize;
    }
  });
});
define('dummy/initializers/moment', ['exports', 'ember-flexberry/initializers/moment'], function (exports, _emberFlexberryInitializersMoment) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersMoment['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersMoment.initialize;
    }
  });
});
define('dummy/initializers/offline-globals', ['exports', 'ember-flexberry-data/initializers/offline-globals'], function (exports, _emberFlexberryDataInitializersOfflineGlobals) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersOfflineGlobals['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersOfflineGlobals.initialize;
    }
  });
});
define('dummy/initializers/perf', ['exports', 'ember-flexberry/initializers/perf'], function (exports, _emberFlexberryInitializersPerf) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersPerf['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersPerf.initialize;
    }
  });
});
define('dummy/initializers/render-perf-logger', ['exports', 'ember-flexberry/initializers/render-perf-logger'], function (exports, _emberFlexberryInitializersRenderPerfLogger) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersRenderPerfLogger['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersRenderPerfLogger.initialize;
    }
  });
});
define('dummy/initializers/store', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `store` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'store',
    after: 'ember-data',
    initialize: _ember['default'].K
  };
});
define('dummy/initializers/transforms', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `transforms` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'transforms',
    before: 'store',
    initialize: _ember['default'].K
  };
});
define('dummy/initializers/truth-helpers', ['exports', 'ember', 'ember-truth-helpers/utils/register-helper', 'ember-truth-helpers/helpers/and', 'ember-truth-helpers/helpers/or', 'ember-truth-helpers/helpers/equal', 'ember-truth-helpers/helpers/not', 'ember-truth-helpers/helpers/is-array', 'ember-truth-helpers/helpers/not-equal', 'ember-truth-helpers/helpers/gt', 'ember-truth-helpers/helpers/gte', 'ember-truth-helpers/helpers/lt', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersUtilsRegisterHelper, _emberTruthHelpersHelpersAnd, _emberTruthHelpersHelpersOr, _emberTruthHelpersHelpersEqual, _emberTruthHelpersHelpersNot, _emberTruthHelpersHelpersIsArray, _emberTruthHelpersHelpersNotEqual, _emberTruthHelpersHelpersGt, _emberTruthHelpersHelpersGte, _emberTruthHelpersHelpersLt, _emberTruthHelpersHelpersLte) {
  exports.initialize = initialize;

  function initialize() /* container, application */{

    // Do not register helpers from Ember 1.13 onwards, starting from 1.13 they
    // will be auto-discovered.
    if (_ember['default'].Helper) {
      return;
    }

    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('and', _emberTruthHelpersHelpersAnd.andHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('or', _emberTruthHelpersHelpersOr.orHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('eq', _emberTruthHelpersHelpersEqual.equalHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not', _emberTruthHelpersHelpersNot.notHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('is-array', _emberTruthHelpersHelpersIsArray.isArrayHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not-eq', _emberTruthHelpersHelpersNotEqual.notEqualHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gt', _emberTruthHelpersHelpersGt.gtHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gte', _emberTruthHelpersHelpersGte.gteHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lt', _emberTruthHelpersHelpersLt.ltHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lte', _emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = {
    name: 'truth-helpers',
    initialize: initialize
  };
});
define('dummy/initializers/user-settings', ['exports', 'ember-flexberry/initializers/user-settings'], function (exports, _emberFlexberryInitializersUserSettings) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersUserSettings['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersUserSettings.initialize;
    }
  });
});
define('dummy/instance-initializers/block-slots', ['exports', 'ember-flexberry/instance-initializers/block-slots'], function (exports, _emberFlexberryInstanceInitializersBlockSlots) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersBlockSlots['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersBlockSlots.initialize;
    }
  });
});
define('dummy/instance-initializers/default-user-setting', ['exports', 'ember-flexberry/instance-initializers/default-user-settings'], function (exports, _emberFlexberryInstanceInitializersDefaultUserSettings) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersDefaultUserSettings['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersDefaultUserSettings.initialize;
    }
  });
});
define('dummy/instance-initializers/device', ['exports', 'ember-flexberry/instance-initializers/device'], function (exports, _emberFlexberryInstanceInitializersDevice) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersDevice['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersDevice.initialize;
    }
  });
});
define("dummy/instance-initializers/ember-data", ["exports", "ember-data/-private/instance-initializers/initialize-store-service"], function (exports, _emberDataPrivateInstanceInitializersInitializeStoreService) {
  exports["default"] = {
    name: "ember-data",
    initialize: _emberDataPrivateInstanceInitializersInitializeStoreService["default"]
  };
});
define("dummy/instance-initializers/ember-i18n", ["exports", "ember", "ember-i18n/stream", "ember-i18n/legacy-helper", "dummy/config/environment"], function (exports, _ember, _emberI18nStream, _emberI18nLegacyHelper, _dummyConfigEnvironment) {
  exports["default"] = {
    name: 'ember-i18n',

    initialize: function initialize(appOrAppInstance) {
      if (_emberI18nLegacyHelper["default"] != null) {
        (function () {
          // Used for Ember < 1.13
          var i18n = appOrAppInstance.container.lookup('service:i18n');

          i18n.localeStream = new _emberI18nStream["default"](function () {
            return i18n.get('locale');
          });

          _ember["default"].addObserver(i18n, 'locale', i18n, function () {
            this.localeStream.value(); // force the stream to be dirty
            this.localeStream.notify();
          });

          _ember["default"].HTMLBars._registerHelper('t', _emberI18nLegacyHelper["default"]);
        })();
      }
    }
  };
});
define('dummy/instance-initializers/i18n', ['exports', 'ember-flexberry/instance-initializers/moment'], function (exports, _emberFlexberryInstanceInitializersMoment) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersMoment['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersMoment.initialize;
    }
  });
});
define('dummy/instance-initializers/lock', ['exports', 'ember-flexberry/instance-initializers/lock'], function (exports, _emberFlexberryInstanceInitializersLock) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersLock['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersLock.initialize;
    }
  });
});
define('dummy/instance-initializers/log', ['exports', 'ember-flexberry/instance-initializers/log'], function (exports, _emberFlexberryInstanceInitializersLog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersLog['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersLog.initialize;
    }
  });
});
define('dummy/instance-initializers/moment', ['exports', 'ember-flexberry/instance-initializers/i18n'], function (exports, _emberFlexberryInstanceInitializersI18n) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersI18n['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersI18n.initialize;
    }
  });
});
define('dummy/instance-initializers/perf', ['exports', 'ember-flexberry/instance-initializers/perf'], function (exports, _emberFlexberryInstanceInitializersPerf) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersPerf['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersPerf.initialize;
    }
  });
});
define('dummy/instance-initializers/set-singletons', ['exports', 'ember-flexberry-data/instance-initializers/set-singletons'], function (exports, _emberFlexberryDataInstanceInitializersSetSingletons) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInstanceInitializersSetSingletons['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInstanceInitializersSetSingletons.initialize;
    }
  });
});
define('dummy/locales/en/models/components-examples/edit-form/readonly-mode/detail', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      undefined: {
        flag: {
          __caption__: 'Flag'
        },
        text: {
          __caption__: 'Text'
        },
        date: {
          __caption__: 'Date'
        },
        file: {
          __caption__: 'File'
        },
        enumeration: {
          __caption__: 'Enumeration'
        },
        master: {
          __caption__: 'Master'
        }
      }
    }
  };
});
define('dummy/locales/en/models/components-examples/edit-form/validation/base', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      BaseE: {
        details: {
          __caption__: 'Flag'
        }
      }
    }
  };
});
define('dummy/locales/en/models/components-examples/flexberry-groupedit/shared/detail', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      undefined: {
        flag: {
          __caption__: 'Flag'
        },
        text: {
          __caption__: 'Text'
        },
        date: {
          __caption__: 'Date'
        },
        file: {
          __caption__: 'File'
        },
        enumeration: {
          __caption__: 'Enumeration'
        },
        master: {
          __caption__: 'Master'
        }
      }
    }
  };
});
define('dummy/locales/en/models/ember-flexberry-dummy-application-user', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      ApplicationUserL: {
        name: {
          __caption__: 'Name'
        },
        eMail: {
          __caption__: 'E-mail'
        },
        activated: {
          __caption__: 'Activated'
        },
        birthday: {
          __caption__: 'Birthday'
        },
        gender: {
          __caption__: 'Gender'
        },
        karma: {
          __caption__: 'Karma'
        }
      }
    }
  };
});
define('dummy/locales/en/models/ember-flexberry-dummy-comment', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      CommentE: {
        text: {
          __caption__: 'Text'
        },
        userVotes: {
          voteType: {
            __caption__: 'Vote type'
          },
          applicationUser: {
            __caption__: 'User',
            name: {
              __caption__: 'Name'
            }
          }
        }
      }
    }
  };
});
define('dummy/locales/en/models/ember-flexberry-dummy-departament', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      DepartamentE: {
        name: {
          __caption__: 'name'
        },
        vid: {
          __caption__: 'vid'
        }
      },
      DepartamentL: {
        name: {
          __caption__: 'name'
        }
      }
    }
  };
});
define('dummy/locales/en/models/ember-flexberry-dummy-localization', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      LocalizationL: {
        name: {
          __caption__: 'Name'
        }
      }
    }
  };
});
define('dummy/locales/en/models/ember-flexberry-dummy-sotrudnik', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      SotrudnikE: {
        familiia: {
          __caption__: 'familiia'
        },
        name: {
          __caption__: 'name'
        },
        dataRozhdeniia: {
          __caption__: 'dataRozhdeniia'
        },
        departament: {
          __caption__: 'departament',
          vid: {
            __caption__: 'vid'
          }
        }
      },
      SotrudnikL: {
        familiia: {
          __caption__: 'familiia'
        },
        name: {
          __caption__: 'name'
        },
        dataRozhdeniia: {
          __caption__: 'dataRozhdeniia'
        }
      }
    }
  };
});
define('dummy/locales/en/models/ember-flexberry-dummy-suggestion-file', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      SuggestionFileL: {
        order: {
          __caption__: 'Order'
        },
        file: {
          __caption__: 'File'
        },
        suggestion: {
          __caption__: 'Suggestion'
        }
      }
    }
  };
});
define('dummy/locales/en/models/ember-flexberry-dummy-suggestion-type', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      SuggestionTypeL: {
        name: {
          __caption__: 'Name'
        },
        moderated: {
          __caption__: 'Moderated'
        },
        parent: {
          __caption__: 'Parent'
        }
      },
      SuggestionTypeE: {
        name: {
          __caption__: 'Name'
        },
        moderated: {
          __caption__: 'Moderated'
        },
        parent: {
          __caption__: 'Parent'
        },
        localizedTypes: {
          name: {
            __caption__: 'Localized type'
          },
          localization: {
            __caption__: 'Localization',
            name: {
              __caption__: 'Name'
            }
          }
        }
      },
      SuggestionTypeEWithComputedField: {
        name: {
          __caption__: 'Name'
        },
        moderated: {
          __caption__: 'Moderated'
        },
        computedField: {
          __caption__: 'Computed field'
        },
        parent: {
          __caption__: 'Parent',
          name: {
            __caption__: 'Name'
          },
          moderated: {
            __caption__: 'Moderated'
          },
          computedField: {
            __caption__: 'Computed field'
          },
          creator: {
            __caption__: 'creator'
          }
        },
        createTime: {
          __caption__: 'createTime'
        },
        creator: {
          __caption__: 'creator'
        },
        editTime: {
          __caption__: 'editTime'
        },
        editor: {
          __caption__: 'editor'
        }
      },
      CustomizeLookupWindowExampleView: {
        name: {
          __caption__: 'Name'
        },
        moderated: {
          __caption__: 'Moderated'
        },
        parent: {
          __caption__: 'Parent'
        }
      },
      SettingLookupExampleView: {
        name: {
          __caption__: 'Name'
        },
        moderated: {
          __caption__: 'Moderated'
        }
      }
    }
  };
});
define('dummy/locales/en/models/ember-flexberry-dummy-suggestion', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      SuggestionL: {
        address: {
          __caption__: 'Address'
        },
        text: {
          __caption__: 'Text'
        },
        date: {
          __caption__: 'Date'
        },
        votes: {
          __caption__: 'Votes'
        },
        author: {
          __caption__: 'Author',
          eMail: {
            __caption__: 'Email'
          }
        },
        editor1: {
          __caption__: 'Editor',
          eMail: {
            __caption__: 'Email'
          }
        },
        moderated: {
          __caption__: 'Moderated'
        },
        type: {
          __caption__: 'Type'
        },
        commentsCount: {
          __caption__: 'Comments count'
        },
        comments: {
          __caption__: 'Comments'
        }
      },
      SuggestionE: {
        author: {
          __caption__: 'Author',
          eMail: {
            __caption__: 'Email'
          }
        },
        editor1: {
          __caption__: 'Editor',
          eMail: {
            __caption__: 'Email'
          }
        },
        moderated: {
          __caption__: 'Moderated'
        },
        type: {
          __caption__: 'Type'
        },
        text: {
          __caption__: 'Text'
        },
        date: {
          __caption__: 'Date'
        },
        votes: {
          __caption__: 'Votes'
        },
        address: {
          __caption__: 'Address'
        },
        userVotes: {
          name: {
            __caption__: 'Name'
          },
          voteType: {
            __caption__: 'Vote type'
          },
          author: {
            __caption__: 'Application User',
            eMail: {
              __caption__: 'Email'
            }
          }
        },
        files: {
          order: {
            __caption__: 'Order'
          },
          file: {
            __caption__: 'File'
          }
        },
        comments: {
          name: {
            __caption__: 'Name'
          },
          text: {
            __caption__: 'Text'
          },
          votes: {
            __caption__: 'Votes'
          },
          moderated: {
            __caption__: 'Moderated'
          },
          author: {
            __caption__: 'Application User',
            eMail: {
              __caption__: 'Mail'
            }
          }
        }
      },
      SuggestionEWithComputedField: {
        address: {
          __caption__: 'address'
        },
        text: {
          __caption__: 'text'
        },
        date: {
          __caption__: 'date'
        },
        votes: {
          __caption__: 'votes'
        },
        moderated: {
          __caption__: 'moderated'
        },
        author: {
          __caption__: 'author',
          name: {
            __caption__: 'name'
          }
        },
        type: {
          __caption__: 'type',
          name: {
            __caption__: 'name'
          },
          moderated: {
            __caption__: 'moderated'
          },
          computedField: {
            __caption__: 'computedField'
          },
          creator: {
            __caption__: 'creator'
          }
        },
        editor1: {
          __caption__: 'editor1',
          name: {
            __caption__: 'name'
          }
        },
        createTime: {
          __caption__: 'createTime'
        },
        creator: {
          __caption__: 'creator'
        },
        editTime: {
          __caption__: 'editTime'
        },
        editor: {
          __caption__: 'editor'
        }
      },
      FlexberryObjectlistviewFilterTest: {
        address: {
          __caption__: 'Address'
        },
        date: {
          __caption__: 'Data'
        },
        votes: {
          __caption__: 'Votes'
        },
        moderated: {
          __caption__: 'Moderated'
        },
        author: {
          __caption__: 'Author',
          name: {
            __caption__: 'Name'
          }
        },
        type: {
          __caption__: 'Type',
          name: {
            __caption__: 'Name'
          },
          moderated: {
            __caption__: 'Moderated'
          },
          computedField: {
            __caption__: 'Computed field'
          },
          creator: {
            __caption__: 'Creator'
          }
        }
      },
      FolvWithLimitFunctionExampleView: {
        address: {
          __caption__: 'Address'
        },
        text: {
          __caption__: 'Text'
        },
        votes: {
          __caption__: 'Votes'
        },
        moderated: {
          __caption__: 'Moderated'
        },
        type: {
          __caption__: 'Type',
          name: {
            __caption__: 'Name'
          },
          moderated: {
            __caption__: 'Moderated'
          },
          computedField: {
            __caption__: 'Computed field'
          },
          creator: {
            __caption__: 'Creator'
          }
        }
      },
      SettingLookupExampleView: {
        name: {
          __caption__: 'Name'
        },
        moderated: {
          __caption__: 'Moderated'
        },
        type: {
          __caption__: 'Type'
        }
      },
      PreviewExampleView: {
        userVotes: {
          author: {
            __caption__: 'Author'
          }
        }
      },
      FlexberryObjectlistviewCustomFilter: {
        address: {
          __caption__: 'Address'
        },
        date: {
          __caption__: 'Date'
        },
        votes: {
          __caption__: 'Votes'
        },
        type: {
          __caption__: 'Type',
          moderated: {
            __caption__: 'Moderated'
          },
          parent: {
            __caption__: 'Parent',
            name: {
              __caption__: 'Name'
            }
          }
        },
        author: {
          __caption__: 'Author',
          eMail: {
            __caption__: 'Email'
          }
        },
        editor1: {
          __caption__: 'Editor'
        }
      },
      SuggestionMainModelProjectionTest: {
        userVotes: {
          voteType: {
            __caption__: 'Vote type'
          }
        }
      }
    }
  };
});
define('dummy/locales/en/models/ember-flexberry-dummy-vid-departamenta', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      VidDepartamentaE: {
        name: {
          __caption__: 'name'
        }
      },
      VidDepartamentaL: {
        name: {
          __caption__: 'name'
        }
      }
    }
  };
});
define('dummy/locales/en/models/integration-examples/edit-form/readonly-mode/detail', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      undefined: {
        flag: {
          __caption__: 'Flag'
        },
        text: {
          __caption__: 'Text'
        },
        longText: {
          __caption__: 'Long text'
        },
        date: {
          __caption__: 'Date'
        },
        time: {
          __caption__: 'Time'
        },
        file: {
          __caption__: 'File'
        },
        enumeration: {
          __caption__: 'Enumeration'
        },
        master: {
          __caption__: 'Master'
        },
        masterDropdown: {
          __caption__: 'Master dropdown'
        }
      }
    }
  };
});
define('dummy/locales/en/models/integration-examples/edit-form/validation/base', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      BaseE: {
        details: {
          flag: {
            __caption__: 'Flag'
          },
          number: {
            __caption__: 'Number'
          },
          text: {
            __caption__: 'Text'
          }
        }
      }
    }
  };
});
define('dummy/locales/en/translations', ['exports', 'ember', 'ember-flexberry/locales/en/translations', 'dummy/locales/en/models/ember-flexberry-dummy-suggestion', 'dummy/locales/en/models/ember-flexberry-dummy-suggestion-type', 'dummy/locales/en/models/ember-flexberry-dummy-application-user', 'dummy/locales/en/models/ember-flexberry-dummy-localization', 'dummy/locales/en/models/ember-flexberry-dummy-comment', 'dummy/locales/en/models/ember-flexberry-dummy-suggestion-file', 'dummy/locales/en/models/components-examples/flexberry-groupedit/shared/detail', 'dummy/locales/en/models/components-examples/edit-form/readonly-mode/detail', 'dummy/locales/en/models/integration-examples/edit-form/readonly-mode/detail', 'dummy/locales/en/models/integration-examples/edit-form/validation/base', 'dummy/locales/en/models/ember-flexberry-dummy-departament', 'dummy/locales/en/models/ember-flexberry-dummy-sotrudnik', 'dummy/locales/en/models/ember-flexberry-dummy-vid-departamenta'], function (exports, _ember, _emberFlexberryLocalesEnTranslations, _dummyLocalesEnModelsEmberFlexberryDummySuggestion, _dummyLocalesEnModelsEmberFlexberryDummySuggestionType, _dummyLocalesEnModelsEmberFlexberryDummyApplicationUser, _dummyLocalesEnModelsEmberFlexberryDummyLocalization, _dummyLocalesEnModelsEmberFlexberryDummyComment, _dummyLocalesEnModelsEmberFlexberryDummySuggestionFile, _dummyLocalesEnModelsComponentsExamplesFlexberryGroupeditSharedDetail, _dummyLocalesEnModelsComponentsExamplesEditFormReadonlyModeDetail, _dummyLocalesEnModelsIntegrationExamplesEditFormReadonlyModeDetail, _dummyLocalesEnModelsIntegrationExamplesEditFormValidationBase, _dummyLocalesEnModelsEmberFlexberryDummyDepartament, _dummyLocalesEnModelsEmberFlexberryDummySotrudnik, _dummyLocalesEnModelsEmberFlexberryDummyVidDepartamenta) {

  var translations = {};
  _ember['default'].$.extend(true, translations, _emberFlexberryLocalesEnTranslations['default']);

  _ember['default'].$.extend(true, translations, {

    // eslint-disable-next-line ember/avoid-leaking-state-in-ember-objects
    models: {
      'ember-flexberry-dummy-suggestion': _dummyLocalesEnModelsEmberFlexberryDummySuggestion['default'],
      'ember-flexberry-dummy-suggestion-type': _dummyLocalesEnModelsEmberFlexberryDummySuggestionType['default'],
      'components-examples/flexberry-groupedit/shared/detail': _dummyLocalesEnModelsComponentsExamplesFlexberryGroupeditSharedDetail['default'],
      'components-examples/edit-form/readonly-mode/detail': _dummyLocalesEnModelsComponentsExamplesEditFormReadonlyModeDetail['default'],
      'integration-examples/edit-form/readonly-mode/detail': _dummyLocalesEnModelsIntegrationExamplesEditFormReadonlyModeDetail['default'],
      'integration-examples/edit-form/validation/base': _dummyLocalesEnModelsIntegrationExamplesEditFormValidationBase['default'],
      'ember-flexberry-dummy-application-user': _dummyLocalesEnModelsEmberFlexberryDummyApplicationUser['default'],
      'ember-flexberry-dummy-localization': _dummyLocalesEnModelsEmberFlexberryDummyLocalization['default'],
      'ember-flexberry-dummy-comment': _dummyLocalesEnModelsEmberFlexberryDummyComment['default'],
      'ember-flexberry-dummy-suggestion-file': _dummyLocalesEnModelsEmberFlexberryDummySuggestionFile['default'],
      'ember-flexberry-dummy-departament': _dummyLocalesEnModelsEmberFlexberryDummyDepartament['default'],
      'ember-flexberry-dummy-sotrudnik': _dummyLocalesEnModelsEmberFlexberryDummySotrudnik['default'],
      'ember-flexberry-dummy-vid-departamenta': _dummyLocalesEnModelsEmberFlexberryDummyVidDepartamenta['default']
    },

    'application-name': 'Test stand for ember-flexberry',

    // eslint-disable-next-line ember/avoid-leaking-state-in-ember-objects
    'forms': {
      'loading': {
        'spinner-caption': 'Loading stuff, please have a cold beer...'
      },
      'index': {
        'greeting': 'Welcome to ember-flexberry test stand!'
      },

      'application': {
        'header': {
          'menu': {
            'sitemap-button': {
              'title': 'Menu'
            },
            'user-settings-service-checkbox': {
              'caption': 'Use service to save user settings'
            },
            'show-menu': {
              'caption': 'Show menu'
            },
            'hide-menu': {
              'caption': 'Hide menu'
            },
            'language-dropdown': {
              'caption': 'Application language',
              'placeholder': 'Choose language'
            }
          },
          'login': {
            'caption': 'Login'
          },
          'logout': {
            'caption': 'Logout'
          }
        },

        'delete-rows-modal-dialog': {
          'confirm-button-caption': 'Delete',
          'cancel-button-caption': 'Cancel',
          'delete-row-caption': 'Delete row ?',
          'delete-rows-caption': 'Delete selected rows ?'
        },

        'footer': {
          'application-name': 'Test stand for ember-flexberry',
          'application-version': {
            'caption': 'Addon version {{version}}',
            'title': 'It is version of ember-flexberry addon, which uses in this dummy application ' + '(npm version + commit sha). ' + 'Click to open commit on GitHub.'
          }
        },

        'sitemap': {
          'application-name': {
            'caption': 'Test stand for ember-flexberry',
            'title': ''
          },
          'application-version': {
            'caption': 'Addon version {{version}}',
            'title': 'It is version of ember-flexberry addon, which uses in this dummy application ' + '(npm version + commit sha). ' + 'Click to open commit on GitHub.'
          },
          'index': {
            'caption': 'Home',
            'title': ''
          },
          'application': {
            'caption': 'Application',
            'title': '',
            'application-users': {
              'caption': 'Application users',
              'title': ''
            },
            'localizations': {
              'caption': 'Localizations',
              'title': ''
            },
            'suggestion-types': {
              'caption': 'Suggestion types',
              'title': ''
            },
            'suggestions': {
              'caption': 'Suggestions',
              'title': ''
            },
            'multi': {
              'caption': 'Multi list',
              'title': ''
            },
            'suggestion-file': {
              'caption': 'Suggestion file',
              'title': ''
            }
          },
          'log-service-examples': {
            'caption': 'Log service',
            'title': '',
            'application-log': {
              'caption': 'Application log',
              'title': ''
            },
            'settings-example': {
              'caption': 'Settings example',
              'title': ''
            },
            'clear-log-form': {
              'caption': 'Clear log',
              'title': ''
            }
          },
          'lock': {
            'caption': 'Blocking',
            'title': 'Block list'
          },
          'components-examples': {
            'caption': 'Components examples',
            'title': '',
            'flexberry-button': {
              'caption': 'flexberry-button',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              }
            },
            'flexberry-checkbox': {
              'caption': 'flexberry-checkbox',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              },
              'three-state-example': {
                'caption': 'Three-state example',
                'title': ''
              }
            },
            'flexberry-ddau-checkbox': {
              'caption': 'flexberry-ddau-checkbox',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              }
            },
            'flexberry-datepicker': {
              'caption': 'flexberry-datepicker',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              }
            },
            'flexberry-dropdown': {
              'caption': 'flexberry-dropdown',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              },
              'conditional-render-example': {
                'caption': 'Conditional render example',
                'title': ''
              },
              'empty-value-example': {
                'caption': 'Example dropdown with empty value',
                'title': ''
              },
              'items-example': {
                'caption': 'Example values of the items',
                'title': ''
              }
            },
            'flexberry-field': {
              'caption': 'flexberry-field',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              }
            },
            'flexberry-file': {
              'caption': 'flexberry-file',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              },
              'flexberry-file-in-modal': {
                'caption': 'Flexberry file in modal window',
                'title': ''
              }
            },
            'flexberry-groupedit': {
              'caption': 'flexberry-groupedit',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              },
              'model-update-example': {
                'caption': 'Model update example',
                'title': ''
              },
              'custom-buttons-example': {
                'caption': 'Custom user buttons example',
                'title': ''
              },
              'configurate-row-example': {
                'caption': 'Configurate rows',
                'title': ''
              },
              'groupedit-with-lookup-with-computed-atribute': {
                'caption': 'Computed attributes LookUp  in GroupEdit',
                'title': ''
              },
              'readonly-columns-by-configurate-row-example': {
                'caption': 'GrouptEdit readonly columns by configurateRow',
                'title': ''
              }
            },
            'flexberry-lookup': {
              'caption': 'flexberry-lookup',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              },
              'customizing-window-example': {
                'caption': 'Window customization',
                'title': ''
              },
              'compute-autocomplete': {
                'caption': 'Example lookup with compute autocomplete',
                'title': ''
              },
              'numeric-autocomplete': {
                'caption': 'Example lookup with autocomplete and dropdwon with numeric displayAttributeName',
                'title': ''
              },
              'hierarchy-olv-in-lookup-example': {
                'caption': 'Example hierarchical OLV in lookup',
                'title': ''
              },
              'limit-function-example': {
                'caption': 'Limit function example',
                'title': ''
              },
              'autofill-by-limit-example': {
                'caption': 'Example autofillByLimit',
                'title': ''
              },
              'limit-function-through-dynamic-properties-example': {
                'caption': 'Limit function with dinamic properties example',
                'title': ''
              },
              'lookup-block-form-example': {
                'caption': 'Lookup block form example',
                'title': ''
              },
              'lookup-in-modal': {
                'caption': 'Lookup in modal window',
                'title': ''
              },
              'dropdown-mode-example': {
                'caption': 'Dropdown mode example',
                'title': ''
              },
              'default-ordering-example': {
                'caption': 'Default ordering example',
                'title': ''
              },
              'autocomplete-order-example': {
                'caption': 'Example for autocomplete with order',
                'title': ''
              },
              'user-settings-example': {
                'caption': 'Example for modal dialog olv user settiings',
                'title': ''
              }
            },
            'flexberry-menu': {
              'caption': 'flexberry-menu',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              }
            },
            'flexberry-objectlistview': {
              'caption': 'flexberry-objectlistview',
              'title': '',
              'limit-function-example': {
                'caption': 'Limit function example',
                'title': ''
              },
              'inheritance-models': {
                'caption': 'Inheritance models',
                'title': ''
              },
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              },
              'toolbar-custom-buttons-example': {
                'caption': 'Custom buttons on toolbar',
                'title': ''
              },
              'on-edit-form': {
                'caption': 'Placement on edit form',
                'title': ''
              },
              'list-on-editform': {
                'caption': 'Placement of the list of detail of the master on the editing form',
                'title': ''
              },
              'custom-filter': {
                'caption': 'Custom filter',
                'title': ''
              },
              'edit-form-with-detail-list': {
                'caption': 'List example',
                'title': ''
              },
              'hierarchy-example': {
                'caption': 'Hierarchy example',
                'title': ''
              },
              'hierarchy-paging-example': {
                'caption': 'Hierarchy with paginig example',
                'title': ''
              },
              'configurate-rows': {
                'caption': 'Configurate rows',
                'title': ''
              },
              'selected-rows': {
                'caption': 'Selected rows',
                'title': ''
              },
              'downloading-files-from-olv-list': {
                'caption': 'Downloading files from the list',
                'title': ''
              },
              'object-list-view-resize': {
                'caption': 'Columns markup',
                'title': ''
              },
              'return-from-ediform': {
                'title': 'Return from edit-form to list-form with queryParameter',
                'return-button': 'Return'
              },
              'lock-services-editor-view-list': {
                'caption': 'Example displaying username which the object was locked',
                'title': ''
              },
              'limited-text-size-example': {
                'caption': 'Limited text size example',
                'title': ''
              }
            },
            'flexberry-simpledatetime': {
              'caption': 'flexberry-simpledatetime',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              }
            },
            'flexberry-text-cell': {
              'caption': 'flexberry-text-cell',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              }
            },
            'flexberry-textarea': {
              'caption': 'flexberry-textarea',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              }
            },
            'flexberry-textbox': {
              'caption': 'flexberry-textbox',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              }
            },
            'flexberry-toggler': {
              'caption': 'flexberry-toggler',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              },
              'settings-example-inner': {
                'caption': 'Settings example (toggler in a toggler)',
                'title': ''
              },
              'ge-into-toggler-example': {
                'caption': 'GroupEdit into toggler example'
              }
            },
            'flexberry-tree': {
              'caption': 'flexberry-tree',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              }
            },
            'ui-message': {
              'caption': 'ui-message',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              }
            }
          },
          'integration-examples': {
            'caption': 'Integration examples',
            'title': '',
            'edit-form': {
              'caption': 'Edit form',
              'title': '',
              'readonly-mode': {
                'caption': 'Readonly mode',
                'title': ''
              },
              'validation': {
                'caption': 'Validation',
                'title': ''
              }
            },
            'odata-examples': {
              'caption': 'Work with OData',
              'title': '',
              'get-masters': {
                'caption': 'Get master from oData function',
                'title': '',
                'sotrudnik': {
                  'caption': 'Sotrudnik',
                  'title': ''
                },
                'departament': {
                  'caption': 'Departament',
                  'title': ''
                },
                'vid-departamenta': {
                  'caption': 'Vid departamenta',
                  'title': ''
                }
              }
            }
          },
          'user-setting-forms': {
            'caption': 'User settings',
            'title': '',
            'user-setting-delete': {
              'caption': 'Settings deletion',
              'title': ''
            }
          },
          'components-acceptance-tests': {
            'caption': 'Acceptance tests',
            'title': ''
          }
        }
      },

      'edit-form': {
        'save-success-message-caption': 'Save operation succeed',
        'save-success-message': 'Object saved',
        'save-error-message-caption': 'Save operation failed',
        'delete-success-message-caption': 'Delete operation succeed',
        'delete-success-message': 'Object deleted',
        'delete-error-message-caption': 'Delete operation failed'
      },

      'list-form': {
        'delete-success-message-caption': 'Delete operation succeed',
        'delete-success-message': 'Object deleted',
        'delete-error-message-caption': 'Delete operation failed',
        'load-success-message-caption': 'Load operation succeed',
        'load-success-message': 'Object loaded',
        'load-error-message-caption': 'Load operation failed'
      },

      'ember-flexberry-dummy-application-user-edit': {
        'caption': 'Application user',
        'name-caption': 'Name',
        'eMail-caption': 'E-Mail',
        'phone1-caption': 'Phone1',
        'phone2-caption': 'Phone2',
        'phone3-caption': 'Phone3',
        'activated-caption': 'Activated',
        'vK-caption': 'VK',
        'facebook-caption': 'Facebook',
        'twitter-caption': 'Twitter',
        'birthday-caption': 'Birthday',
        'gender-caption': 'Gender',
        'vip-caption': 'VIP',
        'karma-caption': 'Karma',
        'name-validation-message-caption': 'Name is required',
        'eMail-validation-message-caption': 'E-Mail is required',
        'phone1-required-caption': 'Require filling in the "Phone1" field'
      },

      'ember-flexberry-dummy-comment-edit': {
        'caption': 'Comment',
        'text-caption': 'Text',
        'votes-caption': 'Votes',
        'moderated-caption': 'Moderated',
        'author-caption': 'Author',
        'userVotes-caption': 'User votes',
        'date-caption': 'Date',
        'author-validation-message-caption': 'Author is required'
      },

      'ember-flexberry-dummy-comment-vote-edit': {
        'caption': 'User Vote',
        'voteType-caption': 'Vote type',
        'applicationUser-caption': 'Application user'
      },

      'ember-flexberry-dummy-localization-edit': {
        'caption': 'Localization',
        'name-caption': 'Name',
        'name-validation-message-caption': 'Name is required'
      },

      'ember-flexberry-dummy-suggestion-edit': {
        'caption': 'Suggestion',
        'address-caption': 'Address',
        'text-caption': 'Text',
        'date-caption': 'Date',
        'votes-caption': 'Votes',
        'moderated-caption': 'Moderated',
        'type-caption': 'Type',
        'author-caption': 'Author',
        'editor1-caption': 'Editor',
        'files-caption': 'Files',
        'userVotes-caption': 'User votes',
        'comments-caption': 'Comments',
        'type-validation-message-caption': 'Type is required',
        'author-validation-message-caption': 'Author is required',
        'editor-validation-message-caption': 'Editor is required',
        'readonly-groupedit-with-lookup-with-computed-atribute-field': 'Readonly for LookUp "Application User" in GroupEdit "User votes"',
        'limit-function-groupedit-with-lookup-with-computed-atribute-field': 'Limitations for LookUp "Application User" in GroupEdit "User votes"'
      },

      'ember-flexberry-dummy-suggestion-file-list': {
        'header': 'Suggestion files'
      },

      'ember-flexberry-dummy-suggestion-file-edit': {
        'header': 'Suggestion file',
        'suggestion': 'Suggestion',
        'order': 'Order',
        'file': 'File'
      },

      'ember-flexberry-dummy-toggler-example-master-e': {
        'caption': 'Master',
        'toggler-example-master-property-caption': 'Master property',
        'toggler-example-deteil-property-caption': 'Deteil'
      },

      'ember-flexberry-dummy-suggestion-type-edit': {
        'caption': 'Suggestion type',
        'name-caption': 'Name',
        'moderated-caption': 'Moderated',
        'parent-caption': 'Parent',
        'localized-types-caption': 'Localized types',
        'name-validation-message-caption': 'Name is required'
      },

      'ember-flexberry-dummy-application-user-list': {
        'caption': 'Application users'
      },

      'ember-flexberry-dummy-localization-list': {
        'caption': 'Localizations'
      },

      'ember-flexberry-dummy-suggestion-list': {
        'caption': 'Suggestions'
      },

      'ember-flexberry-dummy-suggestion-type-list': {
        'caption': 'Suggestion types'
      },

      'ember-flexberry-dummy-multi-list': {
        'caption': 'Multi list form',
        'multi-edit-form': 'Multi list edit form'
      },

      'log-service-examples': {
        'settings-example': {
          'caption': 'Log service. Settings example',
          'setting-column-header-caption': 'Log service setting',
          'settings-value-column-header-caption': 'Setting current value',
          'throw-exception-button-caption': 'Throw exception',
          'reject-rsvp-promise-button-caption': 'Reject promise',
          'ember-assert-button-caption': 'assert',
          'ember-logger-error-button-caption': 'Error',
          'ember-logger-warn-button-caption': 'Warn',
          'ember-deprecate-button-caption': 'Deprecate',
          'ember-logger-log-button-caption': 'Log',
          'ember-logger-info-button-caption': 'Info',
          'ember-logger-debug-button-caption': 'Debug',
          'throw-exception-button-message': 'Exception thrown',
          'reject-rsvp-promise-button-message': 'Promise rejected',
          'ember-assert-button-message': 'Ember.assert called',
          'ember-logger-error-button-message': 'Ember.Logger.error called',
          'ember-logger-warn-button-message': 'Ember.warn called',
          'ember-deprecate-button-message': 'Ember.deprecate called',
          'ember-logger-log-button-message': 'Ember.Logger.log called',
          'ember-logger-info-button-message': 'Ember.Logger.info called',
          'ember-logger-debug-button-message': 'Ember.debug called'
        }
      },

      'new-platform-flexberry-services-lock-list': {
        'change-user-name': 'Change user name',
        'open-read-only': 'Open read only',
        'unlock-object': 'Unlock object',
        'enter-new-user-name': 'Enter new user name:'
      },

      'components-examples': {
        'flexberry-button': {
          'settings-example': {
            'caption': 'Settings example for flexberry-button'
          }
        },
        'flexberry-checkbox': {
          'settings-example': {
            'caption': 'Flexberry-checkbox. Settings example'
          },
          'three-state-example': {
            'caption': 'Three-state example',
            'indeterminate-button': 'Set blank'
          }
        },
        'flexberry-ddau-checkbox': {
          'settings-example': {
            'caption': 'Settings example for flexberry-ddau-checkbox'
          }
        },
        'flexberry-datepicker': {
          'settings-example': {
            'caption': 'Flexberry-datepicker. Settings example'
          }
        },
        'flexberry-dropdown': {
          'settings-example': {
            'caption': 'Flexberry-dropdown. Settings example'
          },
          'conditional-render-example': {
            'caption': 'Flexberry-dropdown. Conditional render example',
            'info-caption': 'Use case description',
            'info-message': 'The page template looks like following:' + '{{pageTemplate}}' + 'So, once the value is selected, the component will be rendered as &lt;span&gt;selected value&lt;/span&gt;,<br>' + 'after that check browser\'s console, it must be free from \'Semantic-UI\' and other errors.'
          },
          'empty-value-example': {
            'caption': 'Flexberry-dropdown. Example dropdown with empty value',
            'message': 'When you open the form in the Dropdown should not be empty. Should be: Enum value №2.',
            'enumeration-caption': 'Dropdown with empty value'
          },
          'items-example': {
            'caption': 'Flexberry-dropdown. Example values of the items',
            'checkbox-caption': 'use the itemsObject'
          }
        },
        'flexberry-field': {
          'settings-example': {
            'caption': 'Flexberry-field. Settings example'
          }
        },
        'flexberry-file': {
          'settings-example': {
            'caption': 'Flexberry-file. Settings example'
          }
        },
        'flexberry-groupedit': {
          'settings-example': {
            'caption': 'Flexberry-groupedit. Settings example'
          },
          'custom-buttons-example': {
            'caption': 'Flexberry-groupedit. Custom buttons example',
            'custom-message': 'Hello!',
            'custom-button-name': 'Send hello',
            'disable-button-name': 'Disable adjacent button',
            'enable-button-name': 'Enable adjacent button'
          },
          'configurate-row-example': {
            'caption': 'Flexberry-groupedit. Configurate rows',
            'confirm': 'Are you sure ?'
          },
          'model-update-example': {
            'caption': 'Flexberry-groupedit. Model update example',
            'addDetailButton': 'Add detail',
            'removeDetailButton': 'Remove detail'
          }
        },
        'flexberry-lookup': {
          'settings-example': {
            'caption': 'Flexberry-lookup. Settings example'
          },
          'customizing-window-example': {
            'caption': 'Flexberry-lookup. Window customization',
            'titleLookup': 'Master'
          },
          'compute-autocomplete': {
            'caption': 'Example lookup with compute autocomplete',
            'title': ''
          },
          'numeric-autocomplete': {
            'caption': 'Example lookup with autocomplete and dropdwon with numeric displayAttributeName',
            'title': ''
          },
          'hierarchy-olv-in-lookup-example': {
            'caption': 'Flexberry-lookup. Example hierarchical OLV in lookup',
            'titleLookup': 'Master'
          },
          'limit-function-example': {
            'caption': 'Flexberry-lookup. Limit function example',
            'titleLookup': 'Master'
          },
          'limit-function-through-dynamic-properties-example': {
            'caption': 'Flexberry-lookup. Limit function through dynamic properties example',
            'titleLookup': 'Master',
            'captionFirstLimitFunction': 'Limit function №1',
            'captionSecondLimitFunction': 'Limit function №2',
            'captionClearLimitFunction': 'Clear limit function'
          },
          'autofill-by-limit-example': {
            'caption': 'Flexberry-lookup. Example autofillByLimit in lookup',
            'titleLookup': 'Master'
          },
          'lookup-block-form-example': {
            'caption': 'Flexberry-lookup. Lookup block form example'
          },
          'lookup-in-modal': {
            'caption': 'Flexberry-lookup. Lookup in modal window',
            'captionModal': 'Custom modal window №1',
            'captionModalDouble': 'Custom modal window №2',
            'buttonModal': 'Modal window №1',
            'buttonModalDouble': 'Modal window №2',
            'buttonClose': 'Close'
          },
          'dropdown-mode-example': {
            'caption': 'Flexberry-lookup. Dropdown mode example'
          },
          'default-ordering-example': {
            'caption': 'Flexberry-lookup. Default ordering example',
            'titleLookup': 'Master'
          },
          'autocomplete-order-example': {
            'caption': 'Flexberry-lookup. Example for autocomplete with order',
            'titleLookup': 'Master'
          }
        },
        'flexberry-menu': {
          'settings-example': {
            'caption': 'Flexberry-menu. Settings example',
            'titleIcon1': 'Left side aligned icon',
            'titleIcon2': 'Right side aligned icon',
            'titleIcon3': 'Submenu',
            'titleIcon4': 'Row buttons'
          }
        },
        'flexberry-objectlistview': {
          'limit-function-example': {
            'caption': 'Flexberry-objectlistview. Limit function example',
            'captionFirstLimitFunction': 'Limit function №1',
            'captionSecondLimitFunction': 'Limit function №2',
            'captionClearLimitFunction': 'Clear limit function'
          },
          'inheritance-models': {
            'caption': 'Flexberry-objectlistview. Inheritance models example',
            'message': 'Сheck projection in OLV. (ProjectionE=ProjectionL)',
            'projectionBase': 'Projection \'Base\': Name, E-mail, Birthday',
            'projectionSuccessorPhone': 'Projection \'Successor phone\': Name, Phone1, Phone2, Phone3',
            'projectionSuccessorSoc': 'Projection \'Successor social network\': Name, VK, Facebook, Twitter',
            'buttonRoot': 'Base',
            'buttonSuccessorPhone': 'Successor phone',
            'buttonSuccessorSoc': 'Successor social network',
            'name-caption': 'Name',
            'eMail-caption': 'E-Mail',
            'phone1-caption': 'Phone1',
            'phone2-caption': 'Phone2',
            'phone3-caption': 'Phone3',
            'vK-caption': 'VK',
            'facebook-caption': 'Facebook',
            'twitter-caption': 'Twitter',
            'birthday-caption': 'Birthday'
          },
          'settings-example': {
            'caption': 'Flexberry-objectlistview. Settings example'
          },
          'limited-text-size-example': {
            'caption': 'Flexberry-objectlistview. Limited text size example'
          },
          'toolbar-custom-buttons-example': {
            'caption': 'Flexberry-objectlistview. Custom buttons on toolbar',
            'custom-message': 'Hello!',
            'custom-button-name': 'Send hello',
            'disable-button-name': 'Disable adjacent button',
            'enable-button-name': 'Enable adjacent button',
            'custom-row-button-name': 'Custom button in row'
          },
          'on-edit-form': {
            'caption': 'Flexberry-objectlistview. FlexberryObjectlistview on edit form',
            'add-button-name': 'Добавить'
          },
          'list-on-editform': {
            'caption': 'List of children Type'
          },
          'custom-filter': {
            'caption': 'Flexberry-objectlistview. Custom filter'
          },
          'hierarchy-example': {
            'caption': 'Flexberry-objectlistview. Hierarchy example'
          },
          'hierarchy-paging-example': {
            'caption': 'Flexberry-objectlistview. Hierarchy paging example'
          },
          'configurate-rows': {
            'caption': 'Flexberry-objectlistview. Configurate rows'
          },
          'selected-rows': {
            'caption': 'Flexberry-objectlistview. Setected rows'
          },
          'downloading-files-from-olv-list': {
            'caption': 'Flexberry-objectlistview. Downloading files from the list'
          },
          'object-list-view-resize': {
            'caption': 'Flexberry-objectlistview. Columns markup',
            'button-сaption': 'Add',
            'title': ''
          },
          'lock-services-editor-view': {
            'blocked-by': 'Blocked by user'
          }
        },
        'flexberry-simpleolv': {
          'limit-function-example': {
            'caption': 'Flexberry-simpleolv. Limit function example',
            'captionFirstLimitFunction': 'Limit function №1',
            'captionSecondLimitFunction': 'Limit function №2',
            'captionClearLimitFunction': 'Clear limit function'
          },
          'settings-example': {
            'caption': 'Flexberry-simpleolv. Settings example'
          },
          'toolbar-custom-buttons-example': {
            'caption': 'Flexberry-simpleolv. Custom buttons on toolbar',
            'custom-message': 'Hello!',
            'custom-button-name': 'Send hello'
          },
          'on-edit-form': {
            'caption': 'Flexberry-simpleolv. FlexberryObjectlistview custom data sample'
          },
          'custom-filter': {
            'caption': 'Flexberry-simpleolv. Custom filter',
            'addObjects-button': 'Add objects'
          },
          'configurate-rows': {
            'caption': 'Flexberry-simpleolv. Configurate rows'
          },
          'selected-rows': {
            'caption': 'Flexberry-simpleolv. Setected rows'
          }
        },
        'flexberry-simpledatetime': {
          'settings-example': {
            'caption': 'Flexberry-simpledatetime. Settings example'
          }
        },
        'flexberry-text-cell': {
          'settings-example': {
            'caption': 'Flexberry-text-cell. Settings example'
          }
        },
        'flexberry-textarea': {
          'settings-example': {
            'caption': 'Flexberry-textarea. Settings example'
          }
        },
        'flexberry-textbox': {
          'settings-example': {
            'caption': 'Flexberry-textbox. Settings example'
          }
        },
        'flexberry-toggler': {
          'settings-example': {
            'caption': 'Flexberry-toggler. Settings example',
            'togglerContent': 'Some expandable/collapsable content'
          },
          'settings-example-inner': {
            'caption': 'Flexberry-toggler. Settings example',
            'togglerContent': 'Some expandable/collapsable content',
            'innerTogglerContent': 'Some expandable/collapsable content in an inner toggler'
          },
          'ge-into-toggler-example': {
            'caption': 'Flexberry-toggler. GroupEdit into toggler example'
          }
        },
        'flexberry-tree': {
          'settings-example': {
            'caption': 'Settings example for flexberry-tree',
            'json-tree-tab-caption': 'JSON-object-defined tree',
            'json-tree-latest-clicked-node-caption': 'Latest clicked tree node settings',
            'json-tree-latest-clicked-node-placeholder': 'Click on any tree node to display it\'s settings'
          }
        },
        'ui-message': {
          'settings-example': {
            'caption': 'Ui-message. Settings example',
            'captionMessage': 'Result of checking',
            'messageError': 'Operation is failed',
            'messageSuccess': 'Operation is success',
            'messageWarning': 'Partially implemented',
            'messageInfo': 'Note!'
          }
        }
      },
      'integration-examples': {
        'edit-form': {
          'readonly-mode': {
            'caption': 'Integration examples. Readonly mode',
            'readonly-flag-management-segment-caption': 'Form\'s readonly-mode management',
            'readonly-flag-value-segment-caption': 'Controller\'s \'readonly\' property value',
            'readonly-flag-caption': 'Form is in readonly mode',
            'flag-caption': 'Flag',
            'number-caption': 'Number',
            'text-caption': 'Text',
            'long-text-caption': 'Long text',
            'date-caption': 'Date',
            'time-caption': 'Date + Time',
            'enumeration-caption': 'Enumeration',
            'file-caption': 'File',
            'master-caption': 'Master',
            'master-dropdown-caption': 'Master in dropdown mode'
          },
          'validation': {
            'caption': 'Integration examples. Validation',
            'summary-caption': 'Validation errors:',
            'flag-caption': 'Flag',
            'number-caption': 'Number',
            'text-caption': 'Text',
            'long-text-caption': 'Long text',
            'date-caption': 'Date',
            'enumeration-caption': 'Enumeration',
            'file-caption': 'File',
            'master-caption': 'Master',
            'details-caption': 'Details'
          }
        },
        'odata-examples': {
          'get-masters': {
            'ember-flexberry-dummy-departament-e': {
              caption: 'EmberFlexberryDummyDepartamentE',
              'name-caption': 'name',
              'vid-caption': 'vid'
            },
            'ember-flexberry-dummy-departament-l': {
              caption: 'EmberFlexberryDummyDepartamentL'
            },
            'ember-flexberry-dummy-sotrudnik-e': {
              caption: 'EmberFlexberryDummySotrudnikE',
              'familiia-caption': 'familiia',
              'name-caption': 'name',
              'dataRozhdeniia-caption': 'dataRozhdeniia',
              'departament-caption': 'departament'
            },
            'ember-flexberry-dummy-sotrudnik-l': {
              caption: 'EmberFlexberryDummySotrudnikL',
              'doOdataFunction': 'Do Odata function',
              'dataReceived': 'Objects loaded',
              'receivedMasters': 'Masters loaded',
              'receivedMastersError': 'Error loading masters',
              'receivedMasterMasters': 'Master masters loaded',
              'receivedMasterMastersError': 'Error loading masters from masters'
            },
            'ember-flexberry-dummy-vid-departamenta-e': {
              caption: 'EmberFlexberryDummyVidDepartamentaE',
              'name-caption': 'name'
            },
            'ember-flexberry-dummy-vid-departamenta-l': {
              caption: 'EmberFlexberryDummyVidDepartamentaL'
            }
          }
        }
      },
      'user-setting-forms': {
        'user-setting-delete': {
          'caption': 'User settings',
          'all-del-button-name': 'Delete all!',
          'message': 'Settings were removed'
        }
      }
    },

    // eslint-disable-next-line ember/avoid-leaking-state-in-ember-objects
    'components': {
      'settings-example': {
        'component-template-caption': 'Component template',
        'controller-properties-caption': 'Controller properties',
        'component-current-settings-caption': 'Component current settings values',
        'component-default-settings-caption': 'Component default settings values',
        'component-with-applied-settings-caption': 'Component with it\'s current settings applied'
      }
    }
  });

  exports['default'] = translations;
});
define('dummy/locales/ru/models/components-examples/edit-form/readonly-mode/detail', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      undefined: {
        flag: {
          __caption__: 'Флаг'
        },
        text: {
          __caption__: 'Текст'
        },
        date: {
          __caption__: 'Дата'
        },
        file: {
          __caption__: 'Файл'
        },
        enumeration: {
          __caption__: 'Перечисление'
        },
        master: {
          __caption__: 'Мастер'
        }
      }
    }
  };
});
define('dummy/locales/ru/models/components-examples/flexberry-groupedit/shared/detail', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      undefined: {
        flag: {
          __caption__: 'Flag'
        },
        text: {
          __caption__: 'Text'
        },
        date: {
          __caption__: 'Date'
        },
        file: {
          __caption__: 'File'
        },
        enumeration: {
          __caption__: 'Enumeration'
        },
        master: {
          __caption__: 'Master'
        }
      }
    }
  };
});
define('dummy/locales/ru/models/ember-flexberry-dummy-application-user', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      ApplicationUserL: {
        name: {
          __caption__: 'Имя'
        },
        eMail: {
          __caption__: 'E-mail'
        },
        activated: {
          __caption__: 'Активен'
        },
        birthday: {
          __caption__: 'Дата рождения'
        },
        gender: {
          __caption__: 'Пол'
        },
        karma: {
          __caption__: 'Репутация'
        }
      }
    }
  };
});
define('dummy/locales/ru/models/ember-flexberry-dummy-comment', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      CommentE: {
        text: {
          __caption__: 'Текст комментария'
        },
        userVotes: {
          voteType: {
            __caption__: 'Тип голосования'
          },
          applicationUser: {
            __caption__: 'Пользователь',
            name: {
              __caption__: 'Наименование'
            }
          }
        }
      }
    }
  };
});
define('dummy/locales/ru/models/ember-flexberry-dummy-departament', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      DepartamentE: {
        name: {
          __caption__: 'Название'
        },
        vid: {
          __caption__: 'Вид'
        }
      },
      DepartamentL: {
        name: {
          __caption__: 'Название'
        }
      }
    }
  };
});
define('dummy/locales/ru/models/ember-flexberry-dummy-localization', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      LocalizationL: {
        name: {
          __caption__: 'Наименование'
        }
      }
    }
  };
});
define('dummy/locales/ru/models/ember-flexberry-dummy-sotrudnik', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      SotrudnikE: {
        familiia: {
          __caption__: 'Фамилия'
        },
        name: {
          __caption__: 'Имя'
        },
        dataRozhdeniia: {
          __caption__: 'Дата'
        },
        departament: {
          __caption__: 'Департамент',
          vid: {
            __caption__: ''
          }
        }
      },
      SotrudnikL: {
        familiia: {
          __caption__: 'Фамилия'
        },
        name: {
          __caption__: 'Имя'
        },
        dataRozhdeniia: {
          __caption__: 'Дата'
        }
      }
    }
  };
});
define('dummy/locales/ru/models/ember-flexberry-dummy-suggestion-file', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      SuggestionFileL: {
        order: {
          __caption__: 'Порядок'
        },
        file: {
          __caption__: 'Файл'
        },
        suggestion: {
          __caption__: 'Предложение'
        }
      }
    }
  };
});
define('dummy/locales/ru/models/ember-flexberry-dummy-suggestion-type', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      SuggestionTypeL: {
        name: {
          __caption__: 'Наименование'
        },
        moderated: {
          __caption__: 'Одобрено'
        },
        parent: {
          __caption__: 'Иерархия'
        }
      },
      SuggestionTypeE: {
        name: {
          __caption__: 'Наименование'
        },
        moderated: {
          __caption__: 'Одобрено'
        },
        parent: {
          __caption__: 'Иерархия'
        },
        localizedTypes: {
          name: {
            __caption__: 'Наименование'
          },
          localization: {
            __caption__: 'Локализация',
            name: {
              __caption__: 'Наименование'
            }
          }
        }
      },
      SuggestionTypeEWithComputedField: {
        name: {
          __caption__: 'Имя'
        },
        moderated: {
          __caption__: 'Одобрено'
        },
        computedField: {
          __caption__: 'Вычислимое поле'
        },
        parent: {
          __caption__: 'Иерархия',
          name: {
            __caption__: 'Наименование'
          },
          moderated: {
            __caption__: 'Одобрено'
          },
          computedField: {
            __caption__: 'Вычислимое поле'
          },
          creator: {
            __caption__: 'creator'
          }
        },
        createTime: {
          __caption__: 'createTime'
        },
        creator: {
          __caption__: 'creator'
        },
        editTime: {
          __caption__: 'editTime'
        },
        editor: {
          __caption__: 'editor'
        }
      },
      CustomizeLookupWindowExampleView: {
        name: {
          __caption__: 'Наименование'
        },
        moderated: {
          __caption__: 'Одобрено'
        },
        parent: {
          __caption__: 'Иерархия'
        }
      },
      SettingLookupExampleView: {
        name: {
          __caption__: 'Имя'
        },
        moderated: {
          __caption__: 'Одобрено'
        }
      }
    }
  };
});
define('dummy/locales/ru/models/ember-flexberry-dummy-suggestion', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      SuggestionL: {
        address: {
          __caption__: 'Адрес'
        },
        text: {
          __caption__: 'Текст'
        },
        date: {
          __caption__: 'Дата'
        },
        votes: {
          __caption__: 'Голоса'
        },
        author: {
          __caption__: 'Автор',
          eMail: {
            __caption__: 'Почта'
          }
        },
        editor1: {
          __caption__: 'Редактор',
          eMail: {
            __caption__: 'Почта'
          }
        },
        moderated: {
          __caption__: 'Одобрено'
        },
        type: {
          __caption__: 'Тип предложения'
        },
        commentsCount: {
          __caption__: 'Количество комментариев'
        },
        comments: {
          __caption__: 'Комментарии'
        }
      },
      SuggestionE: {
        author: {
          __caption__: 'Автор',
          eMail: {
            __caption__: 'Почта'
          }
        },
        editor1: {
          __caption__: 'Редактор',
          eMail: {
            __caption__: 'Почта'
          }
        },
        moderated: {
          __caption__: 'Одобрено'
        },
        type: {
          __caption__: 'Тип предложения'
        },
        text: {
          __caption__: 'Текст'
        },
        date: {
          __caption__: 'Date'
        },
        votes: {
          __caption__: 'Голоса'
        },
        address: {
          __caption__: 'Адрес'
        },
        userVotes: {
          name: {
            __caption__: 'Наименование'
          },
          voteType: {
            __caption__: 'Тип голосования'
          },
          author: {
            __caption__: 'Пользователь приложения',
            eMail: {
              __caption__: 'Почта'
            }
          }
        },
        files: {
          order: {
            __caption__: 'Номер'
          },
          file: {
            __caption__: 'Файл'
          }
        },
        comments: {
          name: {
            __caption__: 'Наименование'
          },
          text: {
            __caption__: 'Текст'
          },
          votes: {
            __caption__: 'Голоса'
          },
          moderated: {
            __caption__: 'Одобрено'
          },
          author: {
            __caption__: 'Пользователь приложения',
            eMail: {
              __caption__: 'Почта'
            }
          }
        }
      },
      SuggestionEWithComputedField: {
        address: {
          __caption__: 'Адрес'
        },
        text: {
          __caption__: 'Текст'
        },
        date: {
          __caption__: 'Дата'
        },
        votes: {
          __caption__: 'Голоса'
        },
        moderated: {
          __caption__: 'Одобрено'
        },
        author: {
          __caption__: 'Пользователь приложения',
          name: {
            __caption__: 'Наименование'
          }
        },
        type: {
          __caption__: 'Тип предложения',
          name: {
            __caption__: 'Наименование'
          },
          moderated: {
            __caption__: 'Одобрено'
          },
          computedField: {
            __caption__: 'Вычислимое поле'
          },
          creator: {
            __caption__: 'creator'
          }
        },
        editor1: {
          __caption__: 'Редактор',
          name: {
            __caption__: 'Имя'
          }
        },
        createTime: {
          __caption__: 'createTime'
        },
        creator: {
          __caption__: 'creator'
        },
        editTime: {
          __caption__: 'editTime'
        },
        editor: {
          __caption__: 'editor'
        }
      },
      FlexberryObjectlistviewFilterTest: {
        address: {
          __caption__: 'Адрес'
        },
        date: {
          __caption__: 'Дата'
        },
        votes: {
          __caption__: 'Голоса'
        },
        moderated: {
          __caption__: 'Одобрено'
        },
        author: {
          __caption__: 'Пользователь приложения',
          name: {
            __caption__: 'Наименование'
          }
        },
        type: {
          __caption__: 'Тип предложения',
          name: {
            __caption__: 'Наименование'
          },
          moderated: {
            __caption__: 'Одобрено'
          },
          computedField: {
            __caption__: 'Вычислимое поле'
          },
          creator: {
            __caption__: 'creator'
          }
        }
      },
      FolvWithLimitFunctionExampleView: {
        address: {
          __caption__: 'Адрес'
        },
        text: {
          __caption__: 'Текст'
        },
        votes: {
          __caption__: 'Голоса'
        },
        moderated: {
          __caption__: 'Одобрено'
        },
        type: {
          __caption__: 'Тип предложения',
          name: {
            __caption__: 'Наименование'
          },
          moderated: {
            __caption__: 'с'
          },
          computedField: {
            __caption__: 'Вычислимое поле'
          },
          creator: {
            __caption__: 'creator'
          }
        }
      },
      SettingLookupExampleView: {
        name: {
          __caption__: 'Имя'
        },
        moderated: {
          __caption__: 'Одобрено'
        },
        type: {
          __caption__: 'Тип'
        }
      },
      PreviewExampleView: {
        userVotes: {
          author: {
            __caption__: 'Автор'
          }
        }
      },
      FlexberryObjectlistviewCustomFilter: {
        address: {
          __caption__: 'Адрес'
        },
        date: {
          __caption__: 'Дата'
        },
        votes: {
          __caption__: 'Голоса'
        },
        type: {
          __caption__: 'Тип предложения',
          moderated: {
            __caption__: 'Одобрено'
          },
          parent: {
            __caption__: 'Иерархия',
            name: {
              __caption__: 'Имя'
            }
          }
        },
        author: {
          __caption__: 'Автор',
          eMail: {
            __caption__: 'Почта'
          }
        },
        editor1: {
          __caption__: 'Редактор'
        }
      },
      SuggestionMainModelProjectionTest: {
        userVotes: {
          voteType: {
            __caption__: 'Vote type'
          }
        }
      }
    }
  };
});
define('dummy/locales/ru/models/ember-flexberry-dummy-vid-departamenta', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      VidDepartamentaE: {
        name: {
          __caption__: 'Название'
        }
      },
      VidDepartamentaL: {
        name: {
          __caption__: 'Название'
        }
      }
    }
  };
});
define('dummy/locales/ru/models/integration-examples/edit-form/readonly-mode/detail', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      undefined: {
        flag: {
          __caption__: 'Флаг'
        },
        text: {
          __caption__: 'Текст'
        },
        longText: {
          __caption__: 'Длинный текст'
        },
        date: {
          __caption__: 'Дата'
        },
        time: {
          __caption__: 'Время'
        },
        file: {
          __caption__: 'Файл'
        },
        enumeration: {
          __caption__: 'Перечисление'
        },
        master: {
          __caption__: 'Мастер'
        },
        masterDropdown: {
          __caption__: 'Мастер выпадающий список'
        }
      }
    }
  };
});
define('dummy/locales/ru/models/integration-examples/edit-form/validation/base', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      BaseE: {
        details: {
          flag: {
            __caption__: 'Флаг'
          },
          number: {
            __caption__: 'Номер'
          },
          text: {
            __caption__: 'Текст'
          }
        }
      }
    }
  };
});
define('dummy/locales/ru/translations', ['exports', 'ember', 'ember-flexberry/locales/ru/translations', 'dummy/locales/ru/models/ember-flexberry-dummy-suggestion', 'dummy/locales/ru/models/ember-flexberry-dummy-suggestion-type', 'dummy/locales/ru/models/ember-flexberry-dummy-application-user', 'dummy/locales/ru/models/ember-flexberry-dummy-localization', 'dummy/locales/ru/models/ember-flexberry-dummy-comment', 'dummy/locales/ru/models/ember-flexberry-dummy-suggestion-file', 'dummy/locales/ru/models/components-examples/flexberry-groupedit/shared/detail', 'dummy/locales/ru/models/components-examples/edit-form/readonly-mode/detail', 'dummy/locales/ru/models/integration-examples/edit-form/readonly-mode/detail', 'dummy/locales/ru/models/integration-examples/edit-form/validation/base', 'dummy/locales/ru/models/ember-flexberry-dummy-departament', 'dummy/locales/ru/models/ember-flexberry-dummy-sotrudnik', 'dummy/locales/ru/models/ember-flexberry-dummy-vid-departamenta'], function (exports, _ember, _emberFlexberryLocalesRuTranslations, _dummyLocalesRuModelsEmberFlexberryDummySuggestion, _dummyLocalesRuModelsEmberFlexberryDummySuggestionType, _dummyLocalesRuModelsEmberFlexberryDummyApplicationUser, _dummyLocalesRuModelsEmberFlexberryDummyLocalization, _dummyLocalesRuModelsEmberFlexberryDummyComment, _dummyLocalesRuModelsEmberFlexberryDummySuggestionFile, _dummyLocalesRuModelsComponentsExamplesFlexberryGroupeditSharedDetail, _dummyLocalesRuModelsComponentsExamplesEditFormReadonlyModeDetail, _dummyLocalesRuModelsIntegrationExamplesEditFormReadonlyModeDetail, _dummyLocalesRuModelsIntegrationExamplesEditFormValidationBase, _dummyLocalesRuModelsEmberFlexberryDummyDepartament, _dummyLocalesRuModelsEmberFlexberryDummySotrudnik, _dummyLocalesRuModelsEmberFlexberryDummyVidDepartamenta) {

  var translations = {};
  _ember['default'].$.extend(true, translations, _emberFlexberryLocalesRuTranslations['default']);

  _ember['default'].$.extend(true, translations, {

    // eslint-disable-next-line ember/avoid-leaking-state-in-ember-objects
    models: {
      'ember-flexberry-dummy-suggestion': _dummyLocalesRuModelsEmberFlexberryDummySuggestion['default'],
      'ember-flexberry-dummy-suggestion-type': _dummyLocalesRuModelsEmberFlexberryDummySuggestionType['default'],
      'components-examples/flexberry-groupedit/shared/detail': _dummyLocalesRuModelsComponentsExamplesFlexberryGroupeditSharedDetail['default'],
      'components-examples/edit-form/readonly-mode/detail': _dummyLocalesRuModelsComponentsExamplesEditFormReadonlyModeDetail['default'],
      'integration-examples/edit-form/readonly-mode/detail': _dummyLocalesRuModelsIntegrationExamplesEditFormReadonlyModeDetail['default'],
      'integration-examples/edit-form/validation/base': _dummyLocalesRuModelsIntegrationExamplesEditFormValidationBase['default'],
      'ember-flexberry-dummy-application-user': _dummyLocalesRuModelsEmberFlexberryDummyApplicationUser['default'],
      'ember-flexberry-dummy-localization': _dummyLocalesRuModelsEmberFlexberryDummyLocalization['default'],
      'ember-flexberry-dummy-comment': _dummyLocalesRuModelsEmberFlexberryDummyComment['default'],
      'ember-flexberry-dummy-suggestion-file': _dummyLocalesRuModelsEmberFlexberryDummySuggestionFile['default'],
      'ember-flexberry-dummy-departament': _dummyLocalesRuModelsEmberFlexberryDummyDepartament['default'],
      'ember-flexberry-dummy-sotrudnik': _dummyLocalesRuModelsEmberFlexberryDummySotrudnik['default'],
      'ember-flexberry-dummy-vid-departamenta': _dummyLocalesRuModelsEmberFlexberryDummyVidDepartamenta['default']
    },

    'application-name': 'Тестовый стенд ember-flexberry',

    // eslint-disable-next-line ember/avoid-leaking-state-in-ember-objects
    'forms': {
      'loading': {
        'spinner-caption': 'Данные загружаются, пожалуйста подождите...'
      },
      'index': {
        'greeting': 'Добро пожаловать на тестовый стенд ember-flexberry!'
      },

      'application': {
        'header': {
          'menu': {
            'sitemap-button': {
              'title': 'Меню'
            },
            'user-settings-service-checkbox': {
              'caption': 'Использовать сервис сохранения пользовательских настроек'
            },
            'show-menu': {
              'caption': 'Показать меню'
            },
            'hide-menu': {
              'caption': 'Скрыть меню'
            },
            'language-dropdown': {
              'caption': 'Язык приложения',
              'placeholder': 'Выберите язык'
            }
          },
          'login': {
            'caption': 'Вход'
          },
          'logout': {
            'caption': 'Выход'
          }
        },

        'delete-rows-modal-dialog': {
          'confirm-button-caption': 'Удалить',
          'cancel-button-caption': 'Отмена',
          'delete-row-caption': 'Удалить строку ?',
          'delete-rows-caption': 'Удалить выбранные строки ?'
        },

        'footer': {
          'application-name': 'Тестовый стенд ember-flexberry',
          'application-version': {
            'caption': 'Версия аддона {{version}}',
            'title': 'Это версия аддона ember-flexberry, которая сейчас используется в этом тестовом приложении ' + '(версия npm-пакета + хэш коммита). ' + 'Кликните, чтобы перейти на GitHub.'
          }
        },

        'sitemap': {
          'application-name': {
            'caption': 'Тестовый стенд ember-flexberry',
            'title': ''
          },
          'application-version': {
            'caption': 'Версия аддона {{version}}',
            'title': 'Это версия аддона ember-flexberry, которая сейчас используется в этом тестовом приложении ' + '(версия npm-пакета + хэш коммита). ' + 'Кликните, чтобы перейти на GitHub.'
          },
          'index': {
            'caption': 'Главная',
            'title': ''
          },
          'application': {
            'caption': 'Приложение',
            'title': '',
            'application-users': {
              'caption': 'Пользователи приложения',
              'title': ''
            },
            'localizations': {
              'caption': 'Локализация',
              'title': ''
            },
            'suggestion-types': {
              'caption': 'Типы предложений',
              'title': ''
            },
            'suggestions': {
              'caption': 'Предложения',
              'title': ''
            },
            'multi': {
              'caption': 'Несколько списков',
              'title': ''
            },
            'suggestion-file': {
              'caption': 'Файлы предложения',
              'title': ''
            }
          },
          'log-service-examples': {
            'caption': 'Сервис логирования',
            'title': '',
            'application-log': {
              'caption': 'Лог приложения',
              'title': ''
            },
            'settings-example': {
              'caption': 'Пример работы с настройками',
              'title': ''
            },
            'clear-log-form': {
              'caption': 'Очистка лога',
              'title': ''
            }
          },
          'lock': {
            'caption': 'Блокировки',
            'title': 'Список блокировок'
          },
          'components-examples': {
            'caption': 'Примеры компонентов',
            'title': '',
            'flexberry-button': {
              'caption': 'flexberry-button',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              }
            },
            'flexberry-checkbox': {
              'caption': 'flexberry-checkbox',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              },
              'three-state-example': {
                'caption': 'Пример с тремя состояниями',
                'title': ''
              }
            },
            'flexberry-ddau-checkbox': {
              'caption': 'flexberry-ddau-checkbox',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              }
            },
            'flexberry-datepicker': {
              'caption': 'flexberry-datepicker',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              }
            },
            'flexberry-dropdown': {
              'caption': 'flexberry-dropdown',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              },
              'conditional-render-example': {
                'caption': 'Пример условного рендеринга',
                'title': ''
              },
              'empty-value-example': {
                'caption': 'Пример dropdown-а с пустым значением',
                'title': ''
              },
              'items-example': {
                'caption': 'Пример элементов значений',
                'title': ''
              }
            },
            'flexberry-field': {
              'caption': 'flexberry-field',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              }
            },
            'flexberry-file': {
              'caption': 'flexberry-file',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              },
              'flexberry-file-in-modal': {
                'caption': 'Пример файла в модальном окне',
                'title': ''
              }
            },
            'flexberry-groupedit': {
              'caption': 'flexberry-groupedit',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              },
              'model-update-example': {
                'caption': 'Обновление модели',
                'title': ''
              },
              'custom-buttons-example': {
                'caption': 'Пользовательские кнопки',
                'title': ''
              },
              'configurate-row-example': {
                'caption': 'Настройка строк',
                'title': ''
              },
              'groupedit-with-lookup-with-computed-atribute': {
                'caption': 'Computed атрибуты LookUp в GroupEdit',
                'title': ''
              },
              'readonly-columns-by-configurate-row-example': {
                'caption': 'Установка readonly columns через configurateRow в GrouptEdit',
                'title': ''
              }
            },
            'flexberry-lookup': {
              'caption': 'flexberry-lookup',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              },
              'customizing-window-example': {
                'caption': 'Настройка окна',
                'title': ''
              },
              'compute-autocomplete': {
                'caption': 'Пример лукапа с вычислимым автокомплитом',
                'title': ''
              },
              'numeric-autocomplete': {
                'caption': 'Пример лукапа c автокомплитом и dropdwon с числовым displayAttributeName',
                'title': ''
              },
              'hierarchy-olv-in-lookup-example': {
                'caption': 'Пример иерархического OLV-а в lookup-e',
                'title': ''
              },
              'limit-function-example': {
                'caption': 'Функция ограничения',
                'title': ''
              },
              'autofill-by-limit-example': {
                'caption': 'Пример autofillByLimit',
                'title': ''
              },
              'limit-function-through-dynamic-properties-example': {
                'caption': 'Функция ограничения через динамические свойства',
                'title': ''
              },
              'lookup-block-form-example': {
                'caption': 'Лукап в блочной форме',
                'title': ''
              },
              'lookup-in-modal': {
                'caption': 'Лукап в модальном окне',
                'title': ''
              },
              'dropdown-mode-example': {
                'caption': 'Режим dropdown',
                'title': ''
              },
              'default-ordering-example': {
                'caption': 'Сортировка по умолчанию',
                'title': ''
              },
              'autocomplete-order-example': {
                'caption': 'Пример сортировки при автокомплите',
                'title': ''
              },
              'user-settings-example': {
                'caption': 'Пример настройки OLV модального окна',
                'title': ''
              }
            },
            'flexberry-menu': {
              'caption': 'flexberry-menu',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              }
            },
            'flexberry-objectlistview': {
              'caption': 'flexberry-objectlistview',
              'title': '',
              'limit-function-example': {
                'caption': 'Функция ограничения',
                'title': ''
              },
              'inheritance-models': {
                'caption': 'Наследуемые модели',
                'title': ''
              },
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              },
              'toolbar-custom-buttons-example': {
                'caption': 'Пользовательские кнопки',
                'title': ''
              },
              'on-edit-form': {
                'caption': 'Размещение на форме редактирования',
                'title': ''
              },
              'list-on-editform': {
                'caption': 'Размещение списка детейлов мастера на форме редактирования',
                'title': ''
              },
              'custom-filter': {
                'caption': 'Настройка фильтра',
                'title': ''
              },
              'edit-form-with-detail-list': {
                'caption': 'Пример списка',
                'title': ''
              },
              'hierarchy-example': {
                'caption': 'Пример иерархии на списке',
                'title': ''
              },
              'hierarchy-paging-example': {
                'caption': 'Пример иерархии c пейджингом',
                'title': ''
              },
              'configurate-rows': {
                'caption': 'Раскраска строк',
                'title': ''
              },
              'selected-rows': {
                'caption': 'Выбранные строки',
                'title': ''
              },
              'downloading-files-from-olv-list': {
                'caption': 'Пример скачивания файлов со списка',
                'title': ''
              },
              'object-list-view-resize': {
                'caption': 'Разметка столбцов',
                'title': ''
              },
              'return-from-ediform': {
                'title': 'Возвращение с edit-form на list-form с queryParametr',
                'return-button': 'Вернутся'
              },
              'lock-services-editor-view-list': {
                'caption': 'Пример отображение имени пользователя заблокировшего объект',
                'title': ''
              },
              'limited-text-size-example': {
                'caption': 'Пример ограничения длины текста в ячейках',
                'title': ''
              }
            },
            'flexberry-simpledatetime': {
              'caption': 'flexberry-simpledatetime',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              }
            },
            'flexberry-text-cell': {
              'caption': 'flexberry-text-cell',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              }
            },
            'flexberry-textarea': {
              'caption': 'flexberry-textarea',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              }
            },
            'flexberry-textbox': {
              'caption': 'flexberry-textbox',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              }
            },
            'flexberry-toggler': {
              'caption': 'flexberry-toggler',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              },
              'settings-example-inner': {
                'caption': 'Пример работы с настройками (toggler в toggler)',
                'title': ''
              },
              'ge-into-toggler-example': {
                'caption': 'GroupEdit в toggler example'
              }
            },
            'flexberry-tree': {
              'caption': 'flexberry-tree',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              }
            },
            'ui-message': {
              'caption': 'ui-message',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              }
            }
          },
          'integration-examples': {
            'caption': 'Примеры интеграции',
            'title': '',
            'edit-form': {
              'caption': 'Форма редактирования',
              'title': '',
              'readonly-mode': {
                'caption': 'Режим только для чтения',
                'title': ''
              },
              'validation': {
                'caption': 'Валидация',
                'title': ''
              }
            },
            'odata-examples': {
              'caption': 'Работа с OData',
              'title': '',
              'get-masters': {
                'caption': 'Вычитка мастеров через OData-функцию',
                'title': '',
                'sotrudnik': {
                  'caption': 'Сотрудник',
                  'title': ''
                },
                'departament': {
                  'caption': 'Департамент',
                  'title': ''
                },
                'vid-departamenta': {
                  'caption': 'Вид департамента',
                  'title': ''
                }
              }
            }
          },
          'user-setting-forms': {
            'caption': 'Пользовательские настройки',
            'title': '',
            'user-setting-delete': {
              'caption': 'Удаление настроек',
              'title': ''
            }
          },
          'components-acceptance-tests': {
            'caption': 'Acceptance тесты',
            'title': ''
          }
        }
      },

      'edit-form': {
        'save-success-message-caption': 'Сохранение завершилось успешно',
        'save-success-message': 'Объект сохранен',
        'save-error-message-caption': 'Ошибка сохранения',
        'delete-success-message-caption': 'Удаление завершилось успешно',
        'delete-success-message': 'Объект удален',
        'delete-error-message-caption': 'Ошибка удаления'
      },

      'list-form': {
        'delete-success-message-caption': 'Удаление завершилось успешно',
        'delete-success-message': 'Объект удален',
        'delete-error-message-caption': 'Ошибка удаления',
        'load-success-message-caption': 'Загрузка данных завершилась успешно',
        'load-success-message': 'Объект загружен',
        'load-error-message-caption': 'Ошибка загрузки данных'
      },

      'ember-flexberry-dummy-application-user-edit': {
        'caption': 'Пользователь приложения',
        'name-caption': 'Имя',
        'eMail-caption': 'E-mail',
        'phone1-caption': 'Номер телефона 1',
        'phone2-caption': 'Номер телефона 2',
        'phone3-caption': 'Номер телефона 3',
        'activated-caption': 'Учетная запись активирована',
        'vK-caption': 'VK',
        'facebook-caption': 'Facebook',
        'twitter-caption': 'Twitter',
        'birthday-caption': 'Дата рождения',
        'gender-caption': 'Пол',
        'vip-caption': 'VIP',
        'karma-caption': 'Карма',
        'name-validation-message-caption': 'Заполните поле "Имя"',
        'eMail-validation-message-caption': 'Заполните поле "E-mail"',
        'phone1-required-caption': 'Требовать заполнения поля "Номер телефона 1"'
      },

      'ember-flexberry-dummy-comment-edit': {
        'caption': 'Комментарий',
        'text-caption': 'Текст комментария',
        'votes-caption': 'Количество голосов',
        'moderated-caption': 'Одобрено',
        'author-caption': 'Автор',
        'userVotes-caption': 'Голоса пользователей',
        'date-caption': 'Дата',
        'author-validation-message-caption': 'Заполните поле "Автор"'
      },

      'ember-flexberry-dummy-comment-vote-edit': {
        'caption': 'Голос пользователя',
        'voteType-caption': 'Тип голоса',
        'applicationUser-caption': 'Пользователь приложения'
      },

      'ember-flexberry-dummy-localization-edit': {
        'caption': 'Локализация',
        'name-caption': 'Наименование',
        'name-validation-message-caption': 'Заполните наименование'
      },

      'ember-flexberry-dummy-suggestion-edit': {
        'caption': 'Предложение',
        'address-caption': 'Адрес',
        'text-caption': 'Описание',
        'date-caption': 'Дата',
        'votes-caption': 'Количество голосов',
        'moderated-caption': 'Одобрено',
        'type-caption': 'Тип предложения',
        'author-caption': 'Автор предложения',
        'editor1-caption': 'Редактор предложения',
        'files-caption': 'Прикрепленные файлы',
        'userVotes-caption': 'Голоса пользователей',
        'comments-caption': 'Комментарии',
        'type-validation-message-caption': 'Заполните тип предложения',
        'author-validation-message-caption': 'Заполните поле "Автор"',
        'editor-validation-message-caption': 'Заполните поле "Редактор"',
        'readonly-groupedit-with-lookup-with-computed-atribute-field': 'Readonly для LookUp "Пользователь приложения" в GroupEdit "Голоса пользователей"',
        'limit-function-groupedit-with-lookup-with-computed-atribute-field': 'Ограничения для LookUp "Пользователь приложения" в GroupEdit "Голоса пользователей"'
      },

      'ember-flexberry-dummy-suggestion-file-list': {
        'header': 'Файлы предложения'
      },

      'ember-flexberry-dummy-suggestion-file-edit': {
        'header': 'Файл предложения',
        'suggestion': 'Предложение',
        'order': 'Номер',
        'file': 'Файл'
      },

      'ember-flexberry-dummy-toggler-example-master-e': {
        'caption': 'Мастер',
        'toggler-example-master-property-caption': 'Свойство мастера',
        'toggler-example-deteil-property-caption': 'Детейл'
      },

      'ember-flexberry-dummy-suggestion-type-edit': {
        'caption': 'Тип предложения',
        'name-caption': 'Наименование',
        'moderated-caption': 'Одобрено',
        'parent-caption': 'Иерархия',
        'localized-types-caption': 'Локализация типа',
        'name-validation-message-caption': 'Заполните наименование'
      },

      'ember-flexberry-dummy-application-user-list': {
        'caption': 'Пользователи приложения'
      },

      'ember-flexberry-dummy-localization-list': {
        'caption': 'Локализация'
      },

      'ember-flexberry-dummy-suggestion-list': {
        'caption': 'Предложения'
      },

      'ember-flexberry-dummy-suggestion-type-list': {
        'caption': 'Типы предложений'
      },

      'ember-flexberry-dummy-multi-list': {
        'caption': 'Несколько списков на форме',
        'multi-edit-form': 'Несколько списков на эдитформе'
      },

      'log-service-examples': {
        'settings-example': {
          'caption': 'Сервис логирования. Пример работы с настройками',
          'setting-column-header-caption': 'Настройка сервиса логирования',
          'settings-value-column-header-caption': 'Текущее значение настройки',
          'throw-exception-button-caption': 'Бросить исключение',
          'reject-rsvp-promise-button-caption': 'Отклонить promise',
          'ember-assert-button-caption': 'assert',
          'ember-logger-error-button-caption': 'Error',
          'ember-logger-warn-button-caption': 'Warn',
          'ember-deprecate-button-caption': 'Deprecate',
          'ember-logger-log-button-caption': 'Log',
          'ember-logger-info-button-caption': 'Info',
          'ember-logger-debug-button-caption': 'Debug',
          'throw-exception-button-message': 'Брошено исключение',
          'reject-rsvp-promise-button-message': 'Promise отклонен',
          'ember-assert-button-message': 'Вызван метод Ember.assert',
          'ember-logger-error-button-message': 'Вызван метод Ember.Logger.error',
          'ember-logger-warn-button-message': 'Вызван метод Ember.warn',
          'ember-deprecate-button-message': 'Вызван метод Ember.deprecate',
          'ember-logger-log-button-message': 'Вызван метод Ember.Logger.log',
          'ember-logger-info-button-message': 'Вызван метод Ember.Logger.info',
          'ember-logger-debug-button-message': 'Вызван метод Ember.debug'
        }
      },

      'new-platform-flexberry-services-lock-list': {
        'change-user-name': 'Изменить имя пользователя',
        'open-read-only': 'Открывать только для чтения',
        'unlock-object': 'Снимать блокировку',
        'enter-new-user-name': 'Введите новое имя пользователя:'
      },

      'components-examples': {
        'flexberry-button': {
          'settings-example': {
            'caption': 'Пример работы с настройками flexberry-button'
          }
        },
        'flexberry-checkbox': {
          'settings-example': {
            'caption': 'Flexberry-checkbox. Пример работы с настройками'
          },
          'three-state-example': {
            'caption': 'Пример с тремя состояниями',
            'indeterminate-button': 'Выставить пустое значение'
          }
        },
        'flexberry-ddau-checkbox': {
          'settings-example': {
            'caption': 'Пример работы с настройками flexberry-ddau-checkbox'
          }
        },
        'flexberry-datepicker': {
          'settings-example': {
            'caption': 'Flexberry-datepicker. Пример работы с настройками'
          }
        },
        'flexberry-dropdown': {
          'settings-example': {
            'caption': 'Flexberry-dropdown. Пример работы с настройками'
          },
          'conditional-render-example': {
            'caption': 'Flexberry-dropdown. Пример условного рендеринга',
            'info-caption': 'Описание варианта использования',
            'info-message': 'Шаблон страницы выглядит следующим образом:' + '{{pageTemplate}}' + 'После того как какое-либо значение будет выбрано, компонент будет заменен на ' + '&lt;span&gt;selected value&lt;/span&gt;,<br>' + 'после этого следует проверить консоль браузера, она должна быть чиста от ошибок \'Semantic-UI\' и прочих ошибок.'
          },
          'empty-value-example': {
            'caption': 'Flexberry-dropdown. Пример dropdown-а с пустым значением',
            'message': 'При открытии формы в dropdown-е должно быть не пустое значение. Должно быть Enum value №2.',
            'enumeration-caption': 'Dropdown с пустым значением'
          },
          'items-example': {
            'caption': 'Flexberry-dropdown. Пример значений элементов',
            'checkbox-caption': 'использовать itemsObject'
          }
        },
        'flexberry-field': {
          'settings-example': {
            'caption': 'Flexberry-field. Пример работы с настройками'
          }
        },
        'flexberry-file': {
          'settings-example': {
            'caption': 'Flexberry-file. Пример работы с настройками'
          }
        },
        'flexberry-groupedit': {
          'settings-example': {
            'caption': 'Flexberry-groupedit. Пример работы с настройками'
          },
          'custom-buttons-example': {
            'caption': 'Flexberry-groupedit. Пользовательские кнопки',
            'custom-message': 'Привет!',
            'custom-button-name': 'Передать привет',
            'disable-button-name': 'Отключить соседнюю кнопку',
            'enable-button-name': 'Включить соседнюю кнопку'
          },
          'configurate-row-example': {
            'caption': 'Flexberry-groupedit. Настройка строк',
            'confirm': 'Вы уверены ?'
          },
          'model-update-example': {
            'caption': 'Flexberry-groupedit. Обновление модели',
            'addDetailButton': 'Добавить детейл',
            'removeDetailButton': 'Удалить детейл'
          }
        },
        'flexberry-lookup': {
          'settings-example': {
            'caption': 'Flexberry-lookup. Пример работы с настройками'
          },
          'customizing-window-example': {
            'caption': 'Flexberry-lookup. Настройка окна',
            'titleLookup': 'Мастер'
          },
          'compute-autocomplete': {
            'caption': 'Пример лукапа с вычислимым автокомплитом',
            'title': ''
          },
          'numeric-autocomplete': {
            'caption': 'Пример лукапа c автокомплитом и dropdwon с числовым displayAttributeName',
            'title': ''
          },
          'hierarchy-olv-in-lookup-example': {
            'caption': 'Flexberry-lookup. Пример иерархического OLV-а в lookup-e',
            'titleLookup': 'Мастер'
          },
          'autofill-by-limit-example': {
            'caption': 'Flexberry-lookup. Пример autofillByLimit в lookup-e',
            'titleLookup': 'Мастер'
          },
          'limit-function-example': {
            'caption': 'Flexberry-lookup. Функция ограничения',
            'titleLookup': 'Мастер'
          },
          'limit-function-through-dynamic-properties-example': {
            'caption': 'Flexberry-lookup. Функция ограничения через динамические свойства',
            'titleLookup': 'Мастер',
            'captionFirstLimitFunction': 'Функция ограничения №1',
            'captionSecondLimitFunction': 'Функция ограничения №2',
            'captionClearLimitFunction': 'Очистить функцию ограничения'
          },
          'lookup-block-form-example': {
            'caption': 'Flexberry-lookup. Лукап в блочной форме'
          },
          'lookup-in-modal': {
            'caption': 'Flexberry-lookup. Лукап в модальном окне',
            'captionModal': 'Кастомное модальное окно №1',
            'captionModalDouble': 'Кастомное модальное окно №2',
            'buttonModal': 'Модальное окно №1',
            'buttonModalDouble': 'Модальное окно №2',
            'buttonClose': 'Закрыть'
          },
          'dropdown-mode-example': {
            'caption': 'Flexberry-lookup. Режим dropdown'
          },
          'default-ordering-example': {
            'caption': 'Flexberry-lookup. Сортировка по умолчанию',
            'titleLookup': 'Мастер'
          },
          'autocomplete-order-example': {
            'caption': 'Flexberry-lookup. Пример сортировки при автокомплите',
            'titleLookup': 'Мастер'
          },
          'user-settings-example': {
            'not-user-user-setting-caption': 'Отключить использование пользовательских настроек для OLV лукапа',
            'clear-user-setting': 'Сбросить настройки пользователя'
          }
        },
        'flexberry-menu': {
          'settings-example': {
            'caption': 'Flexberry-menu. Пример работы с настройками',
            'titleIcon1': 'Значок выравнен по левому краю',
            'titleIcon2': 'Значок выравнен по правому краю',
            'titleIcon3': 'Подменю',
            'titleIcon4': 'Кнопки в строке'
          }
        },
        'flexberry-objectlistview': {
          'limit-function-example': {
            'caption': 'Flexberry-objectlistview. Функция ограничения',
            'captionFirstLimitFunction': 'Функция ограничения №1',
            'captionSecondLimitFunction': 'Функция ограничения №2',
            'captionClearLimitFunction': 'Очистить функцию ограничения'
          },
          'inheritance-models': {
            'caption': 'Flexberry-objectlistview. Пример наследуемых моделей',
            'message': 'Проверьте представление в OLV. (ПредставлениеE=ПредставлениеL)',
            'projectionBase': 'Представление \'Предок\': Name, E-mail, Birthday',
            'projectionSuccessorPhone': 'Представление \'Наследник телефоны\': Name, Phone1, Phone2, Phone3',
            'projectionSuccessorSoc': 'Представление \'Наследник соц сети\': Name, VK, Facebook, Twitter',
            'buttonRoot': 'Предок',
            'buttonSuccessorPhone': 'Наследник телефоны',
            'buttonSuccessorSoc': 'Наследник соц сети',
            'name-caption': 'Имя',
            'eMail-caption': 'E-mail',
            'phone1-caption': 'Номер телефона 1',
            'phone2-caption': 'Номер телефона 2',
            'phone3-caption': 'Номер телефона 3',
            'vK-caption': 'VK',
            'facebook-caption': 'Facebook',
            'twitter-caption': 'Twitter',
            'birthday-caption': 'Дата рождения'
          },
          'settings-example': {
            'caption': 'Flexberry-objectlistview. Пример работы с настройками'
          },
          'limited-text-size-example': {
            'caption': 'Flexberry-objectlistview. Пример ограничения длины текста в ячейках'
          },
          'toolbar-custom-buttons-example': {
            'caption': 'Flexberry-objectlistview. Пользовательские кнопки',
            'custom-message': 'Привет!',
            'custom-button-name': 'Передать привет',
            'disable-button-name': 'Отключить соседнюю кнопку',
            'enable-button-name': 'Включить соседнюю кнопку',
            'custom-row-button-name': 'Пользовательская кнопка в строке'
          },
          'on-edit-form': {
            'caption': 'Flexberry-objectlistview. FlexberryObjectlistview на форме редактирования',
            'add-button-name': 'Добавить'
          },
          'list-on-editform': {
            'caption': 'Список детейлов Тип предложения'
          },
          'custom-filter': {
            'caption': 'Flexberry-objectlistview. Настройка фильтра'
          },
          'hierarchy-example': {
            'caption': 'Flexberry-objectlistview. Пример иерархии на списке'
          },
          'hierarchy-paging-example': {
            'caption': 'Flexberry-objectlistview. Пример иерархии c пейджингом на списке'
          },
          'configurate-rows': {
            'caption': 'Flexberry-objectlistview. Раскраска строк'
          },
          'selected-rows': {
            'caption': 'Flexberry-objectlistview. Выбранные строки'
          },
          'downloading-files-from-olv-list': {
            'caption': 'Flexberry-objectlistview. Скачивание файлов со списка'
          },
          'object-list-view-resize': {
            'caption': 'Flexberry-objectlistview. Разметка столбцов',
            'button-сaption': 'Добавить',
            'title': ''
          },
          'lock-services-editor-view': {
            'blocked-by': 'Заблокированно пользователем'
          }
        },
        'flexberry-simpleolv': {
          'limit-function-example': {
            'caption': 'Flexberry-simpleolv. Функция ограничения',
            'captionFirstLimitFunction': 'Функция ограничения №1',
            'captionSecondLimitFunction': 'Функция ограничения №2',
            'captionClearLimitFunction': 'Очистить функцию ограничения'
          },
          'settings-example': {
            'caption': 'Flexberry-simpleolv. Пример работы с настройками'
          },
          'toolbar-custom-buttons-example': {
            'caption': 'Flexberry-simpleolv. Пользовательские кнопки',
            'custom-message': 'Привет!',
            'custom-button-name': 'Передать привет'
          },
          'on-edit-form': {
            'caption': 'Flexberry-simpleolv. FlexberryObjectlistview пример произвольных данных'
          },
          'custom-filter': {
            'caption': 'Flexberry-simpleolv. Настройка фильтра',
            'addObjects-button': 'Добавить объекты'
          },
          'configurate-rows': {
            'caption': 'Flexberry-simpleolv. Раскраска строк'
          },
          'selected-rows': {
            'caption': 'Flexberry-simpleolv. Выбранные строки'
          }
        },
        'flexberry-simpledatetime': {
          'settings-example': {
            'caption': 'Flexberry-simpledatetime. Пример работы с настройками'
          }
        },
        'flexberry-text-cell': {
          'settings-example': {
            'caption': 'Flexberry-text-cell. Пример работы с настройками'
          }
        },
        'flexberry-textarea': {
          'settings-example': {
            'caption': 'Flexberry-textarea. Пример работы с настройками'
          }
        },
        'flexberry-textbox': {
          'settings-example': {
            'caption': 'Flexberry-textbox. Пример работы с настройками'
          }
        },
        'flexberry-toggler': {
          'settings-example': {
            'caption': 'Flexberry-toggler. Пример работы с настройками',
            'togglerContent': 'Некоторое  сворачивающееся/разворачивающееся содержание'
          },
          'settings-example-inner': {
            'caption': 'Flexberry-toggler. Пример работы с настройками',
            'togglerContent': 'Некоторое  сворачивающееся/разворачивающееся содержание',
            'innerTogglerContent': 'Некоторое  сворачивающееся/разворачивающееся содержание внутреннего тогглера'
          },
          'ge-into-toggler-example': {
            'caption': 'Flexberry-toggler. GroupEdit в toggler example'
          }
        },
        'flexberry-tree': {
          'settings-example': {
            'caption': 'Пример работы с настройками flexberry-tree',
            'json-tree-tab-caption': 'Дерево заданное JSON-объектом',
            'json-tree-latest-clicked-node-caption': 'Настройки последней кликнутой вершины дерева',
            'json-tree-latest-clicked-node-placeholder': 'Кликните на любую вершину дерева, чтобы отобразить её настройки'
          }
        },
        'ui-message': {
          'settings-example': {
            'caption': 'Ui-message. Пример работы с настройками',
            'captionMessage': 'Результат проверки',
            'messageError': 'Операция не выполнена',
            'messageSuccess': 'Операция выполнена успешно',
            'messageWarning': 'Частично выполнено',
            'messageInfo': 'Обратите внимание!'
          }
        }
      },
      'integration-examples': {
        'edit-form': {
          'readonly-mode': {
            'caption': 'Integration examples. Режим только для чтения',
            'readonly-flag-management-segment-caption': 'Управление режимом только для чтения формы',
            'readonly-flag-value-segment-caption': 'Значения свойства \'readonly\' контроллера',
            'readonly-flag-caption': 'Форма находится в режиме только для чтения',
            'flag-caption': 'Флаг',
            'number-caption': 'Число',
            'text-caption': 'Текст',
            'long-text-caption': 'Длинный текст',
            'date-caption': 'Дата',
            'time-caption': 'Дата + Время',
            'enumeration-caption': 'Перечисление',
            'file-caption': 'Файл',
            'master-caption': 'Мастер',
            'master-dropdown-caption': 'Мастер в режиме dropdown-а'
          },
          'validation': {
            'caption': 'Примеры интеграции. Валидация',
            'summary-caption': 'Ошибки валидации:',
            'flag-caption': 'Флаг',
            'number-caption': 'Число',
            'text-caption': 'Текст',
            'long-text-caption': 'Длинный текст',
            'date-caption': 'Дата',
            'enumeration-caption': 'Перечисление',
            'file-caption': 'Файл',
            'master-caption': 'Мастер',
            'details-caption': 'Детейлы'
          }
        },
        'odata-examples': {
          'get-masters': {
            'ember-flexberry-dummy-departament-e': {
              caption: 'Департамент',
              'name-caption': 'Название',
              'vid-caption': 'Вид'
            },
            'ember-flexberry-dummy-departament-l': {
              caption: 'Департаменты'
            },
            'ember-flexberry-dummy-sotrudnik-e': {
              caption: 'Сотрудник',
              'familiia-caption': 'Фамилия',
              'name-caption': 'Имя',
              'dataRozhdeniia-caption': 'Дата',
              'departament-caption': 'Департамент'
            },
            'ember-flexberry-dummy-sotrudnik-l': {
              caption: 'Сотрудники',
              'doOdataFunction': 'Выполнить Odata функцию',
              'dataReceived': 'Объекты загружены',
              'receivedMasters': 'Мастера загружены',
              'receivedMastersError': 'Ошибка загрузки мастеров',
              'receivedMasterMasters': 'Мастера мастеров загружены',
              'receivedMasterMastersError': 'Ошибка загрузки мастеров у мастеров'
            },
            'ember-flexberry-dummy-vid-departamenta-e': {
              caption: 'Вид департамента',
              'name-caption': 'Название'
            },
            'ember-flexberry-dummy-vid-departamenta-l': {
              caption: 'Виды департаментов'
            }
          }
        }
      },
      'user-setting-forms': {
        'user-setting-delete': {
          'caption': 'Пользовательские настройки',
          'all-del-button-name': 'Удалить все!',
          'message': 'Настройки удалены'
        }
      }
    },
    // eslint-disable-next-line ember/avoid-leaking-state-in-ember-objects
    'components': {
      'settings-example': {
        'component-template-caption': 'Шаблон компонента',
        'controller-properties-caption': 'Свойства контроллера',
        'component-current-settings-caption': 'Текущие настройки компонента',
        'component-default-settings-caption': 'Настройки компонента по умолчанию',
        'component-with-applied-settings-caption': 'Компонент с примененными текущими настройками'
      }
    }
  });

  exports['default'] = translations;
});
define('dummy/mixins/link-action', ['exports', 'ember-link-action/mixins/link-action'], function (exports, _emberLinkActionMixinsLinkAction) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLinkActionMixinsLinkAction['default'];
    }
  });
});
define('dummy/mixins/list-form-controller-operations-indication', ['exports', 'ember'], function (exports, _ember) {

  /**
    List forms controllers mixin which handles delete operations indication.
  
    @class ListFormControllerOperationsIndicationMixin
  */
  exports['default'] = _ember['default'].Mixin.create({
    actions: {
      /**
        Handler for success ui-message component 'onShow' action.
         @method actions.onSuccessMessageShow
       */
      onSuccessMessageShow: function onSuccessMessageShow() {},

      /**
        Handler for success ui-message component 'onHide' action.
         @method actions.onSuccessMessageHide
       */
      onSuccessMessageHide: function onSuccessMessageHide() {
        this.set('showFormSuccessMessage', false);
      },

      /**
        Handler for error ui-message component 'onShow' action.
         @method actions.onErrorMessageShow
       */
      onErrorMessageShow: function onErrorMessageShow() {},

      /**
        Handler for error ui-message component 'onHide' action.
         @method actions.onErrorMessageHide
       */
      onErrorMessageHide: function onErrorMessageHide() {
        this.set('showFormErrorMessage', false);
      }
    },

    /**
      Latest operation type ('save' or 'delete').
       @property latestOperationType.
      @type String
     */
    latestOperationType: undefined,

    /**
      Flag: indicates whether asynchronous operation succeed or not.
       @property showFormSuccessMessage.
      @type Boolean
     */
    showFormSuccessMessage: false,

    /**
      Success message caption related to current locale and operation type.
       @property formSuccessMessageCaption.
      @type String
     */
    formSuccessMessageCaption: _ember['default'].computed('i18n.locale', 'latestOperationType', function () {
      var i18n = this.get('i18n');
      if (this.get('latestOperationType') === 'delete') {
        return i18n.t('forms.list-form.delete-success-message-caption');
      }

      return i18n.t('forms.list-form.load-success-message-caption');
    }),

    /**
      Success message related to current locale and operation type.
       @property formSuccessMessage.
      @type String
     */
    formSuccessMessage: _ember['default'].computed('i18n.locale', 'latestOperationType', function () {
      var i18n = this.get('i18n');
      var message = null;
      if (this.get('latestOperationType') === 'delete') {
        message = i18n.t('forms.list-form.delete-success-message');
      } else {
        message = i18n.t('forms.list-form.load-success-message');
      }

      return new _ember['default'].Handlebars.SafeString('<ul><li>' + message + '</li></ul>');
    }),

    /**
      Flag: indicates whether asynchronous operation failed or not.
       @property showFormErrorMessage.
      @type Boolean
     */
    showFormErrorMessage: false,

    /**
      Error message caption related to current locale and operation type.
       @property formErrorMessageCaption.
      @type String
     */
    formErrorMessageCaption: _ember['default'].computed('i18n.locale', 'latestOperationType', function () {
      var i18n = this.get('i18n');
      if (this.get('latestOperationType') === 'delete') {
        return i18n.t('forms.list-form.delete-error-message-caption');
      }

      return i18n.t('forms.list-form.load-error-message-caption');
    }),

    /**
      Success message related to current locale and operation type.
       @property formErrorMessage
      @type String
     */
    formErrorMessage: _ember['default'].computed('errorMessages.[]', function () {
      var message = '';
      var errorMessages = this.get('errorMessages');
      if (_ember['default'].isArray(errorMessages)) {
        errorMessages.forEach(function (currentErrorMessage) {
          message += '<li>' + currentErrorMessage + '</li>';
        });
      }

      return new _ember['default'].Handlebars.SafeString('<ul>' + message + '</ul>');
    }),

    /**
      This method will be invoked before delete operation will be called.
       @method onDeleteActionStarted.
     */
    onDeleteActionStarted: function onDeleteActionStarted() {
      this._super.apply(this, arguments);

      this.set('latestOperationType', 'delete');
    },

    /**
      This method will be invoked when delete operation successfully completed.
       @method onDeleteActionFulfilled.
     */
    onDeleteActionFulfilled: function onDeleteActionFulfilled() {
      this._super.apply(this, arguments);

      this.set('showFormSuccessMessage', true);
      this.set('showFormErrorMessage', false);
    },

    /**
      This method will be invoked when delete operation completed, but failed.
       @method onDeleteActionRejected.
      @param {Object} errorData Data about delete operation fail.
     */
    onDeleteActionRejected: function onDeleteActionRejected(errorData, record) {
      this._super.apply(this, arguments);

      this.set('showFormSuccessMessage', false);
      this.set('showFormErrorMessage', true);
    },

    /**
      This method will be invoked always when delete operation completed,
      regardless of delete promise's state (was it fulfilled or rejected).
       @method onDeleteActionAlways.
      @param {Object} data Data about completed delete operation.
     */
    onDeleteActionAlways: function onDeleteActionAlways(data) {
      this._super.apply(this, arguments);
    }
  });
});
/**
  @module ember-flexberry-dummy
*/
define('dummy/mixins/list-form-route-operations-indication', ['exports', 'ember'], function (exports, _ember) {

  /**
    Edit forms routes mixin which handles load/delete operations indication.
  
    @class ListFormRouteOperationsIndicationMixin
  */
  exports['default'] = _ember['default'].Mixin.create({

    setupController: function setupController(controller, model) {
      this._super.apply(this, arguments);

      this.set('copyController', controller);
      controller.set('showFormSuccessMessage', false);
      controller.set('showFormErrorMessage', false);
    },

    /**
      @property copyController.
     */
    copyController: undefined,

    /**
      This method will be invoked before load operation will be called.
       @method onModelLoadingStarted.
      @param {Object} queryParameters
      @param {Transition} transition Current transition object.
     */
    onModelLoadingStarted: function onModelLoadingStarted(queryParameters, transition) {
      this._super.apply(this, arguments);

      var controller = this.get('copyController');
      if (controller) {
        controller.set('latestOperationType', 'load');
      }
    },

    /**
      This method will be invoked when load operation successfully completed.
       @method onModelLoadingFulfilled.
      @param {Object} records
      @param {Transition} transition Current transition object.
     */
    onModelLoadingFulfilled: function onModelLoadingFulfilled(records, transition) {
      this._super.apply(this, arguments);

      var controller = this.get('copyController');
      if (controller) {
        controller.set('showFormSuccessMessage', true);
        controller.set('showFormErrorMessage', false);
      }
    },

    /**
      This method will be invoked when load operation completed, but failed.
       @method onModelLoadingRejected.
      @param {Object} errorData Data about load operation fail.
      @param {Transition} transition Current transition object.
     */
    onModelLoadingRejected: function onModelLoadingRejected(errorData, transition) {
      this._super.apply(this, arguments);

      var controller = this.get('copyController');
      if (controller) {
        controller.set('showFormSuccessMessage', false);
        controller.set('showFormErrorMessage', true);
      }
    },

    /**
      This method will be invoked always when load operation completed,
      regardless of load promise's state (was it fulfilled or rejected).
       @method onModelLoadingAlways.
      @param {Object} data Data about completed load operation.
      @param {Transition} transition Current transition object.
     */
    onModelLoadingAlways: function onModelLoadingAlways(data, transition) {
      this._super.apply(this, arguments);
    }
  });
});
/**
  @module ember-flexberry-dummy
*/
define('dummy/models/aggregator', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    // This property is for flexberry-groupedit component.
    // Inverse relationship is necessary here.
    details: _emberData['default'].hasMany('components-examples/flexberry-groupedit/shared/detail', {
      inverse: 'aggregator',
      async: false
    })
  });

  // Edit form projection.
  Model.defineProjection('AggregatorE', 'aggregator', {
    details: _emberFlexberryData.Projection.hasMany('components-examples/flexberry-groupedit/shared/detail', 'Details', {
      flag: _emberFlexberryData.Projection.attr('Flagsdfadf'),
      text: _emberFlexberryData.Projection.attr('Textadsfasd'),
      date: _emberFlexberryData.Projection.attr('Date'),
      enumeration: _emberFlexberryData.Projection.attr('Enumeration'),
      file: _emberFlexberryData.Projection.attr('File'),
      master: _emberFlexberryData.Projection.belongsTo('components-examples/flexberry-groupedit/shared/master', 'Master', {
        text: _emberFlexberryData.Projection.attr('Text', {
          hidden: true
        })
      }, {
        displayMemberPath: 'text'
      })
    })
  });

  // Edit form projection for test 'configurate row'.
  Model.defineProjection('ConfigurateRowView', 'components-examples/flexberry-groupedit/shared/aggregator', {
    details: _emberFlexberryData.Projection.hasMany('components-examples/flexberry-groupedit/shared/detail', 'Details', {
      flag: _emberFlexberryData.Projection.attr('Flag'),
      text: _emberFlexberryData.Projection.attr('Text')
    })
  });

  // Projection for testing displaying changes on GE after manual model update.
  Model.defineProjection('ManualModelUpdateView', 'components-examples/flexberry-groupedit/shared/aggregator', {
    details: _emberFlexberryData.Projection.hasMany('components-examples/flexberry-groupedit/shared/detail', 'Details', {
      flag: _emberFlexberryData.Projection.attr('Flag'),
      text: _emberFlexberryData.Projection.attr('Text'),
      date: _emberFlexberryData.Projection.attr('Date'),
      enumeration: _emberFlexberryData.Projection.attr('Enumeration'),
      file: _emberFlexberryData.Projection.attr('File'),
      master: _emberFlexberryData.Projection.belongsTo('components-examples/flexberry-groupedit/shared/master', 'Master', {
        text: _emberFlexberryData.Projection.attr('Text', {
          hidden: true
        })
      }, {
        displayMemberPath: 'text'
      })
    })
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-checkbox/settings-example/base', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    flag: _emberData['default'].attr('boolean')
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'components-examples/flexberry-checkbox/settings-example/base', {
    flag: _emberFlexberryData.Projection.attr('Flag')
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-datepicker/settings-example/base', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    date: _emberData['default'].attr('date')
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'components-examples/flexberry-datepicker/settings-example/base', {
    date: _emberFlexberryData.Projection.attr('Date')
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-ddau-checkbox/settings-example/base', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    flag: _emberData['default'].attr('boolean')
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'components-examples/flexberry-ddau-checkbox/settings-example/base', {
    flag: _emberFlexberryData.Projection.attr('Flag')
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-dropdown/conditional-render-example/base', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    enumeration: _emberData['default'].attr('components-examples/flexberry-dropdown/conditional-render-example/enumeration')
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'components-examples/flexberry-dropdown/conditional-render-example/enumeration', {
    enumeration: _emberFlexberryData.Projection.attr('Enumeration')
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-dropdown/empty-value-example/base', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    enumeration: _emberData['default'].attr('components-examples/flexberry-dropdown/empty-value-example/enumeration')
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'components-examples/flexberry-dropdown/empty-value-example/base', {
    enumeration: _emberFlexberryData.Projection.attr('Enumeration')
  });
  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-dropdown/settings-example/base', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    enumeration: _emberData['default'].attr('components-examples/flexberry-dropdown/settings-example/enumeration')
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'components-examples/flexberry-dropdown/settings-example/base', {
    enumeration: _emberFlexberryData.Projection.attr('Enumeration')
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-field/settings-example/base', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    text: _emberData['default'].attr('string')
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'components-examples/flexberry-field/settings-example/base', {
    text: _emberFlexberryData.Projection.attr('Text')
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-file/settings-example/base', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    file: _emberData['default'].attr('file')
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'components-examples/flexberry-file/settings-example/base', {
    file: _emberFlexberryData.Projection.attr('file')
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-groupedit/shared/aggregator', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    // This property is for flexberry-groupedit component.
    // Inverse relationship is necessary here.
    details: _emberData['default'].hasMany('components-examples/flexberry-groupedit/shared/detail', {
      inverse: 'aggregator',
      async: false
    })
  });

  // Edit form projection.
  Model.defineProjection('AggregatorE', 'components-examples/flexberry-groupedit/shared/aggregator', {
    details: _emberFlexberryData.Projection.hasMany('components-examples/flexberry-groupedit/shared/detail', 'Details', {
      flag: _emberFlexberryData.Projection.attr('Flag'),
      text: _emberFlexberryData.Projection.attr('Text'),
      date: _emberFlexberryData.Projection.attr('Date'),
      enumeration: _emberFlexberryData.Projection.attr('Enumeration'),
      file: _emberFlexberryData.Projection.attr('File'),
      master: _emberFlexberryData.Projection.belongsTo('components-examples/flexberry-groupedit/shared/master', 'Master', {
        text: _emberFlexberryData.Projection.attr('Text', {
          hidden: true
        })
      }, {
        displayMemberPath: 'text'
      })
    })
  });

  // Edit form projection for test 'configurate row'.
  Model.defineProjection('ConfigurateRowView', 'components-examples/flexberry-groupedit/shared/aggregator', {
    details: _emberFlexberryData.Projection.hasMany('components-examples/flexberry-groupedit/shared/detail', 'Details', {
      flag: _emberFlexberryData.Projection.attr('Flag'),
      text: _emberFlexberryData.Projection.attr('Text')
    })
  });

  // Projection for testing displaying changes on GE after manual model update.
  Model.defineProjection('ManualModelUpdateView', 'components-examples/flexberry-groupedit/shared/aggregator', {
    details: _emberFlexberryData.Projection.hasMany('components-examples/flexberry-groupedit/shared/detail', 'Details', {
      flag: _emberFlexberryData.Projection.attr('Flag'),
      text: _emberFlexberryData.Projection.attr('Text'),
      date: _emberFlexberryData.Projection.attr('Date'),
      enumeration: _emberFlexberryData.Projection.attr('Enumeration'),
      file: _emberFlexberryData.Projection.attr('File'),
      master: _emberFlexberryData.Projection.belongsTo('components-examples/flexberry-groupedit/shared/master', 'Master', {
        text: _emberFlexberryData.Projection.attr('Text', {
          hidden: true
        })
      }, {
        displayMemberPath: 'text'
      })
    })
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-groupedit/shared/detail', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    // Inversed relationship for aggregator.details.
    // It's not a property for flexberry-lookup component.
    aggregator: _emberData['default'].belongsTo('components-examples/flexberry-groupedit/shared/aggregator', {
      inverse: 'details',
      async: false
    }),

    flag: _emberData['default'].attr('boolean'),
    text: _emberData['default'].attr('string'),
    date: _emberData['default'].attr('date'),
    enumeration: _emberData['default'].attr('components-examples/flexberry-groupedit/shared/detail-enumeration'),
    file: _emberData['default'].attr('file'),

    // This property is for flexberry-lookup component. No inverse relationship here.
    master: _emberData['default'].belongsTo('components-examples/flexberry-groupedit/shared/master', {
      inverse: null,
      async: false
    })
  });

  // Edit form projection.
  Model.defineProjection('DetailE', 'components-examples/flexberry-groupedit/shared/detail', {
    flag: _emberFlexberryData.Projection.attr('Flag'),
    text: _emberFlexberryData.Projection.attr('Text'),
    date: _emberFlexberryData.Projection.attr('Date'),
    enumeration: _emberFlexberryData.Projection.attr('Enumeration'),
    file: _emberFlexberryData.Projection.attr('File'),
    master: _emberFlexberryData.Projection.belongsTo('components-examples/flexberry-groupedit/shared/master', 'Master', {
      text: _emberFlexberryData.Projection.attr('Text', {
        hidden: true
      })
    }, {
      displayMemberPath: 'text'
    })
  });

  // Edit form short projection.
  Model.defineProjection('DetailShortE', 'components-examples/flexberry-groupedit/shared/detail', {
    flag: _emberFlexberryData.Projection.attr('Flag'),
    text: _emberFlexberryData.Projection.attr('Text'),
    enumeration: _emberFlexberryData.Projection.attr('Enumeration')
  });

  // Edit form ultra short projection.
  Model.defineProjection('DetailUltraShortE', 'components-examples/flexberry-groupedit/shared/detail', {
    flag: _emberFlexberryData.Projection.attr('Flag'),
    enumeration: _emberFlexberryData.Projection.attr('Enumeration')
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-groupedit/shared/master', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    text: _emberData['default'].attr('string')
  });

  Model.defineProjection('MasterL', 'components-examples/flexberry-groupedit/shared/master', {
    text: _emberFlexberryData.Projection.attr('Text')
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-simpledatetime/settings-example/base', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    date: _emberData['default'].attr('date')
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'components-examples/flexberry-flexberry-simpledatetime/settings-example/base', {
    date: _emberFlexberryData.Projection.attr('Date')
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-textarea/settings-example/base', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    text: _emberData['default'].attr('string')
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'components-examples/flexberry-textarea/settings-example/base', {
    text: _emberFlexberryData.Projection.attr('Text')
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-textbox/settings-example/base', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    text: _emberData['default'].attr('string')
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'components-examples/flexberry-textbox/settings-example/base', {
    text: _emberFlexberryData.Projection.attr('Text')
  });

  exports['default'] = Model;
});
define('dummy/models/custom-inflector-rules', ['exports', 'ember-inflector'], function (exports, _emberInflector) {

  var inflector = _emberInflector['default'].inflector;

  inflector.irregular('departament', 'departaments');
  inflector.irregular('departamenta', 'departamentas');

  exports['default'] = {};
});
define('dummy/models/ember-flexberry-dummy-application-user', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    name: _emberData['default'].attr('string'),
    eMail: _emberData['default'].attr('string'),
    phone1: _emberData['default'].attr('string'),
    phone2: _emberData['default'].attr('string'),
    phone3: _emberData['default'].attr('string'),
    activated: _emberData['default'].attr('boolean'),
    vK: _emberData['default'].attr('string'),
    facebook: _emberData['default'].attr('string'),
    twitter: _emberData['default'].attr('string'),
    birthday: _emberData['default'].attr('date'),
    gender: _emberData['default'].attr('ember-flexberry-dummy-gender'),
    vip: _emberData['default'].attr('boolean'),
    karma: _emberData['default'].attr('decimal'),

    phone1IsRequired: false,

    // Model validation rules.
    validations: {
      name: {
        presence: {
          message: 'Name is required'
        }
      },
      eMail: {
        presence: {
          message: 'User email is required'
        }
      },
      phone1: {
        presence: {
          'if': 'phone1IsRequired',
          message: 'Phone is required'
        }
      }
    }
  });

  // Edit form projection.
  Model.defineProjection('ApplicationUserE', 'ember-flexberry-dummy-application-user', {
    name: _emberFlexberryData.Projection.attr('Name'),
    eMail: _emberFlexberryData.Projection.attr('E-mail'),
    phone1: _emberFlexberryData.Projection.attr('Phone1'),
    phone2: _emberFlexberryData.Projection.attr('Phone2'),
    phone3: _emberFlexberryData.Projection.attr('Phone3'),
    activated: _emberFlexberryData.Projection.attr('Activated'),
    vK: _emberFlexberryData.Projection.attr('VK'),
    facebook: _emberFlexberryData.Projection.attr('Facebook'),
    twitter: _emberFlexberryData.Projection.attr('Twitter'),
    birthday: _emberFlexberryData.Projection.attr('Birthday'),
    gender: _emberFlexberryData.Projection.attr('Gender'),
    vip: _emberFlexberryData.Projection.attr('Vip'),
    karma: _emberFlexberryData.Projection.attr('Karma')
  });

  // List form projection.
  Model.defineProjection('ApplicationUserL', 'ember-flexberry-dummy-application-user', {
    name: _emberFlexberryData.Projection.attr('Name'),
    eMail: _emberFlexberryData.Projection.attr('E-mail'),
    activated: _emberFlexberryData.Projection.attr('Activated'),
    birthday: _emberFlexberryData.Projection.attr('Birthday'),
    gender: _emberFlexberryData.Projection.attr('Gender'),
    karma: _emberFlexberryData.Projection.attr('Karma')
  });

  // Projection for lookup example on window customization.
  Model.defineProjection('PreviewExampleView', 'ember-flexberry-dummy-application-user', {
    name: _emberFlexberryData.Projection.attr('Name')
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-comment-vote', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    // Inversed relationship for ember-flexberry-dummy-comment.userVotes.
    // It's not a property for flexberry-lookup component.
    comment: _emberData['default'].belongsTo('ember-flexberry-dummy-comment', {
      inverse: 'userVotes',
      async: false
    }),
    voteType: _emberData['default'].attr('ember-flexberry-dummy-vote-type'),

    // This property is for flexberry-lookup component. No inverse relationship here.
    applicationUser: _emberData['default'].belongsTo('ember-flexberry-dummy-application-user', {
      inverse: null,
      async: false
    }),

    // Model validation rules.
    validations: {}
  });

  // Edit form projection.
  Model.defineProjection('CommentVoteE', 'ember-flexberry-dummy-comment-vote', {
    voteType: _emberFlexberryData.Projection.attr('Vote type'),
    applicationUser: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Application user', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-comment', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    suggestion: _emberData['default'].belongsTo('ember-flexberry-dummy-suggestion', {
      inverse: 'comments',
      async: false
    }),
    text: _emberData['default'].attr('string'),
    votes: _emberData['default'].attr('number'),
    moderated: _emberData['default'].attr('boolean'),

    // This property is for flexberry-lookup component. No inverse relationship here.
    author: _emberData['default'].belongsTo('ember-flexberry-dummy-application-user', {
      inverse: null,
      async: false
    }),

    // This property is for flexberry-groupedit component.
    // Inverse relationship is necessary here.
    userVotes: _emberData['default'].hasMany('ember-flexberry-dummy-comment-vote', {
      inverse: 'comment',
      async: false
    }),

    // Model validation rules.
    validations: {
      author: {
        presence: {
          message: 'Author is required'
        }
      }
    }
  });

  // Edit form projection.
  Model.defineProjection('CommentE', 'ember-flexberry-dummy-comment', {
    suggestion: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion', 'Suggestion', {
      address: _emberFlexberryData.Projection.attr('Address', {
        hidden: true
      })
    }),
    text: _emberFlexberryData.Projection.attr('Text'),
    votes: _emberFlexberryData.Projection.attr('Votes'),
    moderated: _emberFlexberryData.Projection.attr('Moderated'),
    author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    }),
    userVotes: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-comment-vote', 'User votes', {
      voteType: _emberFlexberryData.Projection.attr('Vote type'),
      applicationUser: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Application user', {
        name: _emberFlexberryData.Projection.attr('Name', {
          hidden: true
        })
      }, {
        displayMemberPath: 'name'
      })
    })
  });

  // Detail's list projection.
  Model.defineProjection('CommentD', 'ember-flexberry-dummy-comment', {
    text: _emberFlexberryData.Projection.attr('Text'),
    votes: _emberFlexberryData.Projection.attr('Votes'),
    moderated: _emberFlexberryData.Projection.attr('Moderated'),
    author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-departament', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {
  var Model = _emberFlexberryData.Projection.Model.extend({
    name: _emberData['default'].attr('string'),
    vid: _emberData['default'].belongsTo('ember-flexberry-dummy-vid-departamenta', { inverse: null, async: false })
  });

  Model.defineProjection('DepartamentE', 'ember-flexberry-dummy-departament', {
    name: _emberFlexberryData.Projection.attr('Название', { index: 0 }),
    vid: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-vid-departamenta', 'Вид', {}, { index: 1, displayMemberPath: 'name' })
  });
  Model.defineProjection('DepartamentL', 'ember-flexberry-dummy-departament', {
    name: _emberFlexberryData.Projection.attr('Название', { index: 0 })
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-localization', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    name: _emberData['default'].attr('string'),

    // Model validation rules.
    validations: {
      name: {
        presence: {
          message: 'Name is required'
        }
      }
    }
  });

  // Edit form projection.
  Model.defineProjection('LocalizationE', 'ember-flexberry-dummy-localization', {
    name: _emberFlexberryData.Projection.attr('Name')
  });

  // List form projection.
  Model.defineProjection('LocalizationL', 'ember-flexberry-dummy-localization', {
    name: _emberFlexberryData.Projection.attr('Name')
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-localized-suggestion-type', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    // Inversed relationship for ember-flexberry-dummy-suggestion-type.localizedTypes.
    // It's not a property for flexberry-lookup component.
    suggestionType: _emberData['default'].belongsTo('ember-flexberry-dummy-suggestion-type', {
      inverse: 'localizedTypes',
      async: false
    }),
    name: _emberData['default'].attr('string'),

    // This property is for flexberry-lookup component. No inverse relationship here.
    localization: _emberData['default'].belongsTo('ember-flexberry-dummy-localization', {
      inverse: null,
      async: false
    }),

    // Model validation rules.
    validations: {
      name: {
        presence: {
          message: 'Name is required'
        }
      },
      localization: {
        presence: {
          message: 'Localization is required'
        }
      }
    }
  });

  // Edit form projection.
  Model.defineProjection('LocalizedSuggestionTypeE', 'ember-flexberry-dummy-localized-suggestion-type', {
    name: _emberFlexberryData.Projection.attr('Name'),
    localization: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-localization', 'Localization', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-parent', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {
  var Model = _emberFlexberryData.Projection.Model.extend({
    name: _emberData['default'].attr('string'),
    eMail: _emberData['default'].attr('string'),
    birthday: _emberData['default'].attr('date'),
    validations: {
      name: {
        presence: {
          message: 'Name is required'
        }
      },
      eMail: {
        presence: {
          message: 'User email is required'
        }
      }
    }
  });
  Model.defineProjection('parentE', 'ember-flexberry-dummy-parent', {
    name: _emberFlexberryData.Projection.attr('Name'),
    eMail: _emberFlexberryData.Projection.attr('E-mail'),
    birthday: _emberFlexberryData.Projection.attr('Birthday')
  });
  Model.defineProjection('parentL', 'ember-flexberry-dummy-parent', {
    name: _emberFlexberryData.Projection.attr('Name'),
    eMail: _emberFlexberryData.Projection.attr('E-mail'),
    birthday: _emberFlexberryData.Projection.attr('Birthday')
  });
  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-sotrudnik', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {
  var Model = _emberFlexberryData.Projection.Model.extend({
    familiia: _emberData['default'].attr('string'),
    name: _emberData['default'].attr('string'),
    dataRozhdeniia: _emberData['default'].attr('date'),
    departament: _emberData['default'].belongsTo('ember-flexberry-dummy-departament', { inverse: null, async: false })
  });

  Model.defineProjection('SotrudnikE', 'ember-flexberry-dummy-sotrudnik', {
    familiia: _emberFlexberryData.Projection.attr('Фамилия', { index: 0 }),
    name: _emberFlexberryData.Projection.attr('Имя', { index: 1 }),
    dataRozhdeniia: _emberFlexberryData.Projection.attr('Дата', { index: 2 }),
    departament: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-departament', 'Департамент', {
      vid: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-vid-departamenta', '', {}, { index: 4 })
    }, { index: 3, displayMemberPath: 'name' })
  });
  Model.defineProjection('SotrudnikL', 'ember-flexberry-dummy-sotrudnik', {
    familiia: _emberFlexberryData.Projection.attr('Фамилия', { index: 0 }),
    name: _emberFlexberryData.Projection.attr('Имя', { index: 1 }),
    dataRozhdeniia: _emberFlexberryData.Projection.attr('Дата', { index: 2 })
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-successor-phone', ['exports', 'ember-data', 'dummy/models/ember-flexberry-dummy-parent', 'ember-flexberry-data'], function (exports, _emberData, _dummyModelsEmberFlexberryDummyParent, _emberFlexberryData) {
  var Model = _dummyModelsEmberFlexberryDummyParent['default'].extend({
    phone1: _emberData['default'].attr('string'),
    phone2: _emberData['default'].attr('string'),
    phone3: _emberData['default'].attr('string'),
    validations: {}
  });
  Model.defineProjection('SuccessorE', 'ember-flexberry-dummy-successor-phone', {
    name: _emberFlexberryData.Projection.attr('Name'),
    phone1: _emberFlexberryData.Projection.attr('Phone1'),
    phone2: _emberFlexberryData.Projection.attr('Phone2'),
    phone3: _emberFlexberryData.Projection.attr('Phone3')
  });
  Model.defineProjection('SuccessorL', 'ember-flexberry-dummy-successor-phone', {
    name: _emberFlexberryData.Projection.attr('Name'),
    phone1: _emberFlexberryData.Projection.attr('Phone1'),
    phone2: _emberFlexberryData.Projection.attr('Phone2'),
    phone3: _emberFlexberryData.Projection.attr('Phone3')
  });
  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-successor-social-network', ['exports', 'ember-data', 'dummy/models/ember-flexberry-dummy-parent', 'ember-flexberry-data'], function (exports, _emberData, _dummyModelsEmberFlexberryDummyParent, _emberFlexberryData) {
  var Model = _dummyModelsEmberFlexberryDummyParent['default'].extend({
    vK: _emberData['default'].attr('string'),
    facebook: _emberData['default'].attr('string'),
    twitter: _emberData['default'].attr('string'),
    validations: {}
  });
  Model.defineProjection('SuccessorE', 'ember-flexberry-dummy-successor-social-network', {
    name: _emberFlexberryData.Projection.attr('Name'),
    vK: _emberFlexberryData.Projection.attr('VK'),
    facebook: _emberFlexberryData.Projection.attr('Facebook'),
    twitter: _emberFlexberryData.Projection.attr('Twitter')
  });
  Model.defineProjection('SuccessorL', 'ember-flexberry-dummy-successor-social-network', {
    name: _emberFlexberryData.Projection.attr('Name'),
    vK: _emberFlexberryData.Projection.attr('VK'),
    facebook: _emberFlexberryData.Projection.attr('Facebook'),
    twitter: _emberFlexberryData.Projection.attr('Twitter')
  });
  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-suggestion-file', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    // Inversed relationship for ember-flexberry-dummy-suggestion.files.
    // It's not a property for flexberry-lookup component.
    suggestion: _emberData['default'].belongsTo('ember-flexberry-dummy-suggestion', {
      inverse: 'files',
      async: false
    }),
    order: _emberData['default'].attr('number', { ordered: true }),
    file: _emberData['default'].attr('file'),

    // Model validation rules.
    validations: {}
  });

  // List form projection.
  Model.defineProjection('SuggestionFileL', 'ember-flexberry-dummy-suggestion-file', {
    order: _emberFlexberryData.Projection.attr('Order'),
    suggestion: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion', 'Suggestion', {
      address: _emberFlexberryData.Projection.attr('Address', {
        hidden: true
      })
    }, {
      displayMemberPath: 'address'
    }),
    file: _emberFlexberryData.Projection.attr('File')
  });

  // Edit form projection.
  Model.defineProjection('SuggestionFileE', 'ember-flexberry-dummy-suggestion-file', {
    order: _emberFlexberryData.Projection.attr('Order'),
    suggestion: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion', 'Suggestion', {
      address: _emberFlexberryData.Projection.attr('Address')
    }),
    file: _emberFlexberryData.Projection.attr('File')
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-suggestion-type', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    name: _emberData['default'].attr('string'),
    moderated: _emberData['default'].attr('boolean'),
    isParentRecord: _emberData['default'].attr('boolean'),

    // This property is for flexberry-lookup component. No inverse relationship here.
    parent: _emberData['default'].belongsTo('ember-flexberry-dummy-suggestion-type', {
      inverse: null,
      async: false
    }),

    // This property is for flexberry-groupedit component.
    // Inverse relationship is necessary here.
    localizedTypes: _emberData['default'].hasMany('ember-flexberry-dummy-localized-suggestion-type', {
      inverse: 'suggestionType',
      async: false
    }),

    // Model validation rules.
    validations: {
      name: {
        presence: {
          message: 'Name is required'
        }
      }
    },

    /**
      Non-stored property.
       @property computedField
    */
    computedField: _emberData['default'].attr('string'),

    moderatedChanged: _ember['default'].on('init', _ember['default'].observer('Name', function () {
      _ember['default'].run.once(this, 'computedFieldCompute');
    })),

    nameChanged: _ember['default'].on('init', _ember['default'].observer('Moderated', function () {
      _ember['default'].run.once(this, 'computedFieldCompute');
    })),

    computedFieldCompute: function computedFieldCompute() {
      var result = this.get('name') + ' ' + this.get('moderated');
      this.set('computedField', result);
    }
  });

  // Edit form projection.
  Model.defineProjection('SuggestionTypeE', 'ember-flexberry-dummy-suggestion-type', {
    name: _emberFlexberryData.Projection.attr('Name'),
    moderated: _emberFlexberryData.Projection.attr('Moderated'),
    parent: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Parent', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    }),
    localizedTypes: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-localized-suggestion-type', 'Localized types', {
      name: _emberFlexberryData.Projection.attr('Name'),
      localization: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-localization', 'Localization', {
        name: _emberFlexberryData.Projection.attr('Name', {
          hidden: true
        })
      }, {
        displayMemberPath: 'name'
      })
    })
  });

  // List form projection.
  Model.defineProjection('SuggestionTypeL', 'ember-flexberry-dummy-suggestion-type', {
    name: _emberFlexberryData.Projection.attr('Name'),
    moderated: _emberFlexberryData.Projection.attr('Moderated'),
    isParentRecord: _emberFlexberryData.Projection.attr('IsParentRecord', {
      hidden: true
    }),
    parent: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Parent', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  // Projection for lookup example on window customization.
  Model.defineProjection('SettingLookupExampleView', 'ember-flexberry-dummy-suggestion-type', {
    name: _emberFlexberryData.Projection.attr('Name'),
    moderated: _emberFlexberryData.Projection.attr('Moderated')
  });

  // Projection for lookup example on window customization.
  Model.defineProjection('CustomizeLookupWindowExampleView', 'ember-flexberry-dummy-suggestion-type', {
    name: _emberFlexberryData.Projection.attr('Name'),
    moderated: _emberFlexberryData.Projection.attr('Moderated')
  });

  // Projection for lookup with limit function example.
  Model.defineProjection('LookupWithLimitFunctionExampleView', 'ember-flexberry-dummy-suggestion-type', {
    name: _emberFlexberryData.Projection.attr('Name'),
    moderated: _emberFlexberryData.Projection.attr('Moderated')
  });

  // Projection for lookup in dropdown mode example.
  Model.defineProjection('DropDownLookupExampleView', 'ember-flexberry-dummy-suggestion-type', {
    name: _emberFlexberryData.Projection.attr('Name'),
    moderated: _emberFlexberryData.Projection.attr('Moderated')
  });

  Model.defineProjection('SuggestionTypeEWithComputedField', 'ember-flexberry-dummy-suggestion-type', {
    name: _emberFlexberryData.Projection.attr(''),
    moderated: _emberFlexberryData.Projection.attr(''),
    computedField: _emberFlexberryData.Projection.attr(''),
    parent: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', '', {
      name: _emberFlexberryData.Projection.attr(''),
      moderated: _emberFlexberryData.Projection.attr(''),
      computedField: _emberFlexberryData.Projection.attr('')
    }, {
      displayMemberPath: 'computedField'
    }),
    localizedTypes: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-localized-suggestion-type', '', {
      name: _emberFlexberryData.Projection.attr('Name'),
      localization: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-localization', 'Localization', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' }),
      suggestionType: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', '', {}, { hidden: true })
    })
  });

  Model.defineProjection('AutocompleteProjectionExampleView', 'ember-flexberry-dummy-suggestion-type', {
    name: _emberFlexberryData.Projection.attr('Name'),
    moderated: _emberFlexberryData.Projection.attr('Moderated'),
    computedField: _emberFlexberryData.Projection.attr('')
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-suggestion', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    address: _emberData['default'].attr('string'),
    text: _emberData['default'].attr('string'),
    date: _emberData['default'].attr('date'),
    votes: _emberData['default'].attr('number'),
    moderated: _emberData['default'].attr('boolean'),
    commentsCount: _emberData['default'].attr('number'),

    // This property is for flexberry-lookup component. No inverse relationship here.
    type: _emberData['default'].belongsTo('ember-flexberry-dummy-suggestion-type', {
      inverse: null,
      async: false
    }),

    // This property is for flexberry-lookup component. No inverse relationship here.
    author: _emberData['default'].belongsTo('ember-flexberry-dummy-application-user', {
      inverse: null,
      async: false
    }),

    // This property is for flexberry-lookup component. No inverse relationship here.
    editor1: _emberData['default'].belongsTo('ember-flexberry-dummy-application-user', {
      inverse: null,
      async: false
    }),

    // This property is for flexberry-groupedit component.
    // Inverse relationship is necessary here.
    files: _emberData['default'].hasMany('ember-flexberry-dummy-suggestion-file', {
      inverse: 'suggestion',
      async: false
    }),

    // This property is for flexberry-groupedit component.
    // Inverse relationship is necessary here.
    userVotes: _emberData['default'].hasMany('ember-flexberry-dummy-vote', {
      inverse: 'suggestion',
      async: false
    }),

    // This property is for flexberry-groupedit component.
    // Inverse relationship is necessary here.
    comments: _emberData['default'].hasMany('ember-flexberry-dummy-comment', {
      inverse: 'suggestion',
      async: false
    }),

    // Model validation rules.
    validations: {
      type: {
        presence: {
          message: 'Type is required'
        }
      },
      author: {
        presence: {
          message: 'Author is required'
        }
      },
      editor1: {
        presence: {
          message: 'Editor is required'
        }
      }
    },

    commentsChanged: _ember['default'].on('init', _ember['default'].observer('comments', function () {
      _ember['default'].run.once(this, 'commentsCountCompute');
    })),

    commentsCountCompute: function commentsCountCompute() {
      var result = 0;
      this.get('comments').forEach(function () {
        result++;
      });
      this.set('commentsCount', result);
    },

    prototypeProjection: 'SuggestionE'
  });

  // Edit form projection.
  Model.defineProjection('SuggestionE', 'ember-flexberry-dummy-suggestion', {
    address: _emberFlexberryData.Projection.attr('Address'),
    text: _emberFlexberryData.Projection.attr('Text'),
    date: _emberFlexberryData.Projection.attr('Date'),
    votes: _emberFlexberryData.Projection.attr('Votes'),
    moderated: _emberFlexberryData.Projection.attr('Moderated'),
    type: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Type', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    }),
    author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    }),
    editor1: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Editor', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    }),
    files: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-suggestion-file', 'Files', {
      order: _emberFlexberryData.Projection.attr('Order'),
      file: _emberFlexberryData.Projection.attr('File')
    }),
    userVotes: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-vote', 'User votes', {
      voteType: _emberFlexberryData.Projection.attr('Vote type'),
      author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Application user', {
        name: _emberFlexberryData.Projection.attr('Name', {
          hidden: true
        }),
        eMail: _emberFlexberryData.Projection.attr('Email')
      }, {
        displayMemberPath: 'name'
      })
    }),
    comments: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-comment', 'Comments', {
      text: _emberFlexberryData.Projection.attr('Text'),
      votes: _emberFlexberryData.Projection.attr('Votes'),
      moderated: _emberFlexberryData.Projection.attr('Moderated'),
      author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
        name: _emberFlexberryData.Projection.attr('Name', {
          hidden: true
        })
      }, {
        displayMemberPath: 'name'
      })
    })
  });

  // Edit form projection.
  Model.defineProjection('SuggestionMainModelProjectionTest', 'ember-flexberry-dummy-suggestion', {
    userVotes: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-vote', 'User votes', {
      voteType: _emberFlexberryData.Projection.attr('Vote type')
    })
  });

  // List form projection.
  Model.defineProjection('SuggestionL', 'ember-flexberry-dummy-suggestion', {
    address: _emberFlexberryData.Projection.attr('Address', { index: 0 }),
    text: _emberFlexberryData.Projection.attr('Text', { index: 1 }),
    date: _emberFlexberryData.Projection.attr('Date', { index: 2 }),
    votes: _emberFlexberryData.Projection.attr('Votes', { index: 3 }),
    moderated: _emberFlexberryData.Projection.attr('Moderated', { index: 4 }),
    type: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Type', {
      name: _emberFlexberryData.Projection.attr('Name', { index: 6, hidden: true })
    }, { index: 5, displayMemberPath: 'name' }),
    author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
      name: _emberFlexberryData.Projection.attr('Name', { index: 8, hidden: true }),
      eMail: _emberFlexberryData.Projection.attr('Email', { index: 9 })
    }, { index: 7, displayMemberPath: 'name' }),
    editor1: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Editor', {
      name: _emberFlexberryData.Projection.attr('Name', { index: 11, hidden: true })
    }, { index: 10, displayMemberPath: 'name' }),
    commentsCount: _emberFlexberryData.Projection.attr('Comments Count', { index: 15 }),
    comments: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-comment', 'Comments', {
      text: _emberFlexberryData.Projection.attr('Text', { index: 0 }),
      votes: _emberFlexberryData.Projection.attr('Votes', { index: 1 }),
      moderated: _emberFlexberryData.Projection.attr('Moderated', { index: 2 }),
      author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
        name: _emberFlexberryData.Projection.attr('Name', { index: 4, hidden: true })
      }, { index: 3, displayMemberPath: 'name' })
    })
  });

  // Projection for lookup example on settings example.
  Model.defineProjection('SettingLookupExampleView', 'ember-flexberry-dummy-suggestion', {
    type: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Type', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  // Projection for lookup example on preview example.
  Model.defineProjection('PreviewExampleView', 'ember-flexberry-dummy-suggestion', {
    author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    }),
    editor1: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Editor', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    }),
    userVotes: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-vote', 'User votes', {
      author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Application user', {
        name: _emberFlexberryData.Projection.attr('Name', {
          hidden: true
        })
      }, {
        displayMemberPath: 'name'
      })
    })
  });

  // Projection for lookup example on window customization.
  Model.defineProjection('CustomizeLookupWindowExampleView', 'ember-flexberry-dummy-suggestion', {
    type: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Type', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  // Projection for lookup with limit function example.
  Model.defineProjection('LookupWithLimitFunctionExampleView', 'ember-flexberry-dummy-suggestion', {
    type: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Type', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  // Projection for lookup in dropdown mode example.
  Model.defineProjection('DropDownLookupExampleView', 'ember-flexberry-dummy-suggestion', {
    type: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Type', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  // Projection for FlexberryObjectlistviewComponent with limit function example.
  Model.defineProjection('FolvWithLimitFunctionExampleView', 'ember-flexberry-dummy-suggestion', {
    address: _emberFlexberryData.Projection.attr('Address'),
    text: _emberFlexberryData.Projection.attr('Text'),
    votes: _emberFlexberryData.Projection.attr('Votes'),
    moderated: _emberFlexberryData.Projection.attr('Moderated'),
    type: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Type', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  // Projection for lookup in block form.
  Model.defineProjection('LookupInBlockFormView', 'ember-flexberry-dummy-suggestion', {
    editor1: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Editor', {
      name: _emberFlexberryData.Projection.attr('name', { hidden: true }),
      eMail: _emberFlexberryData.Projection.attr('eMail', { hidden: true }),
      gender: _emberFlexberryData.Projection.attr('gender', { hidden: true })
    }, {
      displayMemberPath: 'name'
    })
  });

  // Example custom filter.
  Model.defineProjection('FlexberryObjectlistviewCustomFilter', 'ember-flexberry-dummy-suggestion', {
    address: _emberFlexberryData.Projection.attr('Address'),
    date: _emberFlexberryData.Projection.attr('Date'),
    votes: _emberFlexberryData.Projection.attr('Votes'),
    type: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Type', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      }),
      moderated: _emberFlexberryData.Projection.attr('Moderated'),
      parent: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Parent moderated', {
        moderated: _emberFlexberryData.Projection.attr('Moderated', {
          hidden: true
        }),
        name: _emberFlexberryData.Projection.attr('Parent type')
      }, {
        displayMemberPath: 'moderated'
      })
    }, {
      displayMemberPath: 'name'
    }),
    author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      }),
      eMail: _emberFlexberryData.Projection.attr('Author email')
    }, {
      displayMemberPath: 'name'
    }),
    editor1: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Editor', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  // Projection for lookup default ordering example.
  Model.defineProjection('DefaultOrderingExampleView', 'ember-flexberry-dummy-suggestion', {
    type: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Type', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  // Example to filter test.
  Model.defineProjection('FlexberryObjectlistviewFilterTest', 'ember-flexberry-dummy-suggestion', {
    address: _emberFlexberryData.Projection.attr('Address'),
    date: _emberFlexberryData.Projection.attr('Date'),
    votes: _emberFlexberryData.Projection.attr('Votes'),
    moderated: _emberFlexberryData.Projection.attr('Moderated'),
    type: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Type', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    }),
    author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  // Projection for lookup with computed field test.
  Model.defineProjection('SuggestionEWithComputedField', 'ember-flexberry-dummy-suggestion', {
    address: _emberFlexberryData.Projection.attr(''),
    text: _emberFlexberryData.Projection.attr(''),
    date: _emberFlexberryData.Projection.attr(''),
    votes: _emberFlexberryData.Projection.attr(''),
    moderated: _emberFlexberryData.Projection.attr(''),
    author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', '', {
      name: _emberFlexberryData.Projection.attr('')
    }),
    type: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', '', {
      name: _emberFlexberryData.Projection.attr(''),
      moderated: _emberFlexberryData.Projection.attr(''),
      computedField: _emberFlexberryData.Projection.attr('')
    }),
    editor1: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', '', {
      name: _emberFlexberryData.Projection.attr('')
    }),
    createTime: _emberFlexberryData.Projection.attr(''),
    creator: _emberFlexberryData.Projection.attr(''),
    editTime: _emberFlexberryData.Projection.attr(''),
    editor: _emberFlexberryData.Projection.attr('')
  });

  // Edit form projection with Karma.
  Model.defineProjection('SuggestionEWithKarma', 'ember-flexberry-dummy-suggestion', {
    author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      }),
      karma: _emberFlexberryData.Projection.attr('')
    }, {
      displayMemberPath: 'name'
    })
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-toggler-example-detail', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    togglerExampleDetailProperty: _emberData['default'].attr('string'),
    togglerExampleMaster: _emberData['default'].belongsTo('ember-flexberry-dummy-toggler-example-master', {
      inverse: 'togglerExampleDetail',
      async: false
    }),

    // Model validation rules.
    validations: {
      togglerExampleDetailProperty: {
        presence: {
          message: 'Deteil property is required'
        }
      }
    }

  });

  Model.defineProjection('TogglerExampleDetailE', 'ember-flexberry-dummy-toggler-example-detail', {
    togglerExampleDetailProperty: _emberFlexberryData.Projection.attr('Наименование детейла')
  });
  Model.defineProjection('TogglerExampleDetailL', 'ember-flexberry-dummy-toggler-example-detail', {
    togglerExampleDetailProperty: _emberFlexberryData.Projection.attr('Наименование детейла')
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-toggler-example-master', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    togglerExampleMasterProperty: _emberData['default'].attr('string'),
    togglerExampleDetail: _emberData['default'].hasMany('ember-flexberry-dummy-toggler-example-detail', {
      inverse: 'togglerExampleMaster',
      async: false
    }),

    // Model validation rules.
    validations: {
      togglerExampleMasterProperty: {
        presence: {
          message: 'Master property is required'
        }
      }
    }
  });

  Model.defineProjection('TogglerExampleMasterE', 'ember-flexberry-dummy-toggler-example-master', {
    togglerExampleMasterProperty: _emberFlexberryData.Projection.attr('Наименование мастера'),
    togglerExampleDetail: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-toggler-example-detail', '', {
      togglerExampleDetailProperty: _emberFlexberryData.Projection.attr('Наименование детейла')
    })
  });
  Model.defineProjection('TogglerExampleMasterL', 'ember-flexberry-dummy-toggler-example-master', {
    togglerExampleMasterProperty: _emberFlexberryData.Projection.attr('Наименование мастера')
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-vid-departamenta', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {
  var Model = _emberFlexberryData.Projection.Model.extend({
    name: _emberData['default'].attr('string')
  });

  Model.defineProjection('VidDepartamentaE', 'ember-flexberry-dummy-vid-departamenta', {
    name: _emberFlexberryData.Projection.attr('Название', { index: 0 })
  });
  Model.defineProjection('VidDepartamentaL', 'ember-flexberry-dummy-vid-departamenta', {
    name: _emberFlexberryData.Projection.attr('Название', { index: 0 })
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-vote', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    // Inversed relationship for ember-flexberry-dummy-suggestion.userVotes.
    // It's not a property for flexberry-lookup component.
    suggestion: _emberData['default'].belongsTo('ember-flexberry-dummy-suggestion', {
      inverse: 'userVotes',
      async: false
    }),
    voteType: _emberData['default'].attr('ember-flexberry-dummy-vote-type'),

    // This property is for flexberry-lookup component. No inverse relationship here.
    author: _emberData['default'].belongsTo('ember-flexberry-dummy-application-user', { inverse: null, async: false }),

    // Model validation rules.
    validations: {
      author: {
        presence: {
          message: 'Author is required'
        }
      }
    }
  });

  // Edit form projection.
  Model.defineProjection('VoteE', 'ember-flexberry-dummy-vote', {
    voteType: _emberFlexberryData.Projection.attr('Vote type'),
    author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  exports['default'] = Model;
});
define('dummy/models/flexberry-adv-limit', ['exports', 'ember-flexberry/models/flexberry-adv-limit'], function (exports, _emberFlexberryModelsFlexberryAdvLimit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryModelsFlexberryAdvLimit['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsAuditEntity) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsAuditEntity['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsAuditField) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsAuditField['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsObjectType) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsObjectType['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETSecurityAgent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETSecurityAgent['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETSecurityLinkGroup) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETSecurityLinkGroup['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-session', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-session'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETSecuritySession) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETSecuritySession['default'];
    }
  });
});
define('dummy/models/i-i-s-caseberry-logging-objects-application-log', ['exports', 'ember-flexberry/models/i-i-s-caseberry-logging-objects-application-log'], function (exports, _emberFlexberryModelsIISCaseberryLoggingObjectsApplicationLog) {
  /**
   * @module ember-flexberry
   */
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryModelsIISCaseberryLoggingObjectsApplicationLog['default'];
    }
  });
});
define('dummy/models/integration-examples/edit-form/readonly-mode/aggregator', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    flag: _emberData['default'].attr('boolean'),
    number: _emberData['default'].attr('number'),
    text: _emberData['default'].attr('string'),
    longText: _emberData['default'].attr('string'),
    date: _emberData['default'].attr('date'),
    time: _emberData['default'].attr('date'),
    enumeration: _emberData['default'].attr('integration-examples/edit-form/validation/enumeration'),
    file: _emberData['default'].attr('file'),

    // This property is for flexberry-lookup component. No inverse relationship here.
    master: _emberData['default'].belongsTo('integration-examples/edit-form/validation/master', {
      inverse: null,
      async: false
    }),

    // This property is for flexberry-lookup component (in dropdown-mode). No inverse relationship here.
    masterDropdown: _emberData['default'].belongsTo('integration-examples/edit-form/readonly-mode/master-dropdown', {
      inverse: null,
      async: false
    }),

    details: _emberData['default'].hasMany('integration-examples/edit-form/readonly-mode/detail', {
      inverse: 'aggregator',
      async: false
    })
  });

  // Edit form projection.
  Model.defineProjection('AggregatorE', 'integration-examples/edit-form/readonly-mode/aggregator', {
    flag: _emberFlexberryData.Projection.attr('Flag'),
    number: _emberFlexberryData.Projection.attr('Number'),
    text: _emberFlexberryData.Projection.attr('Text'),
    longText: _emberFlexberryData.Projection.attr('Long text'),
    date: _emberFlexberryData.Projection.attr('Date'),
    time: _emberFlexberryData.Projection.attr('Time'),
    enumeration: _emberFlexberryData.Projection.attr('Enumeration'),
    file: _emberFlexberryData.Projection.attr('File'),
    master: _emberFlexberryData.Projection.belongsTo('integration-examples/edit-form/validation/master', 'Master', {
      text: _emberFlexberryData.Projection.attr('Text', {
        hidden: true
      })
    }, {
      displayMemberPath: 'text'
    }),
    masterDropdown: _emberFlexberryData.Projection.belongsTo('integration-examples/edit-form/validation/master-dropdown', 'Master dropdown', {
      text: _emberFlexberryData.Projection.attr('Text', {
        hidden: true
      })
    }, {
      displayMemberPath: 'text'
    }),
    details: _emberFlexberryData.Projection.hasMany('integration-examples/edit-form/readonly-mode/detail', 'Details', {
      flag: _emberFlexberryData.Projection.attr('Flag'),
      text: _emberFlexberryData.Projection.attr('Text'),
      longText: _emberFlexberryData.Projection.attr('Long text'),
      date: _emberFlexberryData.Projection.attr('Date'),
      time: _emberFlexberryData.Projection.attr('Time'),
      enumeration: _emberFlexberryData.Projection.attr('Enumeration'),
      file: _emberFlexberryData.Projection.attr('File'),
      master: _emberFlexberryData.Projection.belongsTo('integration-examples/edit-form/readonly-mode/master', 'Master', {
        text: _emberFlexberryData.Projection.attr('Name', {
          hidden: true
        })
      }, {
        displayMemberPath: 'name'
      }),
      masterDropdown: _emberFlexberryData.Projection.belongsTo('integration-examples/edit-form/validation/master-dropdown', 'Master dropdown', {
        text: _emberFlexberryData.Projection.attr('Text', {
          hidden: true
        })
      }, {
        displayMemberPath: 'text'
      })
    })
  });

  exports['default'] = Model;
});
define('dummy/models/integration-examples/edit-form/readonly-mode/detail', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    // Inversed relationship for aggregator.details.
    // It's not a property for flexberry-lookup component.
    aggregator: _emberData['default'].belongsTo('integration-examples/edit-form/readonly-mode/aggregator', {
      inverse: 'details',
      async: false
    }),

    flag: _emberData['default'].attr('boolean'),
    text: _emberData['default'].attr('string'),
    longText: _emberData['default'].attr('string'),
    date: _emberData['default'].attr('date'),
    time: _emberData['default'].attr('date'),
    enumeration: _emberData['default'].attr('integration-examples/edit-form/readonly-mode/enumeration'),
    file: _emberData['default'].attr('file'),

    // This property is for flexberry-lookup component. No inverse relationship here.
    master: _emberData['default'].belongsTo('integration-examples/edit-form/readonly-mode/master', {
      inverse: null,
      async: false
    })
  });

  // Edit form projection.
  Model.defineProjection('DetailE', 'integration-examples/edit-form/readonly-mode/detail', {
    flag: _emberFlexberryData.Projection.attr('Flag'),
    text: _emberFlexberryData.Projection.attr('Text'),
    longText: _emberFlexberryData.Projection.attr('longText'),
    date: _emberFlexberryData.Projection.attr('Date'),
    enumeration: _emberFlexberryData.Projection.attr('Enumeration'),
    file: _emberFlexberryData.Projection.attr('File'),
    master: _emberFlexberryData.Projection.belongsTo('integration-examples/edit-form/readonly-mode/master', 'Master', {
      text: _emberFlexberryData.Projection.attr('Text', {
        hidden: true
      })
    }, {
      displayMemberPath: 'text'
    })
  });

  exports['default'] = Model;
});
define('dummy/models/integration-examples/edit-form/readonly-mode/master-dropdown', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    text: _emberData['default'].attr('string')
  });

  Model.defineProjection('MasterDropdownL', 'integration-examples/edit-form/readonly-mode/master-dropdown', {
    text: _emberFlexberryData.Projection.attr('Text')
  });

  exports['default'] = Model;
});
define('dummy/models/integration-examples/edit-form/readonly-mode/master', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    text: _emberData['default'].attr('string')
  });

  Model.defineProjection('MasterL', 'integration-examples/edit-form/readonly-mode/master', {
    text: _emberFlexberryData.Projection.attr('Text')
  });

  exports['default'] = Model;
});
define('dummy/models/integration-examples/edit-form/validation/base', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    flag: _emberData['default'].attr('boolean'),
    number: _emberData['default'].attr('number'),
    text: _emberData['default'].attr('string'),
    longText: _emberData['default'].attr('string'),
    date: _emberData['default'].attr('date'),
    enumeration: _emberData['default'].attr('integration-examples/edit-form/validation/enumeration'),
    file: _emberData['default'].attr('file'),

    // This property is for flexberry-lookup component. No inverse relationship here.
    master: _emberData['default'].belongsTo('integration-examples/edit-form/validation/master', {
      inverse: null,
      async: false
    }),

    // This property is for flexberry-groupedit component.
    details: _emberData['default'].hasMany('integration-examples/edit-form/validation/detail', {
      inverse: 'aggregator',
      async: false
    }),

    // Model validation rules.
    validations: {
      flag: {
        presence: {
          message: 'Flag is required'
        },
        inclusion: {
          'in': [true],
          message: 'Flag must be \'true\' only'
        }
      },
      number: {
        presence: {
          message: 'Number is required'
        },
        numericality: {
          odd: true,
          onlyInteger: true,
          messages: {
            numericality: 'Number is invalid',
            odd: 'Number must be an odd',
            onlyInteger: 'Number must be an integer'
          }
        }
      },
      text: {
        presence: {
          message: 'Text is required'
        },
        allowBlank: false,
        length: {
          minimum: 5,
          messages: {
            tooShort: 'Text length must be >= 5'
          }
        }
      },
      longText: {
        presence: {
          message: 'Long text is required'
        }
      },
      date: {
        datetime: {
          allowBlank: false,
          messages: {
            blank: 'Date is required',
            invalid: 'Date is invalid'
          }
        }
      },
      enumeration: {
        presence: {
          message: 'Enumeration is required'
        }
      },
      file: {
        presence: {
          message: 'File is required'
        }
      },
      master: {
        presence: {
          message: 'Master is required'
        }
      }
    }
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'integration-examples/edit-form/validation/base', {
    flag: _emberFlexberryData.Projection.attr('Flag'),
    number: _emberFlexberryData.Projection.attr('Number'),
    text: _emberFlexberryData.Projection.attr('Text'),
    longText: _emberFlexberryData.Projection.attr('Long text'),
    date: _emberFlexberryData.Projection.attr('Date'),
    enumeration: _emberFlexberryData.Projection.attr('Enumeration'),
    file: _emberFlexberryData.Projection.attr('File'),
    master: _emberFlexberryData.Projection.belongsTo('integration-examples/edit-form/validation/master', 'Master', {
      text: _emberFlexberryData.Projection.attr('Text', {
        hidden: true
      })
    }, {
      displayMemberPath: 'text'
    }),
    details: _emberFlexberryData.Projection.hasMany('integration-examples/edit-form/validation/detail', 'details', {
      flag: _emberFlexberryData.Projection.attr('Flag'),
      number: _emberFlexberryData.Projection.attr('Number'),
      text: _emberFlexberryData.Projection.attr('Text')
    })
  });

  exports['default'] = Model;
});
define('dummy/models/integration-examples/edit-form/validation/detail', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    // Inversed relationship for integration-examples/edit-form/validation/base.details.
    // It's not a property for flexberry-lookup component.
    aggregator: _emberData['default'].belongsTo('integration-examples/edit-form/validation/base', {
      inverse: 'details',
      async: false
    }),

    flag: _emberData['default'].attr('boolean'),
    number: _emberData['default'].attr('number'),
    text: _emberData['default'].attr('string'),

    // Model validation rules.
    validations: {
      flag: {
        presence: {
          message: 'Flag is required'
        },
        inclusion: {
          'in': [true],
          message: 'Flag must be \'true\' only'
        }
      },
      number: {
        presence: {
          message: 'Number is required'
        },
        numericality: {
          odd: true,
          onlyInteger: true,
          messages: {
            numericality: 'Number is invalid',
            odd: 'Number must be an odd',
            onlyInteger: 'Number must be an integer'
          }
        }
      },
      text: {
        presence: {
          message: 'Text is required'
        },
        allowBlank: false,
        length: {
          minimum: 5,
          messages: {
            tooShort: 'Text length must be >= 5'
          }
        }
      }
    }
  });

  // Edit form projection.
  Model.defineProjection('DetailE', 'integration-examples/edit-form/validation/detail', {
    flag: _emberFlexberryData.Projection.attr('Flag'),
    number: _emberFlexberryData.Projection.attr('Number'),
    text: _emberFlexberryData.Projection.attr('Text')
  });

  exports['default'] = Model;
});
define('dummy/models/integration-examples/edit-form/validation/master', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {

  var Model = _emberFlexberryData.Projection.Model.extend({
    text: _emberData['default'].attr('string')
  });

  // Edit form projection.
  Model.defineProjection('MasterL', 'integration-examples/edit-form/validation/master', {
    text: _emberFlexberryData.Projection.attr('Text')
  });

  exports['default'] = Model;
});
define('dummy/models/model-without-validation', ['exports', 'ember-flexberry-data/models/model-without-validation'], function (exports, _emberFlexberryDataModelsModelWithoutValidation) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsModelWithoutValidation['default'];
    }
  });
});
define('dummy/models/model', ['exports', 'ember-flexberry-data/models/model'], function (exports, _emberFlexberryDataModelsModel) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsModel['default'];
    }
  });
});
define('dummy/models/new-platform-flexberry-flexberry-user-setting', ['exports', 'ember-flexberry/models/new-platform-flexberry-flexberry-user-setting'], function (exports, _emberFlexberryModelsNewPlatformFlexberryFlexberryUserSetting) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryModelsNewPlatformFlexberryFlexberryUserSetting['default'];
    }
  });
});
define('dummy/models/new-platform-flexberry-services-lock', ['exports', 'ember-flexberry/models/new-platform-flexberry-services-lock'], function (exports, _emberFlexberryModelsNewPlatformFlexberryServicesLock) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryModelsNewPlatformFlexberryServicesLock['default'];
    }
  });
});
define('dummy/models/offline-model', ['exports', 'ember-flexberry-data/models/offline-model'], function (exports, _emberFlexberryDataModelsOfflineModel) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsOfflineModel['default'];
    }
  });
});
define('dummy/resolver', ['exports', 'ember-flexberry/resolver'], function (exports, _emberFlexberryResolver) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryResolver['default'];
    }
  });
});
define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, _ember, _dummyConfigEnvironment) {

  var Router = _ember['default'].Router.extend({
    location: _dummyConfigEnvironment['default'].locationType
  });

  Router.map(function () {
    // Edit forms & list forms.
    this.route('ember-flexberry-dummy-application-user-list');
    this.route('ember-flexberry-dummy-application-user-edit', { path: 'ember-flexberry-dummy-application-user-edit/:id' });
    this.route('ember-flexberry-dummy-application-user-edit.new', { path: 'ember-flexberry-dummy-application-user-edit/new' });

    this.route('ember-flexberry-dummy-multi-list');
    this.route('ember-flexberry-dummy-multi-list-user-edit', { path: 'ember-flexberry-dummy-multi-list-user-edit/:id' });
    this.route('ember-flexberry-dummy-multi-list-user-edit.new', { path: 'ember-flexberry-dummy-multi-list-user-edit/new' });
    this.route('components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit', { path: 'components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit/:id' });
    this.route('components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit.new', { path: 'components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit/new' });

    this.route('ember-flexberry-dummy-comment-edit', { path: 'ember-flexberry-dummy-comment-edit/:id' });
    this.route('ember-flexberry-dummy-comment-edit.new', { path: 'ember-flexberry-dummy-comment-edit/new' });

    this.route('ember-flexberry-dummy-comment-vote-edit', { path: 'ember-flexberry-dummy-comment-vote-edit/:id' });
    this.route('ember-flexberry-dummy-comment-vote-edit.new', { path: 'ember-flexberry-dummy-comment-vote-edit/new' });

    this.route('ember-flexberry-dummy-localization-list');
    this.route('ember-flexberry-dummy-localization-edit', { path: 'ember-flexberry-dummy-localization-edit/:id' });
    this.route('ember-flexberry-dummy-localization-edit.new', { path: 'ember-flexberry-dummy-localization-edit/new' });

    this.route('ember-flexberry-dummy-suggestion-list');
    this.route('ember-flexberry-dummy-suggestion-edit', { path: 'ember-flexberry-dummy-suggestion-edit/:id' });
    this.route('ember-flexberry-dummy-suggestion-edit.new', { path: 'ember-flexberry-dummy-suggestion-edit/new' });

    this.route('ember-flexberry-dummy-suggestion-file-list');
    this.route('ember-flexberry-dummy-suggestion-file-edit', { path: 'ember-flexberry-dummy-suggestion-file-edit/:id' });
    this.route('ember-flexberry-dummy-suggestion-file-edit.new', { path: 'ember-flexberry-dummy-suggestion-file-edit/new' });

    this.route('ember-flexberry-dummy-suggestion-type-list');
    this.route('ember-flexberry-dummy-suggestion-type-edit', { path: 'ember-flexberry-dummy-suggestion-type-edit/:id' });
    this.route('ember-flexberry-dummy-suggestion-type-edit.new', { path: 'ember-flexberry-dummy-suggestion-type-edit/new' });

    this.route('integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-l');
    this.route('integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-e', { path: 'integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-e/:id' });
    this.route('integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-e.new', { path: 'integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-e/new' });

    this.route('integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-l');
    this.route('integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-e', { path: 'integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-e/:id' });
    this.route('integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-e.new', { path: 'integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-e/new' });

    this.route('integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-l');
    this.route('integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-e', { path: 'integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-e/:id' });
    this.route('integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-e.new', { path: 'integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-e/new' });

    this.route('ember-flexberry-dummy-toggler-example-master-e', { path: 'ember-flexberry-dummy-toggler-example-master-e/:id' });
    this.route('ember-flexberry-dummy-toggler-example-master-e.new', { path: 'ember-flexberry-dummy-toggler-example-master-e/new' });

    // Logging.
    this.route('i-i-s-caseberry-logging-objects-application-log-l');
    this.route('i-i-s-caseberry-logging-objects-application-log-e', { path: 'i-i-s-caseberry-logging-objects-application-log-e/:id' });
    this.route('i-i-s-caseberry-logging-objects-application-log-e.new', { path: 'i-i-s-caseberry-logging-objects-application-log-e/new' });
    this.route('log-service-examples/settings-example');
    this.route('log-service-examples/clear-log-form');

    // Locks.
    this.route('new-platform-flexberry-services-lock-list');

    // Components examples routes (sorted by component's names).
    this.route('components-examples/flexberry-button/settings-example');
    this.route('components-examples/flexberry-checkbox/three-state-example');
    this.route('components-examples/flexberry-checkbox/settings-example');
    this.route('components-examples/flexberry-ddau-checkbox/settings-example');
    this.route('components-examples/flexberry-datepicker/settings-example');
    this.route('components-examples/flexberry-dropdown/settings-example');
    this.route('components-examples/flexberry-dropdown/conditional-render-example');
    this.route('components-examples/flexberry-dropdown/empty-value-example');
    this.route('components-examples/flexberry-dropdown/items-example');
    this.route('components-examples/flexberry-field/settings-example');
    this.route('components-examples/flexberry-file/settings-example');
    this.route('components-examples/flexberry-file/flexberry-file-in-modal');
    this.route('components-examples/flexberry-groupedit/settings-example');
    this.route('components-examples/flexberry-groupedit/model-update-example');
    this.route('components-examples/flexberry-groupedit/custom-buttons-example');
    this.route('components-examples/flexberry-groupedit/configurate-row-example');
    this.route('components-examples/flexberry-lookup/settings-example');
    this.route('components-examples/flexberry-lookup/customizing-window-example');
    this.route('components-examples/flexberry-lookup/hierarchy-olv-in-lookup-example');
    this.route('components-examples/flexberry-lookup/limit-function-example');
    this.route('components-examples/flexberry-lookup/autofill-by-limit-example');
    this.route('components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example');
    this.route('components-examples/flexberry-lookup/lookup-block-form-example');
    this.route('components-examples/flexberry-lookup/lookup-in-modal');
    this.route('components-examples/flexberry-lookup/dropdown-mode-example');
    this.route('components-examples/flexberry-lookup/default-ordering-example');
    this.route('components-examples/flexberry-lookup/autocomplete-order-example');
    this.route('components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-list');
    this.route('components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-edit', { path: 'components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-edit/:id' });
    this.route('components-examples/flexberry-lookup/numeric-autocomplete');
    this.route('components-examples/flexberry-lookup/user-settings-example');
    this.route('components-examples/flexberry-menu/settings-example');
    this.route('components-examples/flexberry-objectlistview/settings-example');
    this.route('components-examples/flexberry-objectlistview/toolbar-custom-buttons-example');
    this.route('components-examples/flexberry-objectlistview/inheritance-models');
    this.route('components-examples/flexberry-objectlistview/inheritance-models/parent-list');
    this.route('components-examples/flexberry-objectlistview/inheritance-models/parent-edit', { path: 'components-examples/flexberry-objectlistview/inheritance-models/parent-edit/:id' });
    this.route('components-examples/flexberry-objectlistview/inheritance-models/parent-edit.new', { path: 'components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new' });
    this.route('components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list');
    this.route('components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit', { path: 'components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/:id' });
    this.route('components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.new', { path: 'components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new' });
    this.route('components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list');
    this.route('components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit', { path: 'components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/:id' });
    this.route('components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.new', { path: 'components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new' });
    this.route('components-examples/flexberry-objectlistview/limit-function-example');
    this.route('components-examples/flexberry-objectlistview/on-edit-form');
    this.route('components-examples/flexberry-objectlistview/on-edit-form/user', { path: 'components-examples/flexberry-objectlistview/on-edit-form/user/:id' });
    this.route('components-examples/flexberry-objectlistview/list-on-editform');
    this.route('components-examples/flexberry-objectlistview/on-edit-form/suggestion', { path: 'components-examples/flexberry-objectlistview/on-edit-form/suggestion/:id'
    });
    this.route('components-examples/flexberry-objectlistview/custom-filter');
    this.route('components-examples/flexberry-objectlistview/edit-form-with-detail-list');
    this.route('components-examples/flexberry-objectlistview/edit-form-with-detail-edit', { path: 'components-examples/flexberry-objectlistview/edit-form-with-detail-edit/:id' });
    this.route('components-examples/flexberry-objectlistview/edit-form-with-detail-edit.new', { path: 'components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new' });
    this.route('components-examples/flexberry-objectlistview/configurate-rows');
    this.route('components-examples/flexberry-objectlistview/object-list-view-resize');
    this.route('components-examples/flexberry-objectlistview/hierarchy-example');
    this.route('components-examples/flexberry-objectlistview/hierarchy-paging-example');
    this.route('components-examples/flexberry-objectlistview/selected-rows');
    this.route('components-examples/flexberry-objectlistview/downloading-files-from-olv-list');
    this.route('components-examples/flexberry-objectlistview/downloading-files-from-olv-edit', { path: 'components-examples/flexberry-objectlistview/downloading-files-from-olv-edit/:id' });
    this.route('components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-list');
    this.route('components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-edit', { path: 'components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-edit/:id' });
    this.route('components-examples/flexberry-objectlistview/lock-services-editor-view-list');
    this.route('components-examples/flexberry-objectlistview/lock-services-editor-view-edit', { path: 'components-examples/flexberry-objectlistview/lock-services-editor-view-edit/:id' });
    this.route('components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record');
    this.route('components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise');
    this.route('components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-cancel');
    this.route('components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-cancel');
    this.route('components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-immediately');
    this.route('components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-immediately');
    this.route('components-examples/flexberry-objectlistview/limited-text-size-example');

    this.route('components-examples/flexberry-simpleolv/settings-example');
    this.route('components-examples/flexberry-simpleolv/toolbar-custom-buttons-example');
    this.route('components-examples/flexberry-simpleolv/limit-function-example');
    this.route('components-examples/flexberry-simpleolv/on-edit-form');
    this.route('components-examples/flexberry-simpleolv/on-edit-form/user', { path: 'components-examples/flexberry-simpleolv/on-edit-form/user/:id' });
    this.route('components-examples/flexberry-simpleolv/custom-filter');
    this.route('components-examples/flexberry-simpleolv/configurate-rows');
    this.route('components-examples/flexberry-simpleolv/selected-rows');
    this.route('components-examples/flexberry-simpledatetime/settings-example');
    this.route('components-examples/flexberry-text-cell/settings-example');
    this.route('components-examples/flexberry-textarea/settings-example');
    this.route('components-examples/flexberry-textbox/settings-example');
    this.route('components-examples/flexberry-toggler/settings-example');
    this.route('components-examples/flexberry-toggler/settings-example-inner');
    this.route('components-examples/flexberry-toggler/ge-into-toggler-example');
    this.route('components-examples/flexberry-tree/settings-example');
    this.route('components-examples/ui-message/settings-example');

    // Integration examples routes.
    this.route('integration-examples/edit-form/readonly-mode');
    this.route('integration-examples/edit-form/validation');

    // User-setting forms.
    this.route('user-setting-forms/user-setting-delete');

    // Components acceptance tests forms.
    this.route('components-acceptance-tests/flexberry-lookup/settings-example-autofill-by-limit');
    this.route('components-acceptance-tests/flexberry-lookup/base-operations');
    this.route('components-acceptance-tests/flexberry-lookup/settings-example');
    this.route('components-acceptance-tests/flexberry-lookup/settings-example-autocomplete');
    this.route('components-acceptance-tests/flexberry-lookup/settings-example-dropdown');
    this.route('components-acceptance-tests/flexberry-lookup/settings-example-projection');
    this.route('components-acceptance-tests/flexberry-lookup/settings-example-actions');
    this.route('components-acceptance-tests/flexberry-lookup/settings-example-relation-name');
    this.route('components-acceptance-tests/flexberry-lookup/settings-example-limit-function');
    this.route('components-acceptance-tests/flexberry-lookup/settings-example-preview');
    this.route('components-acceptance-tests/flexberry-lookup/settings-example-preview-page', { path: 'components-acceptance-tests/flexberry-lookup/settings-example-preview-page/:id' });

    this.route('components-acceptance-tests/flexberry-objectlistview/base-operations');
    this.route('components-acceptance-tests/flexberry-objectlistview/computable-field');
    this.route('components-acceptance-tests/flexberry-objectlistview/folv-paging');
    this.route('components-acceptance-tests/flexberry-objectlistview/date-format');
    this.route('components-acceptance-tests/edit-form-readonly');
    this.route('components-acceptance-tests/edit-form-validation/validation');
    this.route('components-acceptance-tests/flexberry-objectlistview/folv-filter');
    this.route('components-acceptance-tests/flexberry-objectlistview/custom-filter');

    this.route('components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-groupedit-with-lookup-with-computed-atribute');
    this.route('components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-groupedit-with-lookup-with-computed-atribute', { path: 'components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-groupedit-with-lookup-with-computed-atribute/:id' });
    this.route('components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-readonly-columns-by-configurate-row-example');
    this.route('components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-readonly-columns-by-configurate-row-example', { path: 'components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-readonly-columns-by-configurate-row-example/:id' });

    this.route('components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox');
    this.route('components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox', { path: 'components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox/:id' });
    this.route('components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.new', { path: 'components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox/new' });
  });

  exports['default'] = Router;
});
define('dummy/routes/application', ['exports', 'ember', 'ember-flexberry/mixins/modal-application-route'], function (exports, _ember, _emberFlexberryMixinsModalApplicationRoute) {
  exports['default'] = _ember['default'].Route.extend(_emberFlexberryMixinsModalApplicationRoute['default'], {});
});
define('dummy/routes/components-acceptance-tests/edit-form-readonly', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'AggregatorE'
     */
    modelProjection: 'AggregatorE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'integration-examples/edit-form/readonly-mode/aggregator'
     */
    modelName: 'integration-examples/edit-form/readonly-mode/aggregator',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var aggregator = store.createRecord('integration-examples/edit-form/readonly-mode/aggregator', {});
      var detail = store.createRecord('integration-examples/edit-form/readonly-mode/detail', {});
      aggregator.get('details').pushObject(detail);

      return aggregator;
    }
  });
});
define('dummy/routes/components-acceptance-tests/edit-form-validation/validation', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'BaseE'
     */
    modelProjection: 'BaseE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'integration-examples/edit-form/validation/base'
     */
    modelName: 'integration-examples/edit-form/validation/base',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      // Create base model.
      var base = store.createRecord('integration-examples/edit-form/validation/base', {});

      // Create detail & add to base model.
      var detail1 = store.createRecord('integration-examples/edit-form/validation/detail', {});
      base.get('details').pushObject(detail1);

      return base;
    }
  });
});
define('dummy/routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {

    /**
    A hook you can implement to convert the URL into the model for this route.
    [More info](http://emberjs.com/api/classes/Ember.Route.html#method_model).
    @method model
    @param {Object} params
    @param {Object} transition
    */
    model: function model() {
      var record = this.store.createRecord(this.modelName);
      record.set('moderated', true);
      return record;
    },

    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionE'
     */
    modelProjection: 'SuggestionE',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: 'asc'|'desc' }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      suggestionUserVotesGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'voteType', 'width': 133 }, { 'propName': 'author', 'width': 348 }, { 'propName': 'author.eMail', 'width': 531 }],
          'sorting': [{ 'propName': 'author', 'direction': 'asc', 'attributePath': 'author.name' }]
        }
      },
      filesGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'order', 'width': 140 }, { 'propName': 'file', 'width': 893 }],
          'colsOrder': [{ 'propName': 'file' }, { 'propName': 'order' }],
          'sorting': [{ 'propName': 'order', 'direction': 'desc' }]
        }
      },
      suggestionCommentsGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'votes', 'fixed': true }],
          'sorting': [{ 'propName': 'votes', 'direction': 'asc' }, { 'propName': 'moderated', 'direction': 'desc' }, { 'propName': 'text', 'direction': 'asc' }]
        }
      }
    },

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'

  });
});
define('dummy/routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
     Name of model projection to be used as record's properties limitation.
      @property modelProjection
     @type String
     @default 'SuggestionL'
     */
    modelProjection: 'SuggestionL',

    /**
    developerUserSettings.
    Format:
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      SuggestionObjectListView: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'OlvRowMenu', 'fixed': true, 'width': 68 }]
        }
      }
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'
  });
});
define('dummy/routes/components-acceptance-tests/flexberry-lookup/base-operations', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SettingLookupExampleView'
     */
    modelProjection: 'SettingLookupExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */

    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-acceptance-tests/flexberry-lookup/settings-example-actions', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SettingLookupExampleView'
     */
    modelProjection: 'SettingLookupExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */

    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-acceptance-tests/flexberry-lookup/settings-example-autocomplete', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SettingLookupExampleView'
     */
    modelProjection: 'SettingLookupExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-acceptance-tests/flexberry-lookup/settings-example-autofill-by-limit', ['exports', 'ember', 'ember-flexberry-data'], function (exports, _ember, _emberFlexberryData) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'LookupWithLimitFunctionExampleView'
     */
    modelProjection: 'LookupWithLimitFunctionExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Current predicate to limit values for lookup.
       @property limitValue
      @type BasePredicate
      @default undefined
     */
    limitValue: undefined,

    /**
      Current values for lookup.
       @property limitValue
      @type BasePredicate
      @default undefined
     */
    defaultValue: undefined,

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var _this = this;

      var store = this.get('store');

      var query = new _emberFlexberryData.Query.Builder(store).from('ember-flexberry-dummy-suggestion-type').selectByProjection('SuggestionTypeE').top(2);

      return store.query('ember-flexberry-dummy-suggestion-type', query.build()).then(function (suggestionTypes) {
        var suggestionTypesArr = suggestionTypes.toArray();
        _this.set('limitValue', suggestionTypesArr.objectAt(0));
        _this.set('defaultValue', suggestionTypesArr.objectAt(1));

        var base = store.createRecord('ember-flexberry-dummy-suggestion');
        var readonly = store.createRecord('ember-flexberry-dummy-suggestion');
        var exist = store.createRecord('ember-flexberry-dummy-suggestion', {
          type: suggestionTypesArr.objectAt(1)
        });

        return {
          base: base,
          readonly: readonly,
          exist: exist
        };
      });
    },

    /**
      Load limit accessible values for lookup.
       @method setupController
     */
    setupController: function setupController() {
      this._super.apply(this, arguments);

      this.set('controller.limitValue', this.get('limitValue'));
      this.set('controller.defaultValue', this.get('defaultValue'));
    }
  });
});
define('dummy/routes/components-acceptance-tests/flexberry-lookup/settings-example-dropdown', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SettingLookupExampleView'
     */
    modelProjection: 'SettingLookupExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-acceptance-tests/flexberry-lookup/settings-example-limit-function', ['exports', 'ember-flexberry-data', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryData, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({

    /**
      Current predicate to limit accessible values for lookup.
       @property limitType
      @type BasePredicate
      @default undefined
     */
    limitType: undefined,
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SettingLookupExampleView'
     */
    modelProjection: 'SettingLookupExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var _this = this;

      var store = this.get('store');

      var query = new _emberFlexberryData.Query.Builder(store).from('ember-flexberry-dummy-suggestion-type').selectByProjection('SettingLookupExampleView');

      return store.query('ember-flexberry-dummy-suggestion-type', query.build()).then(function (suggestionTypes) {
        var suggestionTypesArr = suggestionTypes.toArray();
        _this.set('limitType', suggestionTypesArr.objectAt(0).get('name'));

        var base = store.createRecord(_this.get('modelName'));
        return base;
      });
    },

    /**
      Load limit accessible values for lookup.
       @method setupController
     */
    setupController: function setupController() {
      this._super.apply(this, arguments);

      this.set('controller.limitType', this.get('limitType'));
    }
  });
});
define('dummy/routes/components-acceptance-tests/flexberry-lookup/settings-example-preview-page', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'PreviewExampleView'
     */
    modelProjection: 'PreviewExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
     */
    modelName: 'ember-flexberry-dummy-application-user'
  });
});
define('dummy/routes/components-acceptance-tests/flexberry-lookup/settings-example-preview', ['exports', 'ember-flexberry-data', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryData, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({

    /**
      Current values name for lookup.
       @property testName
      @type BasePredicate
      @default undefined
     */
    testName: undefined,

    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'PreviewExampleView'
     */
    modelProjection: 'PreviewExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var _this = this;

      var store = this.get('store');

      var query = new _emberFlexberryData.Query.Builder(store).from('ember-flexberry-dummy-application-user').selectByProjection('PreviewExampleView');

      return store.query('ember-flexberry-dummy-application-user', query.build()).then(function (suggestionTypes) {
        var suggestionTypesArr = suggestionTypes.toArray();
        var testValue = suggestionTypesArr.objectAt(0);
        _this.set('testName', testValue.get('name'));

        var base = store.createRecord('ember-flexberry-dummy-suggestion', {
          author: testValue,
          editor1: testValue
        });

        var detail = store.createRecord('ember-flexberry-dummy-vote', {
          author: testValue
        });

        base.get('userVotes').pushObject(detail);

        return base;
      });
    },

    /**
      Load limit accessible values for lookup.
       @method setupController
    */
    setupController: function setupController() {
      this._super.apply(this, arguments);

      this.set('controller.testName', this.get('testName'));
    },

    /**
    developerUserSettings.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      suggestionUserVotesGroupEdit: {}
    }
  });
});
define('dummy/routes/components-acceptance-tests/flexberry-lookup/settings-example-projection', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SettingLookupExampleView'
     */
    modelProjection: 'SettingLookupExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-acceptance-tests/flexberry-lookup/settings-example-relation-name', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SettingLookupExampleView'
     */
    modelProjection: 'SettingLookupExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */

    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-acceptance-tests/flexberry-lookup/settings-example', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SettingLookupExampleView'
     */
    modelProjection: 'SettingLookupExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-acceptance-tests/flexberry-objectlistview/base-operations', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionL'
     */
    modelProjection: 'SuggestionE',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      FOLVSettingExampleObjectListView: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 120 }, { 'propName': 'OlvRowMenu', 'fixed': true, 'width': 68 }]
        }
      }
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      This method will be invoked always when load operation completed,
      regardless of load promise's state (was it fulfilled or rejected).
       @method onModelLoadingAlways.
      @param {Object} data Data about completed load operation.
     */
    onModelLoadingAlways: function onModelLoadingAlways(data) {
      var loadCount = this.get('controller.loadCount') + 1;
      this.set('controller.loadCount', loadCount);
    }
  });
});
define('dummy/routes/components-acceptance-tests/flexberry-objectlistview/computable-field', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionL'
     */
    modelProjection: 'SuggestionL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      FOLVSettingExampleObjectListView: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 120 }, { 'propName': 'OlvRowMenu', 'fixed': true, 'width': 68 }]
        }
      }
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      This method will be invoked always when load operation completed,
      regardless of load promise's state (was it fulfilled or rejected).
       @method onModelLoadingAlways.
      @param {Object} data Data about completed load operation.
     */
    onModelLoadingAlways: function onModelLoadingAlways(data) {
      var loadCount = this.get('controller.loadCount') + 1;
      this.set('controller.loadCount', loadCount);
    }
  });
});
define('dummy/routes/components-acceptance-tests/flexberry-objectlistview/custom-filter', ['exports', 'ember-flexberry/routes/list-form', 'ember-flexberry-data'], function (exports, _emberFlexberryRoutesListForm, _emberFlexberryData) {
  var SimplePredicate = _emberFlexberryData.Query.SimplePredicate;
  var StringPredicate = _emberFlexberryData.Query.StringPredicate;
  var DatePredicate = _emberFlexberryData.Query.DatePredicate;
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'FlexberryObjectlistviewCustomFilter'
    */
    modelProjection: 'FlexberryObjectlistviewCustomFilter',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
    */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVCustomFilterObjectListView: {} },

    predicateForFilter: function predicateForFilter(filter) {
      if (filter.type === 'string' && filter.condition === 'like') {
        return new StringPredicate(filter.name).contains(filter.pattern);
      }

      if (filter.type === 'string' && filter.condition === 'empty') {
        return new SimplePredicate(filter.name, 'eq', null);
      }

      if (filter.type === 'decimal') {
        return new SimplePredicate(filter.name, filter.condition, filter.pattern ? Number(filter.pattern) : filter.pattern);
      }

      if (filter.type === 'date') {
        return new DatePredicate(filter.name, filter.condition, filter.pattern, true);
      }

      return this._super.apply(this, arguments);
    },

    predicateForAttribute: function predicateForAttribute(attribute, filter) {
      switch (attribute.type) {
        case 'boolean':
          var yes = ['TRUE', 'True', 'true', 'YES', 'Yes', 'yes', 'ДА', 'Да', 'да', '1', '+'];
          var no = ['False', 'False', 'false', 'NO', 'No', 'no', 'НЕТ', 'Нет', 'нет', '0', '-'];

          if (yes.indexOf(filter) > 0) {
            return new SimplePredicate(attribute.name, 'eq', 'true');
          }

          if (no.indexOf(filter) > 0) {
            return new SimplePredicate(attribute.name, 'eq', 'false');
          }

          return null;

        default:
          return this._super.apply(this, arguments);
      }
    },

    /**
      This method will be invoked always when load operation completed,
      regardless of load promise's state (was it fulfilled or rejected).
       @method onModelLoadingAlways.
      @param {Object} data Data about completed load operation.
     */
    onModelLoadingAlways: function onModelLoadingAlways(data) {
      var loadCount = this.get('controller.loadCount') + 1;
      this.set('controller.loadCount', loadCount);
    }
  });
});
define('dummy/routes/components-acceptance-tests/flexberry-objectlistview/date-format', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionL'
     */
    modelProjection: 'SuggestionE',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVSettingExampleObjectListView: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      This method will be invoked always when load operation completed,
      regardless of load promise's state (was it fulfilled or rejected).
       @method onModelLoadingAlways.
      @param {Object} data Data about completed load operation.
     */
    onModelLoadingAlways: function onModelLoadingAlways(data) {
      var loadCount = this.get('controller.loadCount') + 1;
      this.set('controller.loadCount', loadCount);
    }
  });
});
define('dummy/routes/components-acceptance-tests/flexberry-objectlistview/folv-filter', ['exports', 'ember-flexberry/routes/list-form', 'ember-flexberry-data'], function (exports, _emberFlexberryRoutesListForm, _emberFlexberryData) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionL'
     */
    modelProjection: 'FlexberryObjectlistviewFilterTest',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVSettingExampleObjectListView: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      It overrides base method and forms the limit predicate for loaded data.
       @public
      @method objectListViewLimitPredicate
      @param {Object} options Method options..
     */
    objectListViewLimitPredicate: function objectListViewLimitPredicate(options) {
      var limitFunction = new _emberFlexberryData.Query.SimplePredicate('address', _emberFlexberryData.Query.FilterOperator.Neq, undefined);
      return limitFunction;
    },

    /**
      This method will be invoked always when load operation completed,
      regardless of load promise's state (was it fulfilled or rejected).
       @method onModelLoadingAlways.
      @param {Object} data Data about completed load operation.
     */
    onModelLoadingAlways: function onModelLoadingAlways(data) {
      var loadCount = this.get('controller.loadCount') + 1;
      this.set('controller.loadCount', loadCount);
    }
  });
});
define('dummy/routes/components-acceptance-tests/flexberry-objectlistview/folv-paging', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionL'
     */
    modelProjection: 'SuggestionTypeL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVPagingObjectListView: {
        'DEFAULT': {
          'sorting': [{
            'propName': 'name',
            'direction': 'asc',
            'sortPriority': 1
          }] }
      } },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion-type',

    /**
      This method will be invoked always when load operation completed,
      regardless of load promise's state (was it fulfilled or rejected).
       @method onModelLoadingAlways.
      @param {Object} data Data about completed load operation.
     */
    onModelLoadingAlways: function onModelLoadingAlways(data) {
      var loadCount = this.get('controller.loadCount') + 1;
      this.set('controller.loadCount', loadCount);
    }
  });
});
define('dummy/routes/components-examples/flexberry-button/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('dummy/routes/components-examples/flexberry-checkbox/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('components-examples/flexberry-checkbox/settings-example/base', {});

      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-checkbox/three-state-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
     * Returns model related to current route.
     *
     * @param params
     * @function model
     */
    model: function model() {
      var store = _ember['default'].get(this, 'store');

      var base = store.createRecord('components-examples/flexberry-checkbox/settings-example/base', { flag: null });

      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-datepicker/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('components-examples/flexberry-datepicker/settings-example/base', {});

      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-ddau-checkbox/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Returns model related to current route.
       @method model
    */
    model: function model(params) {
      return this.get('store').createRecord('components-examples/flexberry-ddau-checkbox/settings-example/base', {});
    }
  });
});
define('dummy/routes/components-examples/flexberry-dropdown/conditional-render-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('components-examples/flexberry-dropdown/conditional-render-example/base', {
        enumeration: null
      });

      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-dropdown/empty-value-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('components-examples/flexberry-dropdown/empty-value-example/base', {});

      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-dropdown/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('components-examples/flexberry-dropdown/settings-example/base', {});

      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-field/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('components-examples/flexberry-field/settings-example/base', {});

      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-file/flexberry-file-in-modal', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'LookupInBlockFormView'
     */
    modelProjection: 'LookupInBlockFormView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-file/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      return this.get('store').createRecord('components-examples/flexberry-file/settings-example/base', {});
    }
  });
});
define('dummy/routes/components-examples/flexberry-groupedit/configurate-row-example', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ConfigurateRowView'
    */
    modelProjection: 'ConfigurateRowView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'components-examples/flexberry-groupedit/shared/aggregator'
    */
    modelName: 'components-examples/flexberry-groupedit/shared/aggregator',

    /**
      Returns model related to current route.
       @method model
    */
    model: function model(params) {
      var store = this.get('store');

      var arrRec = [];
      for (var i = 1; i < 20; i++) {
        var newRecord = store.createRecord('components-examples/flexberry-groupedit/shared/detail', {
          text: i + 'test',
          flag: i % 2
        });
        arrRec.push(newRecord);
      }

      // Aggregator with details.
      var aggregator = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator', { details: arrRec });
      return aggregator;
    }
  });
});
define('dummy/routes/components-examples/flexberry-groupedit/custom-buttons-example', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ConfigurateRowView'
    */
    modelProjection: 'ConfigurateRowView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'components-examples/flexberry-groupedit/shared/aggregator'
    */
    modelName: 'components-examples/flexberry-groupedit/shared/aggregator',

    /**
      Returns model related to current route.
       @method model
    */
    model: function model(params) {
      var store = this.get('store');

      var arrRec = [];
      for (var i = 1; i < 5; i++) {
        var newRecord = store.createRecord('components-examples/flexberry-groupedit/shared/detail', {
          text: i + 'test',
          flag: i % 2
        });
        arrRec.push(newRecord);
      }

      // Aggregator with details.
      var aggregator = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator', { details: arrRec });
      return aggregator;
    }
  });
});
define('dummy/routes/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-groupedit-with-lookup-with-computed-atribute', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionE'
     */
    modelProjection: 'SuggestionE',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: 'asc'|'desc' }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      suggestionUserVotesGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'voteType', 'width': 133 }, { 'propName': 'author', 'width': 348 }, { 'propName': 'author.eMail', 'width': 531 }],
          'sorting': [{ 'propName': 'author', 'direction': 'asc', 'attributePath': 'author.name' }]
        }
      },
      filesGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'order', 'width': 140 }, { 'propName': 'file', 'width': 893 }],
          'colsOrder': [{ 'propName': 'file' }, { 'propName': 'order' }],
          'sorting': [{ 'propName': 'order', 'direction': 'desc' }]
        }
      },
      suggestionCommentsGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'votes', 'fixed': true }],
          'sorting': [{ 'propName': 'votes', 'direction': 'asc' }, { 'propName': 'moderated', 'direction': 'desc' }, { 'propName': 'text', 'direction': 'asc' }]
        }
      }
    },

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'

  });
});
define('dummy/routes/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-readonly-columns-by-configurate-row-example', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionE'
     */
    modelProjection: 'SuggestionE',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: 'asc'|'desc' }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      suggestionUserVotesGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'voteType', 'width': 133 }, { 'propName': 'author', 'width': 348 }, { 'propName': 'author.eMail', 'width': 531 }],
          'sorting': [{ 'propName': 'author', 'direction': 'asc', 'attributePath': 'author.name' }]
        }
      },
      filesGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'order', 'width': 140 }, { 'propName': 'file', 'width': 893 }],
          'colsOrder': [{ 'propName': 'file' }, { 'propName': 'order' }],
          'sorting': [{ 'propName': 'order', 'direction': 'desc' }]
        }
      },
      suggestionCommentsGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'votes', 'fixed': true }],
          'sorting': [{ 'propName': 'votes', 'direction': 'asc' }, { 'propName': 'moderated', 'direction': 'desc' }, { 'propName': 'text', 'direction': 'asc' }]
        }
      }
    },

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'

  });
});
define('dummy/routes/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-groupedit-with-lookup-with-computed-atribute', ['exports', 'ember-flexberry/routes/list-form', 'dummy/mixins/list-form-route-operations-indication'], function (exports, _emberFlexberryRoutesListForm, _dummyMixinsListFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend(_dummyMixinsListFormRouteOperationsIndication['default'], {
    /**
     Name of model projection to be used as record's properties limitation.
      @property modelProjection
     @type String
     @default 'SuggestionL'
     */
    modelProjection: 'SuggestionL',

    /**
    developerUserSettings.
    Format:
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      SuggestionObjectListView: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 90 }, { 'propName': 'OlvRowMenu', 'fixed': true, 'width': 68 }]
        }
      }
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'
  });
});
define('dummy/routes/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-readonly-columns-by-configurate-row-example', ['exports', 'ember-flexberry/routes/list-form', 'dummy/mixins/list-form-route-operations-indication'], function (exports, _emberFlexberryRoutesListForm, _dummyMixinsListFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend(_dummyMixinsListFormRouteOperationsIndication['default'], {
    /**
     Name of model projection to be used as record's properties limitation.
      @property modelProjection
     @type String
     @default 'SuggestionL'
     */
    modelProjection: 'SuggestionL',

    /**
    developerUserSettings.
    Format:
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      SuggestionObjectListView: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 90 }, { 'propName': 'OlvRowMenu', 'fixed': true, 'width': 68 }]
        }
      }
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'
  });
});
define('dummy/routes/components-examples/flexberry-groupedit/model-update-example', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ManualModelUpdateView'
     */
    modelProjection: 'ManualModelUpdateView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'components-examples/flexberry-groupedit/shared/aggregator'
     */
    modelName: 'components-examples/flexberry-groupedit/shared/aggregator',

    developerUserSettings: { aggregatorDetailsGroupedit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'width': 100 }],
          'sorting': [{ 'propName': 'flag', 'direction': 'desc', 'sortPriority': 1 }]
        }
      }

    },
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      // Empty aggregator without details.
      return store.createRecord('components-examples/flexberry-groupedit/shared/aggregator', {});
    }
  });
});
define('dummy/routes/components-examples/flexberry-groupedit/settings-example', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'AggregatorE'
     */
    modelProjection: 'AggregatorE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'components-examples/flexberry-groupedit/shared/aggregator'
     */
    modelName: 'components-examples/flexberry-groupedit/shared/aggregator',

    developerUserSettings: { aggregatorDetailsGroupedit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'width': 65 }],
          'sorting': [{ 'propName': 'flag', 'direction': 'desc', 'sortPriority': 1 }]
        }
      }

    },

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      // Empty aggregator without details.
      return store.createRecord('components-examples/flexberry-groupedit/shared/aggregator', {});
    }
  });
});
define('dummy/routes/components-examples/flexberry-lookup/autocomplete-order-example', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SettingLookupExampleView'
     */
    modelProjection: 'SettingLookupExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-lookup/autofill-by-limit-example', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry-data'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryData) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'LookupWithLimitFunctionExampleView'
     */
    modelProjection: 'LookupWithLimitFunctionExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Current predicate to limit values for lookup.
       @property limitValue
      @type BasePredicate
      @default undefined
     */
    limitValue: undefined,

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var _this = this;

      var store = this.get('store');

      var query = new _emberFlexberryData.Query.Builder(store).from('ember-flexberry-dummy-suggestion-type').selectByProjection('SuggestionTypeE');

      return store.queryRecord('ember-flexberry-dummy-suggestion-type', query.build()).then(function (suggestionType) {
        _this.set('limitValue', suggestionType);

        var base = store.createRecord('ember-flexberry-dummy-suggestion');
        return base;
      });
    },

    /**
      Load limit accessible values for lookup.
       @method setupController
     */
    setupController: function setupController() {
      this._super.apply(this, arguments);

      this.set('controller.limitValue', this.get('limitValue'));
    }
  });
});
define('dummy/routes/components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-edit', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionTypeE'
     */
    modelProjection: 'SuggestionTypeEWithComputedField',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-type'
     */
    modelName: 'ember-flexberry-dummy-suggestion-type',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: 'asc'|'desc' }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      suggestionTypeLocalizedTypesGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 55 }]
        }
      }
    }
  });
});
define('dummy/routes/components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-list', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionTypeL'
     */
    modelProjection: 'SuggestionTypeEWithComputedField',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      SOLVSuggestionTypeObjectListView: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 90 }, { 'propName': 'OlvRowMenu', 'fixed': true, 'width': 68 }]
        }
      }
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-type'
     */
    modelName: 'ember-flexberry-dummy-suggestion-type'
  });
});
define('dummy/routes/components-examples/flexberry-lookup/customizing-window-example', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'DropDownLookupExampleView'
     */
    modelProjection: 'CustomizeLookupWindowExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-lookup/default-ordering-example', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'DropDownLookupExampleView'
     */
    modelProjection: 'DefaultOrderingExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          sorting: [{ propName: <colName>, direction: 'asc'|'desc' }, ... ]
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: sorting.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      lookupUserSettings: {
        'DEFAULT': {
          'sorting': [{ 'propName': 'name', 'direction': 'desc' }, { 'propName': 'moderated', 'direction': 'asc' }]
        }
      }
    },
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-lookup/dropdown-mode-example', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'DropDownLookupExampleView'
     */
    modelProjection: 'DropDownLookupExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-lookup/hierarchy-olv-in-lookup-example', ['exports', 'ember', 'ember-flexberry/routes/edit-form', 'ember-flexberry-data'], function (exports, _ember, _emberFlexberryRoutesEditForm, _emberFlexberryData) {
  var Builder = _emberFlexberryData.Query.Builder;
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'DropDownLookupExampleView'
     */
    modelProjection: 'CustomizeLookupWindowExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    },

    actions: {
      loadRecordsById: function loadRecordsById(id, target, property) {
        var hierarchicalAttribute = 'parent';
        var modelName = 'ember-flexberry-dummy-suggestion-type';
        var projectionName = 'SettingLookupExampleView';
        var builder = new Builder(this.store).from(modelName).selectByProjection(projectionName).where(hierarchicalAttribute, 'eq', id);

        _ember['default'].set(target, property, this.store.query(modelName, builder.build()));
      }
    }
  });
});
define('dummy/routes/components-examples/flexberry-lookup/limit-function-example', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'LookupWithLimitFunctionExampleView'
     */
    modelProjection: 'LookupWithLimitFunctionExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example', ['exports', 'ember-flexberry-data', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryData, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({

    /**
      Current predicate to limit accessible values for lookup.
       @property firstLimitType
      @type BasePredicate
      @default undefined
     */
    firstLimitType: undefined,

    /**
      Current predicate to limit accessible values for lookup.
       @property secondLimitType
      @type BasePredicate
      @default undefined
     */
    secondLimitType: undefined,
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'LookupWithLimitFunctionExampleView'
     */
    modelProjection: 'LookupWithLimitFunctionExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var _this = this;

      var store = this.get('store');

      var query = new _emberFlexberryData.Query.Builder(store).from('ember-flexberry-dummy-suggestion-type').selectByProjection('SuggestionTypeE').top(2);

      return store.query('ember-flexberry-dummy-suggestion-type', query.build()).then(function (suggestionTypes) {
        var suggestionTypesArr = suggestionTypes.toArray();
        _this.set('firstLimitType', suggestionTypesArr.objectAt(0).get('name'));
        _this.set('secondLimitType', suggestionTypesArr.objectAt(1).get('name'));

        var base = store.createRecord(_this.get('modelName'));
        return base;
      });
    },

    /**
      Load limit accessible values for lookup.
       @method setupController
     */
    setupController: function setupController() {
      this._super.apply(this, arguments);

      this.set('controller.firstLimitType', this.get('firstLimitType'));

      this.set('controller.secondLimitType', this.get('secondLimitType'));
    }
  });
});
define('dummy/routes/components-examples/flexberry-lookup/lookup-block-form-example', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'LookupInBlockFormView'
     */
    modelProjection: 'LookupInBlockFormView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-lookup/lookup-in-modal', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'LookupInBlockFormView'
     */
    modelProjection: 'LookupInBlockFormView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-lookup/numeric-autocomplete', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionE'
     */
    modelProjection: 'SuggestionEWithKarma',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-lookup/settings-example', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SettingLookupExampleView'
     */
    modelProjection: 'SettingLookupExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-lookup/user-settings-example', ['exports', 'ember-flexberry/routes/edit-form', 'ember'], function (exports, _emberFlexberryRoutesEditForm, _ember) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SettingLookupExampleView'
     */
    modelProjection: 'SettingLookupExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
     * Returns model related to current route.
     *
     * @param params
     * @function model
     */
    model: function model() {
      var store = _ember['default'].get(this, 'store');
      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    },

    init: function init() {
      _ember['default'].set(this, 'developerUserSettings', {
        ApplicationUserObjectlistView: {
          DEFAULT: {
            colsOrder: [{
              propName: "name",
              name: "Name"
            }, {
              propName: "activated",
              hide: true,
              name: "Activated"
            }, {
              propName: "gender",
              hide: true,
              name: "Gender"
            }]
          }
        }
      });
      this._super.apply(this, arguments);
    }
  });
});
define('dummy/routes/components-examples/flexberry-menu/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('dummy/routes/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-cancel', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'FlexberryObjectlistviewCustomFilter'
    */
    modelProjection: 'SuggestionTypeL',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
    */
    modelName: 'ember-flexberry-dummy-suggestion-type',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVCustomFilterObjectListView: {} }
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-immediately', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'FlexberryObjectlistviewCustomFilter'
    */
    modelProjection: 'SuggestionTypeL',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
    */
    modelName: 'ember-flexberry-dummy-suggestion-type',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVCustomFilterObjectListView: {} }
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-cancel', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'FlexberryObjectlistviewCustomFilter'
    */
    modelProjection: 'SuggestionTypeL',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
    */
    modelName: 'ember-flexberry-dummy-suggestion-type',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVCustomFilterObjectListView: {} }
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-immediately', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'FlexberryObjectlistviewCustomFilter'
    */
    modelProjection: 'SuggestionTypeL',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
    */
    modelName: 'ember-flexberry-dummy-suggestion-type',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVCustomFilterObjectListView: {} }
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'FlexberryObjectlistviewCustomFilter'
    */
    modelProjection: 'SuggestionTypeL',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
    */
    modelName: 'ember-flexberry-dummy-suggestion-type',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVCustomFilterObjectListView: {} }
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'FlexberryObjectlistviewCustomFilter'
    */
    modelProjection: 'SuggestionTypeL',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
    */
    modelName: 'ember-flexberry-dummy-suggestion-type',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVCustomFilterObjectListView: {} }
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/configurate-rows', ['exports', 'ember', 'ember-flexberry-data', 'ember-flexberry/routes/list-form'], function (exports, _ember, _emberFlexberryData, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionL'
     */
    modelProjection: 'SuggestionL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVSettingExampleObjectListView: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
    */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Name of first existing address in ember-flexberry-dummy-suggestion records.
       @property firstExistingAddress
      @type String
      @default null
    */
    firstExistingAddress: null,

    /**
      Performs loading of some existing address before model will be loaded.
    */
    beforeModel: function beforeModel(params) {
      var _this = this;

      if (this.get('controller.configurateRowByAddress')) {
        return;
      }

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        var store = _this.get('store');

        var query = new _emberFlexberryData.Query.Builder(store).from('ember-flexberry-dummy-suggestion').select('address').where('address', _emberFlexberryData.Query.FilterOperator.Neq, null).top(1);

        store.query('ember-flexberry-dummy-suggestion', query.build()).then(function (suggestion) {
          var suggestionArr = suggestion.toArray();
          _this.set('firstExistingAddress', suggestionArr.objectAt(0).get('address'));
          resolve();
        })['catch'](function (reason) {
          reject(reason);
        });
      });
    },

    /**
      Setups controller properties.
     */
    setupController: function setupController() {
      this._super.apply(this, arguments);

      if (!this.get('controller.configurateRowByAddress')) {
        this.set('controller.configurateRowByAddress', this.get('firstExistingAddress'));
      }
    }
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/custom-filter', ['exports', 'ember-flexberry/routes/list-form', 'ember-flexberry-data'], function (exports, _emberFlexberryRoutesListForm, _emberFlexberryData) {
  var SimplePredicate = _emberFlexberryData.Query.SimplePredicate;
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'FlexberryObjectlistviewCustomFilter'
    */
    modelProjection: 'FlexberryObjectlistviewCustomFilter',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
    */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVCustomFilterObjectListView: {} },

    predicateForFilter: function predicateForFilter(filter) {
      if (filter.type === 'string' && filter.condition === 'empty') {
        return new SimplePredicate(filter.name, 'eq', null);
      }

      if (filter.type === 'decimal') {
        return new SimplePredicate(filter.name, filter.condition, filter.pattern ? Number(filter.pattern) : filter.pattern);
      }

      return this._super.apply(this, arguments);
    },

    predicateForAttribute: function predicateForAttribute(attribute, filter) {
      switch (attribute.type) {
        case 'boolean':
          var yes = ['TRUE', 'True', 'true', 'YES', 'Yes', 'yes', 'ДА', 'Да', 'да', '1', '+'];
          var no = ['False', 'False', 'false', 'NO', 'No', 'no', 'НЕТ', 'Нет', 'нет', '0', '-'];

          if (yes.indexOf(filter) > 0) {
            return new SimplePredicate(attribute.name, 'eq', 'true');
          }

          if (no.indexOf(filter) > 0) {
            return new SimplePredicate(attribute.name, 'eq', 'false');
          }

          return null;

        default:
          return this._super.apply(this, arguments);
      }
    }
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionFileE'
     */
    modelProjection: 'SuggestionFileE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-file'
     */
    modelName: 'ember-flexberry-dummy-suggestion-file'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-list', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionFileE'
     */
    modelProjection: 'SuggestionFileE',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { DownloadingFilesFromOLV: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-file'
     */
    modelName: 'ember-flexberry-dummy-suggestion-file',

    actions: {
      objectListViewRowClick: function objectListViewRowClick(record, params) {
        // Prevent transition to edit form if cell containing 'flexberry-file' component has been clicked,
        // and click target isn't cell itself (so target is some element of 'flexberry-file' component).
        if (params.column && params.column.cellComponent.componentName === 'flexberry-file' && params.originalEvent.target.tagName.toLowerCase() !== 'td') {
          params.goToEditForm = false;
        }

        this._super.apply(this, arguments);
      }
    }
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionTypeE'
     */
    modelProjection: 'SuggestionTypeE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-type'
     */
    modelName: 'ember-flexberry-dummy-suggestion-type',

    /**
    developerUserSettings.
    Format:
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      suggestionTypeLocalizedTypesGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }]
        }
      }
    }
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditFormNew, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionTypeE'
    */
    modelProjection: 'SuggestionTypeE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-type'
    */
    modelName: 'ember-flexberry-dummy-suggestion-type',

    /**
      Name of template to be rendered.
       @property templateName
      @type String
      @default 'ember-flexberry-dummy-suggestion-type-edit'
    */
    templateName: 'ember-flexberry-dummy-suggestion-type-edit'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/edit-form-with-detail-list', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionTypeL'
     */
    modelProjection: 'SuggestionTypeL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      suggestionTypeLocalizedTypesObjectListView: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 100 }, { 'propName': 'OlvRowMenu', 'fixed': true, 'width': 65 }]
        }
      }

    },
    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-type'
     */
    modelName: 'ember-flexberry-dummy-suggestion-type'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/mixins/multi-list-route', 'ember-flexberry/mixins/multi-list-model-edit', 'ember-flexberry/objects/list-parameters', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryMixinsMultiListRoute, _emberFlexberryMixinsMultiListModelEdit, _emberFlexberryObjectsListParameters, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsMultiListRoute['default'], _emberFlexberryMixinsMultiListModelEdit['default'], _emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    init: function init() {
      this._super.apply(this, arguments);

      this.set('multiListSettings.MultiUserList', new _emberFlexberryObjectsListParameters['default']({
        objectlistviewEvents: this.get('objectlistviewEvents'),
        componentName: 'MultiUserList',
        modelName: 'ember-flexberry-dummy-application-user',
        projectionName: 'ApplicationUserL',
        editFormRoute: 'ember-flexberry-dummy-multi-list-user-edit'
      }));

      this.set('multiListSettings.MultiUserList2', new _emberFlexberryObjectsListParameters['default']({
        objectlistviewEvents: this.get('objectlistviewEvents'),
        componentName: 'MultiUserList2',
        modelName: 'ember-flexberry-dummy-application-user',
        projectionName: 'ApplicationUserL',
        editFormRoute: 'ember-flexberry-dummy-multi-list-user-edit'
      }));

      this.set('multiListSettings.MultiSuggestionList', new _emberFlexberryObjectsListParameters['default']({
        objectlistviewEvents: this.get('objectlistviewEvents'),
        componentName: 'MultiSuggestionList',
        modelName: 'ember-flexberry-dummy-suggestion',
        projectionName: 'SuggestionL',
        editFormRoute: 'components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit',
        exportExcelProjection: 'SuggestionL'
      }));

      this.set('multiListSettings.MultiHierarchyList', new _emberFlexberryObjectsListParameters['default']({
        objectlistviewEvents: this.get('objectlistviewEvents'),
        componentName: 'MultiHierarchyList',
        modelName: 'ember-flexberry-dummy-suggestion-type',
        projectionName: 'SuggestionTypeL',
        editFormRoute: 'ember-flexberry-dummy-suggestion-type-edit',
        inHierarchicalMode: true,
        hierarchicalAttribute: 'parent',
        hierarchyPaging: true
      }));
    },

    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionE'
     */
    modelProjection: 'SuggestionE',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: 'asc'|'desc' }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      suggestionUserVotesGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'voteType', 'width': 133 }, { 'propName': 'author', 'width': 348 }, { 'propName': 'author.eMail', 'width': 531 }],
          'sorting': [{ 'propName': 'author', 'direction': 'asc', 'attributePath': 'author.name' }]
        }
      },
      filesGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'order', 'width': 140 }, { 'propName': 'file', 'width': 893 }],
          'colsOrder': [{ 'propName': 'file' }, { 'propName': 'order' }],
          'sorting': [{ 'propName': 'order', 'direction': 'desc' }]
        }
      },
      suggestionCommentsGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'votes', 'fixed': true }],
          'sorting': [{ 'propName': 'votes', 'direction': 'asc' }, { 'propName': 'moderated', 'direction': 'desc' }, { 'propName': 'text', 'direction': 'asc' }]
        }
      },
      MultiUserList: {},
      MultiUserList2: {},
      MultiSuggestionList: {},
      MultiHierarchyList: {}
    },

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'

  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditFormNew, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionE'
    */
    modelProjection: 'SuggestionE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
    */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Name of template to be rendered.
       @property templateName
      @type String
      @default 'components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit'
    */
    templateName: 'components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/hierarchy-example', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionTypeL'
     */
    modelProjection: 'SuggestionTypeL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { HiearchyExampleObjectListView: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-type'
     */
    modelName: 'ember-flexberry-dummy-suggestion-type'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/hierarchy-paging-example', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionTypeL'
     */
    modelProjection: 'SuggestionTypeL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { HiearchyExampleObjectListView: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-type'
     */
    modelName: 'ember-flexberry-dummy-suggestion-type'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/inheritance-models', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('dummy/routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'BaseE'
     */
    modelProjection: 'parentE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-base'
     */
    modelName: 'ember-flexberry-dummy-parent'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditFormNew, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'parentE'
    */
    modelProjection: 'parentE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-parent'
    */
    modelName: 'ember-flexberry-dummy-parent',

    /**
      Name of template to be rendered.
       @property templateName
      @type String
      @default 'components-examples/flexberry-objectlistview/inheritance-models/parent-edit'
    */
    templateName: 'components-examples/flexberry-objectlistview/inheritance-models/parent-edit'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/inheritance-models/parent-list', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'BaseL'
     */
    modelProjection: 'parentL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { OLVInheritanceModels: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-base'
     */
    modelName: 'ember-flexberry-dummy-parent'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'successorE'
     */
    modelProjection: 'SuccessorE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-successor-phone'
     */
    modelName: 'ember-flexberry-dummy-successor-phone'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditFormNew, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuccessorE'
    */
    modelProjection: 'SuccessorE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-successor-phone'
    */
    modelName: 'ember-flexberry-dummy-successor-phone',

    /**
      Name of template to be rendered.
       @property templateName
      @type String
      @default 'ember-flexberry-dummy-application-user-edit'
    */
    templateName: 'components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'successorL'
     */
    modelProjection: 'SuccessorL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { OLVInheritanceModels: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'components-examples/flexberry-objectlistview/inheritance-models/successor-phone'
     */
    modelName: 'ember-flexberry-dummy-successor-phone'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuccessorE'
     */
    modelProjection: 'SuccessorE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'components-examples/flexberry-objectlistview/inheritance-models/successor-social-network'
     */
    modelName: 'ember-flexberry-dummy-successor-social-network'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditFormNew, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuccessorE'
    */
    modelProjection: 'SuccessorE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-successor-phone'
    */
    modelName: 'ember-flexberry-dummy-successor-phone',

    /**
      Name of template to be rendered.
       @property templateName
      @type String
      @default 'ember-flexberry-dummy-application-user-edit'
    */
    templateName: 'components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuccessorL'
     */
    modelProjection: 'SuccessorL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { OLVInheritanceModels: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'components-examples/flexberry-objectlistview/inheritance-models/successor-social-network'
     */
    modelName: 'ember-flexberry-dummy-successor-social-network'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/limit-function-example', ['exports', 'ember', 'ember-flexberry/routes/list-form', 'ember-flexberry-data'], function (exports, _ember, _emberFlexberryRoutesListForm, _emberFlexberryData) {
  var StringPredicate = _emberFlexberryData.Query.StringPredicate;
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({

    /**
      Current predicate to limit accessible values for lookup.
       @property firstLimitType
      @type BasePredicate
      @default undefined
     */
    firstLimitType: undefined,

    /**
      Current predicate to limit accessible values for lookup.
       @property secondLimitType
      @type BasePredicate
      @default undefined
     */
    secondLimitType: undefined,

    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionE'
     */
    modelProjection: 'SuggestionE',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVLimitFunctionExampleObjectListView: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      It overrides base method and forms the limit predicate for loaded data.
      If there is displayed even number or records per page, records where 'address' attribute contains letter 'S' are filtered.
      If there is displayed odd number or records per page, records where 'address' attribute contains letter 'п' are filtered.
       @public
      @method objectListViewLimitPredicate
      @param {Object} options Method options.
      @param {String} [options.modelName] Type of records to load.
      @param {String} [options.projectionName] Projection name to load data by.
      @param {String} [options.params] Current route query parameters.
      @return {BasePredicate} The predicate to limit loaded data.
     */
    objectListViewLimitPredicate: function objectListViewLimitPredicate(options) {

      var methodOptions = _ember['default'].merge({
        modelName: undefined,
        projectionName: undefined,
        params: undefined
      }, options);

      if (methodOptions.modelName === this.get('modelName') && methodOptions.projectionName === this.get('modelProjection')) {

        var limitFunctionText = this.get('controller.limitFunction');

        if (limitFunctionText) {
          var limitFunction = new StringPredicate('address').contains(limitFunctionText);

          return limitFunction;
        }
      }

      return undefined;
    },

    /**
      Returns model related to current route.
      @method model
     */
    model: function model(params) {
      var _this = this;

      var store = this.get('store');

      var query = new _emberFlexberryData.Query.Builder(store).from(this.get('modelName')).selectByProjection('SuggestionL').where('address', _emberFlexberryData.Query.FilterOperator.Neq, '');

      store.query('ember-flexberry-dummy-suggestion', query.build()).then(function (limitdata) {
        var limitTypesArr = limitdata.toArray();
        _this.set('firstLimitType', limitTypesArr.objectAt(0).get('address'));
        _this.set('secondLimitType', limitTypesArr.objectAt(1).get('address'));
      });

      return this._super.apply(this, arguments);
    },

    actions: {
      refreshModel: function refreshModel() {
        this.refresh();
      }
    },

    /**
      Load limit accessible values for lookup.
      @method setupController
     */
    setupController: function setupController() {
      this._super.apply(this, arguments);

      this.set('controller.firstLimitType', this.get('firstLimitType'));

      this.set('controller.secondLimitType', this.get('secondLimitType'));
    },

    onModelLoadingAlways: function onModelLoadingAlways(data) {
      var loadCount = this.get('controller.loadCount') + 1;
      this.set('controller.loadCount', loadCount);
    }
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/limited-text-size-example', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionL'
     */
    modelProjection: 'SuggestionL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      LimitedSizeOlv: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': false, 'width': 90 }]
        }
      }
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/list-on-editform', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
     Name of model projection to be used as record's properties limitation.
      @property modelProjection
     @type String
     @default 'SuggestionL'
     */
    modelProjection: 'SuggestionL',

    /**
    developerUserSettings.
    Format:
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVListOnEditformObjectListView: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/lock-services-editor-view-edit', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/mixins/edit-form-route-operations-indication', 'ember-flexberry/mixins/lock-route'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryMixinsEditFormRouteOperationsIndication, _emberFlexberryMixinsLockRoute) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], _emberFlexberryMixinsLockRoute['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionE'
     */
    modelProjection: 'SuggestionE',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: 'asc'|'desc' }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      suggestionUserVotesGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'voteType', 'width': 133 }, { 'propName': 'author', 'width': 348 }, { 'propName': 'author.eMail', 'width': 531 }],
          'sorting': [{ 'propName': 'author', 'direction': 'asc', 'attributePath': 'author.name' }]
        }
      },
      filesGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'order', 'width': 140 }, { 'propName': 'file', 'width': 893 }],
          'colsOrder': [{ 'propName': 'file' }, { 'propName': 'order' }],
          'sorting': [{ 'propName': 'order', 'direction': 'desc' }]
        }
      },
      suggestionCommentsGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'votes', 'fixed': true }],
          'sorting': [{ 'propName': 'votes', 'direction': 'asc' }, { 'propName': 'moderated', 'direction': 'desc' }, { 'propName': 'text', 'direction': 'asc' }]
        }
      }
    },

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    blockedByUser: undefined,

    /**
      This function will be called to solve open form read only or transition to parent route.
      You can override function for custom behavior.
       @method openReadOnly
      @param {String} lockUserName
      @return {Promise}
      @for EditFormRoute
    */

    openReadOnly: function openReadOnly(lockUserName) {
      this.set('blockedByUser', lockUserName);
      return this._super.apply(this, arguments);
    },

    /**
      Load limit accessible values for lookup.
       @method setupController
    */
    setupController: function setupController() {
      this._super.apply(this, arguments);

      this.set('controller.blockedByUser', this.get('blockedByUser'));
    },

    resetController: function resetController(controller, isExiting, transition) {
      this._super.apply(this, arguments);

      this.set('blockedByUser', undefined);
    }
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/lock-services-editor-view-list', ['exports', 'ember-flexberry/routes/list-form', 'dummy/mixins/list-form-route-operations-indication'], function (exports, _emberFlexberryRoutesListForm, _dummyMixinsListFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend(_dummyMixinsListFormRouteOperationsIndication['default'], {
    /**
     Name of model projection to be used as record's properties limitation.
      @property modelProjection
     @type String
     @default 'SuggestionL'
     */
    modelProjection: 'SuggestionL',

    /**
    developerUserSettings.
    Format:
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      SuggestionObjectListView: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 90 }, { 'propName': 'OlvRowMenu', 'fixed': true, 'width': 68 }]
        }
      }
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/object-list-view-resize', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({

    modelProjection: 'SuggestionL',

    developerUserSettings: { ObjectListViewResize: {} },

    modelName: 'ember-flexberry-dummy-suggestion',

    model: function model() {
      return this.store.findAll('ember-flexberry-dummy-suggestion').then(function (posts) {
        return posts.toArray();
      });
    }
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/on-edit-form', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ApplicationUserL'
     */
    modelProjection: 'ApplicationUserL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVOnEditFormObjectListView: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
     */
    modelName: 'ember-flexberry-dummy-application-user'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/on-edit-form/suggestion', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionE'
     */
    modelProjection: 'SuggestionE',

    /**
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */

    developerUserSettings: { listOnEditform: {} },

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/on-edit-form/user', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ApplicationUserE'
     */
    modelProjection: 'ApplicationUserE',

    developerUserSettings: { FOLVOnEditFormSuggestionsObjectListView: {} },
    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
     */
    modelName: 'ember-flexberry-dummy-application-user'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-edit', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionE'
     */
    modelProjection: 'SuggestionE',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: 'asc'|'desc' }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      suggestionUserVotesGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'voteType', 'width': 133 }, { 'propName': 'author', 'width': 348 }, { 'propName': 'author.eMail', 'width': 531 }],
          'sorting': [{ 'propName': 'author', 'direction': 'asc', 'attributePath': 'author.name' }]
        }
      },
      filesGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'order', 'width': 140 }, { 'propName': 'file', 'width': 893 }],
          'colsOrder': [{ 'propName': 'file' }, { 'propName': 'order' }],
          'sorting': [{ 'propName': 'order', 'direction': 'desc' }]
        }
      },
      suggestionCommentsGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'votes', 'fixed': true }],
          'sorting': [{ 'propName': 'votes', 'direction': 'asc' }, { 'propName': 'moderated', 'direction': 'desc' }, { 'propName': 'text', 'direction': 'asc' }]
        }
      }
    },

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'

  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-list', ['exports', 'ember-flexberry/routes/list-form', 'dummy/mixins/list-form-route-operations-indication'], function (exports, _emberFlexberryRoutesListForm, _dummyMixinsListFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend(_dummyMixinsListFormRouteOperationsIndication['default'], {
    /**
     Name of model projection to be used as record's properties limitation.
      @property modelProjection
     @type String
     @default 'SuggestionL'
     */
    modelProjection: 'SuggestionL',

    /**
    developerUserSettings.
    Format:
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      SuggestionObjectListView: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 86 }, { 'propName': 'OlvRowMenu', 'fixed': true, 'width': 68 }]
        }
      }
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      This method will be invoked always when load operation completed,
      regardless of load promise's state (was it fulfilled or rejected).
       @method onModelLoadingAlways.
      @param {Object} data Data about completed load operation.
     */
    onModelLoadingAlways: function onModelLoadingAlways(data) {
      var loadCount = this.get('controller.loadCount') + 1;
      this.set('controller.loadCount', loadCount);
    }
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/selected-rows', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionTypeL'
     */
    modelProjection: 'SuggestionTypeL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      suggestionTypeLocalizedTypesObjectListView: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }]
        }
      }
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-type'
     */
    modelName: 'ember-flexberry-dummy-suggestion-type'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/settings-example', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionL'
     */
    modelProjection: 'SuggestionL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      FOLVSettingsExampleObjectListView: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': false, 'width': 90 }]
        }
      }
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'FolvWithLimitFunctionExampleView'
     */
    modelProjection: 'FolvWithLimitFunctionExampleView',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVToolbarCustomButtonsExample: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'
  });
});
define('dummy/routes/components-examples/flexberry-simpledatetime/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('components-examples/flexberry-simpledatetime/settings-example/base', {});

      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-simpleolv/configurate-rows', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionL'
     */
    modelProjection: 'SuggestionL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { SOLVConfigurateRowsObjectListView: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'
  });
});
define('dummy/routes/components-examples/flexberry-simpleolv/custom-filter', ['exports', 'ember-flexberry/routes/list-form', 'ember-flexberry-data'], function (exports, _emberFlexberryRoutesListForm, _emberFlexberryData) {
  var SimplePredicate = _emberFlexberryData.Query.SimplePredicate;
  var StringPredicate = _emberFlexberryData.Query.StringPredicate;
  var DatePredicate = _emberFlexberryData.Query.DatePredicate;
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'FlexberryObjectlistviewCustomFilter'
    */
    modelProjection: 'FlexberryObjectlistviewCustomFilter',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
    */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { SOLVCustomFilterObjectListView: {} },

    predicateForFilter: function predicateForFilter(filter) {
      if (filter.type === 'string' && filter.condition === 'like') {
        return new StringPredicate(filter.name).contains(filter.pattern);
      }

      if (filter.type === 'string' && filter.condition === 'empty') {
        return new SimplePredicate(filter.name, 'eq', null);
      }

      if (filter.type === 'decimal') {
        return new SimplePredicate(filter.name, filter.condition, filter.pattern);
      }

      return this._super.apply(this, arguments);
    },

    predicateForAttribute: function predicateForAttribute(attribute, filter) {
      switch (attribute.type) {
        case 'boolean':
          var yes = ['TRUE', 'True', 'true', 'YES', 'Yes', 'yes', 'ДА', 'Да', 'да', '1', '+'];
          var no = ['False', 'False', 'false', 'NO', 'No', 'no', 'НЕТ', 'Нет', 'нет', '0', '-'];

          if (yes.indexOf(filter) > 0) {
            return new SimplePredicate(attribute.name, 'eq', 'true');
          }

          if (no.indexOf(filter) > 0) {
            return new SimplePredicate(attribute.name, 'eq', 'false');
          }

          return null;

        default:
          return this._super.apply(this, arguments);
      }
    }
  });
});
define('dummy/routes/components-examples/flexberry-simpleolv/limit-function-example', ['exports', 'ember', 'ember-flexberry/routes/list-form', 'ember-flexberry-data'], function (exports, _ember, _emberFlexberryRoutesListForm, _emberFlexberryData) {
  var StringPredicate = _emberFlexberryData.Query.StringPredicate;
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({

    /**
      Current predicate to limit accessible values for lookup.
       @property firstLimitType
      @type BasePredicate
      @default undefined
     */
    firstLimitType: undefined,

    /**
      Current predicate to limit accessible values for lookup.
       @property secondLimitType
      @type BasePredicate
      @default undefined
     */
    secondLimitType: undefined,

    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionE'
     */
    modelProjection: 'SuggestionE',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { SOLVLimitFunctionExampleObjectListView: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      It overrides base method and forms the limit predicate for loaded data.
      If there is displayed even number or records per page, records where 'address' attribute contains letter 'S' are filtered.
      If there is displayed odd number or records per page, records where 'address' attribute contains letter 'п' are filtered.
       @public
      @method objectListViewLimitPredicate
      @param {Object} options Method options.
      @param {String} [options.modelName] Type of records to load.
      @param {String} [options.projectionName] Projection name to load data by.
      @param {String} [options.params] Current route query parameters.
      @return {BasePredicate} The predicate to limit loaded data.
     */
    objectListViewLimitPredicate: function objectListViewLimitPredicate(options) {

      var methodOptions = _ember['default'].merge({
        modelName: undefined,
        projectionName: undefined,
        params: undefined
      }, options);

      if (methodOptions.modelName === this.get('modelName') && methodOptions.projectionName === this.get('modelProjection')) {

        var limitFunctionText = this.get('controller.limitFunction');

        if (limitFunctionText) {
          var limitFunction = new StringPredicate('address').contains(limitFunctionText);

          return limitFunction;
        }
      }

      return undefined;
    },

    /**
      Returns model related to current route.
      @method model
     */
    model: function model(params) {
      var _this = this;

      var store = this.get('store');

      var query = new _emberFlexberryData.Query.Builder(store).from(this.get('modelName')).selectByProjection('SuggestionL').where('address', _emberFlexberryData.Query.FilterOperator.Neq, '');

      store.query('ember-flexberry-dummy-suggestion', query.build()).then(function (limitdata) {
        var limitTypesArr = limitdata.toArray();
        _this.set('firstLimitType', limitTypesArr.objectAt(0).get('address'));
        _this.set('secondLimitType', limitTypesArr.objectAt(1).get('address'));
      });

      return this._super.apply(this, arguments);
    },

    actions: {
      refreshModel: function refreshModel() {
        this.refresh();
      }
    },

    /**
      Load limit accessible values for lookup.
      @method setupController
     */
    setupController: function setupController() {
      this._super.apply(this, arguments);

      this.set('controller.firstLimitType', this.get('firstLimitType'));

      this.set('controller.secondLimitType', this.get('secondLimitType'));
    }
  });
});
define('dummy/routes/components-examples/flexberry-simpleolv/on-edit-form', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ApplicationUserL'
     */
    modelProjection: 'ApplicationUserL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { SOLVOnEditFormObjectListView: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
     */
    modelName: 'ember-flexberry-dummy-application-user'
  });
});
define('dummy/routes/components-examples/flexberry-simpleolv/on-edit-form/user', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ApplicationUserE'
     */
    modelProjection: 'ApplicationUserE',

    developerUserSettings: { FOLVOnEditFormSuggestionsObjectListView: {} },
    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
     */
    modelName: 'ember-flexberry-dummy-application-user'
  });
});
define('dummy/routes/components-examples/flexberry-simpleolv/selected-rows', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionTypeL'
     */
    modelProjection: 'SuggestionTypeL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      SOLVsuggestionTypeLocalizedTypesObjectListView: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'width': 65 }]
        }
      }
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-type'
     */
    modelName: 'ember-flexberry-dummy-suggestion-type'
  });
});
define('dummy/routes/components-examples/flexberry-simpleolv/settings-example', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionL'
     */
    modelProjection: 'SuggestionL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      SOLVSettingsExampleObjectListView: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': false, 'width': 90 }]
        }
      }
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'
  });
});
define('dummy/routes/components-examples/flexberry-simpleolv/toolbar-custom-buttons-example', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'FolvWithLimitFunctionExampleView'
     */
    modelProjection: 'FolvWithLimitFunctionExampleView',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { SOLVToolbarCustomButtonsExample: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'
  });
});
define('dummy/routes/components-examples/flexberry-text-cell/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('dummy/routes/components-examples/flexberry-textarea/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('components-examples/flexberry-textarea/settings-example/base', {});

      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-textbox/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('components-examples/flexberry-textbox/settings-example/base', {});

      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-toggler/ge-into-toggler-example', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
     Name of model projection to be used as record's properties limitation.
      @property modelProjection
     @type String
     @default 'TogglerExampleMasterL'
     */
    modelProjection: 'TogglerExampleMasterL',

    /**
    developerUserSettings.
    Format:
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      SuggestionObjectListView: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'OlvRowMenu', 'fixed': true, 'width': 68 }]
        }
      }
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-toggler-example-master'
     */
    modelName: 'ember-flexberry-dummy-toggler-example-master'
  });
});
define('dummy/routes/components-examples/flexberry-toggler/settings-example-inner', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('dummy/routes/components-examples/flexberry-toggler/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('dummy/routes/components-examples/flexberry-tree/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('dummy/routes/components-examples/ui-message/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('dummy/routes/edit-form', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryRoutesEditForm['default'];
    }
  });
});
define('dummy/routes/ember-flexberry-dummy-application-user-edit', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ApplicationUserE'
     */
    modelProjection: 'ApplicationUserE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
     */
    modelName: 'ember-flexberry-dummy-application-user'
  });
});
define('dummy/routes/ember-flexberry-dummy-application-user-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditFormNew, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ApplicationUserE'
    */
    modelProjection: 'ApplicationUserE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
    */
    modelName: 'ember-flexberry-dummy-application-user',

    /**
      Name of template to be rendered.
       @property templateName
      @type String
      @default 'ember-flexberry-dummy-application-user-edit'
    */
    templateName: 'ember-flexberry-dummy-application-user-edit'
  });
});
define('dummy/routes/ember-flexberry-dummy-application-user-list', ['exports', 'ember-flexberry/routes/list-form', 'dummy/mixins/list-form-route-operations-indication'], function (exports, _emberFlexberryRoutesListForm, _dummyMixinsListFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend(_dummyMixinsListFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ApplicationUserL'
     */
    modelProjection: 'ApplicationUserL',

    /**
    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      applicationUserObjectListView: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': false, 'width': 90 }]
        }
      }
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
     */
    modelName: 'ember-flexberry-dummy-application-user'
  });
});
define('dummy/routes/ember-flexberry-dummy-comment-edit', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'CommentE'
     */
    modelProjection: 'CommentE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-comment'
     */
    modelName: 'ember-flexberry-dummy-comment'
  });
});
define('dummy/routes/ember-flexberry-dummy-comment-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditFormNew, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'CommentE'
    */
    modelProjection: 'CommentE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-comment'
    */
    modelName: 'ember-flexberry-dummy-comment',

    /**
      Name of template to be rendered.
       @property templateName
      @type String
      @default 'ember-flexberry-dummy-comment-edit'
    */
    templateName: 'ember-flexberry-dummy-comment-edit'
  });
});
define('dummy/routes/ember-flexberry-dummy-comment-vote-edit', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'CommentVoteE'
     */
    modelProjection: 'CommentVoteE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-comment-vote'
     */
    modelName: 'ember-flexberry-dummy-comment-vote'
  });
});
define('dummy/routes/ember-flexberry-dummy-comment-vote-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditFormNew, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'CommentVoteE'
    */
    modelProjection: 'CommentVoteE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-comment-vote'
    */
    modelName: 'ember-flexberry-dummy-comment-vote',

    /**
      Name of template to be rendered.
       @property templateName
      @type String
      @default 'ember-flexberry-dummy-comment-vote-edit'
    */
    templateName: 'ember-flexberry-dummy-comment-vote-edit'
  });
});
define('dummy/routes/ember-flexberry-dummy-localization-edit', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'LocalizationE'
     */
    modelProjection: 'LocalizationE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-localization'
     */
    modelName: 'ember-flexberry-dummy-localization'
  });
});
define('dummy/routes/ember-flexberry-dummy-localization-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditFormNew, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'LocalizationE'
    */
    modelProjection: 'LocalizationE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-localization'
    */
    modelName: 'ember-flexberry-dummy-localization',

    /**
      Name of template to be rendered.
       @property templateName
      @type String
      @default 'ember-flexberry-dummy-localization-edit'
    */
    templateName: 'ember-flexberry-dummy-localization-edit'
  });
});
define('dummy/routes/ember-flexberry-dummy-localization-list', ['exports', 'ember-flexberry/routes/list-form', 'dummy/mixins/list-form-route-operations-indication'], function (exports, _emberFlexberryRoutesListForm, _dummyMixinsListFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend(_dummyMixinsListFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'LocalizationL'
     */
    modelProjection: 'LocalizationL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { localizationObjectListView: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-localization'
     */
    modelName: 'ember-flexberry-dummy-localization'
  });
});
define('dummy/routes/ember-flexberry-dummy-multi-list-user-edit', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/objects/list-parameters', 'ember-flexberry/mixins/multi-list-route', 'ember-flexberry/mixins/multi-list-model-edit'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryObjectsListParameters, _emberFlexberryMixinsMultiListRoute, _emberFlexberryMixinsMultiListModelEdit) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsMultiListRoute['default'], _emberFlexberryMixinsMultiListModelEdit['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ApplicationUserE'
     */
    modelProjection: 'ApplicationUserE',

    developerUserSettings: { MultiUserListOnEdit: {}, MultiUserList2OnEdit: {}, MultiSuggestionListOnEdit: {}, MultiHierarchyListOnEdit: {} },

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
     */
    modelName: 'ember-flexberry-dummy-application-user',

    init: function init() {
      this._super.apply(this, arguments);

      this.set('multiListSettings.MultiUserListOnEdit', new _emberFlexberryObjectsListParameters['default']({
        objectlistviewEvents: this.get('objectlistviewEvents'),
        componentName: 'MultiUserListOnEdit',
        modelName: 'ember-flexberry-dummy-application-user',
        projectionName: 'ApplicationUserL',
        editFormRoute: 'ember-flexberry-dummy-application-user-edit'
      }));

      this.set('multiListSettings.MultiUserList2OnEdit', new _emberFlexberryObjectsListParameters['default']({
        objectlistviewEvents: this.get('objectlistviewEvents'),
        componentName: 'MultiUserList2OnEdit',
        modelName: 'ember-flexberry-dummy-application-user',
        projectionName: 'ApplicationUserL',
        editFormRoute: 'ember-flexberry-dummy-application-user-edit'
      }));

      this.set('multiListSettings.MultiSuggestionListOnEdit', new _emberFlexberryObjectsListParameters['default']({
        objectlistviewEvents: this.get('objectlistviewEvents'),
        componentName: 'MultiSuggestionListOnEdit',
        modelName: 'ember-flexberry-dummy-suggestion',
        projectionName: 'SuggestionL',
        editFormRoute: 'ember-flexberry-dummy-suggestion-edit',
        exportExcelProjection: 'SuggestionL'
      }));

      this.set('multiListSettings.MultiHierarchyListOnEdit', new _emberFlexberryObjectsListParameters['default']({
        objectlistviewEvents: this.get('objectlistviewEvents'),
        componentName: 'MultiHierarchyListOnEdit',
        modelName: 'ember-flexberry-dummy-suggestion-type',
        projectionName: 'SuggestionTypeL',
        editFormRoute: 'ember-flexberry-dummy-suggestion-type-edit',
        inHierarchicalMode: true,
        hierarchicalAttribute: 'parent'
      }));
    }
  });
});
define('dummy/routes/ember-flexberry-dummy-multi-list-user-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new', 'ember-flexberry/objects/list-parameters', 'ember-flexberry/mixins/edit-form-route-operations-indication', 'ember-flexberry/mixins/multi-list-route', 'ember-flexberry/mixins/multi-list-model-edit'], function (exports, _emberFlexberryRoutesEditFormNew, _emberFlexberryObjectsListParameters, _emberFlexberryMixinsEditFormRouteOperationsIndication, _emberFlexberryMixinsMultiListRoute, _emberFlexberryMixinsMultiListModelEdit) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], _emberFlexberryMixinsMultiListRoute['default'], _emberFlexberryMixinsMultiListModelEdit['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ApplicationUserE'
    */
    modelProjection: 'ApplicationUserE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
    */
    modelName: 'ember-flexberry-dummy-application-user',

    /**
      @property developerUserSettings
      @type Object
      @default {}
    */
    developerUserSettings: { FOLVOnEditFormObjectListView: {} },

    /**
      Name of template to be rendered.
       @property templateName
      @type String
      @default 'ember-flexberry-dummy-multi-list-user-edit'
    */
    templateName: 'ember-flexberry-dummy-multi-list-user-edit',

    init: function init() {
      this._super.apply(this, arguments);

      this.set('multiListSettings.MultiUserListOnEdit', new _emberFlexberryObjectsListParameters['default']({
        objectlistviewEvents: this.get('objectlistviewEvents'),
        componentName: 'MultiUserListOnEdit',
        modelName: 'ember-flexberry-dummy-application-user',
        projectionName: 'ApplicationUserL',
        editFormRoute: 'ember-flexberry-dummy-application-user-edit'
      }));

      this.set('multiListSettings.MultiUserList2OnEdit', new _emberFlexberryObjectsListParameters['default']({
        objectlistviewEvents: this.get('objectlistviewEvents'),
        componentName: 'MultiUserList2OnEdit',
        modelName: 'ember-flexberry-dummy-application-user',
        projectionName: 'ApplicationUserL',
        editFormRoute: 'ember-flexberry-dummy-application-user-edit'
      }));

      this.set('multiListSettings.MultiSuggestionListOnEdit', new _emberFlexberryObjectsListParameters['default']({
        objectlistviewEvents: this.get('objectlistviewEvents'),
        componentName: 'MultiSuggestionListOnEdit',
        modelName: 'ember-flexberry-dummy-suggestion',
        projectionName: 'SuggestionL',
        editFormRoute: 'ember-flexberry-dummy-suggestion-edit',
        exportExcelProjection: 'SuggestionL'
      }));

      this.set('multiListSettings.MultiHierarchyListOnEdit', new _emberFlexberryObjectsListParameters['default']({
        objectlistviewEvents: this.get('objectlistviewEvents'),
        componentName: 'MultiHierarchyListOnEdit',
        modelName: 'ember-flexberry-dummy-suggestion-type',
        projectionName: 'SuggestionTypeL',
        editFormRoute: 'ember-flexberry-dummy-suggestion-type-edit',
        inHierarchicalMode: true,
        hierarchicalAttribute: 'parent'
      }));
    }
  });
});
define('dummy/routes/ember-flexberry-dummy-multi-list', ['exports', 'ember-flexberry/routes/list-form', 'ember-flexberry/mixins/multi-list-route', 'ember-flexberry/mixins/multi-list-model', 'ember-flexberry/objects/list-parameters'], function (exports, _emberFlexberryRoutesListForm, _emberFlexberryMixinsMultiListRoute, _emberFlexberryMixinsMultiListModel, _emberFlexberryObjectsListParameters) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend(_emberFlexberryMixinsMultiListRoute['default'], _emberFlexberryMixinsMultiListModel['default'], {
    init: function init() {
      this._super.apply(this, arguments);

      this.set('multiListSettings.MultiUserList', new _emberFlexberryObjectsListParameters['default']({
        objectlistviewEvents: this.get('objectlistviewEvents'),
        componentName: 'MultiUserList',
        modelName: 'ember-flexberry-dummy-application-user',
        projectionName: 'ApplicationUserL',
        editFormRoute: 'ember-flexberry-dummy-multi-list-user-edit',
        advLimitButton: true
      }));

      this.set('multiListSettings.MultiUserList2', new _emberFlexberryObjectsListParameters['default']({
        objectlistviewEvents: this.get('objectlistviewEvents'),
        componentName: 'MultiUserList2',
        modelName: 'ember-flexberry-dummy-application-user',
        projectionName: 'ApplicationUserL',
        editFormRoute: 'ember-flexberry-dummy-multi-list-user-edit',
        advLimitButton: true
      }));

      this.set('multiListSettings.MultiSuggestionList', new _emberFlexberryObjectsListParameters['default']({
        objectlistviewEvents: this.get('objectlistviewEvents'),
        componentName: 'MultiSuggestionList',
        modelName: 'ember-flexberry-dummy-suggestion',
        projectionName: 'SuggestionL',
        editFormRoute: 'components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit',
        exportExcelProjection: 'SuggestionL'
      }));

      this.set('multiListSettings.MultiHierarchyList', new _emberFlexberryObjectsListParameters['default']({
        objectlistviewEvents: this.get('objectlistviewEvents'),
        componentName: 'MultiHierarchyList',
        modelName: 'ember-flexberry-dummy-suggestion-type',
        projectionName: 'SuggestionTypeL',
        editFormRoute: 'ember-flexberry-dummy-suggestion-type-edit',
        inHierarchicalMode: true,
        hierarchicalAttribute: 'parent',
        hierarchyPaging: true
      }));
    },

    /**
      Defined user settings developer.
      For default userSetting use empty name ('').
      Property `<componentName>` may contain any of properties: `colsOrder`, `sorting`, `colsWidth` or being empty.
       ```javascript
      {
        <componentName>: {
          <settingName>: {
            colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
            sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
            colsWidths: [ <colName>:<colWidth>, ... ],
          },
          ...
        },
        ...
      }
      ```
       @property developerUserSettings
      @type Object
      @default {}
    */
    developerUserSettings: { MultiUserList: {}, MultiUserList2: {}, MultiSuggestionList: {}, MultiHierarchyList: {} }
  });
});
define('dummy/routes/ember-flexberry-dummy-suggestion-edit', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionE'
     */
    modelProjection: 'SuggestionE',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: 'asc'|'desc' }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      suggestionUserVotesGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'voteType', 'width': 133 }, { 'propName': 'author', 'width': 348 }, { 'propName': 'author.eMail', 'width': 531 }],
          'sorting': [{ 'propName': 'author', 'direction': 'asc', 'attributePath': 'author.name' }]
        }
      },
      filesGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'order', 'width': 140 }, { 'propName': 'file', 'width': 893 }],
          'colsOrder': [{ 'propName': 'file' }, { 'propName': 'order' }],
          'sorting': [{ 'propName': 'order', 'direction': 'desc' }]
        }
      },
      suggestionCommentsGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'votes', 'fixed': true }],
          'sorting': [{ 'propName': 'votes', 'direction': 'asc' }, { 'propName': 'moderated', 'direction': 'desc' }, { 'propName': 'text', 'direction': 'asc' }]
        }
      }
    },

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'

  });
});
define('dummy/routes/ember-flexberry-dummy-suggestion-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditFormNew, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionE'
    */
    modelProjection: 'SuggestionE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
    */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Name of template to be rendered.
       @property templateName
      @type String
      @default 'ember-flexberry-dummy-suggestion-edit'
    */
    templateName: 'ember-flexberry-dummy-suggestion-edit',

    developerUserSettings: {
      suggestionUserVotesGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'voteType', 'width': 133 }, { 'propName': 'author', 'width': 348 }, { 'propName': 'author.eMail', 'width': 531 }],
          'sorting': [{ 'propName': 'author', 'direction': 'asc', 'attributePath': 'author.name' }]
        }
      },
      filesGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'order', 'width': 140 }, { 'propName': 'file', 'width': 893 }],
          'colsOrder': [{ 'propName': 'file' }, { 'propName': 'order' }],
          'sorting': [{ 'propName': 'order', 'direction': 'desc' }]
        }
      },
      suggestionCommentsGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'votes', 'fixed': true }],
          'sorting': [{ 'propName': 'votes', 'direction': 'asc' }, { 'propName': 'moderated', 'direction': 'desc' }, { 'propName': 'text', 'direction': 'asc' }]
        }
      }
    }
  });
});
define('dummy/routes/ember-flexberry-dummy-suggestion-file-edit', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionFileE'
     */
    modelProjection: 'SuggestionFileE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-file'
     */
    modelName: 'ember-flexberry-dummy-suggestion-file'
  });
});
define('dummy/routes/ember-flexberry-dummy-suggestion-file-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditFormNew, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionFileE'
    */
    modelProjection: 'SuggestionFileE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-file'
    */
    modelName: 'ember-flexberry-dummy-suggestion-file',

    /**
      Name of template to be rendered.
       @property templateName
      @type String
      @default 'ember-flexberry-dummy-suggestion-file-edit'
    */
    templateName: 'ember-flexberry-dummy-suggestion-file-edit'
  });
});
define('dummy/routes/ember-flexberry-dummy-suggestion-file-list', ['exports', 'ember-flexberry/routes/list-form', 'dummy/mixins/list-form-route-operations-indication'], function (exports, _emberFlexberryRoutesListForm, _dummyMixinsListFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend(_dummyMixinsListFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionFileE'
     */
    modelProjection: 'SuggestionFileL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { localizationObjectListView: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-file'
     */
    modelName: 'ember-flexberry-dummy-suggestion-file'
  });
});
define('dummy/routes/ember-flexberry-dummy-suggestion-list', ['exports', 'ember-flexberry/routes/list-form', 'dummy/mixins/list-form-route-operations-indication'], function (exports, _emberFlexberryRoutesListForm, _dummyMixinsListFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend(_dummyMixinsListFormRouteOperationsIndication['default'], {
    /**
     Name of model projection to be used as record's properties limitation.
      @property modelProjection
     @type String
     @default 'SuggestionL'
     */
    modelProjection: 'SuggestionL',

    /**
    developerUserSettings.
    Format:
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      SuggestionObjectListView: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 90 }, { 'propName': 'OlvRowMenu', 'fixed': true, 'width': 68 }]
        }
      }
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'
  });
});
define('dummy/routes/ember-flexberry-dummy-suggestion-type-edit', ['exports', 'ember-flexberry/routes/edit-form', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionTypeE'
     */
    modelProjection: 'SuggestionTypeE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-type'
     */
    modelName: 'ember-flexberry-dummy-suggestion-type',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: 'asc'|'desc' }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      suggestionTypeLocalizedTypesGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 55 }]
        }
      }
    }
  });
});
define('dummy/routes/ember-flexberry-dummy-suggestion-type-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new', 'ember-flexberry/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditFormNew, _emberFlexberryMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend(_emberFlexberryMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionTypeE'
    */
    modelProjection: 'SuggestionTypeE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-type'
    */
    modelName: 'ember-flexberry-dummy-suggestion-type',

    /**
      Name of template to be rendered.
       @property templateName
      @type String
      @default 'ember-flexberry-dummy-suggestion-type-edit'
    */
    templateName: 'ember-flexberry-dummy-suggestion-type-edit'
  });
});
define('dummy/routes/ember-flexberry-dummy-suggestion-type-list', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionTypeL'
     */
    modelProjection: 'SuggestionTypeL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      SOLVSuggestionTypeObjectListView: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 90 }, { 'propName': 'OlvRowMenu', 'fixed': true, 'width': 68 }]
        }
      }
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-type'
     */
    modelName: 'ember-flexberry-dummy-suggestion-type'
  });
});
define('dummy/routes/ember-flexberry-dummy-toggler-example-master-e', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({

    /**
     Name of model projection to be used as record's properties limitation.
      @property modelProjection
     @type String
     @default 'TogglerExampleMasterE'
     */
    modelProjection: 'TogglerExampleMasterE',

    /**
    developerUserSettings.
    Format:
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      togglerExampleDetailGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'togglerExampleDetailProperty', 'width': 935 }]
        }
      }
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-toggler-example-master'
    */
    modelName: 'ember-flexberry-dummy-toggler-example-master'
  });
});
define('dummy/routes/ember-flexberry-dummy-toggler-example-master-e/new', ['exports', 'ember-flexberry/routes/edit-form-new'], function (exports, _emberFlexberryRoutesEditFormNew) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'TogglerExampleMasterE'
    */
    modelProjection: 'TogglerExampleMasterE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-toggler-example-master'
    */
    modelName: 'ember-flexberry-dummy-toggler-example-master',

    /**
      Name of template to be rendered.
       @property templateName
      @type String
      @default 'ember-flexberry-dummy-toggler-example-master-e'
    */
    templateName: 'ember-flexberry-dummy-toggler-example-master-e',

    /**
    developerUserSettings.
    Format:
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      togglerExampleDetailGroupEdit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }, { 'propName': 'togglerExampleDetailProperty', 'width': 935 }]
        }
      }
    }
  });
});
define('dummy/routes/i-i-s-caseberry-logging-objects-application-log-e', ['exports', 'ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-e'], function (exports, _emberFlexberryRoutesIISCaseberryLoggingObjectsApplicationLogE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryRoutesIISCaseberryLoggingObjectsApplicationLogE['default'];
    }
  });
});
define('dummy/routes/i-i-s-caseberry-logging-objects-application-log-l', ['exports', 'ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-l'], function (exports, _emberFlexberryRoutesIISCaseberryLoggingObjectsApplicationLogL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryRoutesIISCaseberryLoggingObjectsApplicationLogL['default'];
    }
  });
});
define('dummy/routes/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend();
});
define('dummy/routes/integration-examples/edit-form/readonly-mode', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'AggregatorE'
     */
    modelProjection: 'AggregatorE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'integration-examples/edit-form/readonly-mode/aggregator'
     */
    modelName: 'integration-examples/edit-form/readonly-mode/aggregator',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var aggregator = store.createRecord('integration-examples/edit-form/readonly-mode/aggregator', {});
      var detail = store.createRecord('integration-examples/edit-form/readonly-mode/detail', {});
      aggregator.get('details').pushObject(detail);

      return aggregator;
    },

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      aggregatorDetailsGroupedit: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }]
        }
      }
    }
  });
});
define('dummy/routes/integration-examples/edit-form/validation', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'BaseE'
     */
    modelProjection: 'BaseE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'integration-examples/edit-form/validation/base'
     */
    modelName: 'integration-examples/edit-form/validation/base',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      // Create base model.
      var base = store.createRecord('integration-examples/edit-form/validation/base', {});

      // Create detail & add to base model.
      var detail1 = store.createRecord('integration-examples/edit-form/validation/detail', {});
      base.get('details').pushObject(detail1);

      return base;
    }
  });
});
define('dummy/routes/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-e', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    modelProjection: 'DepartamentE',
    modelName: 'ember-flexberry-dummy-departament'
  });
});
define('dummy/routes/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-e/new', ['exports', 'ember-flexberry/routes/edit-form-new'], function (exports, _emberFlexberryRoutesEditFormNew) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend({
    modelProjection: 'DepartamentE',
    modelName: 'ember-flexberry-dummy-departament',
    templateName: 'integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-e'
  });
});
define('dummy/routes/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-l', ['exports', 'ember', 'ember-flexberry/routes/list-form'], function (exports, _ember, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'DepartamentL'
    */
    modelProjection: 'DepartamentL',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-departament'
    */
    modelName: 'ember-flexberry-dummy-departament',

    /**
      Defined user settings developer.
      For default userSetting use empty name ('').
      Property `<componentName>` may contain any of properties: `colsOrder`, `sorting`, `colsWidth` or being empty.
       ```javascript
      {
        <componentName>: {
          <settingName>: {
            colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
            sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
            colsWidths: [ <colName>:<colWidth>, ... ],
          },
          ...
        },
        ...
      }
      ```
       @property developerUserSettings
      @type Object
      @default {}
    */
    developerUserSettings: _ember['default'].computed(function () {
      return {
        EmberFlexberryDummyDepartamentL: {}
      };
    })
  });
});
define('dummy/routes/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-e', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    modelProjection: 'SotrudnikE',
    modelName: 'ember-flexberry-dummy-sotrudnik'
  });
});
define('dummy/routes/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-e/new', ['exports', 'ember-flexberry/routes/edit-form-new'], function (exports, _emberFlexberryRoutesEditFormNew) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend({
    modelProjection: 'SotrudnikE',
    modelName: 'ember-flexberry-dummy-sotrudnik',
    templateName: 'integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-e'
  });
});
define('dummy/routes/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-l', ['exports', 'ember', 'ember-flexberry/routes/list-form'], function (exports, _ember, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SotrudnikL'
    */
    modelProjection: 'SotrudnikL',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-sotrudnik'
    */
    modelName: 'ember-flexberry-dummy-sotrudnik',

    /**
      Defined user settings developer.
      For default userSetting use empty name ('').
      Property `<componentName>` may contain any of properties: `colsOrder`, `sorting`, `colsWidth` or being empty.
       ```javascript
      {
        <componentName>: {
          <settingName>: {
            colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
            sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
            colsWidths: [ <colName>:<colWidth>, ... ],
          },
          ...
        },
        ...
      }
      ```
       @property developerUserSettings
      @type Object
      @default {}
    */
    developerUserSettings: _ember['default'].computed(function () {
      return {
        EmberFlexberryDummySotrudnikL: {}
      };
    })
  });
});
define('dummy/routes/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-e', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    modelProjection: 'VidDepartamentaE',
    modelName: 'ember-flexberry-dummy-vid-departamenta'
  });
});
define('dummy/routes/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-e/new', ['exports', 'ember-flexberry/routes/edit-form-new'], function (exports, _emberFlexberryRoutesEditFormNew) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend({
    modelProjection: 'VidDepartamentaE',
    modelName: 'ember-flexberry-dummy-vid-departamenta',
    templateName: 'integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-e'
  });
});
define('dummy/routes/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-l', ['exports', 'ember', 'ember-flexberry/routes/list-form'], function (exports, _ember, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'VidDepartamentaL'
    */
    modelProjection: 'VidDepartamentaL',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-vid-departamenta'
    */
    modelName: 'ember-flexberry-dummy-vid-departamenta',

    /**
      Defined user settings developer.
      For default userSetting use empty name ('').
      Property `<componentName>` may contain any of properties: `colsOrder`, `sorting`, `colsWidth` or being empty.
       ```javascript
      {
        <componentName>: {
          <settingName>: {
            colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
            sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
            colsWidths: [ <colName>:<colWidth>, ... ],
          },
          ...
        },
        ...
      }
      ```
       @property developerUserSettings
      @type Object
      @default {}
    */
    developerUserSettings: _ember['default'].computed(function () {
      return {
        EmberFlexberryDummyVidDepartamentaL: {}
      };
    })
  });
});
define('dummy/routes/list-form', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryRoutesListForm['default'];
    }
  });
});
define('dummy/routes/log-service-examples/clear-log-form', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      A hook you can use to setup the controller for the current route.
      [More info](http://emberjs.com/api/classes/Ember.Route.html#method_setupController).
       @method setupController
      @param {<a href="http://emberjs.com/api/classes/Ember.Controller.html">Ember.Controller</a>} controller
      @param {Object} model
    */
    setupController: function setupController(controller, model) {
      this._super.apply(this, arguments);
      controller.getCounts();
    }
  });
});
define('dummy/routes/log-service-examples/settings-example', ['exports', 'ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-l'], function (exports, _emberFlexberryRoutesIISCaseberryLoggingObjectsApplicationLogL) {
  exports['default'] = _emberFlexberryRoutesIISCaseberryLoggingObjectsApplicationLogL['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ApplicationLogL'
    */
    modelProjection: 'ApplicationLogL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: 'asc'|'desc' }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVSettingExample: '\n    {\n      "DEFAULT": {\n        "colsOrder": [\n        {\n          "propName": "timestamp"\n        },\n        {\n          "propName": "category"\n        },\n        {\n          "propName": "machineName"\n        },\n        {\n          "propName": "appDomainName"\n        },\n        {\n          "propName": "processId"\n        },\n        {\n          "propName": "message"\n        },\n        {\n          "propName": "processName",\n          "hide": true\n        },\n        {\n          "propName": "formattedMessage",\n          "hide": true\n        },\n        {\n          "propName": "eventId",\n          "hide": true\n        },\n        {\n          "propName": "priority",\n          "hide": true\n        },\n        {\n          "propName": "severity",\n          "hide": true\n        },\n        {\n          "propName": "title",\n          "hide": true\n        },\n        {\n          "propName": "threadName",\n          "hide": true\n        },\n        {\n          "propName": "win32ThreadId",\n          "hide": true\n        }\n        ],\n        "sorting": [\n        {\n          "propName": "timestamp",\n          "direction": "desc",\n          "sortPriority": 1\n        }\n        ]\n      },\n      "Message": {\n        "colsOrder": [\n        {\n          "propName": "timestamp"\n        },\n        {\n          "propName": "category"\n        },\n        {\n          "propName": "machineName"\n        },\n        {\n          "propName": "appDomainName"\n        },\n        {\n          "propName": "processId"\n        },\n        {\n          "propName": "message"\n        },\n        {\n          "propName": "processName",\n          "hide": true\n        },\n        {\n          "propName": "formattedMessage",\n          "hide": true\n        },\n        {\n          "propName": "eventId",\n          "hide": true\n        },\n        {\n          "propName": "priority",\n          "hide": true\n        },\n        {\n          "propName": "severity",\n          "hide": true\n        },\n        {\n          "propName": "title",\n          "hide": true\n        },\n        {\n          "propName": "threadName",\n          "hide": true\n        },\n        {\n          "propName": "win32ThreadId",\n          "hide": true\n        }\n        ],\n        "sorting": [\n        {\n          "propName": "timestamp",\n          "direction": "desc",\n          "sortPriority": 1\n        }\n        ]\n      },\n      "FormattedMessage": {\n        "colsOrder": [\n        {\n          "propName": "timestamp"\n        },\n        {\n          "propName": "category"\n        },\n        {\n          "propName": "machineName"\n        },\n        {\n          "propName": "appDomainName"\n        },\n        {\n          "propName": "processId"\n        },\n        {\n          "propName": "formattedMessage",\n          "hide": false\n        },\n        {\n          "propName": "message",\n          "hide": true\n        },\n        {\n          "propName": "processName",\n          "hide": true\n        },\n        {\n          "propName": "eventId",\n          "hide": true\n        },\n        {\n          "propName": "priority",\n          "hide": true\n        },\n        {\n          "propName": "severity",\n          "hide": true\n        },\n        {\n          "propName": "title",\n          "hide": true\n        },\n        {\n          "propName": "threadName",\n          "hide": true\n        },\n        {\n          "propName": "win32ThreadId",\n          "hide": true\n        }\n        ],\n        "sorting": [\n        {\n          "propName": "timestamp",\n          "direction": "desc",\n          "sortPriority": 1\n        }\n        ]\n      }\n    }\n    '
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'i-i-s-caseberry-logging-objects-application-log'
    */
    modelName: 'i-i-s-caseberry-logging-objects-application-log'
  });
});
define('dummy/routes/new-platform-flexberry-services-lock-list', ['exports', 'ember-flexberry/routes/new-platform-flexberry-services-lock-list'], function (exports, _emberFlexberryRoutesNewPlatformFlexberryServicesLockList) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryRoutesNewPlatformFlexberryServicesLockList['default'];
    }
  });
});
define('dummy/routes/user-setting-forms/user-setting-delete', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'FlexberryUserSettingE'
     */
    modelProjection: 'FlexberryUserSettingE',

    /**
    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      userSettingObjectListView: {
        'DEFAULT': {
          'columnWidths': [{ 'propName': 'OlvRowToolbar', 'fixed': true, 'width': 65 }]
        }
      }
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'new-platform-flexberry-flexberry-user-setting'
     */
    modelName: 'new-platform-flexberry-flexberry-user-setting'
  });
});
define('dummy/serializers/application', ['exports', 'ember-flexberry-data'], function (exports, _emberFlexberryData) {
  exports['default'] = _emberFlexberryData.Serializer.Odata.extend({});
});
define('dummy/serializers/base', ['exports', 'ember-flexberry-data/serializers/base'], function (exports, _emberFlexberryDataSerializersBase) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersBase['default'];
    }
  });
});
define('dummy/serializers/ember-flexberry-dummy-application-user', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {},

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-comment-vote', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {
      applicationUser: { serialize: 'odata-id', deserialize: 'records' },
      comment: { serialize: 'odata-id', deserialize: 'records' }
    },

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-comment', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {
      author: { serialize: 'odata-id', deserialize: 'records' },
      suggestion: { serialize: 'odata-id', deserialize: 'records' },
      userVotes: { serialize: false, deserialize: 'records' }
    },

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-departament', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {
      vid: { serialize: 'odata-id', deserialize: 'records' }
    },

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-localization', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {},

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-localized-suggestion-type', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {
      localization: { serialize: 'odata-id', deserialize: 'records' },
      suggestionType: { serialize: 'odata-id', deserialize: 'records' }
    },

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-parent', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {},

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-sotrudnik', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {
      departament: { serialize: 'odata-id', deserialize: 'records' }
    },

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-successor-phone', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {},

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-successor-social-network', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {},

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-suggestion-file', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {
      suggestion: { serialize: 'odata-id', deserialize: 'records' }
    },

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-suggestion-type', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {
      parent: { serialize: 'odata-id', deserialize: 'records' },
      localizedTypes: { serialize: false, deserialize: 'records' }
    },

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-suggestion', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {
      editor1: { serialize: 'odata-id', deserialize: 'records' },
      type: { serialize: 'odata-id', deserialize: 'records' },
      author: { serialize: 'odata-id', deserialize: 'records' },
      files: { serialize: false, deserialize: 'records' },
      comments: { serialize: false, deserialize: 'records' },
      userVotes: { serialize: false, deserialize: 'records' }
    },

    serialize: function serialize(snapshot, options) {
      var data = this._super.apply(this, arguments);
      delete data.СommentsCount;
      return data;
    },
    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-toggler-example-detail', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {
      togglerExampleMaster: { serialize: 'odata-id', deserialize: 'records' }
    },

    serialize: function serialize(snapshot, options) {
      var data = this._super.apply(this, arguments);
      return data;
    },
    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-toggler-example-master', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {
      togglerExampleDetail: { serialize: false, deserialize: 'records' }
    },

    serialize: function serialize(snapshot, options) {
      var data = this._super.apply(this, arguments);
      return data;
    },
    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-vid-departamenta', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {},

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-vote', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {
      author: { serialize: 'odata-id', deserialize: 'records' },
      suggestion: { serialize: 'odata-id', deserialize: 'records' }
    },

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/flexberry-adv-limit', ['exports', 'ember-flexberry/serializers/flexberry-adv-limit'], function (exports, _emberFlexberrySerializersFlexberryAdvLimit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySerializersFlexberryAdvLimit['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-offline', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-offline'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditEntityOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditEntityOffline['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditEntity) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditEntity['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field-offline', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field-offline'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditFieldOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditFieldOffline['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditField) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditField['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type-offline', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type-offline'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsObjectTypeOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsObjectTypeOffline['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsObjectType) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsObjectType['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent-offline', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent-offline'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETSecurityAgentOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETSecurityAgentOffline['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETSecurityAgent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETSecurityAgent['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETSecurityLinkGroup) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETSecurityLinkGroup['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-session', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-session'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETSecuritySession) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETSecuritySession['default'];
    }
  });
});
define('dummy/serializers/i-i-s-caseberry-logging-objects-application-log', ['exports', 'ember-flexberry/serializers/i-i-s-caseberry-logging-objects-application-log'], function (exports, _emberFlexberrySerializersIISCaseberryLoggingObjectsApplicationLog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySerializersIISCaseberryLoggingObjectsApplicationLog['default'];
    }
  });
});
define('dummy/serializers/new-platform-flexberry-flexberry-user-setting', ['exports', 'ember-flexberry/serializers/new-platform-flexberry-flexberry-user-setting'], function (exports, _emberFlexberrySerializersNewPlatformFlexberryFlexberryUserSetting) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySerializersNewPlatformFlexberryFlexberryUserSetting['default'];
    }
  });
});
define('dummy/serializers/new-platform-flexberry-services-lock', ['exports', 'ember-flexberry/serializers/new-platform-flexberry-services-lock'], function (exports, _emberFlexberrySerializersNewPlatformFlexberryServicesLock) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySerializersNewPlatformFlexberryServicesLock['default'];
    }
  });
});
define('dummy/serializers/odata', ['exports', 'ember-flexberry-data/serializers/odata'], function (exports, _emberFlexberryDataSerializersOdata) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersOdata['default'];
    }
  });
});
define('dummy/serializers/offline', ['exports', 'ember-flexberry-data/serializers/offline'], function (exports, _emberFlexberryDataSerializersOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersOffline['default'];
    }
  });
});
define('dummy/services/adv-limit', ['exports', 'ember-flexberry/services/adv-limit'], function (exports, _emberFlexberryServicesAdvLimit) {
  exports['default'] = _emberFlexberryServicesAdvLimit['default'];
});
define('dummy/services/ajax', ['exports', 'ember-ajax/services/ajax'], function (exports, _emberAjaxServicesAjax) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberAjaxServicesAjax['default'];
    }
  });
});
define('dummy/services/app-state', ['exports', 'ember-flexberry/services/app-state'], function (exports, _emberFlexberryServicesAppState) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryServicesAppState['default'];
    }
  });
});
define('dummy/services/cols-config-menu', ['exports', 'ember', 'ember-flexberry/services/cols-config-menu', 'dummy/config/environment'], function (exports, _ember, _emberFlexberryServicesColsConfigMenu, _dummyConfigEnvironment) {

  var environment = _ember['default'].get(_dummyConfigEnvironment['default'], 'environment');
  _emberFlexberryServicesColsConfigMenu['default'].reopen({
    environment: environment
  });

  exports['default'] = _emberFlexberryServicesColsConfigMenu['default'];

  // export { default } from 'ember-flexberry/services/cols-config-menu';
});
define('dummy/services/detail-interaction', ['exports', 'ember-flexberry/services/detail-interaction'], function (exports, _emberFlexberryServicesDetailInteraction) {
  exports['default'] = _emberFlexberryServicesDetailInteraction['default'];
});
define('dummy/services/device', ['exports', 'ember-flexberry/services/device', 'ember'], function (exports, _emberFlexberryServicesDevice, _ember) {
  exports['default'] = _emberFlexberryServicesDevice['default'].extend({
    /**
      Get current device is phone.
       @method isMobile
      @return {Boolean} Returns true, if device is phone.
    */
    isMobile: function isMobile() {
      return _ember['default'].$(window).width() < 480;
    }
  });
});
define('dummy/services/dexie', ['exports', 'ember-flexberry-data/services/dexie'], function (exports, _emberFlexberryDataServicesDexie) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataServicesDexie['default'];
    }
  });
});
define('dummy/services/form-load-time-tracker', ['exports', 'ember-flexberry/services/form-load-time-tracker'], function (exports, _emberFlexberryServicesFormLoadTimeTracker) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryServicesFormLoadTimeTracker['default'];
    }
  });
});
define('dummy/services/i18n', ['exports', 'ember-i18n/services/i18n'], function (exports, _emberI18nServicesI18n) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nServicesI18n['default'];
    }
  });
});
define('dummy/services/log', ['exports', 'ember-flexberry/services/log'], function (exports, _emberFlexberryServicesLog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryServicesLog['default'];
    }
  });
});
define('dummy/services/lookup-events', ['exports', 'ember-flexberry/services/lookup-events'], function (exports, _emberFlexberryServicesLookupEvents) {
  exports['default'] = _emberFlexberryServicesLookupEvents['default'];
});
define('dummy/services/moment', ['exports', 'ember', 'dummy/config/environment', 'ember-moment/services/moment'], function (exports, _ember, _dummyConfigEnvironment, _emberMomentServicesMoment) {
  exports['default'] = _emberMomentServicesMoment['default'].extend({
    defaultFormat: _ember['default'].get(_dummyConfigEnvironment['default'], 'moment.outputFormat')
  });
});
define('dummy/services/objectlistview-events', ['exports', 'ember-flexberry/services/objectlistview-events'], function (exports, _emberFlexberryServicesObjectlistviewEvents) {
  exports['default'] = _emberFlexberryServicesObjectlistviewEvents['default'];
});
define('dummy/services/offline-globals', ['exports', 'ember-flexberry/services/offline-globals'], function (exports, _emberFlexberryServicesOfflineGlobals) {
  exports['default'] = _emberFlexberryServicesOfflineGlobals['default'];
});
define('dummy/services/perf', ['exports', 'ember', 'ember-flexberry/services/perf', 'dummy/config/environment'], function (exports, _ember, _emberFlexberryServicesPerf, _dummyConfigEnvironment) {

  var enabled = _ember['default'].get(_dummyConfigEnvironment['default'], 'APP.perf.enabled');
  if (_ember['default'].typeOf(enabled) === 'boolean') {
    _emberFlexberryServicesPerf['default'].reopen({
      enabled: enabled
    });
  }

  exports['default'] = _emberFlexberryServicesPerf['default'];
});
define('dummy/services/store', ['exports', 'ember-flexberry-data'], function (exports, _emberFlexberryData) {
  exports['default'] = _emberFlexberryData.Projection.OnlineStore.reopen(_emberFlexberryData.Projection.StoreMixin);
});
define('dummy/services/syncer', ['exports', 'ember-flexberry-data/services/syncer'], function (exports, _emberFlexberryDataServicesSyncer) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataServicesSyncer['default'];
    }
  });
});
define('dummy/services/user-settings', ['exports', 'ember', 'ember-flexberry/services/user-settings', 'dummy/config/environment'], function (exports, _ember, _emberFlexberryServicesUserSettings, _dummyConfigEnvironment) {

  var enabled = _ember['default'].get(_dummyConfigEnvironment['default'], 'APP.useUserSettingsService');
  var appName = _ember['default'].get(_dummyConfigEnvironment['default'], 'APP.name');
  if (_ember['default'].typeOf(enabled) === 'boolean') {
    _emberFlexberryServicesUserSettings['default'].reopen({
      isUserSettingsServiceEnabled: enabled,
      appName: appName
    });
  }

  exports['default'] = _emberFlexberryServicesUserSettings['default'];
});
define('dummy/services/user', ['exports', 'ember-flexberry-data'], function (exports, _emberFlexberryData) {
  var UserService = _emberFlexberryData.Security.UserService;
  exports['default'] = UserService.extend({
    /**
      @property userName
      @type String
      @default 'admin'
      @for _userSettingsService
    **/
    userName: 'admin',

    /**
      Returns current user name.
      Method must be overridden if application uses some authentication.
       @method getCurrentUserName
      @return {String} Current user name.
    */
    getCurrentUserName: function getCurrentUserName() {
      var user = this.get('userName');
      return user;
    }
  });
});
define('dummy/services/validations', ['exports', 'ember'], function (exports, _ember) {

  var set = _ember['default'].set;

  exports['default'] = _ember['default'].Service.extend({
    init: function init() {
      set(this, 'cache', {});
    }
  });
});
define("dummy/templates/advlimit-dialog-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/advlimit-dialog-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "advlimit-dialog-content", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "close", ["subexpr", "action", ["closeModalDialog"], [], ["loc", [null, [3, 8], [3, 35]]]], "message", ["subexpr", "@mut", [["get", "message", ["loc", [null, [4, 10], [4, 17]]]]], [], []]], ["loc", [null, [1, 0], [5, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/advlimit-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/advlimit-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "outlet", ["modal-content"], [], ["loc", [null, [9, 2], [9, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/advlimit-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "sizeClass", "small", "close", "removeModalDialog", "created", "createdModalDialog", "useOkButton", false, "useCloseButton", false], 0, null, ["loc", [null, [1, 0], [10, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/application-with-submenu", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes", "wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/application-with-submenu.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "class", "item");
          dom.setAttribute(el1, "href", "https://github.com/flexberry");
          dom.setAttribute(el1, "target", "_blank");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("img");
          dom.setAttribute(el2, "class", "ui centered image");
          dom.setAttribute(el2, "src", "assets/images/flexberry-logo.png");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "class", "item");
          dom.setAttribute(el1, "target", "_blank");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(fragment, [3]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element0, 'title');
          morphs[1] = dom.createAttrMorph(element1, 'href');
          morphs[2] = dom.createAttrMorph(element1, 'title');
          morphs[3] = dom.createMorphAt(element1, 1, 1);
          morphs[4] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["attribute", "title", ["subexpr", "t", ["forms.application.sitemap.application-name.title"], [], ["loc", [null, [5, 11], [5, 67]]]]], ["attribute", "href", ["get", "addonVersionHref", ["loc", [null, [9, 12], [9, 28]]]]], ["attribute", "title", ["subexpr", "t", ["forms.application.sitemap.application-version.title"], [], ["loc", [null, [11, 11], [11, 70]]]]], ["inline", "t", ["forms.application.sitemap.application-version.caption"], ["version", ["subexpr", "@mut", [["get", "addonVersion", ["loc", [null, [12, 72], [12, 84]]]]], [], []]], ["loc", [null, [12, 4], [12, 86]]]], ["inline", "render", ["sitemap", ["get", "sitemap", ["loc", [null, [14, 21], [14, 28]]]]], [], ["loc", [null, [14, 2], [14, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 42,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/application-with-submenu.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "example-with-submenu");
        dom.setAttribute(el1, "class", "pusher");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "full height");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui fixed main menu");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ui container");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "launch icon item");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "sidebar icon");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "right menu");
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui main container segment flexberry-content");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ui close left rail");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "ui sticky transition visible");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "flexberry-submenu ui large violet pointing secondary vertical following fluid menu");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ui main container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [1, 1]);
        var element3 = dom.childAt(element2, [1, 1, 1]);
        var element4 = dom.childAt(element2, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createElementMorph(element3);
        morphs[2] = dom.createMorphAt(dom.childAt(element4, [1, 1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element4, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "ui-sidebar", [], ["class", "inverted vertical main menu"], 0, null, ["loc", [null, [1, 0], [15, 15]]]], ["element", "action", ["toggleSidebar"], [], ["loc", [null, [20, 11], [20, 37]]]], ["inline", "render", ["sitemap", ["get", "sitemap", ["loc", [null, [31, 31], [31, 38]]]]], [], ["loc", [null, [31, 12], [31, 40]]]], ["content", "outlet", ["loc", [null, [35, 6], [35, 16]]]], ["inline", "outlet", ["modal"], [], ["loc", [null, [40, 2], [40, 20]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["content", "outlet", ["loc", [null, [2, 2], [2, 12]]]], ["inline", "outlet", ["modal"], [], ["loc", [null, [3, 2], [3, 20]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 20,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/application.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "class", "item");
            dom.setAttribute(el1, "target", "_blank");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element0, 'href');
            morphs[1] = dom.createAttrMorph(element0, 'title');
            morphs[2] = dom.createMorphAt(element0, 1, 1);
            morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["attribute", "href", ["get", "addonVersionHref", ["loc", [null, [14, 13], [14, 29]]]]], ["attribute", "title", ["subexpr", "t", ["forms.application.sitemap.application-version.title"], [], ["loc", [null, [16, 12], [16, 71]]]]], ["inline", "t", ["forms.application.sitemap.application-version.caption"], ["version", ["subexpr", "@mut", [["get", "addonVersion", ["loc", [null, [17, 74], [17, 86]]]]], [], []]], ["loc", [null, [17, 6], [17, 88]]]], ["inline", "render", ["sitemap", ["get", "sitemap", ["loc", [null, [19, 23], [19, 30]]]]], [], ["loc", [null, [19, 4], [19, 32]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 105,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "bgw-fix");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "background-logo");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "ui top attached");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "ui attached menu");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "ui container flex-container");
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("a");
          dom.setAttribute(el6, "class", "launch icon item");
          var el7 = dom.createTextNode("\n              ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("i");
          dom.setAttribute(el7, "class", "sidebar icon text-menu-show");
          var el8 = dom.createTextNode("\n                ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("span");
          dom.setAttribute(el8, "class", "text_menu");
          var el9 = dom.createTextNode("\n                  ");
          dom.appendChild(el8, el9);
          var el9 = dom.createComment("");
          dom.appendChild(el8, el9);
          var el9 = dom.createTextNode("\n                ");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode("\n                ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("span");
          dom.setAttribute(el8, "class", "text_menu hidden-text hidden");
          var el9 = dom.createTextNode("\n                  ");
          dom.appendChild(el8, el9);
          var el9 = dom.createComment("");
          dom.appendChild(el8, el9);
          var el9 = dom.createTextNode("\n                ");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode("\n              ");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n            ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "class", "item logo");
          dom.setAttribute(el3, "href", "https://github.com/flexberry");
          dom.setAttribute(el3, "target", "_blank");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("img");
          dom.setAttribute(el4, "class", "ui centered image");
          dom.setAttribute(el4, "src", "assets/images/flexberry-logo.png");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "page-header-caption");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4, "href", "https://github.com/flexberry");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "id", "example");
          dom.setAttribute(el1, "class", "pusher");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "bgw-opacity hidden");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "full height");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "flexberry-content ui attached segment");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "ui main container");
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("div");
          dom.setAttribute(el6, "class", "stackable grid container");
          var el7 = dom.createTextNode("\n              ");
          dom.appendChild(el6, el7);
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n            ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui main container");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui vertical footer segment");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ui container flex-container");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "ui text menu");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          dom.setAttribute(el4, "class", "brand item");
          dom.setAttribute(el4, "href", "#");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "right item");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "style", "margin-right: 5px;");
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "item lang");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "style", "margin-right: 5px;");
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "right menu");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("a");
          dom.setAttribute(el5, "class", "item");
          dom.setAttribute(el5, "target", "_blank");
          var el6 = dom.createTextNode("\n              ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [2, 1]);
          var element2 = dom.childAt(element1, [1, 1, 1, 1]);
          var element3 = dom.childAt(element2, [1]);
          var element4 = dom.childAt(element1, [3]);
          var element5 = dom.childAt(fragment, [4, 1]);
          var element6 = dom.childAt(fragment, [8, 1, 1]);
          var element7 = dom.childAt(element6, [3]);
          var element8 = dom.childAt(element6, [5]);
          var element9 = dom.childAt(element6, [7, 1]);
          var morphs = new Array(18);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createAttrMorph(element2, 'title');
          morphs[2] = dom.createElementMorph(element2);
          morphs[3] = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
          morphs[4] = dom.createMorphAt(dom.childAt(element3, [3]), 1, 1);
          morphs[5] = dom.createAttrMorph(element4, 'title');
          morphs[6] = dom.createMorphAt(dom.childAt(element1, [5, 0]), 0, 0);
          morphs[7] = dom.createAttrMorph(element5, 'class');
          morphs[8] = dom.createMorphAt(dom.childAt(element5, [3, 1, 1, 1]), 1, 1);
          morphs[9] = dom.createMorphAt(dom.childAt(fragment, [6]), 1, 1);
          morphs[10] = dom.createMorphAt(dom.childAt(element6, [1]), 1, 1);
          morphs[11] = dom.createMorphAt(dom.childAt(element7, [1]), 1, 1);
          morphs[12] = dom.createMorphAt(element7, 3, 3);
          morphs[13] = dom.createMorphAt(dom.childAt(element8, [1]), 1, 1);
          morphs[14] = dom.createMorphAt(element8, 3, 3);
          morphs[15] = dom.createAttrMorph(element9, 'href');
          morphs[16] = dom.createAttrMorph(element9, 'title');
          morphs[17] = dom.createMorphAt(element9, 1, 1);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "ui-sidebar", [], ["class", "inverted vertical main menu", "ui_context", ".ember-application > .ember-view", "closable", false, "dimPage", false, "onShow", ["subexpr", "action", ["updateWidth"], [], ["loc", [null, [10, 11], [10, 33]]]], "onHidden", ["subexpr", "action", ["updateWidth"], [], ["loc", [null, [11, 13], [11, 35]]]]], 0, null, ["loc", [null, [5, 2], [20, 17]]]], ["attribute", "title", ["subexpr", "t", ["forms.application.header.menu.sitemap-button.title"], [], ["loc", [null, [28, 20], [28, 78]]]]], ["element", "action", ["toggleSidebar"], [], ["loc", [null, [26, 15], [26, 41]]]], ["inline", "t", ["forms.application.header.menu.show-menu.caption"], [], ["loc", [null, [31, 18], [31, 73]]]], ["inline", "t", ["forms.application.header.menu.hide-menu.caption"], [], ["loc", [null, [34, 18], [34, 73]]]], ["attribute", "title", ["subexpr", "t", ["forms.application.sitemap.application-name.title"], [], ["loc", [null, [44, 14], [44, 70]]]]], ["inline", "t", ["application-name"], [], ["loc", [null, [47, 78], [47, 102]]]], ["attribute", "class", ["concat", ["ui form ", ["get", "appState.state", ["loc", [null, [51, 26], [51, 40]]]]]]], ["content", "outlet", ["loc", [null, [57, 14], [57, 24]]]], ["inline", "outlet", ["modal"], [], ["loc", [null, [65, 4], [65, 22]]]], ["inline", "t", ["forms.application.footer.application-name"], [], ["loc", [null, [71, 10], [71, 59]]]], ["inline", "t", ["forms.application.header.menu.user-settings-service-checkbox.caption"], [], ["loc", [null, [75, 12], [75, 88]]]], ["inline", "flexberry-checkbox", [], ["class", "toggle", "value", ["subexpr", "@mut", [["get", "userSettingsService.isUserSettingsServiceEnabled", ["loc", [null, [79, 18], [79, 66]]]]], [], []]], ["loc", [null, [77, 10], [80, 12]]]], ["inline", "t", ["forms.application.header.menu.language-dropdown.caption"], [], ["loc", [null, [84, 12], [84, 75]]]], ["inline", "flexberry-dropdown", [], ["class", "compact", "items", ["subexpr", "@mut", [["get", "locales", ["loc", [null, [88, 18], [88, 25]]]]], [], []], "value", ["subexpr", "@mut", [["get", "i18n.locale", ["loc", [null, [89, 18], [89, 29]]]]], [], []], "placeholder", ["subexpr", "t", ["forms.application.header.menu.language-dropdown.placeholder"], [], ["loc", [null, [90, 24], [90, 89]]]], "direction", "upward"], ["loc", [null, [86, 10], [92, 12]]]], ["attribute", "href", ["get", "addonVersionHref", ["loc", [null, [96, 19], [96, 35]]]]], ["attribute", "title", ["subexpr", "t", ["forms.application.footer.application-version.title"], [], ["loc", [null, [98, 18], [98, 76]]]]], ["inline", "t", ["forms.application.footer.application-version.caption"], ["version", ["subexpr", "@mut", [["get", "addonVersion", ["loc", [null, [99, 81], [99, 93]]]]], [], []]], ["loc", [null, [99, 14], [99, 95]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 106,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/application.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isInAcceptanceTestMode", ["loc", [null, [1, 6], [1, 28]]]]], [], 0, 1, ["loc", [null, [1, 0], [105, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/colsconfig-dialog-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/colsconfig-dialog-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "colsconfig-dialog-content", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "close", "sortByColumnsConfig", "type", ["subexpr", "@mut", [["get", "message.type", ["loc", [null, [4, 7], [4, 19]]]]], [], []], "closeable", true, "visible", ["subexpr", "@mut", [["get", "message.visible", ["loc", [null, [6, 10], [6, 25]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "message.caption", ["loc", [null, [7, 10], [7, 25]]]]], [], []], "message", ["subexpr", "@mut", [["get", "message.message", ["loc", [null, [8, 10], [8, 25]]]]], [], []]], ["loc", [null, [1, 0], [9, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/colsconfig-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/colsconfig-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "outlet", ["modal-content"], [], ["loc", [null, [10, 2], [10, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/colsconfig-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["title", ["subexpr", "if", [["get", "model.exportParams.isExportExcel", ["loc", [null, [2, 12], [2, 44]]]], ["subexpr", "t", ["components.colsconfig-dialog-content.export-modal-dialog-title"], [], ["loc", [null, [2, 45], [2, 113]]]], ["subexpr", "t", ["components.colsconfig-dialog-content.title"], [], ["loc", [null, [2, 114], [2, 162]]]]], [], ["loc", [null, [2, 8], [2, 163]]]], "sizeClass", "small", "close", "removeModalDialog", "created", "createdModalDialog", "useOkButton", false, "useCloseButton", false, "componentName", ["subexpr", "@mut", [["get", "model.componentName", ["loc", [null, [8, 16], [8, 35]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [11, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-acceptance-tests/edit-form-readonly", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 78,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-acceptance-tests/edit-form-readonly.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "not-in-groupedit");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "in-groupedit");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(11);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        morphs[2] = dom.createMorphAt(element0, 3, 3);
        morphs[3] = dom.createMorphAt(element0, 5, 5);
        morphs[4] = dom.createMorphAt(element0, 7, 7);
        morphs[5] = dom.createMorphAt(element0, 9, 9);
        morphs[6] = dom.createMorphAt(element0, 11, 11);
        morphs[7] = dom.createMorphAt(element0, 13, 13);
        morphs[8] = dom.createMorphAt(element0, 15, 15);
        morphs[9] = dom.createMorphAt(element0, 17, 17);
        morphs[10] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.caption"], [], ["loc", [null, [1, 22], [1, 88]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.flag", ["loc", [null, [4, 12], [4, 22]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [5, 15], [5, 23]]]]], [], []], "data-test-checkbox", true], ["loc", [null, [3, 4], [7, 6]]]], ["inline", "flexberry-textbox", [], ["value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [9, 12], [9, 22]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [10, 15], [10, 23]]]]], [], []], "data-test-textbox", true], ["loc", [null, [8, 4], [12, 6]]]], ["inline", "flexberry-textarea", [], ["value", ["subexpr", "@mut", [["get", "model.longText", ["loc", [null, [14, 12], [14, 26]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [15, 15], [15, 23]]]]], [], []], "data-test-textarea", true], ["loc", [null, [13, 4], [17, 6]]]], ["inline", "flexberry-datepicker", [], ["value", ["subexpr", "@mut", [["get", "model.date", ["loc", [null, [19, 12], [19, 22]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [20, 15], [20, 23]]]]], [], []], "data-test-datepicker", true], ["loc", [null, [18, 4], [22, 6]]]], ["inline", "flexberry-simpledatetime", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [24, 15], [24, 23]]]]], [], []], "type", "time", "value", ["subexpr", "@mut", [["get", "model.time", ["loc", [null, [26, 12], [26, 22]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [27, 15], [27, 23]]]]], [], []], "data-test-simpledatetime", true], ["loc", [null, [23, 4], [29, 6]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "flexberry-enum", ["integration-examples/edit-form/readonly-mode/enumeration"], [], ["loc", [null, [31, 12], [31, 87]]]], "value", ["subexpr", "@mut", [["get", "model.enumeration", ["loc", [null, [32, 12], [32, 29]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [33, 15], [33, 23]]]]], [], []]], ["loc", [null, [30, 4], [34, 6]]]], ["inline", "flexberry-file", [], ["value", ["subexpr", "@mut", [["get", "model.file", ["loc", [null, [36, 12], [36, 22]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [37, 15], [37, 23]]]]], [], []], "data-test-file", true], ["loc", [null, [35, 4], [39, 6]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.master", ["loc", [null, [41, 12], [41, 24]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [42, 19], [42, 24]]]]], [], []], "relationName", "master", "projection", "MasterL", "displayAttributeName", "text", "title", ["subexpr", "t", ["forms.integration-examples.edit-form.readonly-mode.master-caption"], [], ["loc", [null, [46, 12], [46, 83]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [47, 13], [47, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [48, 13], [48, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [49, 15], [49, 23]]]]], [], []], "data-test-lookup", true], ["loc", [null, [40, 4], [51, 6]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.masterDropdown", ["loc", [null, [53, 12], [53, 32]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [54, 19], [54, 24]]]]], [], []], "relationName", "masterDropdown", "projection", "MasterDropdownL", "displayAttributeName", "text", "title", ["subexpr", "t", ["forms.integration-examples.edit-form.readonly-mode.master-dropdown-caption"], [], ["loc", [null, [58, 12], [58, 92]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [59, 13], [59, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [60, 13], [60, 41]]]], "dropdown", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [62, 15], [62, 23]]]]], [], []], "data-test-lookup-d", true], ["loc", [null, [52, 4], [64, 6]]]], ["inline", "flexberry-groupedit", [], ["componentName", "aggregatorDetailsGroupedit", "content", ["subexpr", "@mut", [["get", "model.details", ["loc", [null, [69, 14], [69, 27]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.details", ["loc", [null, [70, 22], [70, 56]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [71, 15], [71, 23]]]]], [], []], "showDeleteButtonInRow", true, "showEditMenuItemInRow", true, "showDeleteMenuItemInRow", true, "data-test-groupedit", true], ["loc", [null, [67, 4], [76, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-acceptance-tests/edit-form-validation/validation", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 89,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-acceptance-tests/edit-form-validation/validation.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "inline fields");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [3]);
        var element2 = dom.childAt(element0, [5]);
        var element3 = dom.childAt(element0, [7]);
        var element4 = dom.childAt(element0, [9]);
        var element5 = dom.childAt(element0, [11]);
        var element6 = dom.childAt(element5, [3]);
        var element7 = dom.childAt(element0, [13]);
        var element8 = dom.childAt(element0, [15]);
        var element9 = dom.childAt(element0, [17]);
        var element10 = dom.childAt(element0, [19]);
        var morphs = new Array(37);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 1, 1);
        morphs[2] = dom.createAttrMorph(element1, 'class');
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
        morphs[4] = dom.createMorphAt(element1, 3, 3);
        morphs[5] = dom.createMorphAt(element1, 5, 5);
        morphs[6] = dom.createAttrMorph(element2, 'class');
        morphs[7] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
        morphs[8] = dom.createMorphAt(element2, 3, 3);
        morphs[9] = dom.createMorphAt(element2, 5, 5);
        morphs[10] = dom.createAttrMorph(element3, 'class');
        morphs[11] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
        morphs[12] = dom.createMorphAt(element3, 3, 3);
        morphs[13] = dom.createMorphAt(element3, 5, 5);
        morphs[14] = dom.createAttrMorph(element4, 'class');
        morphs[15] = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
        morphs[16] = dom.createMorphAt(element4, 3, 3);
        morphs[17] = dom.createMorphAt(element4, 5, 5);
        morphs[18] = dom.createAttrMorph(element5, 'class');
        morphs[19] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
        morphs[20] = dom.createMorphAt(element6, 1, 1);
        morphs[21] = dom.createMorphAt(element6, 3, 3);
        morphs[22] = dom.createAttrMorph(element7, 'class');
        morphs[23] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
        morphs[24] = dom.createMorphAt(element7, 3, 3);
        morphs[25] = dom.createMorphAt(element7, 5, 5);
        morphs[26] = dom.createAttrMorph(element8, 'class');
        morphs[27] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[28] = dom.createMorphAt(element8, 3, 3);
        morphs[29] = dom.createMorphAt(element8, 5, 5);
        morphs[30] = dom.createAttrMorph(element9, 'class');
        morphs[31] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        morphs[32] = dom.createMorphAt(element9, 3, 3);
        morphs[33] = dom.createMorphAt(element9, 5, 5);
        morphs[34] = dom.createAttrMorph(element10, 'class');
        morphs[35] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        morphs[36] = dom.createMorphAt(element10, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["forms.integration-examples.edit-form.validation.caption"], [], ["loc", [null, [1, 22], [1, 85]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [5, 43], [5, 55]]]]], [], []]], ["loc", [null, [5, 6], [5, 57]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.flag", ["loc", [null, [8, 25], [8, 42]]]], "error", ""], [], ["loc", [null, [8, 20], [8, 55]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.flag-caption"], [], ["loc", [null, [9, 11], [9, 79]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.flag", ["loc", [null, [11, 12], [11, 22]]]]], [], []]], ["loc", [null, [10, 4], [12, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.flag", ["loc", [null, [13, 40], [13, 57]]]]], [], []], "pointing", "left pointing"], ["loc", [null, [13, 4], [13, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.number", ["loc", [null, [15, 25], [15, 44]]]], "error", ""], [], ["loc", [null, [15, 20], [15, 57]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.number-caption"], [], ["loc", [null, [16, 11], [16, 81]]]], ["inline", "flexberry-textbox", [], ["value", ["subexpr", "@mut", [["get", "model.number", ["loc", [null, [18, 12], [18, 24]]]]], [], []]], ["loc", [null, [17, 4], [19, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.number", ["loc", [null, [20, 40], [20, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [20, 4], [20, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.text", ["loc", [null, [22, 25], [22, 42]]]], "error", ""], [], ["loc", [null, [22, 20], [22, 55]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.text-caption"], [], ["loc", [null, [23, 11], [23, 79]]]], ["inline", "flexberry-textbox", [], ["value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [25, 12], [25, 22]]]]], [], []]], ["loc", [null, [24, 4], [26, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.text", ["loc", [null, [27, 40], [27, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [27, 4], [27, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.longText", ["loc", [null, [29, 25], [29, 46]]]], "error", ""], [], ["loc", [null, [29, 20], [29, 59]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.long-text-caption"], [], ["loc", [null, [30, 9], [30, 82]]]], ["inline", "flexberry-textarea", [], ["value", ["subexpr", "@mut", [["get", "model.longText", ["loc", [null, [32, 12], [32, 26]]]]], [], []]], ["loc", [null, [31, 4], [33, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.longText", ["loc", [null, [34, 40], [34, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [34, 4], [34, 83]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.date", ["loc", [null, [36, 25], [36, 42]]]], "error", ""], [], ["loc", [null, [36, 20], [36, 55]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.date-caption"], [], ["loc", [null, [37, 11], [37, 79]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.date", ["loc", [null, [39, 40], [39, 57]]]]], [], []], "pointing", "right pointing"], ["loc", [null, [39, 4], [39, 85]]]], ["inline", "flexberry-simpledatetime", [], ["type", "date", "value", ["subexpr", "@mut", [["get", "model.date", ["loc", [null, [42, 12], [42, 22]]]]], [], []]], ["loc", [null, [40, 4], [43, 6]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.enumeration", ["loc", [null, [46, 25], [46, 49]]]], "error", ""], [], ["loc", [null, [46, 20], [46, 62]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.enumeration-caption"], [], ["loc", [null, [47, 11], [47, 86]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "flexberry-enum", ["integration-examples/edit-form/validation/enumeration"], [], ["loc", [null, [49, 12], [49, 84]]]], "value", ["subexpr", "@mut", [["get", "model.enumeration", ["loc", [null, [50, 12], [50, 29]]]]], [], []]], ["loc", [null, [48, 4], [51, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.enumeration", ["loc", [null, [52, 40], [52, 64]]]]], [], []], "pointing", "pointing"], ["loc", [null, [52, 4], [52, 86]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.file", ["loc", [null, [54, 25], [54, 42]]]], "error", ""], [], ["loc", [null, [54, 20], [54, 55]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.file-caption"], [], ["loc", [null, [55, 11], [55, 79]]]], ["inline", "flexberry-file", [], ["value", ["subexpr", "@mut", [["get", "model.file", ["loc", [null, [57, 12], [57, 22]]]]], [], []], "showUploadButton", false, "showDownloadButton", false], ["loc", [null, [56, 4], [60, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.file", ["loc", [null, [61, 40], [61, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [61, 4], [61, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.master", ["loc", [null, [63, 25], [63, 44]]]], "error", ""], [], ["loc", [null, [63, 20], [63, 57]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.master-caption"], [], ["loc", [null, [64, 11], [64, 81]]]], ["inline", "flexberry-lookup", [], ["componentName", "IntegrationExamplesValidationsMaster", "value", ["subexpr", "@mut", [["get", "model.master", ["loc", [null, [67, 12], [67, 24]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [68, 19], [68, 24]]]]], [], []], "relationName", "master", "projection", "MasterL", "displayAttributeName", "text", "title", ["subexpr", "t", ["forms.integration-examples.edit-form.validation.master-caption"], [], ["loc", [null, [72, 12], [72, 80]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [73, 13], [73, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [74, 13], [74, 41]]]]], ["loc", [null, [65, 4], [75, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.master", ["loc", [null, [76, 40], [76, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [76, 4], [76, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.files", ["loc", [null, [78, 25], [78, 43]]]], "error", ""], [], ["loc", [null, [78, 20], [78, 56]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.details-caption"], [], ["loc", [null, [79, 11], [79, 82]]]], ["inline", "flexberry-groupedit", [], ["componentName", "IntegrationExamplesEditFormValidationsDetails", "content", ["subexpr", "@mut", [["get", "model.details", ["loc", [null, [82, 14], [82, 27]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [83, 26], [83, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.details", ["loc", [null, [84, 22], [84, 56]]]]], [], []], "orderable", false], ["loc", [null, [80, 4], [86, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 8
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [31, 62], [31, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [31, 80], [31, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 8
              },
              "end": {
                "line": 35,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [34, 68], [34, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [34, 94], [34, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 8
              },
              "end": {
                "line": 38,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [37, 66], [37, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [37, 86], [37, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [30, 23], [30, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [30, 43], [30, 63]]]]], [], ["loc", [null, [30, 38], [30, 64]]]]], [], ["loc", [null, [30, 18], [30, 65]]]]], [], 0, null, ["loc", [null, [30, 8], [32, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [33, 23], [33, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [33, 43], [33, 63]]]]], [], ["loc", [null, [33, 38], [33, 64]]]]], [], ["loc", [null, [33, 18], [33, 65]]]]], [], 1, null, ["loc", [null, [33, 8], [35, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [36, 23], [36, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [36, 44], [36, 58]]]]], [], ["loc", [null, [36, 39], [36, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [36, 65], [36, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [36, 80], [36, 100]]]]], [], ["loc", [null, [36, 60], [36, 101]]]]], [], ["loc", [null, [36, 35], [36, 102]]]]], [], ["loc", [null, [36, 18], [36, 103]]]]], [], 2, null, ["loc", [null, [36, 8], [38, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 175,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [9, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [11]);
        var element7 = dom.childAt(element3, [13]);
        var element8 = dom.childAt(element3, [15]);
        var element9 = dom.childAt(element3, [17]);
        var element10 = dom.childAt(element3, [19]);
        var element11 = dom.childAt(element3, [21]);
        var element12 = dom.childAt(element3, [23]);
        var element13 = dom.childAt(element3, [25]);
        var element14 = dom.childAt(element3, [27]);
        var element15 = dom.childAt(element3, [29]);
        var element16 = dom.childAt(element3, [31]);
        var morphs = new Array(49);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element3, 1, 1);
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createMorphAt(element3, 5, 5);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [7, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 0, 0);
        morphs[8] = dom.createAttrMorph(element6, 'class');
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createAttrMorph(element7, 'class');
        morphs[12] = dom.createMorphAt(element7, 1, 1);
        morphs[13] = dom.createMorphAt(element7, 3, 3);
        morphs[14] = dom.createAttrMorph(element8, 'class');
        morphs[15] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[16] = dom.createMorphAt(element8, 3, 3);
        morphs[17] = dom.createMorphAt(element8, 5, 5);
        morphs[18] = dom.createAttrMorph(element9, 'class');
        morphs[19] = dom.createMorphAt(element9, 1, 1);
        morphs[20] = dom.createMorphAt(element9, 3, 3);
        morphs[21] = dom.createAttrMorph(element10, 'class');
        morphs[22] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        morphs[23] = dom.createMorphAt(element10, 3, 3);
        morphs[24] = dom.createMorphAt(element10, 5, 5);
        morphs[25] = dom.createAttrMorph(element11, 'class');
        morphs[26] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[27] = dom.createMorphAt(element11, 3, 3);
        morphs[28] = dom.createMorphAt(element11, 5, 5);
        morphs[29] = dom.createAttrMorph(element12, 'class');
        morphs[30] = dom.createMorphAt(dom.childAt(element12, [1]), 0, 0);
        morphs[31] = dom.createMorphAt(element12, 3, 3);
        morphs[32] = dom.createMorphAt(element12, 5, 5);
        morphs[33] = dom.createAttrMorph(element13, 'class');
        morphs[34] = dom.createMorphAt(dom.childAt(element13, [1]), 0, 0);
        morphs[35] = dom.createMorphAt(element13, 3, 3);
        morphs[36] = dom.createMorphAt(element13, 5, 5);
        morphs[37] = dom.createAttrMorph(element14, 'class');
        morphs[38] = dom.createMorphAt(dom.childAt(element14, [1]), 0, 0);
        morphs[39] = dom.createMorphAt(element14, 3, 3);
        morphs[40] = dom.createMorphAt(element14, 5, 5);
        morphs[41] = dom.createAttrMorph(element15, 'class');
        morphs[42] = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
        morphs[43] = dom.createMorphAt(element15, 3, 3);
        morphs[44] = dom.createMorphAt(element15, 5, 5);
        morphs[45] = dom.createAttrMorph(element16, 'class');
        morphs[46] = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
        morphs[47] = dom.createMorphAt(element16, 3, 3);
        morphs[48] = dom.createMorphAt(element16, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.caption"], [], ["loc", [null, [1, 22], [1, 81]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [21, 26], [21, 31]]]]], [], []]], ["loc", [null, [21, 2], [21, 33]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [24, 43], [24, 55]]]]], [], []]], ["loc", [null, [24, 6], [24, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [29, 16], [29, 24]]]]], [], 0, null, ["loc", [null, [29, 6], [39, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [40, 59], [40, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [40, 78], [40, 119]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.address", ["loc", [null, [43, 25], [43, 45]]]], "error", ""], [], ["loc", [null, [43, 20], [43, 58]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.address", ["loc", [null, [45, 12], [45, 25]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.address-caption"], [], ["loc", [null, [46, 12], [46, 77]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [47, 15], [47, 23]]]]], [], []]], ["loc", [null, [44, 4], [48, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.address", ["loc", [null, [49, 40], [49, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [49, 4], [49, 82]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.text", ["loc", [null, [51, 25], [51, 42]]]], "error", ""], [], ["loc", [null, [51, 20], [51, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [53, 12], [53, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.text-caption"], [], ["loc", [null, [54, 12], [54, 74]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [55, 15], [55, 23]]]]], [], []]], ["loc", [null, [52, 4], [56, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.text", ["loc", [null, [57, 40], [57, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [57, 4], [57, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.date", ["loc", [null, [59, 25], [59, 42]]]], "error", ""], [], ["loc", [null, [59, 20], [59, 55]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.date-caption"], [], ["loc", [null, [60, 11], [60, 75]]]], ["inline", "flexberry-datepicker", [], ["value", ["subexpr", "@mut", [["get", "model.date", ["loc", [null, [62, 12], [62, 22]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [63, 15], [63, 23]]]]], [], []]], ["loc", [null, [61, 4], [64, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.date", ["loc", [null, [65, 40], [65, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [65, 4], [65, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.votes", ["loc", [null, [67, 25], [67, 43]]]], "error", ""], [], ["loc", [null, [67, 20], [67, 56]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.votes", ["loc", [null, [69, 12], [69, 23]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.votes-caption"], [], ["loc", [null, [70, 12], [70, 75]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [71, 15], [71, 23]]]]], [], []]], ["loc", [null, [68, 4], [72, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.votes", ["loc", [null, [73, 40], [73, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [73, 4], [73, 80]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.moderated", ["loc", [null, [75, 25], [75, 47]]]], "error", ""], [], ["loc", [null, [75, 20], [75, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.moderated-caption"], [], ["loc", [null, [76, 11], [76, 80]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.moderated", ["loc", [null, [78, 12], [78, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [79, 15], [79, 23]]]]], [], []]], ["loc", [null, [77, 4], [80, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.moderated", ["loc", [null, [81, 40], [81, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [81, 4], [81, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.type", ["loc", [null, [83, 25], [83, 42]]]], "error", ""], [], ["loc", [null, [83, 20], [83, 55]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.type-caption"], [], ["loc", [null, [84, 11], [84, 75]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [86, 12], [86, 22]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [87, 19], [87, 24]]]]], [], []], "relationName", "type", "projection", "SuggestionTypeL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.type-caption"], [], ["loc", [null, [91, 12], [91, 74]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [92, 13], [92, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [93, 13], [93, 41]]]], "dropdown", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [95, 15], [95, 23]]]]], [], []], "direction", "upward", "componentName", "SuggestionEditType"], ["loc", [null, [85, 4], [98, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.type", ["loc", [null, [99, 40], [99, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [99, 4], [99, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.author", ["loc", [null, [101, 25], [101, 44]]]], "error", ""], [], ["loc", [null, [101, 20], [101, 57]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [102, 11], [102, 77]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.author", ["loc", [null, [104, 12], [104, 24]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [105, 19], [105, 24]]]]], [], []], "relationName", "author", "projection", "ApplicationUserL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [109, 12], [109, 76]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [110, 13], [110, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [111, 13], [111, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [112, 15], [112, 23]]]]], [], []], "componentName", "SuggestionEditAuthor"], ["loc", [null, [103, 4], [114, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.author", ["loc", [null, [115, 40], [115, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [115, 4], [115, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.editor1", ["loc", [null, [117, 25], [117, 45]]]], "error", ""], [], ["loc", [null, [117, 20], [117, 58]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [118, 11], [118, 78]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.editor1", ["loc", [null, [120, 12], [120, 25]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [121, 19], [121, 24]]]]], [], []], "relationName", "editor1", "projection", "ApplicationUserL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [125, 12], [125, 77]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [126, 13], [126, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [127, 13], [127, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [128, 15], [128, 23]]]]], [], []], "componentName", "SuggestionEditEditor1"], ["loc", [null, [119, 4], [130, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.editor1", ["loc", [null, [131, 40], [131, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [131, 4], [131, 82]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.files", ["loc", [null, [133, 25], [133, 43]]]], "error", ""], [], ["loc", [null, [133, 20], [133, 56]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.files-caption"], [], ["loc", [null, [134, 11], [134, 76]]]], ["inline", "flexberry-groupedit", [], ["componentName", "filesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.files", ["loc", [null, [137, 14], [137, 25]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [138, 26], [138, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.files", ["loc", [null, [139, 22], [139, 54]]]]], [], []], "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [141, 15], [141, 23]]]]], [], []]], ["loc", [null, [135, 4], [142, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.files", ["loc", [null, [143, 40], [143, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [143, 4], [143, 80]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.userVotes", ["loc", [null, [145, 25], [145, 47]]]], "error", ""], [], ["loc", [null, [145, 20], [145, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.userVotes-caption"], [], ["loc", [null, [146, 11], [146, 80]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionUserVotesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.userVotes", ["loc", [null, [149, 14], [149, 29]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [150, 26], [150, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.userVotes", ["loc", [null, [151, 22], [151, 58]]]]], [], []], "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [153, 15], [153, 23]]]]], [], []]], ["loc", [null, [147, 4], [154, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.userVotes", ["loc", [null, [155, 40], [155, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [155, 4], [155, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.comments", ["loc", [null, [157, 25], [157, 46]]]], "error", ""], [], ["loc", [null, [157, 20], [157, 59]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.comments-caption"], [], ["loc", [null, [158, 11], [158, 79]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionCommentsGroupEdit", "content", ["subexpr", "@mut", [["get", "model.comments", ["loc", [null, [161, 14], [161, 28]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [162, 26], [162, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.comments", ["loc", [null, [163, 22], [163, 57]]]]], [], []], "rowClickable", true, "rowClick", "rowClick", "editOnSeparateRoute", true, "editFormRoute", ["subexpr", "@mut", [["get", "commentsEditRoute", ["loc", [null, [167, 20], [167, 37]]]]], [], []], "saveBeforeRouteLeave", true, "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [170, 15], [170, 23]]]]], [], []]], ["loc", [null, [159, 4], [171, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.comments", ["loc", [null, [172, 40], [172, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [172, 4], [172, 83]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-list.caption"], [], ["loc", [null, [2, 4], [2, 63]]]], ["inline", "flexberry-objectlistview", [], ["editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [5, 18], [5, 31]]]]], [], []], "showCheckBoxInRow", true, "modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [8, 20], [8, 35]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [9, 12], [9, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "exportExcelButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [13, 12], [13, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [15, 17], [15, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [16, 23], [16, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [17, 27], [17, 60]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [18, 10], [18, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [19, 17], [19, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [20, 18], [20, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [21, 22], [21, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [22, 20], [22, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [23, 16], [23, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [24, 17], [24, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [25, 13], [25, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [26, 13], [26, 32]]]], "componentName", "SuggestionObjectListView", "showDeleteMenuItemInRow", true, "deleteButton", true], ["loc", [null, [4, 2], [30, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-acceptance-tests/flexberry-lookup/base-operations", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-acceptance-tests/flexberry-lookup/base-operations.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-lookup", [], ["componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [2, 16], [2, 29]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [3, 14], [3, 25]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [4, 11], [4, 19]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [5, 8], [5, 18]]]]], [], []], "projection", ["subexpr", "@mut", [["get", "projection", ["loc", [null, [6, 13], [6, 23]]]]], [], []], "displayAttributeName", ["subexpr", "@mut", [["get", "displayAttributeName", ["loc", [null, [7, 23], [7, 43]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [8, 8], [8, 13]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [9, 15], [9, 20]]]]], [], []], "relationName", ["subexpr", "@mut", [["get", "relationName", ["loc", [null, [10, 15], [10, 27]]]]], [], []], "choose", "showLookupDialog", "remove", "removeLookupValue", "autocomplete", ["subexpr", "@mut", [["get", "autocomplete", ["loc", [null, [13, 15], [13, 27]]]]], [], []], "dropdown", ["subexpr", "@mut", [["get", "dropdown", ["loc", [null, [14, 11], [14, 19]]]]], [], []], "chooseText", ["subexpr", "@mut", [["get", "chooseText", ["loc", [null, [15, 13], [15, 23]]]]], [], []], "removeText", ["subexpr", "@mut", [["get", "removeText", ["loc", [null, [16, 13], [16, 23]]]]], [], []], "chooseButtonClass", ["subexpr", "@mut", [["get", "chooseButtonClass", ["loc", [null, [17, 20], [17, 37]]]]], [], []], "removeButtonClass", ["subexpr", "@mut", [["get", "removeButtonClass", ["loc", [null, [18, 20], [18, 37]]]]], [], []], "lookupLimitPredicate", ["subexpr", "@mut", [["get", "lookupLimitPredicate", ["loc", [null, [19, 23], [19, 43]]]]], [], []]], ["loc", [null, [1, 0], [20, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-actions", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-actions.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-lookup", [], ["componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [2, 16], [2, 29]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [3, 14], [3, 25]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [4, 11], [4, 19]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [5, 8], [5, 18]]]]], [], []], "projection", ["subexpr", "@mut", [["get", "projection", ["loc", [null, [6, 13], [6, 23]]]]], [], []], "displayAttributeName", ["subexpr", "@mut", [["get", "displayAttributeName", ["loc", [null, [7, 23], [7, 43]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [8, 8], [8, 13]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [9, 15], [9, 20]]]]], [], []], "relationName", ["subexpr", "@mut", [["get", "relationName", ["loc", [null, [10, 15], [10, 27]]]]], [], []], "choose", "showLookupDialog", "remove", "removeLookupValue", "autocomplete", ["subexpr", "@mut", [["get", "autocomplete", ["loc", [null, [13, 15], [13, 27]]]]], [], []], "dropdown", ["subexpr", "@mut", [["get", "dropdown", ["loc", [null, [14, 11], [14, 19]]]]], [], []], "chooseText", ["subexpr", "@mut", [["get", "chooseText", ["loc", [null, [15, 13], [15, 23]]]]], [], []], "removeText", ["subexpr", "@mut", [["get", "removeText", ["loc", [null, [16, 13], [16, 23]]]]], [], []], "chooseButtonClass", ["subexpr", "@mut", [["get", "chooseButtonClass", ["loc", [null, [17, 20], [17, 37]]]]], [], []], "removeButtonClass", ["subexpr", "@mut", [["get", "removeButtonClass", ["loc", [null, [18, 20], [18, 37]]]]], [], []], "lookupLimitPredicate", ["subexpr", "@mut", [["get", "lookupLimitPredicate", ["loc", [null, [19, 23], [19, 43]]]]], [], []], "choose", ["subexpr", "action", ["externalChooseAction"], [], ["loc", [null, [20, 9], [20, 40]]]], "remove", ["subexpr", "action", ["externalRemoveAction"], [], ["loc", [null, [21, 9], [21, 40]]]]], ["loc", [null, [1, 0], [22, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-autocomplete", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-autocomplete.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-lookup", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [2, 14], [2, 25]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [3, 11], [3, 19]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [4, 8], [4, 18]]]]], [], []], "projection", "SettingLookupExampleView", "displayAttributeName", "name", "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [7, 8], [7, 13]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [8, 15], [8, 20]]]]], [], []], "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "autocomplete", ["subexpr", "@mut", [["get", "autocomplete", ["loc", [null, [12, 15], [12, 27]]]]], [], []], "dropdown", ["subexpr", "@mut", [["get", "dropdown", ["loc", [null, [13, 11], [13, 19]]]]], [], []], "chooseText", ["subexpr", "@mut", [["get", "chooseText", ["loc", [null, [14, 13], [14, 23]]]]], [], []], "removeText", ["subexpr", "@mut", [["get", "removeText", ["loc", [null, [15, 13], [15, 23]]]]], [], []], "chooseButtonClass", ["subexpr", "@mut", [["get", "chooseButtonClass", ["loc", [null, [16, 20], [16, 37]]]]], [], []], "removeButtonClass", ["subexpr", "@mut", [["get", "removeButtonClass", ["loc", [null, [17, 20], [17, 37]]]]], [], []], "autocomplete", true], ["loc", [null, [1, 0], [19, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-autofill-by-limit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 51,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-autofill-by-limit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "field base isreadonly");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "field base isclean");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "field exist");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        return morphs;
      },
      statements: [["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.readonly.type", ["loc", [null, [3, 10], [3, 29]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model.readonly", ["loc", [null, [4, 17], [4, 31]]]]], [], []], "projection", "LookupWithLimitFunctionExampleView", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.components-examples.flexberry-lookup.autofill-by-limit-example.titleLookup"], [], ["loc", [null, [7, 10], [7, 96]]]], "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "readonly", true, "lookupLimitPredicate", ["subexpr", "@mut", [["get", "lookupCustomLimitPredicate", ["loc", [null, [12, 25], [12, 51]]]]], [], []], "autocomplete", true, "autofillByLimit", true], ["loc", [null, [2, 2], [15, 4]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.base.type", ["loc", [null, [20, 10], [20, 25]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model.base", ["loc", [null, [21, 17], [21, 27]]]]], [], []], "projection", "LookupWithLimitFunctionExampleView", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.components-examples.flexberry-lookup.autofill-by-limit-example.titleLookup"], [], ["loc", [null, [24, 10], [24, 96]]]], "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [28, 13], [28, 21]]]]], [], []], "lookupLimitPredicate", ["subexpr", "@mut", [["get", "lookupCustomLimitPredicate", ["loc", [null, [29, 25], [29, 51]]]]], [], []], "autocomplete", true, "autofillByLimit", true], ["loc", [null, [19, 2], [32, 4]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.exist.type", ["loc", [null, [37, 10], [37, 26]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model.exist", ["loc", [null, [38, 17], [38, 28]]]]], [], []], "projection", "LookupWithLimitFunctionExampleView", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.components-examples.flexberry-lookup.autofill-by-limit-example.titleLookup"], [], ["loc", [null, [41, 10], [41, 96]]]], "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [45, 13], [45, 21]]]]], [], []], "lookupLimitPredicate", ["subexpr", "@mut", [["get", "lookupCustomLimitPredicate", ["loc", [null, [46, 25], [46, 51]]]]], [], []], "autocomplete", true, "autofillByLimit", true], ["loc", [null, [36, 2], [49, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-dropdown", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-dropdown.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-lookup", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [2, 14], [2, 25]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [3, 11], [3, 19]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [4, 8], [4, 18]]]]], [], []], "projection", "SettingLookupExampleView", "displayAttributeName", "name", "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [7, 8], [7, 13]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [8, 15], [8, 20]]]]], [], []], "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "autocomplete", ["subexpr", "@mut", [["get", "autocomplete", ["loc", [null, [12, 15], [12, 27]]]]], [], []], "dropdown", ["subexpr", "@mut", [["get", "dropdown", ["loc", [null, [13, 11], [13, 19]]]]], [], []], "chooseText", ["subexpr", "@mut", [["get", "chooseText", ["loc", [null, [14, 13], [14, 23]]]]], [], []], "removeText", ["subexpr", "@mut", [["get", "removeText", ["loc", [null, [15, 13], [15, 23]]]]], [], []], "chooseButtonClass", ["subexpr", "@mut", [["get", "chooseButtonClass", ["loc", [null, [16, 20], [16, 37]]]]], [], []], "removeButtonClass", ["subexpr", "@mut", [["get", "removeButtonClass", ["loc", [null, [17, 20], [17, 37]]]]], [], []], "dropdown", true], ["loc", [null, [1, 0], [19, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-limit-function", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-limit-function.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("br");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "class", "ui button limitFunction");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [5]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[2] = dom.createElementMorph(element1);
        morphs[3] = dom.createMorphAt(element1, 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.limit-function-through-dynamic-properties-example.caption"], [], ["loc", [null, [1, 22], [1, 130]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [5, 12], [5, 22]]]]], [], []], "projection", "SettingLookupExampleView", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.components-examples.flexberry-lookup.limit-function-example.titleLookup"], [], ["loc", [null, [8, 12], [8, 95]]]], "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [12, 15], [12, 23]]]]], [], []], "autocomplete", true, "dynamicProperties", ["subexpr", "@mut", [["get", "dynamicProperties", ["loc", [null, [14, 24], [14, 41]]]]], [], []]], ["loc", [null, [4, 4], [15, 6]]]], ["element", "action", ["limitFunction"], ["on", "click"], ["loc", [null, [18, 42], [18, 79]]]], ["inline", "concat", [["subexpr", "t", ["forms.components-examples.flexberry-lookup.limit-function-through-dynamic-properties-example.captionFirstLimitFunction"], [], ["loc", [null, [19, 13], [19, 137]]]], ": ", ["get", "limitType", ["loc", [null, [19, 143], [19, 152]]]]], [], ["loc", [null, [19, 4], [19, 154]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-preview-page", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 8
              },
              "end": {
                "line": 27,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-preview-page.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [26, 62], [26, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [26, 80], [26, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-preview-page.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [29, 68], [29, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [29, 94], [29, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 8
              },
              "end": {
                "line": 33,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-preview-page.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [32, 66], [32, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [32, 86], [32, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 6
            },
            "end": {
              "line": 34,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-preview-page.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [25, 23], [25, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [25, 43], [25, 63]]]]], [], ["loc", [null, [25, 38], [25, 64]]]]], [], ["loc", [null, [25, 18], [25, 65]]]]], [], 0, null, ["loc", [null, [25, 8], [27, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [28, 23], [28, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [28, 43], [28, 63]]]]], [], ["loc", [null, [28, 38], [28, 64]]]]], [], ["loc", [null, [28, 18], [28, 65]]]]], [], 1, null, ["loc", [null, [28, 8], [30, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [31, 23], [31, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [31, 44], [31, 58]]]]], [], ["loc", [null, [31, 39], [31, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [31, 65], [31, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [31, 80], [31, 100]]]]], [], ["loc", [null, [31, 60], [31, 101]]]]], [], ["loc", [null, [31, 35], [31, 102]]]]], [], ["loc", [null, [31, 18], [31, 103]]]]], [], 2, null, ["loc", [null, [31, 8], [33, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 46,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-preview-page.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("-->");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [7, 1]);
        var element5 = dom.childAt(element4, [3]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element3, 1, 1);
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createMorphAt(element3, 5, 5);
        morphs[4] = dom.createMorphAt(element4, 1, 1);
        morphs[5] = dom.createElementMorph(element5);
        morphs[6] = dom.createMorphAt(element5, 0, 0);
        morphs[7] = dom.createMorphAt(dom.childAt(element3, [9]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.caption"], [], ["loc", [null, [1, 22], [1, 87]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [21, 26], [21, 31]]]]], [], []]], ["loc", [null, [21, 2], [21, 33]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [24, 16], [24, 24]]]]], [], 0, null, ["loc", [null, [24, 6], [34, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [35, 59], [35, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [35, 78], [35, 119]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [40, 12], [40, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.name-caption"], [], ["loc", [null, [41, 12], [41, 80]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [42, 15], [42, 23]]]]], [], []]], ["loc", [null, [39, 4], [43, 6]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-preview", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 63,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-preview.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "in-modal");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "in-separate-route");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "in-groupedit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        return morphs;
      },
      statements: [["inline", "flexberry-lookup", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [4, 16], [4, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [5, 13], [5, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.author", ["loc", [null, [6, 10], [6, 22]]]]], [], []], "projection", "PreviewExampleView", "displayAttributeName", "name", "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [9, 10], [9, 15]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [10, 17], [10, 22]]]]], [], []], "relationName", "author", "showPreviewButton", true, "previewFormRoute", "components-acceptance-tests/flexberry-lookup/settings-example-preview-page", "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [14, 11], [14, 38]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [15, 11], [15, 39]]]], "preview", ["subexpr", "action", ["previewLookupValue"], [], ["loc", [null, [16, 12], [16, 41]]]], "autocomplete", ["subexpr", "@mut", [["get", "autocomplete", ["loc", [null, [17, 17], [17, 29]]]]], [], []], "dropdown", ["subexpr", "@mut", [["get", "dropdown", ["loc", [null, [18, 13], [18, 21]]]]], [], []], "chooseText", ["subexpr", "@mut", [["get", "chooseText", ["loc", [null, [19, 15], [19, 25]]]]], [], []], "removeText", ["subexpr", "@mut", [["get", "removeText", ["loc", [null, [20, 15], [20, 25]]]]], [], []], "chooseButtonClass", ["subexpr", "@mut", [["get", "chooseButtonClass", ["loc", [null, [21, 22], [21, 39]]]]], [], []], "removeButtonClass", ["subexpr", "@mut", [["get", "removeButtonClass", ["loc", [null, [22, 22], [22, 39]]]]], [], []], "previewButtonClass", ["subexpr", "@mut", [["get", "previewButtonClass", ["loc", [null, [23, 23], [23, 41]]]]], [], []]], ["loc", [null, [2, 2], [24, 4]]]], ["inline", "flexberry-lookup", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [29, 16], [29, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [30, 13], [30, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.editor1", ["loc", [null, [31, 10], [31, 23]]]]], [], []], "projection", "PreviewExampleView", "displayAttributeName", "name", "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [34, 10], [34, 15]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [35, 17], [35, 22]]]]], [], []], "relationName", "editor1", "showPreviewButton", true, "previewOnSeparateRoute", true, "previewFormRoute", "components-acceptance-tests/flexberry-lookup/settings-example-preview-page", "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [40, 11], [40, 38]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [41, 11], [41, 39]]]], "preview", ["subexpr", "action", ["previewLookupValue"], [], ["loc", [null, [42, 12], [42, 41]]]], "autocomplete", ["subexpr", "@mut", [["get", "autocomplete", ["loc", [null, [43, 17], [43, 29]]]]], [], []], "dropdown", ["subexpr", "@mut", [["get", "dropdown", ["loc", [null, [44, 13], [44, 21]]]]], [], []], "chooseText", ["subexpr", "@mut", [["get", "chooseText", ["loc", [null, [45, 15], [45, 25]]]]], [], []], "removeText", ["subexpr", "@mut", [["get", "removeText", ["loc", [null, [46, 15], [46, 25]]]]], [], []], "chooseButtonClass", ["subexpr", "@mut", [["get", "chooseButtonClass", ["loc", [null, [47, 22], [47, 39]]]]], [], []], "removeButtonClass", ["subexpr", "@mut", [["get", "removeButtonClass", ["loc", [null, [48, 22], [48, 39]]]]], [], []], "previewButtonClass", ["subexpr", "@mut", [["get", "previewButtonClass", ["loc", [null, [49, 23], [49, 41]]]]], [], []]], ["loc", [null, [27, 2], [50, 4]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionUserVotesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.userVotes", ["loc", [null, [55, 12], [55, 27]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [56, 24], [56, 39]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.userVotes", ["loc", [null, [57, 20], [57, 56]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [58, 13], [58, 21]]]]], [], []], "createNewButton", false, "deleteButton", false], ["loc", [null, [53, 2], [61, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-projection", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 2
          }
        },
        "moduleName": "dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-projection.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "flexberry-lookup", [], ["folvComponentName", "SuggestionTypeObjectlistView", "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [3, 14], [3, 25]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [4, 11], [4, 19]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [5, 8], [5, 18]]]]], [], []], "projection", "SuggestionTypeE", "displayAttributeName", "name", "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [8, 8], [8, 13]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [9, 15], [9, 20]]]]], [], []], "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "autocomplete", ["subexpr", "@mut", [["get", "autocomplete", ["loc", [null, [13, 15], [13, 27]]]]], [], []], "dropdown", ["subexpr", "@mut", [["get", "dropdown", ["loc", [null, [14, 11], [14, 19]]]]], [], []], "chooseText", ["subexpr", "@mut", [["get", "chooseText", ["loc", [null, [15, 13], [15, 23]]]]], [], []], "removeText", ["subexpr", "@mut", [["get", "removeText", ["loc", [null, [16, 13], [16, 23]]]]], [], []], "chooseButtonClass", ["subexpr", "@mut", [["get", "chooseButtonClass", ["loc", [null, [17, 20], [17, 37]]]]], [], []], "removeButtonClass", ["subexpr", "@mut", [["get", "removeButtonClass", ["loc", [null, [18, 20], [18, 37]]]]], [], []], "lookupLimitPredicate", ["subexpr", "@mut", [["get", "lookupLimitPredicate", ["loc", [null, [19, 23], [19, 43]]]]], [], []], "notUseUserSettings", ["subexpr", "@mut", [["get", "notUseUserSettings", ["loc", [null, [20, 21], [20, 39]]]]], [], []]], ["loc", [null, [1, 0], [21, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-relation-name", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example-relation-name.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-lookup", [], ["componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [2, 16], [2, 29]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [3, 14], [3, 25]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [4, 11], [4, 19]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [5, 8], [5, 18]]]]], [], []], "projection", ["subexpr", "@mut", [["get", "projection", ["loc", [null, [6, 13], [6, 23]]]]], [], []], "displayAttributeName", ["subexpr", "@mut", [["get", "displayAttributeName", ["loc", [null, [7, 23], [7, 43]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [8, 8], [8, 13]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [9, 15], [9, 20]]]]], [], []], "relationName", ["subexpr", "@mut", [["get", "relationName", ["loc", [null, [10, 15], [10, 27]]]]], [], []], "choose", "showLookupDialog", "remove", "removeLookupValue", "autocomplete", ["subexpr", "@mut", [["get", "autocomplete", ["loc", [null, [13, 15], [13, 27]]]]], [], []], "dropdown", ["subexpr", "@mut", [["get", "dropdown", ["loc", [null, [14, 11], [14, 19]]]]], [], []], "chooseText", ["subexpr", "@mut", [["get", "chooseText", ["loc", [null, [15, 13], [15, 23]]]]], [], []], "removeText", ["subexpr", "@mut", [["get", "removeText", ["loc", [null, [16, 13], [16, 23]]]]], [], []], "chooseButtonClass", ["subexpr", "@mut", [["get", "chooseButtonClass", ["loc", [null, [17, 20], [17, 37]]]]], [], []], "removeButtonClass", ["subexpr", "@mut", [["get", "removeButtonClass", ["loc", [null, [18, 20], [18, 37]]]]], [], []], "lookupLimitPredicate", ["subexpr", "@mut", [["get", "lookupLimitPredicate", ["loc", [null, [19, 23], [19, 43]]]]], [], []]], ["loc", [null, [1, 0], [20, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-acceptance-tests/flexberry-lookup/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-lookup", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [2, 14], [2, 25]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [3, 11], [3, 19]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [4, 8], [4, 18]]]]], [], []], "projection", "SettingLookupExampleView", "displayAttributeName", "name", "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [7, 8], [7, 13]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [8, 15], [8, 20]]]]], [], []], "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "autocomplete", ["subexpr", "@mut", [["get", "autocomplete", ["loc", [null, [12, 15], [12, 27]]]]], [], []], "dropdown", ["subexpr", "@mut", [["get", "dropdown", ["loc", [null, [13, 11], [13, 19]]]]], [], []], "chooseText", ["subexpr", "@mut", [["get", "chooseText", ["loc", [null, [14, 13], [14, 23]]]]], [], []], "removeText", ["subexpr", "@mut", [["get", "removeText", ["loc", [null, [15, 13], [15, 23]]]]], [], []], "chooseButtonClass", ["subexpr", "@mut", [["get", "chooseButtonClass", ["loc", [null, [16, 20], [16, 37]]]]], [], []], "removeButtonClass", ["subexpr", "@mut", [["get", "removeButtonClass", ["loc", [null, [17, 20], [17, 37]]]]], [], []], "lookupLimitPredicate", ["subexpr", "@mut", [["get", "lookupLimitPredicate", ["loc", [null, [18, 23], [18, 43]]]]], [], []]], ["loc", [null, [1, 0], [19, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-acceptance-tests/flexberry-objectlistview/base-operations", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-acceptance-tests/flexberry-objectlistview/base-operations.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-objectlistview", [], ["editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [2, 16], [2, 29]]]]], [], []], "showCheckBoxInRow", true, "modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 18], [5, 33]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [6, 10], [6, 15]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [9, 10], [9, 25]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [11, 15], [11, 38]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [12, 21], [12, 50]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [13, 8], [13, 13]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [14, 15], [14, 27]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [15, 16], [15, 29]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [16, 20], [16, 37]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 18], [17, 33]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 14], [18, 25]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 15], [19, 38]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 11], [20, 30]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 11], [21, 30]]]], "componentName", "FOLVSettingExampleObjectListView", "showDeleteMenuItemInRow", true, "deleteButton", true, "rowClickable", ["subexpr", "@mut", [["get", "rowClickable", ["loc", [null, [25, 15], [25, 27]]]]], [], []], "data-test-olv", true], ["loc", [null, [1, 0], [27, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-acceptance-tests/flexberry-objectlistview/computable-field", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-acceptance-tests/flexberry-objectlistview/computable-field.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-objectlistview", [], ["editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [2, 16], [2, 29]]]]], [], []], "showCheckBoxInRow", true, "modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 18], [5, 33]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [6, 10], [6, 15]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [9, 10], [9, 25]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [11, 15], [11, 38]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [12, 21], [12, 50]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [13, 8], [13, 13]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [14, 15], [14, 27]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [15, 16], [15, 29]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [16, 20], [16, 37]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 18], [17, 33]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 14], [18, 25]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 15], [19, 38]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 11], [20, 30]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 11], [21, 30]]]], "componentName", "FOLVSettingExampleObjectListView", "showDeleteMenuItemInRow", true, "deleteButton", true, "rowClickable", ["subexpr", "@mut", [["get", "rowClickable", ["loc", [null, [25, 15], [25, 27]]]]], [], []]], ["loc", [null, [1, 0], [26, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-acceptance-tests/flexberry-objectlistview/custom-filter", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 42,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-acceptance-tests/flexberry-objectlistview/custom-filter.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-objectlistview.custom-filter.caption"], [], ["loc", [null, [1, 4], [1, 84]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 20], [6, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [7, 18], [7, 31]]]]], [], []], "createNewButton", false, "refreshButton", true, "enableFilters", true, "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [11, 12], [11, 19]]]]], [], []], "applyFilters", ["subexpr", "action", ["applyFilters"], [], ["loc", [null, [12, 17], [12, 40]]]], "resetFilters", ["subexpr", "action", ["resetFilters"], [], ["loc", [null, [13, 17], [13, 40]]]], "componentForFilter", ["subexpr", "action", ["componentForFilter"], [], ["loc", [null, [14, 23], [14, 52]]]], "conditionsByType", ["subexpr", "action", ["conditionsByType"], [], ["loc", [null, [15, 21], [15, 48]]]], "filterButton", true, "filterText", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [17, 15], [17, 21]]]]], [], []], "filterByAnyWord", ["subexpr", "@mut", [["get", "filterByAnyWord", ["loc", [null, [18, 20], [18, 35]]]]], [], []], "filterByAllWords", ["subexpr", "@mut", [["get", "filterByAllWords", ["loc", [null, [19, 21], [19, 37]]]]], [], []], "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [20, 21], [20, 48]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [21, 27], [21, 60]]]], "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [22, 12], [22, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [24, 10], [24, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [25, 17], [25, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [26, 18], [26, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [27, 22], [27, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [28, 20], [28, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [29, 16], [29, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [30, 17], [30, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [31, 23], [31, 52]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [32, 17], [32, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [33, 13], [33, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [34, 13], [34, 32]]]], "colsConfigButton", false, "componentName", "FOLVCustomFilterObjectListView", "customButtons", ["subexpr", "@mut", [["get", "customButtons", ["loc", [null, [37, 18], [37, 31]]]]], [], []], "toggleFilterByAnyWord", "toggleFilterByAnyWord", "toggleFilterByAllWords", "toggleFilterByAllWords"], ["loc", [null, [3, 2], [40, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-acceptance-tests/flexberry-objectlistview/date-format", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-acceptance-tests/flexberry-objectlistview/date-format.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-objectlistview", [], ["editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [2, 16], [2, 29]]]]], [], []], "showCheckBoxInRow", true, "modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 18], [5, 33]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [6, 10], [6, 15]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [9, 10], [9, 25]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [11, 15], [11, 38]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [12, 21], [12, 50]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [13, 8], [13, 13]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [14, 15], [14, 27]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [15, 16], [15, 29]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [16, 20], [16, 37]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 18], [17, 33]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 14], [18, 25]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 15], [19, 38]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 11], [20, 30]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 11], [21, 30]]]], "componentName", "SuggestionTypeObjectListView", "showDeleteMenuItemInRow", true, "deleteButton", true, "rowClickable", ["subexpr", "@mut", [["get", "rowClickable", ["loc", [null, [25, 15], [25, 27]]]]], [], []]], ["loc", [null, [1, 0], [26, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-acceptance-tests/flexberry-objectlistview/folv-filter", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-acceptance-tests/flexberry-objectlistview/folv-filter.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-objectlistview", [], ["editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [2, 16], [2, 29]]]]], [], []], "modelName", ["subexpr", "@mut", [["get", "modelName", ["loc", [null, [3, 12], [3, 21]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [4, 18], [4, 33]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [5, 10], [5, 15]]]]], [], []], "refreshButton", ["subexpr", "@mut", [["get", "refreshButton", ["loc", [null, [6, 16], [6, 29]]]]], [], []], "orderable", ["subexpr", "@mut", [["get", "orderable", ["loc", [null, [7, 12], [7, 21]]]]], [], []], "colsConfigButton", ["subexpr", "@mut", [["get", "colsConfigButton", ["loc", [null, [8, 19], [8, 35]]]]], [], []], "rowClickable", ["subexpr", "@mut", [["get", "rowClickable", ["loc", [null, [9, 15], [9, 27]]]]], [], []], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [10, 8], [10, 13]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [11, 15], [11, 27]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [12, 16], [12, 29]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [13, 20], [13, 37]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [14, 18], [14, 33]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [15, 14], [15, 25]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [16, 15], [16, 38]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [17, 11], [17, 30]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [18, 11], [18, 30]]]], "componentName", "FOLVSettingExampleObjectListView", "enableFilters", true, "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [21, 10], [21, 17]]]]], [], []], "applyFilters", ["subexpr", "action", ["applyFilters"], [], ["loc", [null, [22, 15], [22, 38]]]], "resetFilters", ["subexpr", "action", ["resetFilters"], [], ["loc", [null, [23, 15], [23, 38]]]]], ["loc", [null, [1, 0], [24, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-acceptance-tests/flexberry-objectlistview/folv-paging", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-acceptance-tests/flexberry-objectlistview/folv-paging.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-objectlistview", [], ["editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [2, 16], [2, 29]]]]], [], []], "showCheckBoxInRow", true, "modelName", ["subexpr", "@mut", [["get", "modelName", ["loc", [null, [4, 12], [4, 21]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 18], [5, 33]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [6, 10], [6, 15]]]]], [], []], "createNewButton", true, "refreshButton", true, "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [9, 24], [9, 45]]]]], [], []], "showEditButtonInRow", ["subexpr", "@mut", [["get", "showEditButtonInRow", ["loc", [null, [10, 22], [10, 41]]]]], [], []], "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [11, 10], [11, 25]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [13, 15], [13, 38]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [14, 21], [14, 50]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [15, 8], [15, 13]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [16, 15], [16, 27]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [17, 16], [17, 29]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [18, 20], [18, 37]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [19, 18], [19, 33]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [20, 14], [20, 25]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [21, 15], [21, 38]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [22, 11], [22, 30]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [23, 11], [23, 30]]]], "componentName", "FOLVPagingObjectListView", "showDeleteMenuItemInRow", true, "deleteButton", true, "rowClickable", ["subexpr", "@mut", [["get", "rowClickable", ["loc", [null, [27, 15], [27, 27]]]]], [], []], "data-test-olv", true], ["loc", [null, [1, 0], [29, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-button/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-button/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-button", [], ["class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [11, 14], [11, 19]]]]], [], []], "iconClass", ["subexpr", "@mut", [["get", "iconClass", ["loc", [null, [12, 18], [12, 27]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "caption", ["loc", [null, [13, 16], [13, 23]]]]], [], []], "tooltip", ["subexpr", "@mut", [["get", "tooltip", ["loc", [null, [14, 16], [14, 23]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [15, 17], [15, 25]]]]], [], []], "click", ["subexpr", "action", ["onButtonClick"], [], ["loc", [null, [16, 14], [16, 38]]]]], ["loc", [null, [10, 6], [17, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-button/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-button.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 97]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []], "componentBlockOverflow", "visible"], 0, null, ["loc", [null, [4, 4], [18, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-checkbox/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-checkbox/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.flag", ["loc", [null, [11, 14], [11, 24]]]]], [], []], "label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [12, 14], [12, 19]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [13, 17], [13, 25]]]]], [], []], "class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [14, 14], [14, 19]]]]], [], []]], ["loc", [null, [10, 6], [15, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-checkbox/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-checkbox.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 99]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []], "componentBlockOverflow", "visible"], 0, null, ["loc", [null, [4, 4], [16, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-checkbox/three-state-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 7
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-checkbox/three-state-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-checkbox.three-state-example.caption"], [], ["loc", [null, [2, 2], [3, 4]]]], ["inline", "flexberry-checkbox", [], ["isNullable", true, "value", ["subexpr", "@mut", [["get", "model.flag", ["loc", [null, [9, 12], [9, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.components-examples.flexberry-checkbox.three-state-example.caption"], [], ["loc", [null, [10, 12], [12, 7]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [13, 15], [13, 23]]]]], [], []]], ["loc", [null, [7, 4], [14, 6]]]], ["inline", "flexberry-button", [], ["caption", ["subexpr", "t", ["forms.components-examples.flexberry-checkbox.three-state-example.indeterminate-button"], [], ["loc", [null, [17, 12], [19, 5]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [20, 13], [20, 21]]]]], [], []], "click", ["subexpr", "action", ["setIndeterminate"], [], ["loc", [null, [21, 10], [21, 37]]]]], ["loc", [null, [16, 2], [22, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-datepicker/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-datepicker/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-datepicker", [], ["dateTimeFormat", ["subexpr", "@mut", [["get", "dateTimeFormat", ["loc", [null, [11, 23], [11, 37]]]]], [], []], "hasTimePicker", ["subexpr", "@mut", [["get", "hasTimePicker", ["loc", [null, [12, 22], [12, 35]]]]], [], []], "minDate", ["subexpr", "@mut", [["get", "minDate", ["loc", [null, [13, 16], [13, 23]]]]], [], []], "maxDate", ["subexpr", "@mut", [["get", "maxDate", ["loc", [null, [14, 16], [14, 23]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.date", ["loc", [null, [15, 14], [15, 24]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [16, 20], [16, 31]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [17, 17], [17, 25]]]]], [], []], "drops", "up"], ["loc", [null, [10, 6], [19, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-datepicker/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-datepicker.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 101]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []], "componentBlockOverflow", "visible"], 0, null, ["loc", [null, [4, 4], [20, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-ddau-checkbox/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 17,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-ddau-checkbox/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-ddau-checkbox", [], ["class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [11, 14], [11, 19]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.flag", ["loc", [null, [12, 14], [12, 24]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "caption", ["loc", [null, [13, 16], [13, 23]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [14, 17], [14, 25]]]]], [], []], "change", ["subexpr", "action", ["onCheckboxChange", "model.flag"], [], ["loc", [null, [15, 15], [15, 55]]]]], ["loc", [null, [10, 6], [16, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-ddau-checkbox/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-ddau-checkbox.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 104]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []], "componentBlockOverflow", "visible"], 0, null, ["loc", [null, [4, 4], [17, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-dropdown/conditional-render-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 4
            },
            "end": {
              "line": 15,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-dropdown/conditional-render-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.enumeration", ["loc", [null, [14, 12], [14, 33]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 4
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-dropdown/conditional-render-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-dropdown", [], ["items", ["subexpr", "flexberry-enum", ["components-examples/flexberry-dropdown/conditional-render-example/enumeration"], [], ["loc", [null, [17, 14], [17, 110]]]], "value", ["subexpr", "@mut", [["get", "model.enumeration", ["loc", [null, [18, 14], [18, 31]]]]], [], []]], ["loc", [null, [16, 6], [19, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-dropdown/conditional-render-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2, 1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        morphs[2] = dom.createMorphAt(element0, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-dropdown.conditional-render-example.caption"], [], ["loc", [null, [1, 22], [1, 109]]]], ["inline", "ui-message", [], ["type", "info", "closeable", false, "visible", true, "icon", "info circle icon", "title", ["subexpr", "t", ["forms.components-examples.flexberry-dropdown.conditional-render-example.info-caption"], [], ["loc", [null, [9, 12], [9, 102]]]], "message", ["subexpr", "@mut", [["get", "infoMessage", ["loc", [null, [10, 14], [10, 25]]]]], [], []]], ["loc", [null, [4, 4], [11, 6]]]], ["block", "if", [["get", "model.enumeration", ["loc", [null, [13, 10], [13, 27]]]]], [], 0, 1, ["loc", [null, [13, 4], [20, 11]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-dropdown/empty-value-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-dropdown/empty-value-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui info message");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "header");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-dropdown.empty-value-example.caption"], [], ["loc", [null, [1, 22], [1, 102]]]], ["inline", "t", ["forms.components-examples.flexberry-dropdown.empty-value-example.message"], [], ["loc", [null, [5, 4], [5, 84]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "flexberry-enum", ["components-examples/flexberry-dropdown/empty-value-example/enumeration"], [], ["loc", [null, [10, 12], [10, 101]]]], "value", "Enum value №2"], ["loc", [null, [9, 4], [12, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-dropdown/items-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-dropdown/items-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui action fluid input");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "class", "ui button icon");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "large remove circle icon");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [5, 1]);
        var element2 = dom.childAt(element1, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        morphs[3] = dom.createMorphAt(element1, 1, 1);
        morphs[4] = dom.createElementMorph(element2);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-dropdown.items-example.caption"], [], ["loc", [null, [1, 22], [1, 96]]]], ["inline", "ui-message", [], ["type", "info", "closeable", false, "visible", true, "icon", "info circle icon", "title", ["subexpr", "t", ["forms.components-examples.flexberry-dropdown.items-example.info-caption"], [], ["loc", [null, [8, 10], [8, 87]]]], "message", ["subexpr", "@mut", [["get", "message", ["loc", [null, [9, 12], [9, 19]]]]], [], []]], ["loc", [null, [3, 2], [10, 4]]]], ["inline", "flexberry-checkbox", [], ["class", ["subexpr", "concat", [["subexpr", "if", [["get", "value", ["loc", [null, [13, 24], [13, 29]]]], "disabled"], [], ["loc", [null, [13, 20], [13, 41]]]], " toggle"], [], ["loc", [null, [13, 12], [13, 52]]]], "onChange", ["subexpr", "action", ["checked"], [], ["loc", [null, [14, 15], [14, 33]]]], "label", ["subexpr", "t", ["forms.components-examples.flexberry-dropdown.items-example.checkbox-caption"], [], ["loc", [null, [15, 12], [15, 93]]]]], ["loc", [null, [12, 4], [16, 6]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "@mut", [["get", "currentItems", ["loc", [null, [22, 14], [22, 26]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [23, 20], [23, 31]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [24, 17], [24, 25]]]]], [], []], "class", "fluid", "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [26, 14], [26, 19]]]]], [], []]], ["loc", [null, [21, 6], [27, 8]]]], ["element", "action", ["resetValue"], [], ["loc", [null, [28, 37], [28, 60]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-dropdown/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 17,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-dropdown/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-dropdown", [], ["items", ["subexpr", "flexberry-enum", ["components-examples/flexberry-dropdown/settings-example/enumeration"], [], ["loc", [null, [11, 14], [11, 100]]]], "value", ["subexpr", "@mut", [["get", "model.enumeration", ["loc", [null, [12, 14], [12, 31]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [13, 20], [13, 31]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [14, 17], [14, 25]]]]], [], []], "class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [15, 14], [15, 19]]]]], [], []]], ["loc", [null, [10, 6], [16, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-dropdown/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-dropdown.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 99]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []], "componentBlockOverflow", "visible"], 0, null, ["loc", [null, [4, 4], [17, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-field/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 19,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-field/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-field", [], ["class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [11, 14], [11, 19]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [12, 14], [12, 24]]]]], [], []], "label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [13, 14], [13, 19]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [14, 20], [14, 31]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [15, 17], [15, 25]]]]], [], []], "type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [16, 13], [16, 17]]]]], [], []], "maxlength", ["subexpr", "@mut", [["get", "maxlength", ["loc", [null, [17, 18], [17, 27]]]]], [], []]], ["loc", [null, [10, 6], [18, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-field/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-field.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 96]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []], "componentBlockOverflow", "visible"], 0, null, ["loc", [null, [4, 4], [19, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-file/flexberry-file-in-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 31,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-file/flexberry-file-in-modal.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "header");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "content");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ui form flexberry-vertical-form");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "field");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "ui button");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [3, 1]);
          var element1 = dom.childAt(element0, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
          morphs[2] = dom.createElementMorph(element1);
          morphs[3] = dom.createMorphAt(element1, 0, 0);
          return morphs;
        },
        statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.captionModal"], [], ["loc", [null, [8, 22], [8, 101]]]], ["inline", "flexberry-file", [], ["value", ["subexpr", "@mut", [["get", "model.file", ["loc", [null, [13, 16], [13, 26]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [14, 22], [14, 33]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [15, 19], [15, 27]]]]], [], []], "uploadUrl", ["subexpr", "@mut", [["get", "uploadUrl", ["loc", [null, [16, 20], [16, 29]]]]], [], []], "maxUploadFileSize", ["subexpr", "@mut", [["get", "maxUploadFileSize", ["loc", [null, [17, 28], [17, 45]]]]], [], []], "showPreview", ["subexpr", "@mut", [["get", "showPreview", ["loc", [null, [18, 22], [18, 33]]]]], [], []], "showUploadButton", ["subexpr", "@mut", [["get", "showUploadButton", ["loc", [null, [19, 27], [19, 43]]]]], [], []], "showDownloadButton", ["subexpr", "@mut", [["get", "showDownloadButton", ["loc", [null, [20, 29], [20, 47]]]]], [], []], "showModalDialogOnUploadError", ["subexpr", "@mut", [["get", "showModalDialogOnUploadError", ["loc", [null, [21, 39], [21, 67]]]]], [], []], "showModalDialogOnDownloadError", ["subexpr", "@mut", [["get", "showModalDialogOnDownloadError", ["loc", [null, [22, 41], [22, 71]]]]], [], []], "inputClass", ["subexpr", "@mut", [["get", "inputClass", ["loc", [null, [23, 21], [23, 31]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [24, 22], [24, 33]]]]], [], []], "previewSettings", ["subexpr", "@mut", [["get", "previewSettings", ["loc", [null, [25, 26], [25, 41]]]]], [], []]], ["loc", [null, [12, 8], [26, 10]]]], ["element", "action", ["logOut"], [], ["loc", [null, [28, 32], [28, 51]]]], ["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.buttonClose"], [], ["loc", [null, [28, 52], [28, 130]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-file/flexberry-file-in-modal.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "class", "ui button");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [2, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createElementMorph(element2);
        morphs[2] = dom.createMorphAt(element2, 0, 0);
        morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.caption"], [], ["loc", [null, [1, 22], [1, 96]]]], ["element", "action", ["modalWindow", "#example"], [], ["loc", [null, [4, 28], [4, 63]]]], ["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.buttonModal"], [], ["loc", [null, [4, 64], [4, 142]]]], ["block", "ui-modal", [], ["id", "repeat-window"], 0, null, ["loc", [null, [7, 0], [31, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-file/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-file/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-file", [], ["value", ["subexpr", "@mut", [["get", "model.file", ["loc", [null, [10, 12], [10, 22]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [11, 18], [11, 29]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [12, 15], [12, 23]]]]], [], []], "uploadUrl", ["subexpr", "@mut", [["get", "uploadUrl", ["loc", [null, [13, 16], [13, 25]]]]], [], []], "maxUploadFileSize", ["subexpr", "@mut", [["get", "maxUploadFileSize", ["loc", [null, [14, 24], [14, 41]]]]], [], []], "maxUploadFileSizeUnit", ["subexpr", "@mut", [["get", "maxUploadFileSizeUnit", ["loc", [null, [15, 28], [15, 49]]]]], [], []], "showPreview", ["subexpr", "@mut", [["get", "showPreview", ["loc", [null, [16, 18], [16, 29]]]]], [], []], "showUploadButton", ["subexpr", "@mut", [["get", "showUploadButton", ["loc", [null, [17, 23], [17, 39]]]]], [], []], "showDownloadButton", ["subexpr", "@mut", [["get", "showDownloadButton", ["loc", [null, [18, 25], [18, 43]]]]], [], []], "showModalDialogOnUploadError", ["subexpr", "@mut", [["get", "showModalDialogOnUploadError", ["loc", [null, [19, 35], [19, 63]]]]], [], []], "showModalDialogOnDownloadError", ["subexpr", "@mut", [["get", "showModalDialogOnDownloadError", ["loc", [null, [20, 37], [20, 67]]]]], [], []], "inputClass", ["subexpr", "@mut", [["get", "inputClass", ["loc", [null, [21, 17], [21, 27]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [22, 18], [22, 29]]]]], [], []], "openFileInNewWindowInsteadOfLoading", ["subexpr", "@mut", [["get", "openFileInNewWindowInsteadOfLoading", ["loc", [null, [23, 42], [23, 77]]]]], [], []], "base64Value", ["subexpr", "@mut", [["get", "base64Value", ["loc", [null, [24, 18], [24, 29]]]]], [], []], "base64FileName", ["subexpr", "@mut", [["get", "base64FileName", ["loc", [null, [25, 21], [25, 35]]]]], [], []], "base64FileExtension", ["subexpr", "@mut", [["get", "base64FileExtension", ["loc", [null, [26, 26], [26, 45]]]]], [], []]], ["loc", [null, [9, 4], [27, 6]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-file/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-file.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 95]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [4, 25], [4, 29]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [5, 30], [5, 55]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [6, 26], [6, 47]]]]], [], []], "componentBlockOverflow", "visible"], 0, null, ["loc", [null, [3, 2], [28, 23]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-groupedit/configurate-row-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-groupedit/configurate-row-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-groupedit.configurate-row-example.caption"], [], ["loc", [null, [1, 22], [1, 107]]]], ["inline", "flexberry-groupedit", [], ["componentName", "aggregatorDetailsGroupedit", "content", ["subexpr", "@mut", [["get", "model.details", ["loc", [null, [6, 16], [6, 29]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.details", ["loc", [null, [7, 24], [7, 58]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [8, 20], [8, 31]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [9, 17], [9, 25]]]]], [], []], "confirmDeleteRows", ["subexpr", "action", ["confirmDeleteRows"], [], ["loc", [null, [10, 26], [10, 54]]]], "allowColumnResize", false, "createNewButton", true, "deleteButton", true, "showAsteriskInRow", true, "showCheckBoxInRow", true, "showDeleteButtonInRow", true, "rowClickable", false, "immediateDelete", false, "editOnSeperateRoute", false, "searchForContentChange", ["subexpr", "@mut", [["get", "searchForContentChange", ["loc", [null, [20, 31], [20, 53]]]]], [], []], "orderable", false, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [22, 17], [22, 25]]]]], [], []], "configurateRow", ["subexpr", "action", ["configurateRow"], [], ["loc", [null, [23, 23], [23, 48]]]]], ["loc", [null, [4, 4], [24, 8]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-groupedit/custom-buttons-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-groupedit/custom-buttons-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 0, 0);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-groupedit.custom-buttons-example.caption"], [], ["loc", [null, [1, 22], [1, 106]]]], ["inline", "flexberry-groupedit", [], ["componentName", "aggregatorDetailsGroupedit", "content", ["subexpr", "@mut", [["get", "model.details", ["loc", [null, [6, 16], [6, 29]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.details", ["loc", [null, [7, 24], [7, 58]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [8, 20], [8, 31]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [9, 17], [9, 25]]]]], [], []], "allowColumnResize", false, "createNewButton", false, "deleteButton", false, "showAsteriskInRow", true, "showCheckBoxInRow", true, "showDeleteButtonInRow", true, "rowClickable", false, "immediateDelete", false, "editOnSeperateRoute", false, "searchForContentChange", ["subexpr", "@mut", [["get", "searchForContentChange", ["loc", [null, [19, 31], [19, 53]]]]], [], []], "orderable", false, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [21, 17], [21, 25]]]]], [], []], "customButtons", ["subexpr", "@mut", [["get", "customButtons", ["loc", [null, [23, 22], [23, 35]]]]], [], []], "customButtonActionTest", "customButtonActionTest", "toggleHideCustomButton", "toggleHideCustomButton"], ["loc", [null, [4, 4], [26, 8]]]], ["content", "messageForUser", ["loc", [null, [29, 17], [29, 35]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-groupedit-with-lookup-with-computed-atribute", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 8
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-groupedit-with-lookup-with-computed-atribute.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [31, 62], [31, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [31, 80], [31, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 8
              },
              "end": {
                "line": 35,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-groupedit-with-lookup-with-computed-atribute.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [34, 68], [34, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [34, 94], [34, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 8
              },
              "end": {
                "line": 38,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-groupedit-with-lookup-with-computed-atribute.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [37, 66], [37, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [37, 86], [37, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-groupedit-with-lookup-with-computed-atribute.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [30, 23], [30, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [30, 43], [30, 63]]]]], [], ["loc", [null, [30, 38], [30, 64]]]]], [], ["loc", [null, [30, 18], [30, 65]]]]], [], 0, null, ["loc", [null, [30, 8], [32, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [33, 23], [33, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [33, 43], [33, 63]]]]], [], ["loc", [null, [33, 38], [33, 64]]]]], [], ["loc", [null, [33, 18], [33, 65]]]]], [], 1, null, ["loc", [null, [33, 8], [35, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [36, 23], [36, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [36, 44], [36, 58]]]]], [], ["loc", [null, [36, 39], [36, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [36, 65], [36, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [36, 80], [36, 100]]]]], [], ["loc", [null, [36, 60], [36, 101]]]]], [], ["loc", [null, [36, 35], [36, 102]]]]], [], ["loc", [null, [36, 18], [36, 103]]]]], [], 2, null, ["loc", [null, [36, 8], [38, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 187,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-groupedit-with-lookup-with-computed-atribute.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [9, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [11]);
        var element7 = dom.childAt(element3, [13]);
        var element8 = dom.childAt(element3, [15]);
        var element9 = dom.childAt(element3, [17]);
        var element10 = dom.childAt(element3, [19]);
        var element11 = dom.childAt(element3, [21]);
        var element12 = dom.childAt(element3, [23]);
        var element13 = dom.childAt(element3, [25]);
        var element14 = dom.childAt(element3, [27]);
        var element15 = dom.childAt(element3, [29]);
        var element16 = dom.childAt(element3, [31]);
        var element17 = dom.childAt(element3, [33]);
        var element18 = dom.childAt(element3, [35]);
        var morphs = new Array(53);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element3, 1, 1);
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createMorphAt(element3, 5, 5);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [7, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 0, 0);
        morphs[8] = dom.createAttrMorph(element6, 'class');
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createAttrMorph(element7, 'class');
        morphs[12] = dom.createMorphAt(element7, 1, 1);
        morphs[13] = dom.createMorphAt(element7, 3, 3);
        morphs[14] = dom.createAttrMorph(element8, 'class');
        morphs[15] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[16] = dom.createMorphAt(element8, 3, 3);
        morphs[17] = dom.createMorphAt(element8, 5, 5);
        morphs[18] = dom.createAttrMorph(element9, 'class');
        morphs[19] = dom.createMorphAt(element9, 1, 1);
        morphs[20] = dom.createMorphAt(element9, 3, 3);
        morphs[21] = dom.createAttrMorph(element10, 'class');
        morphs[22] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        morphs[23] = dom.createMorphAt(element10, 3, 3);
        morphs[24] = dom.createMorphAt(element10, 5, 5);
        morphs[25] = dom.createAttrMorph(element11, 'class');
        morphs[26] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[27] = dom.createMorphAt(element11, 3, 3);
        morphs[28] = dom.createMorphAt(element11, 5, 5);
        morphs[29] = dom.createAttrMorph(element12, 'class');
        morphs[30] = dom.createMorphAt(dom.childAt(element12, [1]), 0, 0);
        morphs[31] = dom.createMorphAt(element12, 3, 3);
        morphs[32] = dom.createMorphAt(element12, 5, 5);
        morphs[33] = dom.createAttrMorph(element13, 'class');
        morphs[34] = dom.createMorphAt(dom.childAt(element13, [1]), 0, 0);
        morphs[35] = dom.createMorphAt(element13, 3, 3);
        morphs[36] = dom.createMorphAt(element13, 5, 5);
        morphs[37] = dom.createAttrMorph(element14, 'class');
        morphs[38] = dom.createMorphAt(dom.childAt(element14, [1]), 0, 0);
        morphs[39] = dom.createMorphAt(element14, 3, 3);
        morphs[40] = dom.createMorphAt(element14, 5, 5);
        morphs[41] = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
        morphs[42] = dom.createMorphAt(element15, 3, 3);
        morphs[43] = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
        morphs[44] = dom.createMorphAt(element16, 3, 3);
        morphs[45] = dom.createAttrMorph(element17, 'class');
        morphs[46] = dom.createMorphAt(dom.childAt(element17, [1]), 0, 0);
        morphs[47] = dom.createMorphAt(element17, 3, 3);
        morphs[48] = dom.createMorphAt(element17, 5, 5);
        morphs[49] = dom.createAttrMorph(element18, 'class');
        morphs[50] = dom.createMorphAt(dom.childAt(element18, [1]), 0, 0);
        morphs[51] = dom.createMorphAt(element18, 3, 3);
        morphs[52] = dom.createMorphAt(element18, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.caption"], [], ["loc", [null, [1, 22], [1, 81]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [21, 26], [21, 31]]]]], [], []]], ["loc", [null, [21, 2], [21, 33]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [24, 43], [24, 55]]]]], [], []]], ["loc", [null, [24, 6], [24, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [29, 16], [29, 24]]]]], [], 0, null, ["loc", [null, [29, 6], [39, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [40, 59], [40, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [40, 78], [40, 119]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.address", ["loc", [null, [43, 25], [43, 45]]]], "error", ""], [], ["loc", [null, [43, 20], [43, 58]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.address", ["loc", [null, [45, 12], [45, 25]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.address-caption"], [], ["loc", [null, [46, 12], [46, 77]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [47, 15], [47, 23]]]]], [], []]], ["loc", [null, [44, 4], [48, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.address", ["loc", [null, [49, 40], [49, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [49, 4], [49, 82]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.text", ["loc", [null, [51, 25], [51, 42]]]], "error", ""], [], ["loc", [null, [51, 20], [51, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [53, 12], [53, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.text-caption"], [], ["loc", [null, [54, 12], [54, 74]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [55, 15], [55, 23]]]]], [], []]], ["loc", [null, [52, 4], [56, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.text", ["loc", [null, [57, 40], [57, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [57, 4], [57, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.date", ["loc", [null, [59, 25], [59, 42]]]], "error", ""], [], ["loc", [null, [59, 20], [59, 55]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.date-caption"], [], ["loc", [null, [60, 11], [60, 75]]]], ["inline", "flexberry-datepicker", [], ["value", ["subexpr", "@mut", [["get", "model.date", ["loc", [null, [62, 12], [62, 22]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [63, 15], [63, 23]]]]], [], []]], ["loc", [null, [61, 4], [64, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.date", ["loc", [null, [65, 40], [65, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [65, 4], [65, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.votes", ["loc", [null, [67, 25], [67, 43]]]], "error", ""], [], ["loc", [null, [67, 20], [67, 56]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.votes", ["loc", [null, [69, 12], [69, 23]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.votes-caption"], [], ["loc", [null, [70, 12], [70, 75]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [71, 15], [71, 23]]]]], [], []]], ["loc", [null, [68, 4], [72, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.votes", ["loc", [null, [73, 40], [73, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [73, 4], [73, 80]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.moderated", ["loc", [null, [75, 25], [75, 47]]]], "error", ""], [], ["loc", [null, [75, 20], [75, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.moderated-caption"], [], ["loc", [null, [76, 11], [76, 80]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.moderated", ["loc", [null, [78, 12], [78, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [79, 15], [79, 23]]]]], [], []]], ["loc", [null, [77, 4], [80, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.moderated", ["loc", [null, [81, 40], [81, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [81, 4], [81, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.type", ["loc", [null, [83, 25], [83, 42]]]], "error", ""], [], ["loc", [null, [83, 20], [83, 55]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.type-caption"], [], ["loc", [null, [84, 11], [84, 75]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [86, 12], [86, 22]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [87, 19], [87, 24]]]]], [], []], "relationName", "type", "projection", "SuggestionTypeL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.type-caption"], [], ["loc", [null, [91, 12], [91, 74]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [92, 13], [92, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [93, 13], [93, 41]]]], "dropdown", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [95, 15], [95, 23]]]]], [], []], "direction", "upward", "componentName", "SuggestionEditType"], ["loc", [null, [85, 4], [98, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.type", ["loc", [null, [99, 40], [99, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [99, 4], [99, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.author", ["loc", [null, [101, 25], [101, 44]]]], "error", ""], [], ["loc", [null, [101, 20], [101, 57]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [102, 11], [102, 77]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.author", ["loc", [null, [104, 12], [104, 24]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [105, 19], [105, 24]]]]], [], []], "relationName", "author", "projection", "ApplicationUserL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [109, 12], [109, 76]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [110, 13], [110, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [111, 13], [111, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [112, 15], [112, 23]]]]], [], []], "componentName", "SuggestionEditAuthor"], ["loc", [null, [103, 4], [114, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.author", ["loc", [null, [115, 40], [115, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [115, 4], [115, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.editor1", ["loc", [null, [117, 25], [117, 45]]]], "error", ""], [], ["loc", [null, [117, 20], [117, 58]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [118, 11], [118, 78]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.editor1", ["loc", [null, [120, 12], [120, 25]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [121, 19], [121, 24]]]]], [], []], "relationName", "editor1", "projection", "ApplicationUserL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [125, 12], [125, 77]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [126, 13], [126, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [127, 13], [127, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [128, 15], [128, 23]]]]], [], []], "componentName", "SuggestionEditEditor1"], ["loc", [null, [119, 4], [130, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.editor1", ["loc", [null, [131, 40], [131, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [131, 4], [131, 82]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.files", ["loc", [null, [133, 25], [133, 43]]]], "error", ""], [], ["loc", [null, [133, 20], [133, 56]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.files-caption"], [], ["loc", [null, [134, 11], [134, 76]]]], ["inline", "flexberry-groupedit", [], ["componentName", "filesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.files", ["loc", [null, [137, 14], [137, 25]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [138, 26], [138, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.files", ["loc", [null, [139, 22], [139, 54]]]]], [], []], "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [141, 15], [141, 23]]]]], [], []]], ["loc", [null, [135, 4], [142, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.files", ["loc", [null, [143, 40], [143, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [143, 4], [143, 80]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.readonly-groupedit-with-lookup-with-computed-atribute-field"], [], ["loc", [null, [146, 11], [146, 122]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "checkboxValue", ["loc", [null, [148, 12], [148, 25]]]]], [], []]], ["loc", [null, [147, 4], [149, 6]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.limit-function-groupedit-with-lookup-with-computed-atribute-field"], [], ["loc", [null, [152, 11], [152, 128]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "fieldvalue", ["loc", [null, [154, 12], [154, 22]]]]], [], []]], ["loc", [null, [153, 4], [155, 6]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.userVotes", ["loc", [null, [157, 25], [157, 47]]]], "error", ""], [], ["loc", [null, [157, 20], [157, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.userVotes-caption"], [], ["loc", [null, [158, 11], [158, 80]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionUserVotesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.userVotes", ["loc", [null, [161, 14], [161, 29]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [162, 26], [162, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.userVotes", ["loc", [null, [163, 22], [163, 58]]]]], [], []], "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [165, 15], [165, 23]]]]], [], []]], ["loc", [null, [159, 4], [166, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.userVotes", ["loc", [null, [167, 40], [167, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [167, 4], [167, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.comments", ["loc", [null, [169, 25], [169, 46]]]], "error", ""], [], ["loc", [null, [169, 20], [169, 59]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.comments-caption"], [], ["loc", [null, [170, 11], [170, 79]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionCommentsGroupEdit", "content", ["subexpr", "@mut", [["get", "model.comments", ["loc", [null, [173, 14], [173, 28]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [174, 26], [174, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.comments", ["loc", [null, [175, 22], [175, 57]]]]], [], []], "rowClickable", true, "rowClick", "rowClick", "editOnSeparateRoute", true, "editFormRoute", ["subexpr", "@mut", [["get", "commentsEditRoute", ["loc", [null, [179, 20], [179, 37]]]]], [], []], "saveBeforeRouteLeave", true, "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [182, 15], [182, 23]]]]], [], []]], ["loc", [null, [171, 4], [183, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.comments", ["loc", [null, [184, 40], [184, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [184, 4], [184, 83]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-readonly-columns-by-configurate-row-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 8
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-readonly-columns-by-configurate-row-example.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [31, 62], [31, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [31, 80], [31, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 8
              },
              "end": {
                "line": 35,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-readonly-columns-by-configurate-row-example.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [34, 68], [34, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [34, 94], [34, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 8
              },
              "end": {
                "line": 38,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-readonly-columns-by-configurate-row-example.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [37, 66], [37, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [37, 86], [37, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-readonly-columns-by-configurate-row-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [30, 23], [30, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [30, 43], [30, 63]]]]], [], ["loc", [null, [30, 38], [30, 64]]]]], [], ["loc", [null, [30, 18], [30, 65]]]]], [], 0, null, ["loc", [null, [30, 8], [32, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [33, 23], [33, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [33, 43], [33, 63]]]]], [], ["loc", [null, [33, 38], [33, 64]]]]], [], ["loc", [null, [33, 18], [33, 65]]]]], [], 1, null, ["loc", [null, [33, 8], [35, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [36, 23], [36, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [36, 44], [36, 58]]]]], [], ["loc", [null, [36, 39], [36, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [36, 65], [36, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [36, 80], [36, 100]]]]], [], ["loc", [null, [36, 60], [36, 101]]]]], [], ["loc", [null, [36, 35], [36, 102]]]]], [], ["loc", [null, [36, 18], [36, 103]]]]], [], 2, null, ["loc", [null, [36, 8], [38, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 177,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-edit-readonly-columns-by-configurate-row-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [9, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [11]);
        var element7 = dom.childAt(element3, [13]);
        var element8 = dom.childAt(element3, [15]);
        var element9 = dom.childAt(element3, [17]);
        var element10 = dom.childAt(element3, [19]);
        var element11 = dom.childAt(element3, [21]);
        var element12 = dom.childAt(element3, [23]);
        var element13 = dom.childAt(element3, [25]);
        var element14 = dom.childAt(element3, [27]);
        var element15 = dom.childAt(element3, [29]);
        var element16 = dom.childAt(element3, [31]);
        var morphs = new Array(49);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element3, 1, 1);
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createMorphAt(element3, 5, 5);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [7, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 0, 0);
        morphs[8] = dom.createAttrMorph(element6, 'class');
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createAttrMorph(element7, 'class');
        morphs[12] = dom.createMorphAt(element7, 1, 1);
        morphs[13] = dom.createMorphAt(element7, 3, 3);
        morphs[14] = dom.createAttrMorph(element8, 'class');
        morphs[15] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[16] = dom.createMorphAt(element8, 3, 3);
        morphs[17] = dom.createMorphAt(element8, 5, 5);
        morphs[18] = dom.createAttrMorph(element9, 'class');
        morphs[19] = dom.createMorphAt(element9, 1, 1);
        morphs[20] = dom.createMorphAt(element9, 3, 3);
        morphs[21] = dom.createAttrMorph(element10, 'class');
        morphs[22] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        morphs[23] = dom.createMorphAt(element10, 3, 3);
        morphs[24] = dom.createMorphAt(element10, 5, 5);
        morphs[25] = dom.createAttrMorph(element11, 'class');
        morphs[26] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[27] = dom.createMorphAt(element11, 3, 3);
        morphs[28] = dom.createMorphAt(element11, 5, 5);
        morphs[29] = dom.createAttrMorph(element12, 'class');
        morphs[30] = dom.createMorphAt(dom.childAt(element12, [1]), 0, 0);
        morphs[31] = dom.createMorphAt(element12, 3, 3);
        morphs[32] = dom.createMorphAt(element12, 5, 5);
        morphs[33] = dom.createAttrMorph(element13, 'class');
        morphs[34] = dom.createMorphAt(dom.childAt(element13, [1]), 0, 0);
        morphs[35] = dom.createMorphAt(element13, 3, 3);
        morphs[36] = dom.createMorphAt(element13, 5, 5);
        morphs[37] = dom.createAttrMorph(element14, 'class');
        morphs[38] = dom.createMorphAt(dom.childAt(element14, [1]), 0, 0);
        morphs[39] = dom.createMorphAt(element14, 3, 3);
        morphs[40] = dom.createMorphAt(element14, 5, 5);
        morphs[41] = dom.createAttrMorph(element15, 'class');
        morphs[42] = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
        morphs[43] = dom.createMorphAt(element15, 3, 3);
        morphs[44] = dom.createMorphAt(element15, 5, 5);
        morphs[45] = dom.createAttrMorph(element16, 'class');
        morphs[46] = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
        morphs[47] = dom.createMorphAt(element16, 3, 3);
        morphs[48] = dom.createMorphAt(element16, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.application.sitemap.components-examples.flexberry-groupedit.readonly-columns-by-configurate-row-example.caption"], [], ["loc", [null, [1, 22], [1, 147]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [21, 26], [21, 31]]]]], [], []]], ["loc", [null, [21, 2], [21, 33]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [24, 43], [24, 55]]]]], [], []]], ["loc", [null, [24, 6], [24, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [29, 16], [29, 24]]]]], [], 0, null, ["loc", [null, [29, 6], [39, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [40, 59], [40, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [40, 78], [40, 119]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.address", ["loc", [null, [43, 25], [43, 45]]]], "error", ""], [], ["loc", [null, [43, 20], [43, 58]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.address", ["loc", [null, [45, 12], [45, 25]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.address-caption"], [], ["loc", [null, [46, 12], [46, 77]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [47, 15], [47, 23]]]]], [], []]], ["loc", [null, [44, 4], [48, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.address", ["loc", [null, [49, 40], [49, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [49, 4], [49, 82]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.text", ["loc", [null, [51, 25], [51, 42]]]], "error", ""], [], ["loc", [null, [51, 20], [51, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [53, 12], [53, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.text-caption"], [], ["loc", [null, [54, 12], [54, 74]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [55, 15], [55, 23]]]]], [], []]], ["loc", [null, [52, 4], [56, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.text", ["loc", [null, [57, 40], [57, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [57, 4], [57, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.date", ["loc", [null, [59, 25], [59, 42]]]], "error", ""], [], ["loc", [null, [59, 20], [59, 55]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.date-caption"], [], ["loc", [null, [60, 11], [60, 75]]]], ["inline", "flexberry-datepicker", [], ["value", ["subexpr", "@mut", [["get", "model.date", ["loc", [null, [62, 12], [62, 22]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [63, 15], [63, 23]]]]], [], []]], ["loc", [null, [61, 4], [64, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.date", ["loc", [null, [65, 40], [65, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [65, 4], [65, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.votes", ["loc", [null, [67, 25], [67, 43]]]], "error", ""], [], ["loc", [null, [67, 20], [67, 56]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.votes", ["loc", [null, [69, 12], [69, 23]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.votes-caption"], [], ["loc", [null, [70, 12], [70, 75]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [71, 15], [71, 23]]]]], [], []]], ["loc", [null, [68, 4], [72, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.votes", ["loc", [null, [73, 40], [73, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [73, 4], [73, 80]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.moderated", ["loc", [null, [75, 25], [75, 47]]]], "error", ""], [], ["loc", [null, [75, 20], [75, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.moderated-caption"], [], ["loc", [null, [76, 11], [76, 80]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.moderated", ["loc", [null, [78, 12], [78, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [79, 15], [79, 23]]]]], [], []]], ["loc", [null, [77, 4], [80, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.moderated", ["loc", [null, [81, 40], [81, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [81, 4], [81, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.type", ["loc", [null, [83, 25], [83, 42]]]], "error", ""], [], ["loc", [null, [83, 20], [83, 55]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.type-caption"], [], ["loc", [null, [84, 11], [84, 75]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [86, 12], [86, 22]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [87, 19], [87, 24]]]]], [], []], "relationName", "type", "projection", "SuggestionTypeL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.type-caption"], [], ["loc", [null, [91, 12], [91, 74]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [92, 13], [92, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [93, 13], [93, 41]]]], "dropdown", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [95, 15], [95, 23]]]]], [], []], "direction", "upward", "componentName", "SuggestionEditType"], ["loc", [null, [85, 4], [98, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.type", ["loc", [null, [99, 40], [99, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [99, 4], [99, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.author", ["loc", [null, [101, 25], [101, 44]]]], "error", ""], [], ["loc", [null, [101, 20], [101, 57]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [102, 11], [102, 77]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.author", ["loc", [null, [104, 12], [104, 24]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [105, 19], [105, 24]]]]], [], []], "relationName", "author", "projection", "ApplicationUserL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [109, 12], [109, 76]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [110, 13], [110, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [111, 13], [111, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [112, 15], [112, 23]]]]], [], []], "componentName", "SuggestionEditAuthor"], ["loc", [null, [103, 4], [114, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.author", ["loc", [null, [115, 40], [115, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [115, 4], [115, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.editor1", ["loc", [null, [117, 25], [117, 45]]]], "error", ""], [], ["loc", [null, [117, 20], [117, 58]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [118, 11], [118, 78]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.editor1", ["loc", [null, [120, 12], [120, 25]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [121, 19], [121, 24]]]]], [], []], "relationName", "editor1", "projection", "ApplicationUserL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [125, 12], [125, 77]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [126, 13], [126, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [127, 13], [127, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [128, 15], [128, 23]]]]], [], []], "componentName", "SuggestionEditEditor1"], ["loc", [null, [119, 4], [130, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.editor1", ["loc", [null, [131, 40], [131, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [131, 4], [131, 82]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.files", ["loc", [null, [133, 25], [133, 43]]]], "error", ""], [], ["loc", [null, [133, 20], [133, 56]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.files-caption"], [], ["loc", [null, [134, 11], [134, 76]]]], ["inline", "flexberry-groupedit", [], ["componentName", "filesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.files", ["loc", [null, [137, 14], [137, 25]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [138, 26], [138, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.files", ["loc", [null, [139, 22], [139, 54]]]]], [], []], "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [141, 15], [141, 23]]]]], [], []], "configurateRow", ["subexpr", "action", ["configurateFilesRow"], [], ["loc", [null, [142, 21], [142, 51]]]]], ["loc", [null, [135, 4], [143, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.files", ["loc", [null, [144, 40], [144, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [144, 4], [144, 80]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.userVotes", ["loc", [null, [146, 25], [146, 47]]]], "error", ""], [], ["loc", [null, [146, 20], [146, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.userVotes-caption"], [], ["loc", [null, [147, 11], [147, 80]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionUserVotesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.userVotes", ["loc", [null, [150, 14], [150, 29]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [151, 26], [151, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.userVotes", ["loc", [null, [152, 22], [152, 58]]]]], [], []], "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [154, 15], [154, 23]]]]], [], []], "configurateRow", ["subexpr", "action", ["configurateVotesRow"], [], ["loc", [null, [155, 21], [155, 51]]]]], ["loc", [null, [148, 4], [156, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.userVotes", ["loc", [null, [157, 40], [157, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [157, 4], [157, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.comments", ["loc", [null, [159, 25], [159, 46]]]], "error", ""], [], ["loc", [null, [159, 20], [159, 59]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.comments-caption"], [], ["loc", [null, [160, 11], [160, 79]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionCommentsGroupEdit", "content", ["subexpr", "@mut", [["get", "model.comments", ["loc", [null, [163, 14], [163, 28]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [164, 26], [164, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.comments", ["loc", [null, [165, 22], [165, 57]]]]], [], []], "rowClickable", true, "rowClick", "rowClick", "editOnSeparateRoute", true, "editFormRoute", ["subexpr", "@mut", [["get", "commentsEditRoute", ["loc", [null, [169, 20], [169, 37]]]]], [], []], "saveBeforeRouteLeave", true, "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [172, 15], [172, 23]]]]], [], []]], ["loc", [null, [161, 4], [173, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.comments", ["loc", [null, [174, 40], [174, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [174, 4], [174, 83]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-groupedit-with-lookup-with-computed-atribute", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 53,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-groupedit-with-lookup-with-computed-atribute.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(element0, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [5]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-list.caption"], [], ["loc", [null, [2, 4], [2, 63]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [7, 12], [7, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [8, 12], [8, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [9, 12], [9, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [10, 11], [10, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [11, 11], [11, 42]]]]], ["loc", [null, [4, 2], [12, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [16, 12], [16, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [17, 12], [17, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [18, 12], [18, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [19, 11], [19, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [20, 11], [20, 40]]]]], ["loc", [null, [13, 2], [21, 4]]]], ["inline", "flexberry-objectlistview", [], ["editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [24, 18], [24, 31]]]]], [], []], "showCheckBoxInRow", true, "modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [27, 20], [27, 35]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [28, 12], [28, 17]]]]], [], []], "createNewButton", false, "refreshButton", true, "exportExcelButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [32, 12], [32, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [34, 17], [34, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [35, 23], [35, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [36, 27], [36, 60]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [37, 10], [37, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [38, 17], [38, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [39, 18], [39, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [40, 22], [40, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [41, 20], [41, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [42, 16], [42, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [43, 17], [43, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [44, 13], [44, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [45, 13], [45, 32]]]], "componentName", "SuggestionObjectListView", "showDeleteMenuItemInRow", true, "showEditMenuItemInRow", true, "deleteButton", true], ["loc", [null, [23, 2], [50, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-readonly-columns-by-configurate-row-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 53,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-groupedit/ember-flexberry-dummy-suggestion-list-readonly-columns-by-configurate-row-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(element0, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [5]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.application.sitemap.components-examples.flexberry-groupedit.readonly-columns-by-configurate-row-example.caption"], [], ["loc", [null, [2, 4], [2, 129]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [7, 12], [7, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [8, 12], [8, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [9, 12], [9, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [10, 11], [10, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [11, 11], [11, 42]]]]], ["loc", [null, [4, 2], [12, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [16, 12], [16, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [17, 12], [17, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [18, 12], [18, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [19, 11], [19, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [20, 11], [20, 40]]]]], ["loc", [null, [13, 2], [21, 4]]]], ["inline", "flexberry-objectlistview", [], ["editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [24, 18], [24, 31]]]]], [], []], "showCheckBoxInRow", true, "modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [27, 20], [27, 35]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [28, 12], [28, 17]]]]], [], []], "createNewButton", false, "refreshButton", true, "exportExcelButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [32, 12], [32, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [34, 17], [34, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [35, 23], [35, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [36, 27], [36, 60]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [37, 10], [37, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [38, 17], [38, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [39, 18], [39, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [40, 22], [40, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [41, 20], [41, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [42, 16], [42, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [43, 17], [43, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [44, 13], [44, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [45, 13], [45, 32]]]], "componentName", "SuggestionObjectListView", "showDeleteMenuItemInRow", true, "showEditMenuItemInRow", true, "deleteButton", true], ["loc", [null, [23, 2], [50, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-groupedit/model-update-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-groupedit/model-update-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "class", "ui button add-deteil");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "class", "ui button delete-deteil");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createElementMorph(element2);
        morphs[2] = dom.createMorphAt(element2, 0, 0);
        morphs[3] = dom.createElementMorph(element3);
        morphs[4] = dom.createMorphAt(element3, 0, 0);
        morphs[5] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-groupedit.model-update-example.caption"], [], ["loc", [null, [1, 22], [1, 104]]]], ["element", "action", ["addDetail", ["get", "record", ["loc", [null, [4, 62], [4, 68]]]]], [], ["loc", [null, [4, 41], [4, 70]]]], ["inline", "t", ["forms.components-examples.flexberry-groupedit.model-update-example.addDetailButton"], [], ["loc", [null, [4, 71], [4, 161]]]], ["element", "action", ["deleteDetail", ["get", "record", ["loc", [null, [5, 68], [5, 74]]]]], [], ["loc", [null, [5, 44], [5, 76]]]], ["inline", "t", ["forms.components-examples.flexberry-groupedit.model-update-example.removeDetailButton"], [], ["loc", [null, [5, 77], [5, 170]]]], ["inline", "flexberry-groupedit", [], ["componentName", "aggregatorDetailsGroupedit", "content", ["subexpr", "@mut", [["get", "model.details", ["loc", [null, [10, 16], [10, 29]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.details", ["loc", [null, [11, 24], [11, 58]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [12, 20], [12, 31]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [13, 17], [13, 25]]]]], [], []], "createNewButton", true, "deleteButton", true, "showAsteriskInRow", true, "showCheckBoxInRow", true, "showDeleteButtonInRow", true, "rowClickable", false, "immediateDelete", false, "editOnSeperateRoute", false, "searchForContentChange", ["subexpr", "@mut", [["get", "searchForContentChange", ["loc", [null, [22, 31], [22, 53]]]]], [], []], "orderable", false, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [24, 17], [24, 25]]]]], [], []]], ["loc", [null, [8, 4], [25, 8]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-groupedit/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-groupedit/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-groupedit", [], ["componentName", "aggregatorDetailsGroupedit", "content", ["subexpr", "@mut", [["get", "model.details", ["loc", [null, [11, 16], [11, 29]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "detailsProjection", ["loc", [null, [12, 24], [12, 41]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [13, 20], [13, 31]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [14, 17], [14, 25]]]]], [], []], "tableStriped", ["subexpr", "@mut", [["get", "tableStriped", ["loc", [null, [15, 21], [15, 33]]]]], [], []], "createNewButton", ["subexpr", "@mut", [["get", "createNewButton", ["loc", [null, [16, 24], [16, 39]]]]], [], []], "deleteButton", ["subexpr", "@mut", [["get", "deleteButton", ["loc", [null, [17, 21], [17, 33]]]]], [], []], "defaultSortingButton", ["subexpr", "@mut", [["get", "defaultSortingButton", ["loc", [null, [18, 29], [18, 49]]]]], [], []], "allowColumnResize", ["subexpr", "@mut", [["get", "allowColumnResize", ["loc", [null, [19, 26], [19, 43]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [20, 26], [20, 43]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [21, 26], [21, 43]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [22, 30], [22, 51]]]]], [], []], "showEditMenuItemInRow", ["subexpr", "@mut", [["get", "showEditMenuItemInRow", ["loc", [null, [23, 30], [23, 51]]]]], [], []], "showDeleteMenuItemInRow", ["subexpr", "@mut", [["get", "showDeleteMenuItemInRow", ["loc", [null, [24, 32], [24, 55]]]]], [], []], "useSingleColumn", ["subexpr", "@mut", [["get", "useSingleColumn", ["loc", [null, [25, 24], [25, 39]]]]], [], []], "singleColumnHeaderTitle", ["subexpr", "@mut", [["get", "singleColumnHeaderTitle", ["loc", [null, [26, 32], [26, 55]]]]], [], []], "rowClickable", ["subexpr", "@mut", [["get", "rowClickable", ["loc", [null, [27, 21], [27, 33]]]]], [], []], "immediateDelete", ["subexpr", "@mut", [["get", "immediateDelete", ["loc", [null, [28, 24], [28, 39]]]]], [], []], "orderable", true, "defaultSettingsButton", ["subexpr", "@mut", [["get", "defaultSettingsButton", ["loc", [null, [30, 30], [30, 51]]]]], [], []], "fixedHeader", ["subexpr", "@mut", [["get", "fixedHeader", ["loc", [null, [31, 20], [31, 31]]]]], [], []]], ["loc", [null, [9, 6], [32, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 36,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-groupedit/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-groupedit.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 100]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []]], 0, null, ["loc", [null, [4, 4], [33, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-lookup/autocomplete-order-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-lookup/autocomplete-order-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.autocomplete-order-example.caption"], [], ["loc", [null, [1, 22], [1, 107]]]], ["inline", "flexberry-lookup", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [5, 17], [5, 25]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [6, 14], [6, 24]]]]], [], []], "projection", "SettingLookupExampleView", "displayAttributeName", "name", "autocompleteOrder", "moderated asc, parent desc", "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [10, 14], [10, 19]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [11, 21], [11, 26]]]]], [], []], "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "autocomplete", true, "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [16, 20], [16, 31]]]]], [], []]], ["loc", [null, [4, 4], [17, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-lookup/autofill-by-limit-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-lookup/autofill-by-limit-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [9, 14], [9, 24]]]]], [], []], "projection", "LookupWithLimitFunctionExampleView", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.components-examples.flexberry-lookup.autofill-by-limit-example.titleLookup"], [], ["loc", [null, [12, 14], [12, 100]]]], "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [16, 17], [16, 25]]]]], [], []], "lookupLimitPredicate", ["subexpr", "@mut", [["get", "lookupCustomLimitPredicate", ["loc", [null, [17, 29], [17, 55]]]]], [], []], "autofillByLimit", ["subexpr", "@mut", [["get", "autofillByLimit", ["loc", [null, [18, 24], [18, 39]]]]], [], []]], ["loc", [null, [8, 6], [19, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-lookup/autofill-by-limit-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.autofill-by-limit-example.caption"], [], ["loc", [null, [1, 22], [1, 106]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []]], 0, null, ["loc", [null, [4, 4], [20, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 8
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [31, 62], [31, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [31, 80], [31, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 8
              },
              "end": {
                "line": 35,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [34, 68], [34, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [34, 94], [34, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 8
              },
              "end": {
                "line": 38,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [37, 66], [37, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [37, 86], [37, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [30, 23], [30, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [30, 43], [30, 63]]]]], [], ["loc", [null, [30, 38], [30, 64]]]]], [], ["loc", [null, [30, 18], [30, 65]]]]], [], 0, null, ["loc", [null, [30, 8], [32, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [33, 23], [33, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [33, 43], [33, 63]]]]], [], ["loc", [null, [33, 38], [33, 64]]]]], [], ["loc", [null, [33, 18], [33, 65]]]]], [], 1, null, ["loc", [null, [33, 8], [35, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [36, 23], [36, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [36, 44], [36, 58]]]]], [], ["loc", [null, [36, 39], [36, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [36, 65], [36, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [36, 80], [36, 100]]]]], [], ["loc", [null, [36, 60], [36, 101]]]]], [], ["loc", [null, [36, 35], [36, 102]]]]], [], ["loc", [null, [36, 18], [36, 103]]]]], [], 2, null, ["loc", [null, [36, 8], [38, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 89,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [9, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [11]);
        var element7 = dom.childAt(element3, [13]);
        var element8 = dom.childAt(element3, [15]);
        var element9 = dom.childAt(element3, [17]);
        var morphs = new Array(23);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element3, 1, 1);
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createMorphAt(element3, 5, 5);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [7, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 0, 0);
        morphs[8] = dom.createAttrMorph(element6, 'class');
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createAttrMorph(element7, 'class');
        morphs[12] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
        morphs[13] = dom.createMorphAt(element7, 3, 3);
        morphs[14] = dom.createMorphAt(element7, 5, 5);
        morphs[15] = dom.createAttrMorph(element8, 'class');
        morphs[16] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[17] = dom.createMorphAt(element8, 3, 3);
        morphs[18] = dom.createMorphAt(element8, 5, 5);
        morphs[19] = dom.createAttrMorph(element9, 'class');
        morphs[20] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        morphs[21] = dom.createMorphAt(element9, 3, 3);
        morphs[22] = dom.createMorphAt(element9, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.caption"], [], ["loc", [null, [1, 22], [1, 86]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [21, 26], [21, 31]]]]], [], []]], ["loc", [null, [21, 2], [21, 33]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [24, 43], [24, 55]]]]], [], []]], ["loc", [null, [24, 6], [24, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [29, 16], [29, 24]]]]], [], 0, null, ["loc", [null, [29, 6], [39, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [40, 59], [40, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [40, 78], [40, 119]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [43, 25], [43, 42]]]], "error", ""], [], ["loc", [null, [43, 20], [43, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [45, 12], [45, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.name-caption"], [], ["loc", [null, [46, 12], [46, 79]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [47, 15], [47, 23]]]]], [], []]], ["loc", [null, [44, 4], [48, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [49, 40], [49, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [49, 4], [49, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.moderated", ["loc", [null, [51, 25], [51, 47]]]], "error", ""], [], ["loc", [null, [51, 20], [51, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.moderated-caption"], [], ["loc", [null, [52, 11], [52, 85]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.moderated", ["loc", [null, [54, 12], [54, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [55, 15], [55, 23]]]]], [], []]], ["loc", [null, [53, 4], [56, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.moderated", ["loc", [null, [57, 40], [57, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [57, 4], [57, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.parent", ["loc", [null, [59, 25], [59, 44]]]], "error", ""], [], ["loc", [null, [59, 20], [59, 57]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.parent-caption"], [], ["loc", [null, [60, 11], [60, 82]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.parent", ["loc", [null, [62, 12], [62, 24]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [63, 19], [63, 24]]]]], [], []], "relationName", "parent", "projection", "SuggestionTypeEWithComputedField", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.parent-caption"], [], ["loc", [null, [66, 12], [66, 81]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [67, 13], [67, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [68, 13], [68, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [69, 15], [69, 23]]]]], [], []], "autocomplete", true, "autocompleteProjection", "AutocompleteProjectionExampleView", "displayAttributeName", "computedField"], ["loc", [null, [61, 4], [73, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.parent", ["loc", [null, [74, 40], [74, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [74, 4], [74, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.localizedTypes", ["loc", [null, [76, 25], [76, 52]]]], "error", ""], [], ["loc", [null, [76, 20], [76, 65]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.localized-types-caption"], [], ["loc", [null, [77, 11], [77, 91]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionTypeLocalizedTypesGroupEdit", "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [80, 26], [80, 41]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model.localizedTypes", ["loc", [null, [81, 14], [81, 34]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.localizedTypes", ["loc", [null, [82, 22], [82, 63]]]]], [], []], "orderable", false, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [84, 15], [84, 23]]]]], [], []]], ["loc", [null, [78, 4], [85, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.localizedTypes", ["loc", [null, [86, 40], [86, 67]]]]], [], []], "pointing", "pointing"], ["loc", [null, [86, 4], [86, 89]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-lookup/compute-autocomplete/compute-autocomplete-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-list.caption"], [], ["loc", [null, [2, 4], [2, 68]]]], ["inline", "flexberry-simpleolv", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [5, 12], [5, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion-type", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [7, 20], [7, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [8, 18], [8, 31]]]]], [], []], "createNewButton", false, "deleteButton", true, "refreshButton", true, "exportExcelButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [13, 12], [13, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [15, 10], [15, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [16, 17], [16, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [17, 18], [17, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [18, 22], [18, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [19, 20], [19, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [20, 16], [20, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [21, 17], [21, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [22, 23], [22, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [23, 27], [23, 60]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [24, 17], [24, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [25, 13], [25, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [26, 13], [26, 32]]]], "componentName", "SOLVSuggestionTypeObjectListView", "showCheckBoxInRow", true, "showEditMenuItemInRow", true, "showDeleteMenuItemInRow", true, "showDeleteButtonInRow", true], ["loc", [null, [4, 2], [32, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-lookup/customizing-window-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-lookup/customizing-window-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.customizing-window-example.caption"], [], ["loc", [null, [1, 22], [1, 107]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [5, 12], [5, 22]]]]], [], []], "projection", "CustomizeLookupWindowExampleView", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.components-examples.flexberry-lookup.customizing-window-example.titleLookup"], [], ["loc", [null, [8, 12], [8, 99]]]], "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [12, 15], [12, 23]]]]], [], []], "limitFunction", null, "lookupWindowCustomProperties", ["subexpr", "action", ["getLookupFolvProperties"], [], ["loc", [null, [14, 35], [14, 69]]]]], ["loc", [null, [4, 4], [15, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-lookup/default-ordering-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-lookup/default-ordering-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.default-ordering-example.caption"], [], ["loc", [null, [1, 22], [1, 105]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [5, 12], [5, 22]]]]], [], []], "projection", "CustomizeLookupWindowExampleView", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.components-examples.flexberry-lookup.default-ordering-example.titleLookup"], [], ["loc", [null, [8, 12], [8, 97]]]], "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [12, 15], [12, 23]]]]], [], []], "limitFunction", null, "lookupWindowCustomProperties", ["subexpr", "action", ["getLookupFolvProperties"], [], ["loc", [null, [14, 35], [14, 69]]]], "componentName", ["subexpr", "@mut", [["get", "lookupComponentName", ["loc", [null, [15, 20], [15, 39]]]]], [], []]], ["loc", [null, [4, 4], [16, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-lookup/dropdown-mode-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 39,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-lookup/dropdown-mode-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("dropdownIsSearch=true, direction=\"downward\"");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("dropdownIsSearch=false, direction=\"upward\"");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 3, 3);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.dropdown-mode-example.caption"], [], ["loc", [null, [1, 22], [1, 102]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [6, 12], [6, 22]]]]], [], []], "projection", "DropDownLookupExampleView", "displayAttributeName", "name", "title", "Master", "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [13, 15], [13, 23]]]]], [], []], "lookupLimitPredicate", ["subexpr", "@mut", [["get", "lookupCustomLimitPredicate", ["loc", [null, [14, 27], [14, 53]]]]], [], []], "dropdown", true, "dropdownIsSearch", true, "sorting", "desc", "direction", "downward"], ["loc", [null, [5, 4], [19, 6]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [24, 12], [24, 22]]]]], [], []], "projection", "DropDownLookupExampleView", "displayAttributeName", "name", "title", "Master", "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [31, 15], [31, 23]]]]], [], []], "lookupLimitPredicate", ["subexpr", "@mut", [["get", "lookupCustomLimitPredicate", ["loc", [null, [32, 27], [32, 53]]]]], [], []], "dropdown", true, "sorting", "desc", "direction", "upward"], ["loc", [null, [23, 4], [36, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-lookup/hierarchy-olv-in-lookup-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 52,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-lookup/hierarchy-olv-in-lookup-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [5]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.hierarchy-olv-in-lookup-example.caption"], [], ["loc", [null, [1, 22], [1, 112]]]], ["inline", "flexberry-lookup", [], ["componentName", "HierarchyLookup", "value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [6, 12], [6, 22]]]]], [], []], "projection", "CustomizeLookupWindowExampleView", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.components-examples.flexberry-lookup.hierarchy-olv-in-lookup-example.titleLookup"], [], ["loc", [null, [9, 12], [9, 104]]]], "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [13, 15], [13, 23]]]]], [], []], "lookupWindowCustomProperties", ["subexpr", "action", ["getLookupFolvProperties"], [], ["loc", [null, [14, 35], [14, 69]]]], "lookupLimitPredicate", ["subexpr", "@mut", [["get", "lookupCustomLimitPredicate", ["loc", [null, [15, 27], [15, 53]]]]], [], []], "autocomplete", true], ["loc", [null, [4, 4], [17, 6]]]], ["inline", "flexberry-lookup", [], ["componentName", "NoHierarchyLookup", "value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [22, 12], [22, 22]]]]], [], []], "projection", "CustomizeLookupWindowExampleView", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.components-examples.flexberry-lookup.hierarchy-olv-in-lookup-example.titleLookup"], [], ["loc", [null, [25, 12], [25, 104]]]], "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [29, 15], [29, 23]]]]], [], []], "lookupWindowCustomProperties", ["subexpr", "action", ["getLookupFolvProperties"], [], ["loc", [null, [30, 35], [30, 69]]]], "lookupLimitPredicate", ["subexpr", "@mut", [["get", "lookupCustomLimitPredicate", ["loc", [null, [31, 27], [31, 53]]]]], [], []], "autocomplete", true], ["loc", [null, [20, 4], [33, 6]]]], ["inline", "flexberry-lookup", [], ["componentName", "DisabledHierarchyLookup", "value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [38, 12], [38, 22]]]]], [], []], "projection", "CustomizeLookupWindowExampleView", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.components-examples.flexberry-lookup.hierarchy-olv-in-lookup-example.titleLookup"], [], ["loc", [null, [41, 12], [41, 104]]]], "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [45, 15], [45, 23]]]]], [], []], "lookupWindowCustomProperties", ["subexpr", "action", ["getLookupFolvProperties"], [], ["loc", [null, [46, 35], [46, 69]]]], "lookupLimitPredicate", ["subexpr", "@mut", [["get", "lookupCustomLimitPredicate", ["loc", [null, [47, 27], [47, 53]]]]], [], []], "autocomplete", true], ["loc", [null, [36, 4], [49, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-lookup/limit-function-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-lookup/limit-function-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.limit-function-example.caption"], [], ["loc", [null, [1, 22], [1, 103]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [5, 12], [5, 22]]]]], [], []], "projection", "LookupWithLimitFunctionExampleView", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.components-examples.flexberry-lookup.limit-function-example.titleLookup"], [], ["loc", [null, [8, 12], [8, 95]]]], "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [12, 15], [12, 23]]]]], [], []], "lookupWindowCustomProperties", ["subexpr", "action", ["getLookupFolvProperties"], [], ["loc", [null, [13, 35], [13, 69]]]], "lookupLimitPredicate", ["subexpr", "@mut", [["get", "lookupCustomLimitPredicate", ["loc", [null, [14, 27], [14, 53]]]]], [], []], "autocomplete", true], ["loc", [null, [4, 4], [16, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("br");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "class", "ui button firstLimitFunction");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "class", "ui button secondLimitFunction");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "class", "ui button clearLimitFunction");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [5]);
        var element2 = dom.childAt(element0, [7]);
        var element3 = dom.childAt(element0, [9]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[2] = dom.createElementMorph(element1);
        morphs[3] = dom.createMorphAt(element1, 1, 1);
        morphs[4] = dom.createElementMorph(element2);
        morphs[5] = dom.createMorphAt(element2, 1, 1);
        morphs[6] = dom.createElementMorph(element3);
        morphs[7] = dom.createMorphAt(element3, 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.limit-function-through-dynamic-properties-example.caption"], [], ["loc", [null, [1, 22], [1, 130]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [5, 12], [5, 22]]]]], [], []], "projection", "LookupWithLimitFunctionExampleView", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.components-examples.flexberry-lookup.limit-function-example.titleLookup"], [], ["loc", [null, [8, 12], [8, 95]]]], "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [12, 15], [12, 23]]]]], [], []], "autocomplete", true, "dynamicProperties", ["subexpr", "@mut", [["get", "dynamicProperties", ["loc", [null, [14, 24], [14, 41]]]]], [], []], "lookupLimitPredicate", ["subexpr", "@mut", [["get", "lookupCustomLimitPredicate", ["loc", [null, [15, 27], [15, 53]]]]], [], []]], ["loc", [null, [4, 4], [16, 6]]]], ["element", "action", ["firstLimitFunction"], ["on", "click"], ["loc", [null, [19, 47], [19, 89]]]], ["inline", "concat", [["subexpr", "t", ["forms.components-examples.flexberry-lookup.limit-function-through-dynamic-properties-example.captionFirstLimitFunction"], [], ["loc", [null, [20, 13], [20, 137]]]], ": ", ["get", "firstLimitType", ["loc", [null, [20, 143], [20, 157]]]]], [], ["loc", [null, [20, 4], [20, 159]]]], ["element", "action", ["secondLimitFunction"], ["on", "click"], ["loc", [null, [22, 48], [22, 91]]]], ["inline", "concat", [["subexpr", "t", ["forms.components-examples.flexberry-lookup.limit-function-through-dynamic-properties-example.captionSecondLimitFunction"], [], ["loc", [null, [23, 13], [23, 138]]]], ": ", ["get", "secondLimitType", ["loc", [null, [23, 144], [23, 159]]]]], [], ["loc", [null, [23, 4], [23, 161]]]], ["element", "action", ["clearLimitFunction"], ["on", "click"], ["loc", [null, [25, 47], [25, 89]]]], ["inline", "t", ["forms.components-examples.flexberry-lookup.limit-function-through-dynamic-properties-example.captionClearLimitFunction"], [], ["loc", [null, [26, 4], [26, 130]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-lookup/lookup-block-form-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-lookup/lookup-block-form-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          return morphs;
        },
        statements: [["content", "model.editor1.name", ["loc", [null, [15, 6], [15, 28]]]], ["content", "model.editor1.eMail", ["loc", [null, [16, 6], [16, 29]]]], ["content", "model.editor1.gender", ["loc", [null, [17, 6], [17, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-lookup/lookup-block-form-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        morphs[2] = dom.createMorphAt(element0, 3, 3);
        morphs[3] = dom.createMorphAt(element0, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-block-form-example.caption"], [], ["loc", [null, [1, 22], [1, 106]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [4, 11], [4, 78]]]], ["block", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.editor1", ["loc", [null, [6, 12], [6, 25]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 19], [7, 24]]]]], [], []], "relationName", "editor1", "projection", "ApplicationUserL", "displayAttributeName", "Name", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [11, 15], [11, 23]]]]], [], []], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [12, 13], [12, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [13, 13], [13, 41]]]]], 0, null, ["loc", [null, [5, 4], [18, 25]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.editor1", ["loc", [null, [19, 40], [19, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [19, 4], [19, 82]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-lookup/lookup-in-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-lookup/lookup-in-modal.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "header");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "content");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ui form flexberry-vertical-form");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "field");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "ui button");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [3, 1]);
          var element3 = dom.childAt(element2, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
          morphs[2] = dom.createElementMorph(element3);
          morphs[3] = dom.createMorphAt(element3, 0, 0);
          return morphs;
        },
        statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.captionModal"], [], ["loc", [null, [9, 22], [9, 101]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.editor1", ["loc", [null, [14, 16], [14, 29]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [15, 23], [15, 28]]]]], [], []], "relationName", "editor1", "projection", "ApplicationUserL", "displayAttributeName", "name", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [19, 19], [19, 27]]]]], [], []], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [20, 17], [20, 44]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [21, 17], [21, 45]]]]], ["loc", [null, [13, 8], [22, 10]]]], ["element", "action", ["logOut"], [], ["loc", [null, [24, 32], [24, 51]]]], ["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.buttonClose"], [], ["loc", [null, [24, 52], [24, 130]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 0
            },
            "end": {
              "line": 48,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-lookup/lookup-in-modal.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "header");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "content");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ui form flexberry-vertical-form");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "field");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "ui button");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [3, 1]);
          var element1 = dom.childAt(element0, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
          morphs[2] = dom.createElementMorph(element1);
          morphs[3] = dom.createMorphAt(element1, 0, 0);
          return morphs;
        },
        statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.captionModalDouble"], [], ["loc", [null, [30, 22], [30, 107]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [35, 16], [35, 26]]]]], [], []], "projection", "SuggestionTypeL", "displayAttributeName", "name", "title", "Master", "relationName", "type", "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [40, 17], [40, 44]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [41, 17], [41, 45]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [42, 19], [42, 27]]]]], [], []]], ["loc", [null, [34, 8], [43, 10]]]], ["element", "action", ["logOutDouble"], [], ["loc", [null, [45, 32], [45, 57]]]], ["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.buttonClose"], [], ["loc", [null, [45, 58], [45, 136]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 49,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-lookup/lookup-in-modal.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "class", "ui button");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "class", "ui button");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [2]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element4, [3]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createElementMorph(element5);
        morphs[2] = dom.createMorphAt(element5, 0, 0);
        morphs[3] = dom.createElementMorph(element6);
        morphs[4] = dom.createMorphAt(element6, 0, 0);
        morphs[5] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        morphs[6] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.caption"], [], ["loc", [null, [1, 22], [1, 96]]]], ["element", "action", ["modalWindow", "#example"], [], ["loc", [null, [4, 28], [4, 63]]]], ["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.buttonModal"], [], ["loc", [null, [4, 64], [4, 142]]]], ["element", "action", ["modalWindowDouble", "#example"], [], ["loc", [null, [5, 28], [5, 69]]]], ["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.buttonModalDouble"], [], ["loc", [null, [5, 70], [5, 154]]]], ["block", "ui-modal", [], ["id", "repeat-window"], 0, null, ["loc", [null, [8, 0], [27, 13]]]], ["block", "ui-modal", [], ["id", "repeat-window-double"], 1, null, ["loc", [null, [29, 0], [48, 13]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-lookup/numeric-autocomplete", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 42,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-lookup/numeric-autocomplete.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("label");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("label");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        morphs[2] = dom.createMorphAt(element0, 3, 3);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
        morphs[4] = dom.createMorphAt(element0, 7, 7);
        return morphs;
      },
      statements: [["inline", "t", ["forms.application.sitemap.components-examples.flexberry-lookup.numeric-autocomplete.caption"], [], ["loc", [null, [3, 22], [3, 121]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [6, 9], [6, 75]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.author", ["loc", [null, [8, 10], [8, 22]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [9, 17], [9, 22]]]]], [], []], "relationName", "author", "projection", "ApplicationUserL", "displayAttributeName", "karma", "autocomplete", true, "showPreviewButton", true, "previewOnSeparateRoute", true, "previewFormRoute", "ember-flexberry-dummy-application-user-edit", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [17, 10], [17, 74]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [18, 11], [18, 38]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [19, 11], [19, 39]]]], "preview", ["subexpr", "action", ["previewLookupValue"], [], ["loc", [null, [20, 12], [20, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [21, 13], [21, 21]]]]], [], []], "componentName", "SuggestionEditAuthor"], ["loc", [null, [7, 2], [23, 4]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [24, 9], [24, 76]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.editor1", ["loc", [null, [26, 10], [26, 23]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [27, 17], [27, 22]]]]], [], []], "relationName", "editor1", "projection", "ApplicationUserL", "displayAttributeName", "karma", "dropdown", true, "showPreviewButton", true, "previewFormRoute", "ember-flexberry-dummy-application-user-edit", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [34, 10], [34, 75]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [35, 11], [35, 38]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [36, 11], [36, 39]]]], "preview", ["subexpr", "action", ["previewLookupValue"], [], ["loc", [null, [37, 12], [37, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [38, 13], [38, 21]]]]], [], []], "componentName", "SuggestionEditEditor1"], ["loc", [null, [25, 2], [40, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-lookup/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 40,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-lookup/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-lookup", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [11, 20], [11, 31]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [12, 17], [12, 25]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [13, 14], [13, 24]]]]], [], []], "projection", "SettingLookupExampleView", "displayAttributeName", "name", "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [16, 14], [16, 19]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [17, 21], [17, 26]]]]], [], []], "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "autocomplete", ["subexpr", "@mut", [["get", "autocomplete", ["loc", [null, [21, 21], [21, 33]]]]], [], []], "autocompletePersistValue", ["subexpr", "@mut", [["get", "autocompletePersistValue", ["loc", [null, [22, 33], [22, 57]]]]], [], []], "usePaginationForAutocomplete", ["subexpr", "@mut", [["get", "usePaginationForAutocomplete", ["loc", [null, [23, 37], [23, 65]]]]], [], []], "maxResults", ["subexpr", "@mut", [["get", "maxResults", ["loc", [null, [24, 19], [24, 29]]]]], [], []], "displayValue", ["subexpr", "@mut", [["get", "model.lookupDisplayValue", ["loc", [null, [25, 21], [25, 45]]]]], [], []], "dropdown", ["subexpr", "@mut", [["get", "dropdown", ["loc", [null, [26, 17], [26, 25]]]]], [], []], "dropdownIsSearch", ["subexpr", "@mut", [["get", "dropdownIsSearch", ["loc", [null, [27, 25], [27, 41]]]]], [], []], "chooseText", ["subexpr", "@mut", [["get", "chooseText", ["loc", [null, [28, 19], [28, 29]]]]], [], []], "removeText", ["subexpr", "@mut", [["get", "removeText", ["loc", [null, [29, 19], [29, 29]]]]], [], []], "dropdownClass", ["subexpr", "@mut", [["get", "dropdownClass", ["loc", [null, [30, 22], [30, 35]]]]], [], []], "chooseButtonClass", ["subexpr", "@mut", [["get", "chooseButtonClass", ["loc", [null, [31, 26], [31, 43]]]]], [], []], "removeButtonClass", ["subexpr", "@mut", [["get", "removeButtonClass", ["loc", [null, [32, 26], [32, 43]]]]], [], []], "multiselect", true, "showPreviewButton", ["subexpr", "@mut", [["get", "showPreviewButton", ["loc", [null, [34, 26], [34, 43]]]]], [], []], "previewOnSeparateRoute", ["subexpr", "@mut", [["get", "previewOnSeparateRoute", ["loc", [null, [35, 31], [35, 53]]]]], [], []], "previewFormRoute", "ember-flexberry-dummy-suggestion-type-edit", "preview", ["subexpr", "action", ["previewLookupValue"], [], ["loc", [null, [37, 16], [37, 45]]]], "autocompleteDirection", ["subexpr", "@mut", [["get", "autocompleteDirection", ["loc", [null, [38, 30], [38, 51]]]]], [], []]], ["loc", [null, [10, 6], [39, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 43,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-lookup/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 97]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []], "componentBlockOverflow", "visible"], 0, null, ["loc", [null, [4, 4], [40, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-lookup/user-settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 7
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-lookup/user-settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "type", "button");
        dom.setAttribute(el3, "class", "ui button");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [3]);
        var element2 = dom.childAt(element1, [1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[1] = dom.createElementMorph(element2);
        morphs[2] = dom.createMorphAt(element2, 1, 1);
        morphs[3] = dom.createMorphAt(element1, 3, 3);
        return morphs;
      },
      statements: [["inline", "flexberry-lookup", [], ["componentName", "UserSettingsExample", "folvComponentName", "ApplicationUserObjectlistView", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [6, 15], [6, 23]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.author", ["loc", [null, [7, 12], [7, 24]]]]], [], []], "projection", "ApplicationUserL", "displayAttributeName", "name", "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [10, 19], [10, 24]]]]], [], []], "relationName", "author", "choose", "showLookupDialog", "remove", "removeLookupValue", "notUseUserSettings", ["subexpr", "@mut", [["get", "notUseUserSettings", ["loc", [null, [14, 25], [14, 43]]]]], [], []], "lookupWindowCustomProperties", ["subexpr", "action", ["getLookupFolvProperties"], [], ["loc", [null, [15, 35], [15, 69]]]], "disableHierarchicalMode", true], ["loc", [null, [3, 4], [17, 6]]]], ["element", "action", ["clearUserSetting"], [], ["loc", [null, [21, 44], [21, 73]]]], ["inline", "t", ["forms.components-examples.flexberry-lookup.user-settings-example.clear-user-setting"], [], ["loc", [null, [22, 6], [24, 8]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "notUseUserSettings", ["loc", [null, [27, 12], [27, 30]]]]], [], []], "label", ["subexpr", "t", ["forms.components-examples.flexberry-lookup.user-settings-example.not-user-user-setting-caption"], [], ["loc", [null, [28, 12], [30, 7]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [31, 15], [31, 23]]]]], [], []]], ["loc", [null, [26, 4], [32, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-menu/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-menu/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          morphs[2] = dom.createMorphAt(element0, 3, 3);
          morphs[3] = dom.createMorphAt(element0, 5, 5);
          return morphs;
        },
        statements: [["attribute", "class", ["get", "menuPosition", ["loc", [null, [10, 17], [10, 29]]]]], ["inline", "flexberry-menu", [], ["items", ["subexpr", "@mut", [["get", "itemsLeft", ["loc", [null, [12, 14], [12, 23]]]]], [], []], "onItemClick", ["subexpr", "action", ["onMenuItemClick"], [], ["loc", [null, [13, 20], [13, 46]]]], "collapseMenuOnItemClick", ["subexpr", "@mut", [["get", "collapseMenuOnItemClick", ["loc", [null, [14, 32], [14, 55]]]]], [], []]], ["loc", [null, [11, 6], [15, 8]]]], ["inline", "flexberry-menu", [], ["items", ["subexpr", "@mut", [["get", "itemsRight", ["loc", [null, [17, 14], [17, 24]]]]], [], []], "onItemClick", ["subexpr", "action", ["onMenuItemClick"], [], ["loc", [null, [18, 20], [18, 46]]]], "collapseMenuOnItemClick", ["subexpr", "@mut", [["get", "collapseMenuOnItemClick", ["loc", [null, [19, 32], [19, 55]]]]], [], []]], ["loc", [null, [16, 6], [20, 8]]]], ["inline", "flexberry-menu", [], ["items", ["subexpr", "@mut", [["get", "itemsSubmenu", ["loc", [null, [22, 14], [22, 26]]]]], [], []], "onItemClick", ["subexpr", "action", ["onMenuItemClick"], [], ["loc", [null, [23, 20], [23, 46]]]], "collapseMenuOnItemClick", ["subexpr", "@mut", [["get", "collapseMenuOnItemClick", ["loc", [null, [24, 32], [24, 55]]]]], [], []]], ["loc", [null, [21, 6], [25, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-menu/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-menu.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 95]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []], "componentBlockOverflow", "visible"], 0, null, ["loc", [null, [4, 4], [27, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-cancel", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 33,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-cancel.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-objectlistview.custom-filter.caption"], [], ["loc", [null, [1, 4], [1, 84]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion-type", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 20], [6, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [7, 18], [7, 31]]]]], [], []], "createNewButton", false, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [12, 10], [12, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [13, 17], [13, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [14, 18], [14, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [15, 22], [15, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [16, 20], [16, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [17, 16], [17, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [18, 17], [18, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [19, 23], [19, 52]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [20, 17], [20, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [22, 13], [22, 32]]]], "colsConfigButton", false, "componentName", "FOLVCustomFilterObjectListView", "toggleFilterByAnyWord", "toggleFilterByAnyWord", "toggleFilterByAllWords", "toggleFilterByAllWords", "beforeDeleteRecord", ["subexpr", "action", ["beforeDeleteRecord"], [], ["loc", [null, [27, 23], [27, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [28, 27], [28, 60]]]], "showDeleteButtonInRow", true, "showCheckBoxInRow", true], ["loc", [null, [3, 2], [31, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-immediately", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 33,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-data-immediately.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-objectlistview.custom-filter.caption"], [], ["loc", [null, [1, 4], [1, 84]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion-type", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 20], [6, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [7, 18], [7, 31]]]]], [], []], "createNewButton", false, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [12, 10], [12, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [13, 17], [13, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [14, 18], [14, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [15, 22], [15, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [16, 20], [16, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [17, 16], [17, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [18, 17], [18, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [19, 23], [19, 52]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [20, 17], [20, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [22, 13], [22, 32]]]], "colsConfigButton", false, "componentName", "FOLVCustomFilterObjectListView", "toggleFilterByAnyWord", "toggleFilterByAnyWord", "toggleFilterByAllWords", "toggleFilterByAllWords", "beforeDeleteRecord", ["subexpr", "action", ["beforeDeleteRecord"], [], ["loc", [null, [27, 23], [27, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [28, 27], [28, 60]]]], "showDeleteButtonInRow", true, "showCheckBoxInRow", true], ["loc", [null, [3, 2], [31, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-cancel", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 33,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-cancel.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-objectlistview.custom-filter.caption"], [], ["loc", [null, [1, 4], [1, 84]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion-type", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 20], [6, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [7, 18], [7, 31]]]]], [], []], "createNewButton", false, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [12, 10], [12, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [13, 17], [13, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [14, 18], [14, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [15, 22], [15, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [16, 20], [16, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [17, 16], [17, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [18, 17], [18, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [19, 23], [19, 52]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [20, 17], [20, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [22, 13], [22, 32]]]], "colsConfigButton", false, "componentName", "FOLVCustomFilterObjectListView", "toggleFilterByAnyWord", "toggleFilterByAnyWord", "toggleFilterByAllWords", "toggleFilterByAllWords", "beforeDeleteRecord", ["subexpr", "action", ["beforeDeleteRecord"], [], ["loc", [null, [27, 23], [27, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [28, 27], [28, 60]]]], "showDeleteButtonInRow", true, "showCheckBoxInRow", true], ["loc", [null, [3, 2], [31, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-immediately", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 33,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise-data-immediately.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-objectlistview.custom-filter.caption"], [], ["loc", [null, [1, 4], [1, 84]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion-type", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 20], [6, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [7, 18], [7, 31]]]]], [], []], "createNewButton", false, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [12, 10], [12, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [13, 17], [13, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [14, 18], [14, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [15, 22], [15, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [16, 20], [16, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [17, 16], [17, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [18, 17], [18, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [19, 23], [19, 52]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [20, 17], [20, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [22, 13], [22, 32]]]], "colsConfigButton", false, "componentName", "FOLVCustomFilterObjectListView", "toggleFilterByAnyWord", "toggleFilterByAnyWord", "toggleFilterByAllWords", "toggleFilterByAllWords", "beforeDeleteRecord", ["subexpr", "action", ["beforeDeleteRecord"], [], ["loc", [null, [27, 23], [27, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [28, 27], [28, 60]]]], "showDeleteButtonInRow", true, "showCheckBoxInRow", true], ["loc", [null, [3, 2], [31, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 33,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record-with-promise.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-objectlistview.custom-filter.caption"], [], ["loc", [null, [1, 4], [1, 84]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion-type", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 20], [6, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [7, 18], [7, 31]]]]], [], []], "createNewButton", false, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [12, 10], [12, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [13, 17], [13, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [14, 18], [14, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [15, 22], [15, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [16, 20], [16, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [17, 16], [17, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [18, 17], [18, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [19, 23], [19, 52]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [20, 17], [20, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [22, 13], [22, 32]]]], "colsConfigButton", false, "componentName", "FOLVCustomFilterObjectListView", "toggleFilterByAnyWord", "toggleFilterByAnyWord", "toggleFilterByAllWords", "toggleFilterByAllWords", "beforeDeleteRecord", ["subexpr", "action", ["beforeDeleteRecord"], [], ["loc", [null, [27, 23], [27, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [28, 27], [28, 60]]]], "showDeleteButtonInRow", true, "showCheckBoxInRow", true], ["loc", [null, [3, 2], [31, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 33,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/before-delete-record/folv-for-before-delete-record.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-objectlistview.custom-filter.caption"], [], ["loc", [null, [1, 4], [1, 84]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion-type", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 20], [6, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [7, 18], [7, 31]]]]], [], []], "createNewButton", false, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [12, 10], [12, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [13, 17], [13, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [14, 18], [14, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [15, 22], [15, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [16, 20], [16, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [17, 16], [17, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [18, 17], [18, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [19, 23], [19, 52]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [20, 17], [20, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [22, 13], [22, 32]]]], "colsConfigButton", false, "componentName", "FOLVCustomFilterObjectListView", "toggleFilterByAnyWord", "toggleFilterByAnyWord", "toggleFilterByAllWords", "toggleFilterByAllWords", "beforeDeleteRecord", ["subexpr", "action", ["beforeDeleteRecord"], [], ["loc", [null, [27, 23], [27, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [28, 27], [28, 60]]]], "showDeleteButtonInRow", true, "showCheckBoxInRow", true], ["loc", [null, [3, 2], [31, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/configurate-rows", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 4
            },
            "end": {
              "line": 55,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/configurate-rows.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [14, 16], [14, 21]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion", "editFormRoute", "ember-flexberry-dummy-suggestion-edit", "modelProjection", ["subexpr", "@mut", [["get", "projection", ["loc", [null, [17, 24], [17, 34]]]]], [], []], "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [18, 25], [18, 52]]]], "refreshButton", true, "filterText", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [20, 19], [20, 25]]]]], [], []], "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [21, 16], [21, 31]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [22, 21], [22, 44]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [23, 27], [23, 56]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [24, 31], [24, 64]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [25, 14], [25, 19]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [26, 21], [26, 33]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [27, 22], [27, 35]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [28, 26], [28, 43]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [29, 24], [29, 39]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [30, 20], [30, 31]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [31, 21], [31, 44]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [32, 17], [32, 36]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [33, 17], [33, 36]]]], "configurateRow", ["subexpr", "action", ["configurateRow"], [], ["loc", [null, [34, 23], [34, 48]]]], "componentName", "FOLVConfigurateRowsObjectListView"], ["loc", [null, [13, 6], [36, 8]]]], ["inline", "flexberry-groupedit", [], ["componentName", "ConfigurateRowsGroupedit", "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [39, 16], [39, 21]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "projection", ["loc", [null, [40, 24], [40, 34]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [41, 20], [41, 31]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [42, 17], [42, 25]]]]], [], []], "allowColumnResize", false, "createNewButton", true, "showAsteriskInRow", true, "showCheckBoxInRow", true, "rowClickable", false, "immediateDelete", false, "editOnSeperateRoute", false, "searchForContentChange", ["subexpr", "@mut", [["get", "searchForContentChange", ["loc", [null, [50, 31], [50, 53]]]]], [], []], "orderable", false, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [52, 17], [52, 25]]]]], [], []], "configurateRow", ["subexpr", "action", ["configurateRow"], [], ["loc", [null, [53, 23], [53, 48]]]]], ["loc", [null, [37, 6], [54, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 58,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/configurate-rows.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "class", "ui button");
        var el4 = dom.createTextNode("Change attribute 2");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4]);
        var element1 = dom.childAt(element0, [1, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createElementMorph(element1);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.configurate-rows.caption"], [], ["loc", [null, [2, 22], [2, 105]]]], ["element", "action", ["changeAttribute2"], [], ["loc", [null, [5, 12], [5, 41]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [9, 27], [9, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [10, 32], [10, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [11, 28], [11, 49]]]]], [], []]], 0, null, ["loc", [null, [8, 4], [55, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/custom-filter", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/custom-filter.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.custom-filter.caption"], [], ["loc", [null, [2, 4], [2, 84]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [5, 12], [5, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [7, 20], [7, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [8, 18], [8, 31]]]]], [], []], "createNewButton", false, "refreshButton", true, "enableFilters", true, "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [12, 12], [12, 19]]]]], [], []], "applyFilters", ["subexpr", "action", ["applyFilters"], [], ["loc", [null, [13, 17], [13, 40]]]], "resetFilters", ["subexpr", "action", ["resetFilters"], [], ["loc", [null, [14, 17], [14, 40]]]], "componentForFilter", ["subexpr", "action", ["componentForFilter"], [], ["loc", [null, [15, 23], [15, 52]]]], "conditionsByType", ["subexpr", "action", ["conditionsByType"], [], ["loc", [null, [16, 21], [16, 48]]]], "filterButton", true, "filterText", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [18, 15], [18, 21]]]]], [], []], "filterByAnyWord", ["subexpr", "@mut", [["get", "filterByAnyWord", ["loc", [null, [19, 20], [19, 35]]]]], [], []], "filterByAllWords", ["subexpr", "@mut", [["get", "filterByAllWords", ["loc", [null, [20, 21], [20, 37]]]]], [], []], "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [21, 21], [21, 48]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [22, 27], [22, 60]]]], "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [23, 12], [23, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [25, 10], [25, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [26, 17], [26, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [27, 18], [27, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [28, 22], [28, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [29, 20], [29, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [30, 16], [30, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [31, 17], [31, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [32, 23], [32, 52]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [33, 17], [33, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [34, 13], [34, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [35, 13], [35, 32]]]], "colsConfigButton", false, "componentName", "FOLVCustomFilterObjectListView", "customButtons", ["subexpr", "@mut", [["get", "customButtons", ["loc", [null, [38, 18], [38, 31]]]]], [], []], "toggleFilterByAnyWord", "toggleFilterByAnyWord", "toggleFilterByAllWords", "toggleFilterByAllWords", "showCheckBoxInRow", true, "deleteButton", true], ["loc", [null, [4, 2], [43, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 50,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [7, 1, 1]);
        var element2 = dom.childAt(element0, [9]);
        var element3 = dom.childAt(element0, [11]);
        var morphs = new Array(12);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        morphs[2] = dom.createMorphAt(element0, 3, 3);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [5, 1]), 1, 1);
        morphs[4] = dom.createElementMorph(element1);
        morphs[5] = dom.createMorphAt(element1, 0, 0);
        morphs[6] = dom.createAttrMorph(element2, 'class');
        morphs[7] = dom.createMorphAt(element2, 1, 1);
        morphs[8] = dom.createMorphAt(element2, 3, 3);
        morphs[9] = dom.createAttrMorph(element3, 'class');
        morphs[10] = dom.createMorphAt(element3, 1, 1);
        morphs[11] = dom.createMorphAt(element3, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-objectlistview.downloading-files-from-olv-list.caption"], [], ["loc", [null, [1, 22], [1, 120]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [23, 43], [23, 55]]]]], [], []]], ["loc", [null, [23, 6], [23, 57]]]], ["element", "action", ["close"], [], ["loc", [null, [28, 59], [28, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [28, 78], [28, 119]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [31, 25], [31, 42]]]], "error", ""], [], ["loc", [null, [31, 20], [31, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.order", ["loc", [null, [33, 12], [33, 23]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [34, 15], [34, 23]]]]], [], []]], ["loc", [null, [32, 4], [35, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [36, 40], [36, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [36, 4], [36, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.eMail", ["loc", [null, [38, 25], [38, 43]]]], "error", ""], [], ["loc", [null, [38, 20], [38, 56]]]]]]], ["inline", "flexberry-file", [], ["value", ["subexpr", "@mut", [["get", "model.file", ["loc", [null, [40, 12], [40, 22]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [41, 18], [41, 29]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [42, 15], [42, 23]]]]], [], []], "showPreview", false, "inputClass", ["subexpr", "@mut", [["get", "inputClass", ["loc", [null, [44, 17], [44, 27]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [45, 18], [45, 29]]]]], [], []]], ["loc", [null, [39, 4], [46, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.file", ["loc", [null, [47, 40], [47, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [47, 4], [47, 79]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/downloading-files-from-olv-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/downloading-files-from-olv-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.downloading-files-from-olv-list.caption"], [], ["loc", [null, [2, 4], [2, 102]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [5, 12], [5, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion-file", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [7, 20], [7, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [8, 18], [8, 31]]]]], [], []], "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "rowClickable", true, "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [13, 10], [13, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [14, 17], [14, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [15, 18], [15, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [16, 22], [16, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [19, 17], [19, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [20, 23], [20, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [21, 27], [21, 60]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [22, 17], [22, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [23, 13], [23, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [24, 13], [24, 32]]]], "componentName", "DownloadingFilesFromOLV"], ["loc", [null, [4, 2], [26, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/edit-form-with-detail-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 8
              },
              "end": {
                "line": 31,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [30, 62], [30, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [30, 80], [30, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 8
              },
              "end": {
                "line": 34,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [33, 68], [33, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [33, 94], [33, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 35,
                "column": 8
              },
              "end": {
                "line": 37,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [36, 66], [36, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [36, 86], [36, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 38,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [29, 23], [29, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [29, 43], [29, 63]]]]], [], ["loc", [null, [29, 38], [29, 64]]]]], [], ["loc", [null, [29, 18], [29, 65]]]]], [], 0, null, ["loc", [null, [29, 8], [31, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [32, 23], [32, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [32, 43], [32, 63]]]]], [], ["loc", [null, [32, 38], [32, 64]]]]], [], ["loc", [null, [32, 18], [32, 65]]]]], [], 1, null, ["loc", [null, [32, 8], [34, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [35, 23], [35, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [35, 44], [35, 58]]]]], [], ["loc", [null, [35, 39], [35, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [35, 65], [35, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [35, 80], [35, 100]]]]], [], ["loc", [null, [35, 60], [35, 101]]]]], [], ["loc", [null, [35, 35], [35, 102]]]]], [], ["loc", [null, [35, 18], [35, 103]]]]], [], 2, null, ["loc", [null, [35, 8], [37, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 85,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [7, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [9]);
        var element7 = dom.childAt(element3, [11]);
        var element8 = dom.childAt(element3, [13]);
        var element9 = dom.childAt(element3, [15]);
        var morphs = new Array(22);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element3, 1, 1);
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createMorphAt(dom.childAt(element3, [5, 1]), 1, 1);
        morphs[4] = dom.createMorphAt(element4, 1, 1);
        morphs[5] = dom.createElementMorph(element5);
        morphs[6] = dom.createMorphAt(element5, 0, 0);
        morphs[7] = dom.createAttrMorph(element6, 'class');
        morphs[8] = dom.createMorphAt(element6, 1, 1);
        morphs[9] = dom.createMorphAt(element6, 3, 3);
        morphs[10] = dom.createAttrMorph(element7, 'class');
        morphs[11] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
        morphs[12] = dom.createMorphAt(element7, 3, 3);
        morphs[13] = dom.createMorphAt(element7, 5, 5);
        morphs[14] = dom.createAttrMorph(element8, 'class');
        morphs[15] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[16] = dom.createMorphAt(element8, 3, 3);
        morphs[17] = dom.createMorphAt(element8, 5, 5);
        morphs[18] = dom.createAttrMorph(element9, 'class');
        morphs[19] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        morphs[20] = dom.createMorphAt(element9, 3, 3);
        morphs[21] = dom.createMorphAt(element9, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.caption"], [], ["loc", [null, [1, 22], [1, 86]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [23, 43], [23, 55]]]]], [], []]], ["loc", [null, [23, 6], [23, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [28, 16], [28, 24]]]]], [], 0, null, ["loc", [null, [28, 6], [38, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [39, 59], [39, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [39, 78], [39, 119]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [42, 25], [42, 42]]]], "error", ""], [], ["loc", [null, [42, 20], [42, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [44, 12], [44, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.name-caption"], [], ["loc", [null, [45, 12], [45, 79]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [46, 15], [46, 23]]]]], [], []]], ["loc", [null, [43, 4], [47, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [48, 40], [48, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [48, 4], [48, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.moderated", ["loc", [null, [50, 25], [50, 47]]]], "error", ""], [], ["loc", [null, [50, 20], [50, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.moderated-caption"], [], ["loc", [null, [51, 11], [51, 85]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.moderated", ["loc", [null, [53, 12], [53, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [54, 15], [54, 23]]]]], [], []]], ["loc", [null, [52, 4], [55, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.moderated", ["loc", [null, [56, 40], [56, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [56, 4], [56, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.parent", ["loc", [null, [58, 25], [58, 44]]]], "error", ""], [], ["loc", [null, [58, 20], [58, 57]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.parent-caption"], [], ["loc", [null, [59, 11], [59, 82]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.parent", ["loc", [null, [61, 12], [61, 24]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [62, 19], [62, 24]]]]], [], []], "relationName", "parent", "projection", "SuggestionTypeL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.parent-caption"], [], ["loc", [null, [66, 12], [66, 81]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [67, 13], [67, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [68, 13], [68, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [69, 15], [69, 23]]]]], [], []]], ["loc", [null, [60, 4], [70, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.parent", ["loc", [null, [71, 40], [71, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [71, 4], [71, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.localizedTypes", ["loc", [null, [73, 25], [73, 52]]]], "error", ""], [], ["loc", [null, [73, 20], [73, 65]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.localized-types-caption"], [], ["loc", [null, [74, 11], [74, 91]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionTypeLocalizedTypesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.localizedTypes", ["loc", [null, [77, 14], [77, 34]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.localizedTypes", ["loc", [null, [78, 22], [78, 63]]]]], [], []], "orderable", false, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [80, 15], [80, 23]]]]], [], []]], ["loc", [null, [75, 4], [81, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.localizedTypes", ["loc", [null, [82, 40], [82, 67]]]]], [], []], "pointing", "pointing"], ["loc", [null, [82, 4], [82, 89]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/edit-form-with-detail-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/edit-form-with-detail-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-list.caption"], [], ["loc", [null, [2, 4], [2, 68]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [5, 12], [5, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion-type", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [7, 20], [7, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [8, 18], [8, 31]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [11, 12], [11, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [13, 10], [13, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [14, 17], [14, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [15, 18], [15, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [16, 22], [16, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [19, 17], [19, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [20, 23], [20, 52]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [21, 17], [21, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [22, 13], [22, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [23, 13], [23, 32]]]], "componentName", "suggestionTypeLocalizedTypesObjectListView", "showCheckBoxInRow", true, "showEditMenuItemInRow", true, "showDeleteMenuItemInRow", true, "showDeleteButtonInRow", true, "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [29, 27], [29, 60]]]]], ["loc", [null, [4, 2], [30, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 8
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [31, 62], [31, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [31, 80], [31, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 8
              },
              "end": {
                "line": 35,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [34, 68], [34, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [34, 94], [34, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 8
              },
              "end": {
                "line": 38,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [37, 66], [37, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [37, 86], [37, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [30, 23], [30, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [30, 43], [30, 63]]]]], [], ["loc", [null, [30, 38], [30, 64]]]]], [], ["loc", [null, [30, 18], [30, 65]]]]], [], 0, null, ["loc", [null, [30, 8], [32, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [33, 23], [33, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [33, 43], [33, 63]]]]], [], ["loc", [null, [33, 38], [33, 64]]]]], [], ["loc", [null, [33, 18], [33, 65]]]]], [], 1, null, ["loc", [null, [33, 8], [35, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [36, 23], [36, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [36, 44], [36, 58]]]]], [], ["loc", [null, [36, 39], [36, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [36, 65], [36, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [36, 80], [36, 100]]]]], [], ["loc", [null, [36, 60], [36, 101]]]]], [], ["loc", [null, [36, 35], [36, 102]]]]], [], ["loc", [null, [36, 18], [36, 103]]]]], [], 2, null, ["loc", [null, [36, 8], [38, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 184,
              "column": 2
            },
            "end": {
              "line": 208,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-objectlistview", [], ["modelName", ["subexpr", "@mut", [["get", "settings.modelName", ["loc", [null, [186, 16], [186, 34]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "settings.modelProjection", ["loc", [null, [187, 22], [187, 46]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "settings.editFormRoute", ["loc", [null, [188, 20], [188, 42]]]]], [], []], "content", ["subexpr", "@mut", [["get", "settings.model", ["loc", [null, [189, 14], [189, 28]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "settings.computedSorting", ["loc", [null, [192, 14], [192, 38]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [194, 19], [194, 42]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [195, 25], [195, 54]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [196, 29], [196, 62]]]], "pages", ["subexpr", "@mut", [["get", "settings.pages", ["loc", [null, [197, 12], [197, 26]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "settings.perPageValue", ["loc", [null, [198, 19], [198, 40]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "settings.perPageValues", ["loc", [null, [199, 20], [199, 42]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "settings.recordsTotalCount", ["loc", [null, [200, 24], [200, 50]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "settings.hasPreviousPage", ["loc", [null, [201, 22], [201, 46]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "settings.hasNextPage", ["loc", [null, [202, 18], [202, 38]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [203, 19], [203, 42]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [204, 15], [204, 34]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [205, 15], [205, 34]]]], "componentName", ["subexpr", "@mut", [["get", "settings.componentName", ["loc", [null, [206, 20], [206, 42]]]]], [], []]], ["loc", [null, [185, 4], [207, 6]]]]],
        locals: ["settings"],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 211,
              "column": 2
            },
            "end": {
              "line": 235,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-objectlistview", [], ["modelName", ["subexpr", "@mut", [["get", "settings.modelName", ["loc", [null, [213, 16], [213, 34]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "settings.modelProjection", ["loc", [null, [214, 22], [214, 46]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "settings.editFormRoute", ["loc", [null, [215, 20], [215, 42]]]]], [], []], "content", ["subexpr", "@mut", [["get", "settings.model", ["loc", [null, [216, 14], [216, 28]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "settings.computedSorting", ["loc", [null, [219, 14], [219, 38]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [221, 19], [221, 42]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [222, 25], [222, 54]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [223, 29], [223, 62]]]], "pages", ["subexpr", "@mut", [["get", "settings.pages", ["loc", [null, [224, 12], [224, 26]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "settings.perPageValue", ["loc", [null, [225, 19], [225, 40]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "settings.perPageValues", ["loc", [null, [226, 20], [226, 42]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "settings.recordsTotalCount", ["loc", [null, [227, 24], [227, 50]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "settings.hasPreviousPage", ["loc", [null, [228, 22], [228, 46]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "settings.hasNextPage", ["loc", [null, [229, 18], [229, 38]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [230, 19], [230, 42]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [231, 15], [231, 34]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [232, 15], [232, 34]]]], "componentName", ["subexpr", "@mut", [["get", "settings.componentName", ["loc", [null, [233, 20], [233, 42]]]]], [], []]], ["loc", [null, [212, 4], [234, 6]]]]],
        locals: ["settings"],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 238,
              "column": 2
            },
            "end": {
              "line": 273,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-objectlistview", [], ["editFormRoute", ["subexpr", "@mut", [["get", "settings.editFormRoute", ["loc", [null, [240, 20], [240, 42]]]]], [], []], "showCheckBoxInRow", true, "modelName", ["subexpr", "@mut", [["get", "settings.modelName", ["loc", [null, [242, 16], [242, 34]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "settings.modelProjection", ["loc", [null, [243, 22], [243, 46]]]]], [], []], "content", ["subexpr", "@mut", [["get", "settings.model", ["loc", [null, [244, 14], [244, 28]]]]], [], []], "createNewButton", true, "enableFilters", true, "filters", ["subexpr", "@mut", [["get", "settings.filters", ["loc", [null, [247, 14], [247, 30]]]]], [], []], "filterButton", true, "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [249, 23], [249, 50]]]], "filterText", ["subexpr", "@mut", [["get", "settings.filter", ["loc", [null, [250, 17], [250, 32]]]]], [], []], "refreshButton", true, "exportExcelButton", true, "sorting", ["subexpr", "@mut", [["get", "settings.computedSorting", ["loc", [null, [253, 14], [253, 38]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [255, 19], [255, 42]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [256, 25], [256, 54]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [257, 29], [257, 62]]]], "applyFilters", ["subexpr", "action", ["applyFilters"], [], ["loc", [null, [258, 19], [258, 42]]]], "resetFilters", ["subexpr", "action", ["resetFilters"], [], ["loc", [null, [259, 19], [259, 42]]]], "pages", ["subexpr", "@mut", [["get", "settings.pages", ["loc", [null, [260, 12], [260, 26]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "settings.perPageValue", ["loc", [null, [261, 19], [261, 40]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "settings.perPageValues", ["loc", [null, [262, 20], [262, 42]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "settings.recordsTotalCount", ["loc", [null, [263, 24], [263, 50]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "settings.hasPreviousPage", ["loc", [null, [264, 22], [264, 46]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "settings.hasNextPage", ["loc", [null, [265, 18], [265, 38]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [266, 19], [266, 42]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [267, 15], [267, 34]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [268, 15], [268, 34]]]], "componentName", ["subexpr", "@mut", [["get", "settings.componentName", ["loc", [null, [269, 20], [269, 42]]]]], [], []], "showDeleteMenuItemInRow", true, "deleteButton", true], ["loc", [null, [239, 4], [272, 6]]]]],
        locals: ["settings"],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 276,
              "column": 2
            },
            "end": {
              "line": 303,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "settings.model", ["loc", [null, [278, 14], [278, 28]]]]], [], []], "modelName", ["subexpr", "@mut", [["get", "settings.modelName", ["loc", [null, [279, 16], [279, 34]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "settings.modelProjection", ["loc", [null, [280, 22], [280, 46]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "settings.editFormRoute", ["loc", [null, [281, 20], [281, 42]]]]], [], []], "orderable", false, "componentName", ["subexpr", "@mut", [["get", "settings.componentName", ["loc", [null, [283, 20], [283, 42]]]]], [], []], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [284, 29], [284, 62]]]], "colsConfigButton", false, "disableHierarchicalMode", false, "showCheckBoxInRow", true, "pages", ["subexpr", "@mut", [["get", "settings.pages", ["loc", [null, [288, 12], [288, 26]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "settings.perPageValue", ["loc", [null, [289, 19], [289, 40]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "settings.perPageValues", ["loc", [null, [290, 20], [290, 42]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "settings.recordsTotalCount", ["loc", [null, [291, 24], [291, 50]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "settings.hasPreviousPage", ["loc", [null, [292, 22], [292, 46]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "settings.hasNextPage", ["loc", [null, [293, 18], [293, 38]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [294, 19], [294, 42]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [295, 15], [295, 34]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [296, 15], [296, 34]]]], "availableCollExpandMode", true, "inHierarchicalMode", ["subexpr", "@mut", [["get", "settings.inHierarchicalMode", ["loc", [null, [298, 25], [298, 52]]]]], [], []], "hierarchicalAttribute", ["subexpr", "@mut", [["get", "settings.hierarchicalAttribute", ["loc", [null, [299, 28], [299, 58]]]]], [], []], "inExpandMode", ["subexpr", "@mut", [["get", "settings.inExpandMode", ["loc", [null, [300, 19], [300, 40]]]]], [], []], "hierarchyPaging", ["subexpr", "@mut", [["get", "settings.hierarchyPaging", ["loc", [null, [301, 22], [301, 46]]]]], [], []]], ["loc", [null, [277, 4], [302, 6]]]]],
        locals: ["settings"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 305,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/ember-flexberry-dummy-suggestion-multi-list-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [9, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [11]);
        var element7 = dom.childAt(element3, [13]);
        var element8 = dom.childAt(element3, [15]);
        var element9 = dom.childAt(element3, [17]);
        var element10 = dom.childAt(element3, [19]);
        var element11 = dom.childAt(element3, [21]);
        var element12 = dom.childAt(element3, [23]);
        var element13 = dom.childAt(element3, [25]);
        var element14 = dom.childAt(element3, [27]);
        var element15 = dom.childAt(element3, [29]);
        var element16 = dom.childAt(element3, [31]);
        var morphs = new Array(53);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element3, 1, 1);
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createMorphAt(element3, 5, 5);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [7, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 0, 0);
        morphs[8] = dom.createAttrMorph(element6, 'class');
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createAttrMorph(element7, 'class');
        morphs[12] = dom.createMorphAt(element7, 1, 1);
        morphs[13] = dom.createMorphAt(element7, 3, 3);
        morphs[14] = dom.createAttrMorph(element8, 'class');
        morphs[15] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[16] = dom.createMorphAt(element8, 3, 3);
        morphs[17] = dom.createMorphAt(element8, 5, 5);
        morphs[18] = dom.createAttrMorph(element9, 'class');
        morphs[19] = dom.createMorphAt(element9, 1, 1);
        morphs[20] = dom.createMorphAt(element9, 3, 3);
        morphs[21] = dom.createAttrMorph(element10, 'class');
        morphs[22] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        morphs[23] = dom.createMorphAt(element10, 3, 3);
        morphs[24] = dom.createMorphAt(element10, 5, 5);
        morphs[25] = dom.createAttrMorph(element11, 'class');
        morphs[26] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[27] = dom.createMorphAt(element11, 3, 3);
        morphs[28] = dom.createMorphAt(element11, 5, 5);
        morphs[29] = dom.createAttrMorph(element12, 'class');
        morphs[30] = dom.createMorphAt(dom.childAt(element12, [1]), 0, 0);
        morphs[31] = dom.createMorphAt(element12, 3, 3);
        morphs[32] = dom.createMorphAt(element12, 5, 5);
        morphs[33] = dom.createAttrMorph(element13, 'class');
        morphs[34] = dom.createMorphAt(dom.childAt(element13, [1]), 0, 0);
        morphs[35] = dom.createMorphAt(element13, 3, 3);
        morphs[36] = dom.createMorphAt(element13, 5, 5);
        morphs[37] = dom.createAttrMorph(element14, 'class');
        morphs[38] = dom.createMorphAt(dom.childAt(element14, [1]), 0, 0);
        morphs[39] = dom.createMorphAt(element14, 3, 3);
        morphs[40] = dom.createMorphAt(element14, 5, 5);
        morphs[41] = dom.createAttrMorph(element15, 'class');
        morphs[42] = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
        morphs[43] = dom.createMorphAt(element15, 3, 3);
        morphs[44] = dom.createMorphAt(element15, 5, 5);
        morphs[45] = dom.createAttrMorph(element16, 'class');
        morphs[46] = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
        morphs[47] = dom.createMorphAt(element16, 3, 3);
        morphs[48] = dom.createMorphAt(element16, 5, 5);
        morphs[49] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[50] = dom.createMorphAt(dom.childAt(fragment, [6]), 1, 1);
        morphs[51] = dom.createMorphAt(dom.childAt(fragment, [8]), 1, 1);
        morphs[52] = dom.createMorphAt(dom.childAt(fragment, [10]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.caption"], [], ["loc", [null, [1, 22], [1, 81]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [21, 26], [21, 31]]]]], [], []]], ["loc", [null, [21, 2], [21, 33]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [24, 43], [24, 55]]]]], [], []]], ["loc", [null, [24, 6], [24, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [29, 16], [29, 24]]]]], [], 0, null, ["loc", [null, [29, 6], [39, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [40, 59], [40, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [40, 78], [40, 119]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.address", ["loc", [null, [43, 25], [43, 45]]]], "error", ""], [], ["loc", [null, [43, 20], [43, 58]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.address", ["loc", [null, [45, 12], [45, 25]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.address-caption"], [], ["loc", [null, [46, 12], [46, 77]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [47, 15], [47, 23]]]]], [], []]], ["loc", [null, [44, 4], [48, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.address", ["loc", [null, [49, 40], [49, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [49, 4], [49, 82]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.text", ["loc", [null, [51, 25], [51, 42]]]], "error", ""], [], ["loc", [null, [51, 20], [51, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [53, 12], [53, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.text-caption"], [], ["loc", [null, [54, 12], [54, 74]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [55, 15], [55, 23]]]]], [], []]], ["loc", [null, [52, 4], [56, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.text", ["loc", [null, [57, 40], [57, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [57, 4], [57, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.date", ["loc", [null, [59, 25], [59, 42]]]], "error", ""], [], ["loc", [null, [59, 20], [59, 55]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.date-caption"], [], ["loc", [null, [60, 11], [60, 75]]]], ["inline", "flexberry-simpledatetime", [], ["type", "date", "value", ["subexpr", "@mut", [["get", "model.date", ["loc", [null, [63, 12], [63, 22]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [64, 15], [64, 23]]]]], [], []]], ["loc", [null, [61, 4], [65, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.date", ["loc", [null, [66, 40], [66, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [66, 4], [66, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.votes", ["loc", [null, [68, 25], [68, 43]]]], "error", ""], [], ["loc", [null, [68, 20], [68, 56]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.votes", ["loc", [null, [70, 12], [70, 23]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.votes-caption"], [], ["loc", [null, [71, 12], [71, 75]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [72, 15], [72, 23]]]]], [], []]], ["loc", [null, [69, 4], [73, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.votes", ["loc", [null, [74, 40], [74, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [74, 4], [74, 80]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.moderated", ["loc", [null, [76, 25], [76, 47]]]], "error", ""], [], ["loc", [null, [76, 20], [76, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.moderated-caption"], [], ["loc", [null, [77, 11], [77, 80]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.moderated", ["loc", [null, [79, 12], [79, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [80, 15], [80, 23]]]]], [], []]], ["loc", [null, [78, 4], [81, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.moderated", ["loc", [null, [82, 40], [82, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [82, 4], [82, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.type", ["loc", [null, [84, 25], [84, 42]]]], "error", ""], [], ["loc", [null, [84, 20], [84, 55]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.type-caption"], [], ["loc", [null, [85, 11], [85, 75]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [87, 12], [87, 22]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [88, 19], [88, 24]]]]], [], []], "relationName", "type", "projection", "SuggestionTypeL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.type-caption"], [], ["loc", [null, [92, 12], [92, 74]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [93, 13], [93, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [94, 13], [94, 41]]]], "dropdown", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [96, 15], [96, 23]]]]], [], []], "direction", "upward", "componentName", "SuggestionEditType"], ["loc", [null, [86, 4], [99, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.type", ["loc", [null, [100, 40], [100, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [100, 4], [100, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.author", ["loc", [null, [102, 25], [102, 44]]]], "error", ""], [], ["loc", [null, [102, 20], [102, 57]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [103, 11], [103, 77]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.author", ["loc", [null, [105, 12], [105, 24]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [106, 19], [106, 24]]]]], [], []], "relationName", "author", "projection", "ApplicationUserL", "displayAttributeName", "name", "showPreviewButton", true, "previewOnSeparateRoute", true, "previewFormRoute", "ember-flexberry-dummy-application-user-edit", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [113, 12], [113, 76]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [114, 13], [114, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [115, 13], [115, 41]]]], "preview", ["subexpr", "action", ["previewLookupValue"], [], ["loc", [null, [116, 14], [116, 43]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [117, 15], [117, 23]]]]], [], []], "componentName", "SuggestionEditAuthor"], ["loc", [null, [104, 4], [119, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.author", ["loc", [null, [120, 40], [120, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [120, 4], [120, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.editor1", ["loc", [null, [122, 25], [122, 45]]]], "error", ""], [], ["loc", [null, [122, 20], [122, 58]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [123, 11], [123, 78]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.editor1", ["loc", [null, [125, 12], [125, 25]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [126, 19], [126, 24]]]]], [], []], "relationName", "editor1", "projection", "ApplicationUserL", "displayAttributeName", "name", "showPreviewButton", true, "previewFormRoute", "ember-flexberry-dummy-application-user-edit", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [132, 12], [132, 77]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [133, 13], [133, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [134, 13], [134, 41]]]], "preview", ["subexpr", "action", ["previewLookupValue"], [], ["loc", [null, [135, 14], [135, 43]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [136, 15], [136, 23]]]]], [], []], "componentName", "SuggestionEditEditor1"], ["loc", [null, [124, 4], [138, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.editor1", ["loc", [null, [139, 40], [139, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [139, 4], [139, 82]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.files", ["loc", [null, [141, 25], [141, 43]]]], "error", ""], [], ["loc", [null, [141, 20], [141, 56]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.files-caption"], [], ["loc", [null, [142, 11], [142, 76]]]], ["inline", "flexberry-groupedit", [], ["componentName", "filesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.files", ["loc", [null, [145, 14], [145, 25]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [146, 26], [146, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.files", ["loc", [null, [147, 22], [147, 54]]]]], [], []], "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [149, 15], [149, 23]]]]], [], []]], ["loc", [null, [143, 4], [150, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.files", ["loc", [null, [151, 40], [151, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [151, 4], [151, 80]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.userVotes", ["loc", [null, [153, 25], [153, 47]]]], "error", ""], [], ["loc", [null, [153, 20], [153, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.userVotes-caption"], [], ["loc", [null, [154, 11], [154, 80]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionUserVotesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.userVotes", ["loc", [null, [157, 14], [157, 29]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [158, 26], [158, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.userVotes", ["loc", [null, [159, 22], [159, 58]]]]], [], []], "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [161, 15], [161, 23]]]]], [], []]], ["loc", [null, [155, 4], [162, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.userVotes", ["loc", [null, [163, 40], [163, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [163, 4], [163, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.comments", ["loc", [null, [165, 25], [165, 46]]]], "error", ""], [], ["loc", [null, [165, 20], [165, 59]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.comments-caption"], [], ["loc", [null, [166, 11], [166, 79]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionCommentsGroupEdit", "content", ["subexpr", "@mut", [["get", "model.comments", ["loc", [null, [169, 14], [169, 28]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [170, 26], [170, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.comments", ["loc", [null, [171, 22], [171, 57]]]]], [], []], "rowClickable", true, "rowClick", "rowClick", "editOnSeparateRoute", true, "editFormRoute", ["subexpr", "@mut", [["get", "commentsEditRoute", ["loc", [null, [175, 20], [175, 37]]]]], [], []], "saveBeforeRouteLeave", true, "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [178, 15], [178, 23]]]]], [], []]], ["loc", [null, [167, 4], [179, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.comments", ["loc", [null, [180, 40], [180, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [180, 4], [180, 83]]]], ["block", "with", [["get", "multiListSettings.MultiUserList", ["loc", [null, [184, 10], [184, 41]]]]], [], 1, null, ["loc", [null, [184, 2], [208, 11]]]], ["block", "with", [["get", "multiListSettings.MultiUserList2", ["loc", [null, [211, 10], [211, 42]]]]], [], 2, null, ["loc", [null, [211, 2], [235, 11]]]], ["block", "with", [["get", "multiListSettings.MultiSuggestionList", ["loc", [null, [238, 10], [238, 47]]]]], [], 3, null, ["loc", [null, [238, 2], [273, 11]]]], ["block", "with", [["get", "multiListSettings.MultiHierarchyList", ["loc", [null, [276, 10], [276, 46]]]]], [], 4, null, ["loc", [null, [276, 2], [303, 11]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/hierarchy-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/hierarchy-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4, 1]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.hierarchy-example.caption"], [], ["loc", [null, [2, 22], [2, 106]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [6, 14], [6, 19]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion-type", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [8, 22], [8, 37]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [9, 20], [9, 33]]]]], [], []], "orderable", false, "showShowingEntries", false, "componentName", "HiearchyExampleObjectListView", "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [13, 29], [13, 62]]]], "colsConfigButton", false, "disableHierarchicalMode", false, "showCheckBoxInRow", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [17, 12], [17, 17]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [18, 19], [18, 31]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [19, 20], [19, 33]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [20, 24], [20, 41]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [21, 22], [21, 37]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [22, 18], [22, 29]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [23, 19], [23, 42]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [24, 15], [24, 34]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [25, 15], [25, 34]]]], "availableCollExpandMode", true], ["loc", [null, [5, 4], [27, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/hierarchy-paging-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/hierarchy-paging-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4, 1]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.hierarchy-paging-example.caption"], [], ["loc", [null, [2, 22], [2, 113]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [6, 14], [6, 19]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion-type", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [8, 22], [8, 37]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [9, 20], [9, 33]]]]], [], []], "orderable", false, "componentName", "HiearchyExampleObjectListView", "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [12, 29], [12, 62]]]], "colsConfigButton", false, "disableHierarchicalMode", false, "showCheckBoxInRow", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [16, 12], [16, 17]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [17, 19], [17, 31]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [18, 20], [18, 33]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [19, 24], [19, 41]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [20, 22], [20, 37]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [21, 18], [21, 29]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [22, 19], [22, 42]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [23, 15], [23, 34]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [24, 15], [24, 34]]]], "availableCollExpandMode", true], ["loc", [null, [5, 4], [26, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/inheritance-models", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/inheritance-models.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui info message");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "header");
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3, "class", "list");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "class", "ui button");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "class", "ui button");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "class", "ui button");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [3]);
        var element3 = dom.childAt(element0, [3]);
        var element4 = dom.childAt(element0, [5]);
        var element5 = dom.childAt(element0, [7]);
        var morphs = new Array(11);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element2, [5]), 0, 0);
        morphs[5] = dom.createElementMorph(element3);
        morphs[6] = dom.createMorphAt(element3, 0, 0);
        morphs[7] = dom.createElementMorph(element4);
        morphs[8] = dom.createMorphAt(element4, 0, 0);
        morphs[9] = dom.createElementMorph(element5);
        morphs[10] = dom.createMorphAt(element5, 0, 0);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.caption"], [], ["loc", [null, [1, 22], [1, 107]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.message"], [], ["loc", [null, [5, 2], [5, 87]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.projectionBase"], [], ["loc", [null, [8, 8], [8, 100]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.projectionSuccessorPhone"], [], ["loc", [null, [9, 8], [9, 110]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.projectionSuccessorSoc"], [], ["loc", [null, [10, 8], [10, 108]]]], ["element", "action", ["root"], [], ["loc", [null, [13, 28], [13, 45]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.buttonRoot"], [], ["loc", [null, [13, 46], [13, 134]]]], ["element", "action", ["successorPhone"], [], ["loc", [null, [14, 28], [14, 55]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.buttonSuccessorPhone"], [], ["loc", [null, [14, 56], [14, 154]]]], ["element", "action", ["successorSoc"], [], ["loc", [null, [15, 28], [15, 53]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.buttonSuccessorSoc"], [], ["loc", [null, [15, 54], [15, 150]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/parent-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 8
              },
              "end": {
                "line": 31,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [30, 62], [30, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [30, 80], [30, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 8
              },
              "end": {
                "line": 34,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [33, 68], [33, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [33, 94], [33, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 35,
                "column": 8
              },
              "end": {
                "line": 37,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [36, 66], [36, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [36, 86], [36, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 38,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [29, 23], [29, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [29, 43], [29, 63]]]]], [], ["loc", [null, [29, 38], [29, 64]]]]], [], ["loc", [null, [29, 18], [29, 65]]]]], [], 0, null, ["loc", [null, [29, 8], [31, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [32, 23], [32, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [32, 43], [32, 63]]]]], [], ["loc", [null, [32, 38], [32, 64]]]]], [], ["loc", [null, [32, 18], [32, 65]]]]], [], 1, null, ["loc", [null, [32, 8], [34, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [35, 23], [35, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [35, 44], [35, 58]]]]], [], ["loc", [null, [35, 39], [35, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [35, 65], [35, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [35, 80], [35, 100]]]]], [], ["loc", [null, [35, 60], [35, 101]]]]], [], ["loc", [null, [35, 35], [35, 102]]]]], [], ["loc", [null, [35, 18], [35, 103]]]]], [], 2, null, ["loc", [null, [35, 8], [37, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 67,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [7, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [9]);
        var element7 = dom.childAt(element3, [11]);
        var element8 = dom.childAt(element3, [13]);
        var morphs = new Array(17);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element3, 1, 1);
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createMorphAt(dom.childAt(element3, [5, 1]), 1, 1);
        morphs[4] = dom.createMorphAt(element4, 1, 1);
        morphs[5] = dom.createElementMorph(element5);
        morphs[6] = dom.createMorphAt(element5, 0, 0);
        morphs[7] = dom.createAttrMorph(element6, 'class');
        morphs[8] = dom.createMorphAt(element6, 1, 1);
        morphs[9] = dom.createMorphAt(element6, 3, 3);
        morphs[10] = dom.createAttrMorph(element7, 'class');
        morphs[11] = dom.createMorphAt(element7, 1, 1);
        morphs[12] = dom.createMorphAt(element7, 3, 3);
        morphs[13] = dom.createAttrMorph(element8, 'class');
        morphs[14] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[15] = dom.createMorphAt(element8, 3, 3);
        morphs[16] = dom.createMorphAt(element8, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.caption"], [], ["loc", [null, [1, 22], [1, 107]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [23, 43], [23, 55]]]]], [], []]], ["loc", [null, [23, 6], [23, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [28, 16], [28, 24]]]]], [], 0, null, ["loc", [null, [28, 6], [38, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [39, 59], [39, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [39, 78], [39, 119]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [42, 25], [42, 42]]]], "error", ""], [], ["loc", [null, [42, 20], [42, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [44, 12], [44, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.name-caption"], [], ["loc", [null, [45, 12], [45, 100]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [46, 15], [46, 23]]]]], [], []]], ["loc", [null, [43, 4], [47, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [48, 40], [48, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [48, 4], [48, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.eMail", ["loc", [null, [50, 25], [50, 43]]]], "error", ""], [], ["loc", [null, [50, 20], [50, 56]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.eMail", ["loc", [null, [52, 12], [52, 23]]]]], [], []], "label", ["subexpr", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.eMail-caption"], [], ["loc", [null, [53, 12], [53, 101]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [54, 15], [54, 23]]]]], [], []]], ["loc", [null, [51, 4], [55, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.eMail", ["loc", [null, [56, 40], [56, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [56, 4], [56, 80]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.birthday", ["loc", [null, [58, 25], [58, 46]]]], "error", ""], [], ["loc", [null, [58, 20], [58, 59]]]]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.birthday-caption"], [], ["loc", [null, [59, 11], [59, 105]]]], ["inline", "flexberry-datepicker", [], ["value", ["subexpr", "@mut", [["get", "model.birthday", ["loc", [null, [61, 12], [61, 26]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [62, 15], [62, 23]]]]], [], []]], ["loc", [null, [60, 4], [63, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.birthday", ["loc", [null, [64, 40], [64, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [64, 4], [64, 83]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/parent-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/parent-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.buttonRoot"], [], ["loc", [null, [2, 4], [2, 92]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [5, 12], [5, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-parent", "modelProjection", "parentL", "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [8, 18], [8, 31]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [11, 12], [11, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [13, 10], [13, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [14, 17], [14, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [15, 18], [15, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [16, 22], [16, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [19, 17], [19, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [20, 23], [20, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [21, 27], [21, 60]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [22, 17], [22, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [23, 13], [23, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [24, 13], [24, 32]]]], "componentName", "OLVInheritanceModels"], ["loc", [null, [4, 2], [26, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 8
              },
              "end": {
                "line": 31,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [30, 62], [30, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [30, 80], [30, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 8
              },
              "end": {
                "line": 34,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [33, 68], [33, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [33, 94], [33, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 35,
                "column": 8
              },
              "end": {
                "line": 37,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [36, 66], [36, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [36, 86], [36, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 38,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [29, 23], [29, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [29, 43], [29, 63]]]]], [], ["loc", [null, [29, 38], [29, 64]]]]], [], ["loc", [null, [29, 18], [29, 65]]]]], [], 0, null, ["loc", [null, [29, 8], [31, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [32, 23], [32, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [32, 43], [32, 63]]]]], [], ["loc", [null, [32, 38], [32, 64]]]]], [], ["loc", [null, [32, 18], [32, 65]]]]], [], 1, null, ["loc", [null, [32, 8], [34, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [35, 23], [35, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [35, 44], [35, 58]]]]], [], ["loc", [null, [35, 39], [35, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [35, 65], [35, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [35, 80], [35, 100]]]]], [], ["loc", [null, [35, 60], [35, 101]]]]], [], ["loc", [null, [35, 35], [35, 102]]]]], [], ["loc", [null, [35, 18], [35, 103]]]]], [], 2, null, ["loc", [null, [35, 8], [37, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 75,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [7, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [9]);
        var element7 = dom.childAt(element3, [11]);
        var element8 = dom.childAt(element3, [13]);
        var element9 = dom.childAt(element3, [15]);
        var morphs = new Array(19);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element3, 1, 1);
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createMorphAt(dom.childAt(element3, [5, 1]), 1, 1);
        morphs[4] = dom.createMorphAt(element4, 1, 1);
        morphs[5] = dom.createElementMorph(element5);
        morphs[6] = dom.createMorphAt(element5, 0, 0);
        morphs[7] = dom.createAttrMorph(element6, 'class');
        morphs[8] = dom.createMorphAt(element6, 1, 1);
        morphs[9] = dom.createMorphAt(element6, 3, 3);
        morphs[10] = dom.createAttrMorph(element7, 'class');
        morphs[11] = dom.createMorphAt(element7, 1, 1);
        morphs[12] = dom.createMorphAt(element7, 3, 3);
        morphs[13] = dom.createAttrMorph(element8, 'class');
        morphs[14] = dom.createMorphAt(element8, 1, 1);
        morphs[15] = dom.createMorphAt(element8, 3, 3);
        morphs[16] = dom.createAttrMorph(element9, 'class');
        morphs[17] = dom.createMorphAt(element9, 1, 1);
        morphs[18] = dom.createMorphAt(element9, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.caption"], [], ["loc", [null, [1, 22], [1, 107]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [23, 43], [23, 55]]]]], [], []]], ["loc", [null, [23, 6], [23, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [28, 16], [28, 24]]]]], [], 0, null, ["loc", [null, [28, 6], [38, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [39, 59], [39, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [39, 78], [39, 119]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [42, 25], [42, 42]]]], "error", ""], [], ["loc", [null, [42, 20], [42, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [44, 12], [44, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.name-caption"], [], ["loc", [null, [45, 12], [45, 100]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [46, 15], [46, 23]]]]], [], []]], ["loc", [null, [43, 4], [47, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [48, 40], [48, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [48, 4], [48, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.phone1", ["loc", [null, [50, 25], [50, 44]]]], "error", ""], [], ["loc", [null, [50, 20], [50, 57]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.phone1", ["loc", [null, [52, 12], [52, 24]]]]], [], []], "label", ["subexpr", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.phone1-caption"], [], ["loc", [null, [53, 12], [53, 102]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [54, 15], [54, 23]]]]], [], []]], ["loc", [null, [51, 4], [55, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.phone1", ["loc", [null, [56, 40], [56, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [56, 4], [56, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.phone2", ["loc", [null, [58, 25], [58, 44]]]], "error", ""], [], ["loc", [null, [58, 20], [58, 57]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.phone2", ["loc", [null, [60, 12], [60, 24]]]]], [], []], "label", ["subexpr", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.phone2-caption"], [], ["loc", [null, [61, 12], [61, 102]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [62, 15], [62, 23]]]]], [], []]], ["loc", [null, [59, 4], [63, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.phone2", ["loc", [null, [64, 40], [64, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [64, 4], [64, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.phone3", ["loc", [null, [66, 25], [66, 44]]]], "error", ""], [], ["loc", [null, [66, 20], [66, 57]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.phone3", ["loc", [null, [68, 12], [68, 24]]]]], [], []], "label", ["subexpr", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.phone3-caption"], [], ["loc", [null, [69, 12], [69, 102]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [70, 15], [70, 23]]]]], [], []]], ["loc", [null, [67, 4], [71, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.phone3", ["loc", [null, [72, 40], [72, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [72, 4], [72, 81]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.buttonSuccessorPhone"], [], ["loc", [null, [2, 4], [2, 102]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [5, 12], [5, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-successor-phone", "modelProjection", "SuccessorL", "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [8, 18], [8, 31]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [11, 12], [11, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [13, 10], [13, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [14, 17], [14, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [15, 18], [15, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [16, 22], [16, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [19, 17], [19, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [20, 23], [20, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [21, 27], [21, 60]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [22, 17], [22, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [23, 13], [23, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [24, 13], [24, 32]]]], "componentName", "OLVInheritanceModels"], ["loc", [null, [4, 2], [26, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 8
              },
              "end": {
                "line": 31,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [30, 62], [30, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [30, 80], [30, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 8
              },
              "end": {
                "line": 34,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [33, 68], [33, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [33, 94], [33, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 35,
                "column": 8
              },
              "end": {
                "line": 37,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [36, 66], [36, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [36, 86], [36, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 38,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [29, 23], [29, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [29, 43], [29, 63]]]]], [], ["loc", [null, [29, 38], [29, 64]]]]], [], ["loc", [null, [29, 18], [29, 65]]]]], [], 0, null, ["loc", [null, [29, 8], [31, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [32, 23], [32, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [32, 43], [32, 63]]]]], [], ["loc", [null, [32, 38], [32, 64]]]]], [], ["loc", [null, [32, 18], [32, 65]]]]], [], 1, null, ["loc", [null, [32, 8], [34, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [35, 23], [35, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [35, 44], [35, 58]]]]], [], ["loc", [null, [35, 39], [35, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [35, 65], [35, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [35, 80], [35, 100]]]]], [], ["loc", [null, [35, 60], [35, 101]]]]], [], ["loc", [null, [35, 35], [35, 102]]]]], [], ["loc", [null, [35, 18], [35, 103]]]]], [], 2, null, ["loc", [null, [35, 8], [37, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 75,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [7, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [9]);
        var element7 = dom.childAt(element3, [11]);
        var element8 = dom.childAt(element3, [13]);
        var element9 = dom.childAt(element3, [15]);
        var morphs = new Array(19);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element3, 1, 1);
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createMorphAt(dom.childAt(element3, [5, 1]), 1, 1);
        morphs[4] = dom.createMorphAt(element4, 1, 1);
        morphs[5] = dom.createElementMorph(element5);
        morphs[6] = dom.createMorphAt(element5, 0, 0);
        morphs[7] = dom.createAttrMorph(element6, 'class');
        morphs[8] = dom.createMorphAt(element6, 1, 1);
        morphs[9] = dom.createMorphAt(element6, 3, 3);
        morphs[10] = dom.createAttrMorph(element7, 'class');
        morphs[11] = dom.createMorphAt(element7, 1, 1);
        morphs[12] = dom.createMorphAt(element7, 3, 3);
        morphs[13] = dom.createAttrMorph(element8, 'class');
        morphs[14] = dom.createMorphAt(element8, 1, 1);
        morphs[15] = dom.createMorphAt(element8, 3, 3);
        morphs[16] = dom.createAttrMorph(element9, 'class');
        morphs[17] = dom.createMorphAt(element9, 1, 1);
        morphs[18] = dom.createMorphAt(element9, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.caption"], [], ["loc", [null, [1, 22], [1, 107]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [23, 43], [23, 55]]]]], [], []]], ["loc", [null, [23, 6], [23, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [28, 16], [28, 24]]]]], [], 0, null, ["loc", [null, [28, 6], [38, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [39, 59], [39, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [39, 78], [39, 119]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [42, 25], [42, 42]]]], "error", ""], [], ["loc", [null, [42, 20], [42, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [44, 12], [44, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.name-caption"], [], ["loc", [null, [45, 12], [45, 100]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [46, 15], [46, 23]]]]], [], []]], ["loc", [null, [43, 4], [47, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [48, 40], [48, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [48, 4], [48, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.vK", ["loc", [null, [50, 25], [50, 40]]]], "error", ""], [], ["loc", [null, [50, 20], [50, 53]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.vK", ["loc", [null, [52, 12], [52, 20]]]]], [], []], "label", ["subexpr", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.vK-caption"], [], ["loc", [null, [53, 12], [53, 98]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [54, 15], [54, 23]]]]], [], []]], ["loc", [null, [51, 4], [55, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.vK", ["loc", [null, [56, 40], [56, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [56, 4], [56, 77]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.facebook", ["loc", [null, [58, 25], [58, 46]]]], "error", ""], [], ["loc", [null, [58, 20], [58, 59]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.facebook", ["loc", [null, [60, 12], [60, 26]]]]], [], []], "label", ["subexpr", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.facebook-caption"], [], ["loc", [null, [61, 12], [61, 104]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [62, 15], [62, 23]]]]], [], []]], ["loc", [null, [59, 4], [63, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.facebook", ["loc", [null, [64, 40], [64, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [64, 4], [64, 83]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.twitter", ["loc", [null, [66, 25], [66, 45]]]], "error", ""], [], ["loc", [null, [66, 20], [66, 58]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.twitter", ["loc", [null, [68, 12], [68, 25]]]]], [], []], "label", ["subexpr", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.twitter-caption"], [], ["loc", [null, [69, 12], [69, 103]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [70, 15], [70, 23]]]]], [], []]], ["loc", [null, [67, 4], [71, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.twitter", ["loc", [null, [72, 40], [72, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [72, 4], [72, 82]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.inheritance-models.buttonSuccessorSoc"], [], ["loc", [null, [2, 4], [2, 100]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [5, 12], [5, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-successor-social-network", "modelProjection", "SuccessorL", "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [8, 18], [8, 31]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [11, 12], [11, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [13, 10], [13, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [14, 17], [14, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [15, 18], [15, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [16, 22], [16, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [19, 17], [19, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [20, 23], [20, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [21, 27], [21, 60]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [22, 17], [22, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [23, 13], [23, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [24, 13], [24, 32]]]], "componentName", "OLVInheritanceModels"], ["loc", [null, [4, 2], [26, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/limit-function-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 47,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/limit-function-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "class", "ui button");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "class", "ui button");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "class", "ui button");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [8]);
        var element1 = dom.childAt(fragment, [10]);
        var element2 = dom.childAt(fragment, [12]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[3] = dom.createElementMorph(element0);
        morphs[4] = dom.createMorphAt(element0, 1, 1);
        morphs[5] = dom.createElementMorph(element1);
        morphs[6] = dom.createMorphAt(element1, 1, 1);
        morphs[7] = dom.createElementMorph(element2);
        morphs[8] = dom.createMorphAt(element2, 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.limit-function-example.caption"], [], ["loc", [null, [2, 22], [2, 111]]]], ["inline", "flexberry-objectlistview", [], ["modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 18], [6, 33]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 10], [7, 15]]]]], [], []], "createNewButton", false, "showCheckBoxInRow", false, "showDeleteButtonInRow", false, "showEditMenuItemInRow", false, "showDeleteMenuItemInRow", false, "rowClickable", false, "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [16, 19], [16, 46]]]], "filterText", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [17, 13], [17, 19]]]]], [], []], "filterButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [21, 10], [21, 25]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [23, 15], [23, 38]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [24, 21], [24, 50]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [25, 8], [25, 13]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [26, 15], [26, 27]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [27, 16], [27, 29]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [28, 20], [28, 37]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [29, 18], [29, 33]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [30, 14], [30, 25]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [31, 15], [31, 38]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [32, 11], [32, 30]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [33, 11], [33, 30]]]], "componentName", "FOLVLimitFunctionExampleObjectListView"], ["loc", [null, [4, 0], [35, 2]]]], ["element", "action", ["firstLimitFunction"], ["on", "click"], ["loc", [null, [38, 26], [38, 68]]]], ["inline", "concat", [["subexpr", "t", ["forms.components-examples.flexberry-objectlistview.limit-function-example.captionFirstLimitFunction"], [], ["loc", [null, [39, 11], [39, 116]]]], ": ", ["get", "firstLimitType", ["loc", [null, [39, 122], [39, 136]]]]], [], ["loc", [null, [39, 2], [39, 138]]]], ["element", "action", ["secondLimitFunction"], ["on", "click"], ["loc", [null, [41, 26], [41, 69]]]], ["inline", "concat", [["subexpr", "t", ["forms.components-examples.flexberry-objectlistview.limit-function-example.captionSecondLimitFunction"], [], ["loc", [null, [42, 11], [42, 117]]]], ": ", ["get", "secondLimitType", ["loc", [null, [42, 123], [42, 138]]]]], [], ["loc", [null, [42, 2], [42, 140]]]], ["element", "action", ["clearLimitFunction"], ["on", "click"], ["loc", [null, [44, 26], [44, 68]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.limit-function-example.captionClearLimitFunction"], [], ["loc", [null, [45, 2], [45, 109]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/limited-text-size-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 36,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/limited-text-size-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-objectlistview", [], ["editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [11, 20], [11, 33]]]]], [], []], "showCheckBoxInRow", true, "modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [14, 22], [14, 37]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [15, 14], [15, 19]]]]], [], []], "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [16, 14], [16, 21]]]]], [], []], "refreshButton", true, "createNewButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [19, 14], [19, 29]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [20, 19], [20, 42]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [21, 25], [21, 54]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [22, 29], [22, 62]]]], "applyFilters", ["subexpr", "action", ["applyFilters"], [], ["loc", [null, [23, 19], [23, 42]]]], "resetFilters", ["subexpr", "action", ["resetFilters"], [], ["loc", [null, [24, 19], [24, 42]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [25, 12], [25, 17]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [26, 19], [26, 31]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [27, 20], [27, 33]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [28, 24], [28, 41]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [29, 22], [29, 37]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [30, 18], [30, 29]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [31, 19], [31, 42]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [32, 15], [32, 34]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [33, 15], [33, 34]]]], "componentName", "LimitedSizeOlv"], ["loc", [null, [10, 4], [35, 6]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 39,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/limited-text-size-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4, 1]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.limited-text-size-example.caption"], [], ["loc", [null, [2, 22], [2, 114]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [6, 27], [6, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [7, 32], [7, 57]]]]], [], []], "componentTemplateText", ""], 0, null, ["loc", [null, [5, 4], [36, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/list-on-editform", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 39,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/list-on-editform.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4, 1]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-list.caption"], [], ["loc", [null, [2, 4], [2, 63]]]], ["inline", "flexberry-objectlistview", [], ["editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "showCheckBoxInRow", true, "modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [9, 20], [9, 35]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [10, 12], [10, 17]]]]], [], []], "createNewButton", false, "enableFilters", true, "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [13, 12], [13, 19]]]]], [], []], "refreshButton", true, "exportExcelButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [16, 12], [16, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [18, 17], [18, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [19, 23], [19, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [20, 27], [20, 60]]]], "applyFilters", ["subexpr", "action", ["applyFilters"], [], ["loc", [null, [21, 17], [21, 40]]]], "resetFilters", ["subexpr", "action", ["resetFilters"], [], ["loc", [null, [22, 17], [22, 40]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [23, 10], [23, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [24, 17], [24, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [25, 18], [25, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [26, 22], [26, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [27, 20], [27, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [28, 16], [28, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [29, 17], [29, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [30, 13], [30, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [31, 13], [31, 32]]]], "componentName", "SuggestionObjectListView", "showDeleteMenuItemInRow", true, "deleteButton", true, "componentName", "FOLVListOnEditformObjectListView"], ["loc", [null, [5, 2], [36, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/lock-services-editor-view-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/lock-services-editor-view-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h3");
          dom.setAttribute(el1, "class", "ui header");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(": ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element3, 0, 0);
          morphs[1] = dom.createMorphAt(element3, 2, 2);
          return morphs;
        },
        statements: [["inline", "t", ["forms.components-examples.flexberry-objectlistview.lock-services-editor-view.blocked-by"], [], ["loc", [null, [2, 24], [2, 119]]]], ["content", "blockedByUser", ["loc", [null, [2, 121], [2, 138]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 8
              },
              "end": {
                "line": 35,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/lock-services-editor-view-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [34, 62], [34, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [34, 80], [34, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 8
              },
              "end": {
                "line": 38,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/lock-services-editor-view-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [37, 68], [37, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [37, 94], [37, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 39,
                "column": 8
              },
              "end": {
                "line": 41,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/lock-services-editor-view-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [40, 66], [40, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [40, 86], [40, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 32,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/lock-services-editor-view-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [33, 23], [33, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [33, 43], [33, 63]]]]], [], ["loc", [null, [33, 38], [33, 64]]]]], [], ["loc", [null, [33, 18], [33, 65]]]]], [], 0, null, ["loc", [null, [33, 8], [35, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [36, 23], [36, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [36, 43], [36, 63]]]]], [], ["loc", [null, [36, 38], [36, 64]]]]], [], ["loc", [null, [36, 18], [36, 65]]]]], [], 1, null, ["loc", [null, [36, 8], [38, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [39, 23], [39, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [39, 44], [39, 58]]]]], [], ["loc", [null, [39, 39], [39, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [39, 65], [39, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [39, 80], [39, 100]]]]], [], ["loc", [null, [39, 60], [39, 101]]]]], [], ["loc", [null, [39, 35], [39, 102]]]]], [], ["loc", [null, [39, 18], [39, 103]]]]], [], 2, null, ["loc", [null, [39, 8], [41, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 178,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/lock-services-editor-view-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [3]);
        var element5 = dom.childAt(element4, [9, 1]);
        var element6 = dom.childAt(element5, [3]);
        var element7 = dom.childAt(element4, [11]);
        var element8 = dom.childAt(element4, [13]);
        var element9 = dom.childAt(element4, [15]);
        var element10 = dom.childAt(element4, [17]);
        var element11 = dom.childAt(element4, [19]);
        var element12 = dom.childAt(element4, [21]);
        var element13 = dom.childAt(element4, [23]);
        var element14 = dom.childAt(element4, [25]);
        var element15 = dom.childAt(element4, [27]);
        var element16 = dom.childAt(element4, [29]);
        var element17 = dom.childAt(element4, [31]);
        var morphs = new Array(50);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
        morphs[2] = dom.createMorphAt(element4, 1, 1);
        morphs[3] = dom.createMorphAt(element4, 3, 3);
        morphs[4] = dom.createMorphAt(element4, 5, 5);
        morphs[5] = dom.createMorphAt(dom.childAt(element4, [7, 1]), 1, 1);
        morphs[6] = dom.createMorphAt(element5, 1, 1);
        morphs[7] = dom.createElementMorph(element6);
        morphs[8] = dom.createMorphAt(element6, 0, 0);
        morphs[9] = dom.createAttrMorph(element7, 'class');
        morphs[10] = dom.createMorphAt(element7, 1, 1);
        morphs[11] = dom.createMorphAt(element7, 3, 3);
        morphs[12] = dom.createAttrMorph(element8, 'class');
        morphs[13] = dom.createMorphAt(element8, 1, 1);
        morphs[14] = dom.createMorphAt(element8, 3, 3);
        morphs[15] = dom.createAttrMorph(element9, 'class');
        morphs[16] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        morphs[17] = dom.createMorphAt(element9, 3, 3);
        morphs[18] = dom.createMorphAt(element9, 5, 5);
        morphs[19] = dom.createAttrMorph(element10, 'class');
        morphs[20] = dom.createMorphAt(element10, 1, 1);
        morphs[21] = dom.createMorphAt(element10, 3, 3);
        morphs[22] = dom.createAttrMorph(element11, 'class');
        morphs[23] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[24] = dom.createMorphAt(element11, 3, 3);
        morphs[25] = dom.createMorphAt(element11, 5, 5);
        morphs[26] = dom.createAttrMorph(element12, 'class');
        morphs[27] = dom.createMorphAt(dom.childAt(element12, [1]), 0, 0);
        morphs[28] = dom.createMorphAt(element12, 3, 3);
        morphs[29] = dom.createMorphAt(element12, 5, 5);
        morphs[30] = dom.createAttrMorph(element13, 'class');
        morphs[31] = dom.createMorphAt(dom.childAt(element13, [1]), 0, 0);
        morphs[32] = dom.createMorphAt(element13, 3, 3);
        morphs[33] = dom.createMorphAt(element13, 5, 5);
        morphs[34] = dom.createAttrMorph(element14, 'class');
        morphs[35] = dom.createMorphAt(dom.childAt(element14, [1]), 0, 0);
        morphs[36] = dom.createMorphAt(element14, 3, 3);
        morphs[37] = dom.createMorphAt(element14, 5, 5);
        morphs[38] = dom.createAttrMorph(element15, 'class');
        morphs[39] = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
        morphs[40] = dom.createMorphAt(element15, 3, 3);
        morphs[41] = dom.createMorphAt(element15, 5, 5);
        morphs[42] = dom.createAttrMorph(element16, 'class');
        morphs[43] = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
        morphs[44] = dom.createMorphAt(element16, 3, 3);
        morphs[45] = dom.createMorphAt(element16, 5, 5);
        morphs[46] = dom.createAttrMorph(element17, 'class');
        morphs[47] = dom.createMorphAt(dom.childAt(element17, [1]), 0, 0);
        morphs[48] = dom.createMorphAt(element17, 3, 3);
        morphs[49] = dom.createMorphAt(element17, 5, 5);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "blockedByUser", ["loc", [null, [1, 6], [1, 19]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.caption"], [], ["loc", [null, [4, 22], [4, 81]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [9, 12], [9, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [10, 12], [10, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [11, 12], [11, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [12, 11], [12, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [13, 11], [13, 42]]]]], ["loc", [null, [6, 2], [14, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [18, 12], [18, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [19, 12], [19, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [20, 12], [20, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [21, 11], [21, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [22, 11], [22, 40]]]]], ["loc", [null, [15, 2], [23, 4]]]], ["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [24, 26], [24, 31]]]]], [], []]], ["loc", [null, [24, 2], [24, 33]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [27, 43], [27, 55]]]]], [], []]], ["loc", [null, [27, 6], [27, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [32, 16], [32, 24]]]]], [], 1, null, ["loc", [null, [32, 6], [42, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [43, 59], [43, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [43, 78], [43, 119]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.address", ["loc", [null, [46, 25], [46, 45]]]], "error", ""], [], ["loc", [null, [46, 20], [46, 58]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.address", ["loc", [null, [48, 12], [48, 25]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.address-caption"], [], ["loc", [null, [49, 12], [49, 77]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [50, 15], [50, 23]]]]], [], []]], ["loc", [null, [47, 4], [51, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.address", ["loc", [null, [52, 40], [52, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [52, 4], [52, 82]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.text", ["loc", [null, [54, 25], [54, 42]]]], "error", ""], [], ["loc", [null, [54, 20], [54, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [56, 12], [56, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.text-caption"], [], ["loc", [null, [57, 12], [57, 74]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [58, 15], [58, 23]]]]], [], []]], ["loc", [null, [55, 4], [59, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.text", ["loc", [null, [60, 40], [60, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [60, 4], [60, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.date", ["loc", [null, [62, 25], [62, 42]]]], "error", ""], [], ["loc", [null, [62, 20], [62, 55]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.date-caption"], [], ["loc", [null, [63, 11], [63, 75]]]], ["inline", "flexberry-datepicker", [], ["value", ["subexpr", "@mut", [["get", "model.date", ["loc", [null, [65, 12], [65, 22]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [66, 15], [66, 23]]]]], [], []]], ["loc", [null, [64, 4], [67, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.date", ["loc", [null, [68, 40], [68, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [68, 4], [68, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.votes", ["loc", [null, [70, 25], [70, 43]]]], "error", ""], [], ["loc", [null, [70, 20], [70, 56]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.votes", ["loc", [null, [72, 12], [72, 23]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.votes-caption"], [], ["loc", [null, [73, 12], [73, 75]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [74, 15], [74, 23]]]]], [], []]], ["loc", [null, [71, 4], [75, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.votes", ["loc", [null, [76, 40], [76, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [76, 4], [76, 80]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.moderated", ["loc", [null, [78, 25], [78, 47]]]], "error", ""], [], ["loc", [null, [78, 20], [78, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.moderated-caption"], [], ["loc", [null, [79, 11], [79, 80]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.moderated", ["loc", [null, [81, 12], [81, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [82, 15], [82, 23]]]]], [], []]], ["loc", [null, [80, 4], [83, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.moderated", ["loc", [null, [84, 40], [84, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [84, 4], [84, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.type", ["loc", [null, [86, 25], [86, 42]]]], "error", ""], [], ["loc", [null, [86, 20], [86, 55]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.type-caption"], [], ["loc", [null, [87, 11], [87, 75]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [89, 12], [89, 22]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [90, 19], [90, 24]]]]], [], []], "relationName", "type", "projection", "SuggestionTypeL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.type-caption"], [], ["loc", [null, [94, 12], [94, 74]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [95, 13], [95, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [96, 13], [96, 41]]]], "dropdown", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [98, 15], [98, 23]]]]], [], []], "direction", "upward", "componentName", "SuggestionEditType"], ["loc", [null, [88, 4], [101, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.type", ["loc", [null, [102, 40], [102, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [102, 4], [102, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.author", ["loc", [null, [104, 25], [104, 44]]]], "error", ""], [], ["loc", [null, [104, 20], [104, 57]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [105, 11], [105, 77]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.author", ["loc", [null, [107, 12], [107, 24]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [108, 19], [108, 24]]]]], [], []], "relationName", "author", "projection", "ApplicationUserL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [112, 12], [112, 76]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [113, 13], [113, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [114, 13], [114, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [115, 15], [115, 23]]]]], [], []], "componentName", "SuggestionEditAuthor"], ["loc", [null, [106, 4], [117, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.author", ["loc", [null, [118, 40], [118, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [118, 4], [118, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.editor1", ["loc", [null, [120, 25], [120, 45]]]], "error", ""], [], ["loc", [null, [120, 20], [120, 58]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [121, 11], [121, 78]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.editor1", ["loc", [null, [123, 12], [123, 25]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [124, 19], [124, 24]]]]], [], []], "relationName", "editor1", "projection", "ApplicationUserL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [128, 12], [128, 77]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [129, 13], [129, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [130, 13], [130, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [131, 15], [131, 23]]]]], [], []], "componentName", "SuggestionEditEditor1"], ["loc", [null, [122, 4], [133, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.editor1", ["loc", [null, [134, 40], [134, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [134, 4], [134, 82]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.files", ["loc", [null, [136, 25], [136, 43]]]], "error", ""], [], ["loc", [null, [136, 20], [136, 56]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.files-caption"], [], ["loc", [null, [137, 11], [137, 76]]]], ["inline", "flexberry-groupedit", [], ["componentName", "filesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.files", ["loc", [null, [140, 14], [140, 25]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [141, 26], [141, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.files", ["loc", [null, [142, 22], [142, 54]]]]], [], []], "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [144, 15], [144, 23]]]]], [], []]], ["loc", [null, [138, 4], [145, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.files", ["loc", [null, [146, 40], [146, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [146, 4], [146, 80]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.userVotes", ["loc", [null, [148, 25], [148, 47]]]], "error", ""], [], ["loc", [null, [148, 20], [148, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.userVotes-caption"], [], ["loc", [null, [149, 11], [149, 80]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionUserVotesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.userVotes", ["loc", [null, [152, 14], [152, 29]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [153, 26], [153, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.userVotes", ["loc", [null, [154, 22], [154, 58]]]]], [], []], "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [156, 15], [156, 23]]]]], [], []]], ["loc", [null, [150, 4], [157, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.userVotes", ["loc", [null, [158, 40], [158, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [158, 4], [158, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.comments", ["loc", [null, [160, 25], [160, 46]]]], "error", ""], [], ["loc", [null, [160, 20], [160, 59]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.comments-caption"], [], ["loc", [null, [161, 11], [161, 79]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionCommentsGroupEdit", "content", ["subexpr", "@mut", [["get", "model.comments", ["loc", [null, [164, 14], [164, 28]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [165, 26], [165, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.comments", ["loc", [null, [166, 22], [166, 57]]]]], [], []], "rowClickable", true, "rowClick", "rowClick", "editOnSeparateRoute", true, "editFormRoute", ["subexpr", "@mut", [["get", "commentsEditRoute", ["loc", [null, [170, 20], [170, 37]]]]], [], []], "saveBeforeRouteLeave", true, "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [173, 15], [173, 23]]]]], [], []]], ["loc", [null, [162, 4], [174, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.comments", ["loc", [null, [175, 40], [175, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [175, 4], [175, 83]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/lock-services-editor-view-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 52,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/lock-services-editor-view-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(element0, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [5]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-list.caption"], [], ["loc", [null, [2, 4], [2, 63]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [7, 12], [7, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [8, 12], [8, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [9, 12], [9, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [10, 11], [10, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [11, 11], [11, 42]]]]], ["loc", [null, [4, 2], [12, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [16, 12], [16, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [17, 12], [17, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [18, 12], [18, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [19, 11], [19, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [20, 11], [20, 40]]]]], ["loc", [null, [13, 2], [21, 4]]]], ["inline", "flexberry-objectlistview", [], ["editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [24, 18], [24, 31]]]]], [], []], "showCheckBoxInRow", true, "modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [27, 20], [27, 35]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [28, 12], [28, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "exportExcelButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [32, 12], [32, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [34, 17], [34, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [35, 23], [35, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [36, 27], [36, 60]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [37, 10], [37, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [38, 17], [38, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [39, 18], [39, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [40, 22], [40, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [41, 20], [41, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [42, 16], [42, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [43, 17], [43, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [44, 13], [44, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [45, 13], [45, 32]]]], "componentName", "SuggestionObjectListView", "showDeleteMenuItemInRow", true, "deleteButton", true], ["loc", [null, [23, 2], [49, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/object-list-view-resize", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 2
            },
            "end": {
              "line": 22,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/object-list-view-resize.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "class", "ui button create-button");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 0, 0);
          morphs[2] = dom.createMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["element", "action", ["addRecord"], [], ["loc", [null, [9, 44], [9, 66]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.object-list-view-resize.button-сaption"], [], ["loc", [null, [9, 67], [9, 164]]]], ["inline", "object-list-view", [], ["modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [12, 24], [12, 39]]]]], [], []], "componentName", "ObjectListViewResize", "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [14, 16], [14, 21]]]]], [], []], "editOnSeparateRoute", true, "rowClickable", true, "action", "objectListViewRowClick", "searchForContentChange", ["subexpr", "@mut", [["get", "searchForContentChange", ["loc", [null, [18, 31], [18, 53]]]]], [], []], "singleColumnCellComponent", ["subexpr", "@mut", [["get", "singleColumnCellComponent", ["loc", [null, [19, 34], [19, 59]]]]], [], []]], ["loc", [null, [10, 4], [20, 6]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/object-list-view-resize.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ui stackable grid");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.object-list-view-resize.caption"], [], ["loc", [null, [2, 4], [2, 94]]]], ["block", "flexberry-toggler", [], ["expanded", true], 0, null, ["loc", [null, [5, 2], [22, 24]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/on-edit-form", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-list.caption"], [], ["loc", [null, [2, 4], [2, 69]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [5, 12], [5, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-application-user", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [7, 20], [7, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [8, 18], [8, 31]]]]], [], []], "createNewButton", false, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [11, 12], [11, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [13, 10], [13, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [14, 17], [14, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [15, 18], [15, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [16, 22], [16, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [19, 17], [19, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [20, 23], [20, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [21, 27], [21, 60]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [22, 17], [22, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [23, 13], [23, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [24, 13], [24, 32]]]], "componentName", "FOLVOnEditFormObjectListView"], ["loc", [null, [4, 2], [26, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/suggestion", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 8
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/suggestion.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [31, 62], [31, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [31, 80], [31, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 8
              },
              "end": {
                "line": 35,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/suggestion.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [34, 68], [34, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [34, 94], [34, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 8
              },
              "end": {
                "line": 38,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/suggestion.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [37, 66], [37, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [37, 86], [37, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/suggestion.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [30, 23], [30, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [30, 43], [30, 63]]]]], [], ["loc", [null, [30, 38], [30, 64]]]]], [], ["loc", [null, [30, 18], [30, 65]]]]], [], 0, null, ["loc", [null, [30, 8], [32, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [33, 23], [33, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [33, 43], [33, 63]]]]], [], ["loc", [null, [33, 38], [33, 64]]]]], [], ["loc", [null, [33, 18], [33, 65]]]]], [], 1, null, ["loc", [null, [33, 8], [35, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [36, 23], [36, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [36, 44], [36, 58]]]]], [], ["loc", [null, [36, 39], [36, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [36, 65], [36, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [36, 80], [36, 100]]]]], [], ["loc", [null, [36, 60], [36, 101]]]]], [], ["loc", [null, [36, 35], [36, 102]]]]], [], ["loc", [null, [36, 18], [36, 103]]]]], [], 2, null, ["loc", [null, [36, 8], [38, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 207,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/suggestion.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h3");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(":");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [9, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [11]);
        var element7 = dom.childAt(element3, [13]);
        var element8 = dom.childAt(element3, [15]);
        var element9 = dom.childAt(element3, [17]);
        var element10 = dom.childAt(element3, [19]);
        var element11 = dom.childAt(element3, [21]);
        var element12 = dom.childAt(element3, [23]);
        var element13 = dom.childAt(element3, [25]);
        var element14 = dom.childAt(element3, [27]);
        var element15 = dom.childAt(element3, [29]);
        var element16 = dom.childAt(element3, [31]);
        var element17 = dom.childAt(element3, [33]);
        var morphs = new Array(51);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element3, 1, 1);
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createMorphAt(element3, 5, 5);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [7, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 0, 0);
        morphs[8] = dom.createAttrMorph(element6, 'class');
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createAttrMorph(element7, 'class');
        morphs[12] = dom.createMorphAt(element7, 1, 1);
        morphs[13] = dom.createMorphAt(element7, 3, 3);
        morphs[14] = dom.createAttrMorph(element8, 'class');
        morphs[15] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[16] = dom.createMorphAt(element8, 3, 3);
        morphs[17] = dom.createMorphAt(element8, 5, 5);
        morphs[18] = dom.createAttrMorph(element9, 'class');
        morphs[19] = dom.createMorphAt(element9, 1, 1);
        morphs[20] = dom.createMorphAt(element9, 3, 3);
        morphs[21] = dom.createAttrMorph(element10, 'class');
        morphs[22] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        morphs[23] = dom.createMorphAt(element10, 3, 3);
        morphs[24] = dom.createMorphAt(element10, 5, 5);
        morphs[25] = dom.createAttrMorph(element11, 'class');
        morphs[26] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[27] = dom.createMorphAt(element11, 3, 3);
        morphs[28] = dom.createMorphAt(element11, 5, 5);
        morphs[29] = dom.createAttrMorph(element12, 'class');
        morphs[30] = dom.createMorphAt(dom.childAt(element12, [1]), 0, 0);
        morphs[31] = dom.createMorphAt(element12, 3, 3);
        morphs[32] = dom.createMorphAt(element12, 5, 5);
        morphs[33] = dom.createAttrMorph(element13, 'class');
        morphs[34] = dom.createMorphAt(dom.childAt(element13, [1]), 0, 0);
        morphs[35] = dom.createMorphAt(element13, 3, 3);
        morphs[36] = dom.createMorphAt(element13, 5, 5);
        morphs[37] = dom.createAttrMorph(element14, 'class');
        morphs[38] = dom.createMorphAt(dom.childAt(element14, [1]), 0, 0);
        morphs[39] = dom.createMorphAt(element14, 3, 3);
        morphs[40] = dom.createMorphAt(element14, 5, 5);
        morphs[41] = dom.createAttrMorph(element15, 'class');
        morphs[42] = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
        morphs[43] = dom.createMorphAt(element15, 3, 3);
        morphs[44] = dom.createMorphAt(element15, 5, 5);
        morphs[45] = dom.createAttrMorph(element16, 'class');
        morphs[46] = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
        morphs[47] = dom.createMorphAt(element16, 3, 3);
        morphs[48] = dom.createMorphAt(element16, 5, 5);
        morphs[49] = dom.createMorphAt(dom.childAt(element17, [1]), 0, 0);
        morphs[50] = dom.createMorphAt(element17, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.caption"], [], ["loc", [null, [1, 22], [1, 81]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [21, 26], [21, 31]]]]], [], []]], ["loc", [null, [21, 2], [21, 33]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [24, 43], [24, 55]]]]], [], []]], ["loc", [null, [24, 6], [24, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [29, 16], [29, 24]]]]], [], 0, null, ["loc", [null, [29, 6], [39, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [40, 59], [40, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [40, 78], [40, 119]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.address", ["loc", [null, [43, 25], [43, 45]]]], "error", ""], [], ["loc", [null, [43, 20], [43, 58]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.address", ["loc", [null, [45, 12], [45, 25]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.address-caption"], [], ["loc", [null, [46, 12], [46, 77]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [47, 15], [47, 23]]]]], [], []]], ["loc", [null, [44, 4], [48, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.address", ["loc", [null, [49, 40], [49, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [49, 4], [49, 82]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.text", ["loc", [null, [51, 25], [51, 42]]]], "error", ""], [], ["loc", [null, [51, 20], [51, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [53, 12], [53, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.text-caption"], [], ["loc", [null, [54, 12], [54, 74]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [55, 15], [55, 23]]]]], [], []]], ["loc", [null, [52, 4], [56, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.text", ["loc", [null, [57, 40], [57, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [57, 4], [57, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.date", ["loc", [null, [59, 25], [59, 42]]]], "error", ""], [], ["loc", [null, [59, 20], [59, 55]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.date-caption"], [], ["loc", [null, [60, 11], [60, 75]]]], ["inline", "flexberry-datepicker", [], ["value", ["subexpr", "@mut", [["get", "model.date", ["loc", [null, [62, 12], [62, 22]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [63, 15], [63, 23]]]]], [], []]], ["loc", [null, [61, 4], [64, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.date", ["loc", [null, [65, 40], [65, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [65, 4], [65, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.votes", ["loc", [null, [67, 25], [67, 43]]]], "error", ""], [], ["loc", [null, [67, 20], [67, 56]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.votes", ["loc", [null, [69, 12], [69, 23]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.votes-caption"], [], ["loc", [null, [70, 12], [70, 75]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [71, 15], [71, 23]]]]], [], []]], ["loc", [null, [68, 4], [72, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.votes", ["loc", [null, [73, 40], [73, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [73, 4], [73, 80]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.moderated", ["loc", [null, [75, 25], [75, 47]]]], "error", ""], [], ["loc", [null, [75, 20], [75, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.moderated-caption"], [], ["loc", [null, [76, 11], [76, 80]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.moderated", ["loc", [null, [78, 12], [78, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [79, 15], [79, 23]]]]], [], []]], ["loc", [null, [77, 4], [80, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.moderated", ["loc", [null, [81, 40], [81, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [81, 4], [81, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.type", ["loc", [null, [83, 25], [83, 42]]]], "error", ""], [], ["loc", [null, [83, 20], [83, 55]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.type-caption"], [], ["loc", [null, [84, 11], [84, 75]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [86, 12], [86, 22]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [87, 19], [87, 24]]]]], [], []], "relationName", "type", "projection", "SuggestionTypeL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.type-caption"], [], ["loc", [null, [91, 12], [91, 74]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [92, 13], [92, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [93, 13], [93, 41]]]], "dropdown", false, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [95, 15], [95, 23]]]]], [], []], "direction", "upward", "componentName", "SuggestionEditType"], ["loc", [null, [85, 4], [98, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.type", ["loc", [null, [99, 40], [99, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [99, 4], [99, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.author", ["loc", [null, [101, 25], [101, 44]]]], "error", ""], [], ["loc", [null, [101, 20], [101, 57]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [102, 11], [102, 77]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.author", ["loc", [null, [104, 12], [104, 24]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [105, 19], [105, 24]]]]], [], []], "relationName", "author", "projection", "ApplicationUserL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [109, 12], [109, 76]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [110, 13], [110, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [111, 13], [111, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [112, 15], [112, 23]]]]], [], []], "componentName", "SuggestionEditAuthor"], ["loc", [null, [103, 4], [114, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.author", ["loc", [null, [115, 40], [115, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [115, 4], [115, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.editor1", ["loc", [null, [117, 25], [117, 45]]]], "error", ""], [], ["loc", [null, [117, 20], [117, 58]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [118, 11], [118, 78]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.editor1", ["loc", [null, [120, 12], [120, 25]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [121, 19], [121, 24]]]]], [], []], "relationName", "editor1", "projection", "ApplicationUserL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [125, 12], [125, 77]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [126, 13], [126, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [127, 13], [127, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [128, 15], [128, 23]]]]], [], []], "componentName", "SuggestionEditEditor1"], ["loc", [null, [119, 4], [130, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.editor1", ["loc", [null, [131, 40], [131, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [131, 4], [131, 82]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.files", ["loc", [null, [133, 25], [133, 43]]]], "error", ""], [], ["loc", [null, [133, 20], [133, 56]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.files-caption"], [], ["loc", [null, [134, 11], [134, 76]]]], ["inline", "flexberry-groupedit", [], ["componentName", "filesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.files", ["loc", [null, [137, 14], [137, 25]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [138, 26], [138, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.files", ["loc", [null, [139, 22], [139, 54]]]]], [], []], "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [141, 15], [141, 23]]]]], [], []]], ["loc", [null, [135, 4], [142, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.files", ["loc", [null, [143, 40], [143, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [143, 4], [143, 80]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.userVotes", ["loc", [null, [145, 25], [145, 47]]]], "error", ""], [], ["loc", [null, [145, 20], [145, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.userVotes-caption"], [], ["loc", [null, [146, 11], [146, 80]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionUserVotesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.userVotes", ["loc", [null, [149, 14], [149, 29]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [150, 26], [150, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.userVotes", ["loc", [null, [151, 22], [151, 58]]]]], [], []], "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [153, 15], [153, 23]]]]], [], []]], ["loc", [null, [147, 4], [154, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.userVotes", ["loc", [null, [155, 40], [155, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [155, 4], [155, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.comments", ["loc", [null, [157, 25], [157, 46]]]], "error", ""], [], ["loc", [null, [157, 20], [157, 59]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.comments-caption"], [], ["loc", [null, [158, 11], [158, 79]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionCommentsGroupEdit", "content", ["subexpr", "@mut", [["get", "model.comments", ["loc", [null, [161, 14], [161, 28]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [162, 26], [162, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.comments", ["loc", [null, [163, 22], [163, 57]]]]], [], []], "rowClickable", true, "rowClick", "rowClick", "editOnSeparateRoute", true, "editFormRoute", ["subexpr", "@mut", [["get", "commentsEditRoute", ["loc", [null, [167, 20], [167, 37]]]]], [], []], "saveBeforeRouteLeave", true, "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [170, 15], [170, 23]]]]], [], []]], ["loc", [null, [159, 4], [171, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.comments", ["loc", [null, [172, 40], [172, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [172, 4], [172, 83]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.list-on-editform.caption"], [], ["loc", [null, [175, 8], [175, 91]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "customFolvContent", ["loc", [null, [177, 14], [177, 31]]]]], [], []], "modelName", ["subexpr", "@mut", [["get", "folvModelName", ["loc", [null, [178, 16], [178, 29]]]]], [], []], "onEditForm", true, "editFormRoute", ["subexpr", "@mut", [["get", "folvEditFormRoute", ["loc", [null, [180, 20], [180, 37]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "folvProjection", ["loc", [null, [181, 22], [181, 36]]]]], [], []], "rowClickable", true, "refreshButton", true, "colsConfigButton", false, "showShowingEntries", false, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [186, 14], [186, 29]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [188, 19], [188, 42]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [189, 25], [189, 54]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [190, 29], [190, 62]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [191, 12], [191, 17]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [192, 19], [192, 31]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [193, 20], [193, 33]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [194, 24], [194, 41]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [195, 22], [195, 37]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [196, 18], [196, 29]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [197, 19], [197, 42]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [198, 15], [198, 34]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [199, 15], [199, 34]]]], "customButtons", ["subexpr", "@mut", [["get", "customButtons", ["loc", [null, [200, 20], [200, 33]]]]], [], []], "disableHierarchicalMode", false, "hierarchicalIndent", 50, "componentName", "listOnEditform"], ["loc", [null, [176, 4], [204, 6]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 8
              },
              "end": {
                "line": 27,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [26, 62], [26, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [26, 80], [26, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [29, 68], [29, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [29, 94], [29, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 8
              },
              "end": {
                "line": 33,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [32, 66], [32, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [32, 86], [32, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 6
            },
            "end": {
              "line": 34,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [25, 23], [25, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [25, 43], [25, 63]]]]], [], ["loc", [null, [25, 38], [25, 64]]]]], [], ["loc", [null, [25, 18], [25, 65]]]]], [], 0, null, ["loc", [null, [25, 8], [27, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [28, 23], [28, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [28, 43], [28, 63]]]]], [], ["loc", [null, [28, 38], [28, 64]]]]], [], ["loc", [null, [28, 18], [28, 65]]]]], [], 1, null, ["loc", [null, [28, 8], [30, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [31, 23], [31, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [31, 44], [31, 58]]]]], [], ["loc", [null, [31, 39], [31, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [31, 65], [31, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [31, 80], [31, 100]]]]], [], ["loc", [null, [31, 60], [31, 101]]]]], [], ["loc", [null, [31, 35], [31, 102]]]]], [], ["loc", [null, [31, 18], [31, 103]]]]], [], 2, null, ["loc", [null, [31, 8], [33, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.name", ["loc", [null, [40, 31], [40, 52]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 51,
              "column": 4
            },
            "end": {
              "line": 53,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.eMail", ["loc", [null, [52, 31], [52, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 63,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.phone1", ["loc", [null, [64, 31], [64, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.phone2", ["loc", [null, [76, 31], [76, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.phone3", ["loc", [null, [88, 31], [88, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 100,
              "column": 4
            },
            "end": {
              "line": 102,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.activated", ["loc", [null, [101, 30], [101, 56]]]]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 108,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.vK", ["loc", [null, [107, 31], [107, 50]]]]],
        locals: [],
        templates: []
      };
    })();
    var child8 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 120,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.facebook", ["loc", [null, [119, 31], [119, 56]]]]],
        locals: [],
        templates: []
      };
    })();
    var child9 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 130,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.twitter", ["loc", [null, [131, 31], [131, 55]]]]],
        locals: [],
        templates: []
      };
    })();
    var child10 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.birthday", ["loc", [null, [144, 30], [144, 55]]]]],
        locals: [],
        templates: []
      };
    })();
    var child11 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 154,
              "column": 4
            },
            "end": {
              "line": 156,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.gender", ["loc", [null, [155, 30], [155, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    var child12 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 161,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.vip", ["loc", [null, [162, 30], [162, 50]]]]],
        locals: [],
        templates: []
      };
    })();
    var child13 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 167,
              "column": 4
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.karma", ["loc", [null, [168, 31], [168, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 222,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("hr");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h3");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(":");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [4]);
        var element4 = dom.childAt(element3, [5, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [7]);
        var element7 = dom.childAt(element3, [9]);
        var element8 = dom.childAt(element3, [11]);
        var element9 = dom.childAt(element3, [13]);
        var element10 = dom.childAt(element3, [15]);
        var element11 = dom.childAt(element3, [17]);
        var element12 = dom.childAt(element3, [19]);
        var element13 = dom.childAt(element3, [21]);
        var element14 = dom.childAt(element3, [23]);
        var element15 = dom.childAt(element3, [25]);
        var element16 = dom.childAt(element3, [27]);
        var element17 = dom.childAt(element3, [29]);
        var element18 = dom.childAt(element3, [31]);
        var element19 = dom.childAt(element3, [35]);
        var morphs = new Array(39);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(element3, 1, 1);
        morphs[3] = dom.createMorphAt(element3, 3, 3);
        morphs[4] = dom.createMorphAt(element4, 1, 1);
        morphs[5] = dom.createElementMorph(element5);
        morphs[6] = dom.createMorphAt(element5, 0, 0);
        morphs[7] = dom.createMorphAt(element6, 1, 1);
        morphs[8] = dom.createMorphAt(element6, 3, 3);
        morphs[9] = dom.createMorphAt(element7, 1, 1);
        morphs[10] = dom.createMorphAt(element7, 3, 3);
        morphs[11] = dom.createMorphAt(element8, 1, 1);
        morphs[12] = dom.createMorphAt(element8, 3, 3);
        morphs[13] = dom.createMorphAt(element9, 1, 1);
        morphs[14] = dom.createMorphAt(element9, 3, 3);
        morphs[15] = dom.createMorphAt(element10, 1, 1);
        morphs[16] = dom.createMorphAt(element10, 3, 3);
        morphs[17] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[18] = dom.createMorphAt(element11, 3, 3);
        morphs[19] = dom.createMorphAt(element11, 5, 5);
        morphs[20] = dom.createMorphAt(element12, 1, 1);
        morphs[21] = dom.createMorphAt(element12, 3, 3);
        morphs[22] = dom.createMorphAt(element13, 1, 1);
        morphs[23] = dom.createMorphAt(element13, 3, 3);
        morphs[24] = dom.createMorphAt(element14, 1, 1);
        morphs[25] = dom.createMorphAt(element14, 3, 3);
        morphs[26] = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
        morphs[27] = dom.createMorphAt(element15, 3, 3);
        morphs[28] = dom.createMorphAt(element15, 5, 5);
        morphs[29] = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
        morphs[30] = dom.createMorphAt(element16, 3, 3);
        morphs[31] = dom.createMorphAt(element16, 5, 5);
        morphs[32] = dom.createMorphAt(dom.childAt(element17, [1]), 0, 0);
        morphs[33] = dom.createMorphAt(element17, 3, 3);
        morphs[34] = dom.createMorphAt(element17, 5, 5);
        morphs[35] = dom.createMorphAt(element18, 1, 1);
        morphs[36] = dom.createMorphAt(element18, 3, 3);
        morphs[37] = dom.createMorphAt(dom.childAt(element19, [1]), 0, 0);
        morphs[38] = dom.createMorphAt(element19, 3, 3);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.caption"], [], ["loc", [null, [2, 22], [2, 87]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [7, 12], [7, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [8, 12], [8, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [9, 12], [9, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [10, 11], [10, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [11, 11], [11, 42]]]]], ["loc", [null, [4, 2], [12, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [16, 12], [16, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [17, 12], [17, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [18, 12], [18, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [19, 11], [19, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [20, 11], [20, 40]]]]], ["loc", [null, [13, 2], [21, 4]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [24, 16], [24, 24]]]]], [], 0, null, ["loc", [null, [24, 6], [34, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [35, 59], [35, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [35, 78], [35, 119]]]], ["block", "if", [["get", "model.errors.name", ["loc", [null, [39, 10], [39, 27]]]]], [], 1, null, ["loc", [null, [39, 4], [41, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [43, 15], [43, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [45, 12], [45, 22]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [46, 16], [46, 33]]]], "error", ""], [], ["loc", [null, [46, 12], [46, 45]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.name-caption"], [], ["loc", [null, [47, 12], [47, 80]]]]], ["loc", [null, [42, 4], [48, 6]]]], ["block", "if", [["get", "model.errors.eMail", ["loc", [null, [51, 10], [51, 28]]]]], [], 2, null, ["loc", [null, [51, 4], [53, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [55, 15], [55, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.eMail", ["loc", [null, [57, 12], [57, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.eMail", ["loc", [null, [58, 16], [58, 34]]]], "error", ""], [], ["loc", [null, [58, 12], [58, 46]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.eMail-caption"], [], ["loc", [null, [59, 12], [59, 81]]]]], ["loc", [null, [54, 4], [60, 6]]]], ["block", "if", [["get", "model.errors.phone1", ["loc", [null, [63, 10], [63, 29]]]]], [], 3, null, ["loc", [null, [63, 4], [65, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [67, 15], [67, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.phone1", ["loc", [null, [69, 12], [69, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.phone1", ["loc", [null, [70, 16], [70, 35]]]], "error", ""], [], ["loc", [null, [70, 12], [70, 47]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone1-caption"], [], ["loc", [null, [71, 12], [71, 82]]]]], ["loc", [null, [66, 4], [72, 6]]]], ["block", "if", [["get", "model.errors.phone2", ["loc", [null, [75, 10], [75, 29]]]]], [], 4, null, ["loc", [null, [75, 4], [77, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [79, 15], [79, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.phone2", ["loc", [null, [81, 12], [81, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.phone2", ["loc", [null, [82, 16], [82, 35]]]], "error", ""], [], ["loc", [null, [82, 12], [82, 47]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone2-caption"], [], ["loc", [null, [83, 12], [83, 82]]]]], ["loc", [null, [78, 4], [84, 6]]]], ["block", "if", [["get", "model.errors.phone3", ["loc", [null, [87, 10], [87, 29]]]]], [], 5, null, ["loc", [null, [87, 4], [89, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [91, 15], [91, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.phone3", ["loc", [null, [93, 12], [93, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.phone3", ["loc", [null, [94, 16], [94, 35]]]], "error", ""], [], ["loc", [null, [94, 12], [94, 47]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone3-caption"], [], ["loc", [null, [95, 12], [95, 82]]]]], ["loc", [null, [90, 4], [96, 6]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.activated-caption"], [], ["loc", [null, [99, 11], [99, 86]]]], ["block", "if", [["get", "model.errors.activated", ["loc", [null, [100, 10], [100, 32]]]]], [], 6, null, ["loc", [null, [100, 4], [102, 11]]]], ["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [103, 34], [103, 42]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.activated", ["loc", [null, [103, 49], [103, 64]]]]], [], []]], ["loc", [null, [103, 4], [103, 66]]]], ["block", "if", [["get", "model.errors.vK", ["loc", [null, [106, 10], [106, 25]]]]], [], 7, null, ["loc", [null, [106, 4], [108, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [110, 15], [110, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.vK", ["loc", [null, [112, 12], [112, 20]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.vK", ["loc", [null, [113, 16], [113, 31]]]], "error", ""], [], ["loc", [null, [113, 12], [113, 43]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.vK-caption"], [], ["loc", [null, [114, 12], [114, 78]]]]], ["loc", [null, [109, 4], [115, 6]]]], ["block", "if", [["get", "model.errors.facebook", ["loc", [null, [118, 10], [118, 31]]]]], [], 8, null, ["loc", [null, [118, 4], [120, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [122, 15], [122, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.facebook", ["loc", [null, [124, 12], [124, 26]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.facebook", ["loc", [null, [125, 16], [125, 37]]]], "error", ""], [], ["loc", [null, [125, 12], [125, 49]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.facebook-caption"], [], ["loc", [null, [126, 12], [126, 84]]]]], ["loc", [null, [121, 4], [127, 6]]]], ["block", "if", [["get", "model.errors.twitter", ["loc", [null, [130, 10], [130, 30]]]]], [], 9, null, ["loc", [null, [130, 4], [132, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [134, 15], [134, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.twitter", ["loc", [null, [136, 12], [136, 25]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.twitter", ["loc", [null, [137, 16], [137, 36]]]], "error", ""], [], ["loc", [null, [137, 12], [137, 48]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.twitter-caption"], [], ["loc", [null, [138, 12], [138, 83]]]]], ["loc", [null, [133, 4], [139, 6]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.birthday-caption"], [], ["loc", [null, [142, 11], [142, 85]]]], ["block", "if", [["get", "model.errors.birthday", ["loc", [null, [143, 10], [143, 31]]]]], [], 10, null, ["loc", [null, [143, 4], [145, 11]]]], ["inline", "flexberry-datepicker", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [147, 15], [147, 23]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.birthday", ["loc", [null, [148, 12], [148, 26]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.birthday", ["loc", [null, [149, 16], [149, 37]]]], "error", ""], [], ["loc", [null, [149, 12], [149, 49]]]]], ["loc", [null, [146, 4], [150, 6]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.gender-caption"], [], ["loc", [null, [153, 11], [153, 83]]]], ["block", "if", [["get", "model.errors.gender", ["loc", [null, [154, 10], [154, 29]]]]], [], 11, null, ["loc", [null, [154, 4], [156, 11]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "flexberry-enum", ["ember-flexberry-dummy-gender"], [], ["loc", [null, [157, 31], [157, 78]]]], "value", ["subexpr", "@mut", [["get", "model.gender", ["loc", [null, [157, 85], [157, 97]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [157, 107], [157, 115]]]]], [], []]], ["loc", [null, [157, 4], [157, 117]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.vip-caption"], [], ["loc", [null, [160, 11], [160, 80]]]], ["block", "if", [["get", "model.errors.vip", ["loc", [null, [161, 10], [161, 26]]]]], [], 12, null, ["loc", [null, [161, 4], [163, 11]]]], ["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [164, 34], [164, 42]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.vip", ["loc", [null, [164, 49], [164, 58]]]]], [], []]], ["loc", [null, [164, 4], [164, 60]]]], ["block", "if", [["get", "model.errors.karma", ["loc", [null, [167, 10], [167, 28]]]]], [], 13, null, ["loc", [null, [167, 4], [169, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [171, 15], [171, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.karma", ["loc", [null, [173, 12], [173, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.karma", ["loc", [null, [174, 16], [174, 34]]]], "error", ""], [], ["loc", [null, [174, 12], [174, 46]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.karma-caption"], [], ["loc", [null, [175, 12], [175, 81]]]]], ["loc", [null, [170, 4], [176, 6]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.on-edit-form.caption"], [], ["loc", [null, [180, 8], [180, 87]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "customFolvContent", ["loc", [null, [182, 14], [182, 31]]]]], [], []], "modelName", ["subexpr", "@mut", [["get", "folvModelName", ["loc", [null, [183, 16], [183, 29]]]]], [], []], "onEditForm", true, "editFormRoute", ["subexpr", "@mut", [["get", "folvEditFormRoute", ["loc", [null, [185, 20], [185, 37]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "folvProjection", ["loc", [null, [186, 22], [186, 36]]]]], [], []], "rowClickable", true, "refreshButton", true, "colsConfigButton", false, "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [190, 14], [190, 21]]]]], [], []], "applyFilters", ["subexpr", "action", ["applyFilters"], [], ["loc", [null, [191, 19], [191, 42]]]], "resetFilters", ["subexpr", "action", ["resetFilters"], [], ["loc", [null, [192, 19], [192, 42]]]], "componentForFilter", ["subexpr", "action", ["componentForFilter"], [], ["loc", [null, [193, 25], [193, 54]]]], "conditionsByType", ["subexpr", "action", ["conditionsByType"], [], ["loc", [null, [194, 23], [194, 50]]]], "filterButton", true, "filterText", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [196, 17], [196, 23]]]]], [], []], "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [197, 23], [197, 50]]]], "filterByAllWords", true, "showShowingEntries", false, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [200, 14], [200, 29]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [202, 19], [202, 42]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [203, 25], [203, 54]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [204, 29], [204, 62]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [205, 12], [205, 17]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [206, 19], [206, 31]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [207, 20], [207, 33]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [208, 24], [208, 41]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [209, 22], [209, 37]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [210, 18], [210, 29]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [211, 19], [211, 42]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [212, 15], [212, 34]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [213, 15], [213, 34]]]], "customButtons", ["subexpr", "@mut", [["get", "customButtons", ["loc", [null, [214, 20], [214, 33]]]]], [], []], "userButtonAddAction", "userButtonAddAction", "disableHierarchicalMode", false, "hierarchicalIndent", 50, "componentName", "FOLVOnEditFormSuggestionsObjectListView"], ["loc", [null, [181, 4], [219, 6]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 8
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [31, 62], [31, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [31, 80], [31, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 8
              },
              "end": {
                "line": 35,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [34, 68], [34, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [34, 94], [34, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 8
              },
              "end": {
                "line": 38,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [37, 66], [37, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [37, 86], [37, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [30, 23], [30, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [30, 43], [30, 63]]]]], [], ["loc", [null, [30, 38], [30, 64]]]]], [], ["loc", [null, [30, 18], [30, 65]]]]], [], 0, null, ["loc", [null, [30, 8], [32, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [33, 23], [33, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [33, 43], [33, 63]]]]], [], ["loc", [null, [33, 38], [33, 64]]]]], [], ["loc", [null, [33, 18], [33, 65]]]]], [], 1, null, ["loc", [null, [33, 8], [35, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [36, 23], [36, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [36, 44], [36, 58]]]]], [], ["loc", [null, [36, 39], [36, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [36, 65], [36, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [36, 80], [36, 100]]]]], [], ["loc", [null, [36, 60], [36, 101]]]]], [], ["loc", [null, [36, 35], [36, 102]]]]], [], ["loc", [null, [36, 18], [36, 103]]]]], [], 2, null, ["loc", [null, [36, 8], [38, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 183,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui segment");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [9, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [13]);
        var element7 = dom.childAt(element3, [15]);
        var element8 = dom.childAt(element3, [17]);
        var element9 = dom.childAt(element3, [19]);
        var element10 = dom.childAt(element3, [21]);
        var element11 = dom.childAt(element3, [23]);
        var element12 = dom.childAt(element3, [25]);
        var element13 = dom.childAt(element3, [27]);
        var element14 = dom.childAt(element3, [29]);
        var element15 = dom.childAt(element3, [31]);
        var element16 = dom.childAt(element3, [33]);
        var morphs = new Array(50);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element3, 1, 1);
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createMorphAt(element3, 5, 5);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [7, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 0, 0);
        morphs[8] = dom.createMorphAt(dom.childAt(element3, [11]), 1, 1);
        morphs[9] = dom.createAttrMorph(element6, 'class');
        morphs[10] = dom.createMorphAt(element6, 1, 1);
        morphs[11] = dom.createMorphAt(element6, 3, 3);
        morphs[12] = dom.createAttrMorph(element7, 'class');
        morphs[13] = dom.createMorphAt(element7, 1, 1);
        morphs[14] = dom.createMorphAt(element7, 3, 3);
        morphs[15] = dom.createAttrMorph(element8, 'class');
        morphs[16] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[17] = dom.createMorphAt(element8, 3, 3);
        morphs[18] = dom.createMorphAt(element8, 5, 5);
        morphs[19] = dom.createAttrMorph(element9, 'class');
        morphs[20] = dom.createMorphAt(element9, 1, 1);
        morphs[21] = dom.createMorphAt(element9, 3, 3);
        morphs[22] = dom.createAttrMorph(element10, 'class');
        morphs[23] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        morphs[24] = dom.createMorphAt(element10, 3, 3);
        morphs[25] = dom.createMorphAt(element10, 5, 5);
        morphs[26] = dom.createAttrMorph(element11, 'class');
        morphs[27] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[28] = dom.createMorphAt(element11, 3, 3);
        morphs[29] = dom.createMorphAt(element11, 5, 5);
        morphs[30] = dom.createAttrMorph(element12, 'class');
        morphs[31] = dom.createMorphAt(dom.childAt(element12, [1]), 0, 0);
        morphs[32] = dom.createMorphAt(element12, 3, 3);
        morphs[33] = dom.createMorphAt(element12, 5, 5);
        morphs[34] = dom.createAttrMorph(element13, 'class');
        morphs[35] = dom.createMorphAt(dom.childAt(element13, [1]), 0, 0);
        morphs[36] = dom.createMorphAt(element13, 3, 3);
        morphs[37] = dom.createMorphAt(element13, 5, 5);
        morphs[38] = dom.createAttrMorph(element14, 'class');
        morphs[39] = dom.createMorphAt(dom.childAt(element14, [1]), 0, 0);
        morphs[40] = dom.createMorphAt(element14, 3, 3);
        morphs[41] = dom.createMorphAt(element14, 5, 5);
        morphs[42] = dom.createAttrMorph(element15, 'class');
        morphs[43] = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
        morphs[44] = dom.createMorphAt(element15, 3, 3);
        morphs[45] = dom.createMorphAt(element15, 5, 5);
        morphs[46] = dom.createAttrMorph(element16, 'class');
        morphs[47] = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
        morphs[48] = dom.createMorphAt(element16, 3, 3);
        morphs[49] = dom.createMorphAt(element16, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.caption"], [], ["loc", [null, [1, 22], [1, 81]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [21, 26], [21, 31]]]]], [], []]], ["loc", [null, [21, 2], [21, 33]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [24, 43], [24, 55]]]]], [], []]], ["loc", [null, [24, 6], [24, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [29, 16], [29, 24]]]]], [], 0, null, ["loc", [null, [29, 6], [39, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [40, 59], [40, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [40, 78], [40, 119]]]], ["inline", "flexberry-button", [], ["caption", ["subexpr", "t", ["forms.application.sitemap.components-examples.flexberry-objectlistview.return-from-ediform.return-button"], [], ["loc", [null, [45, 14], [45, 124]]]], "readonly", false, "click", ["subexpr", "action", ["onButtonClick"], [], ["loc", [null, [47, 12], [47, 36]]]], "class", "return-to-list-form"], ["loc", [null, [44, 4], [49, 6]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.address", ["loc", [null, [51, 25], [51, 45]]]], "error", ""], [], ["loc", [null, [51, 20], [51, 58]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.address", ["loc", [null, [53, 12], [53, 25]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.address-caption"], [], ["loc", [null, [54, 12], [54, 77]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [55, 15], [55, 23]]]]], [], []]], ["loc", [null, [52, 4], [56, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.address", ["loc", [null, [57, 40], [57, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [57, 4], [57, 82]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.text", ["loc", [null, [59, 25], [59, 42]]]], "error", ""], [], ["loc", [null, [59, 20], [59, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [61, 12], [61, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.text-caption"], [], ["loc", [null, [62, 12], [62, 74]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [63, 15], [63, 23]]]]], [], []]], ["loc", [null, [60, 4], [64, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.text", ["loc", [null, [65, 40], [65, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [65, 4], [65, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.date", ["loc", [null, [67, 25], [67, 42]]]], "error", ""], [], ["loc", [null, [67, 20], [67, 55]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.date-caption"], [], ["loc", [null, [68, 11], [68, 75]]]], ["inline", "flexberry-datepicker", [], ["value", ["subexpr", "@mut", [["get", "model.date", ["loc", [null, [70, 12], [70, 22]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [71, 15], [71, 23]]]]], [], []]], ["loc", [null, [69, 4], [72, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.date", ["loc", [null, [73, 40], [73, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [73, 4], [73, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.votes", ["loc", [null, [75, 25], [75, 43]]]], "error", ""], [], ["loc", [null, [75, 20], [75, 56]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.votes", ["loc", [null, [77, 12], [77, 23]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.votes-caption"], [], ["loc", [null, [78, 12], [78, 75]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [79, 15], [79, 23]]]]], [], []]], ["loc", [null, [76, 4], [80, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.votes", ["loc", [null, [81, 40], [81, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [81, 4], [81, 80]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.moderated", ["loc", [null, [83, 25], [83, 47]]]], "error", ""], [], ["loc", [null, [83, 20], [83, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.moderated-caption"], [], ["loc", [null, [84, 11], [84, 80]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.moderated", ["loc", [null, [86, 12], [86, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [87, 15], [87, 23]]]]], [], []]], ["loc", [null, [85, 4], [88, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.moderated", ["loc", [null, [89, 40], [89, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [89, 4], [89, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.type", ["loc", [null, [91, 25], [91, 42]]]], "error", ""], [], ["loc", [null, [91, 20], [91, 55]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.type-caption"], [], ["loc", [null, [92, 11], [92, 75]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [94, 12], [94, 22]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [95, 19], [95, 24]]]]], [], []], "relationName", "type", "projection", "SuggestionTypeL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.type-caption"], [], ["loc", [null, [99, 12], [99, 74]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [100, 13], [100, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [101, 13], [101, 41]]]], "dropdown", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [103, 15], [103, 23]]]]], [], []], "direction", "upward", "componentName", "SuggestionEditType"], ["loc", [null, [93, 4], [106, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.type", ["loc", [null, [107, 40], [107, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [107, 4], [107, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.author", ["loc", [null, [109, 25], [109, 44]]]], "error", ""], [], ["loc", [null, [109, 20], [109, 57]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [110, 11], [110, 77]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.author", ["loc", [null, [112, 12], [112, 24]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [113, 19], [113, 24]]]]], [], []], "relationName", "author", "projection", "ApplicationUserL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [117, 12], [117, 76]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [118, 13], [118, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [119, 13], [119, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [120, 15], [120, 23]]]]], [], []], "componentName", "SuggestionEditAuthor"], ["loc", [null, [111, 4], [122, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.author", ["loc", [null, [123, 40], [123, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [123, 4], [123, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.editor1", ["loc", [null, [125, 25], [125, 45]]]], "error", ""], [], ["loc", [null, [125, 20], [125, 58]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [126, 11], [126, 78]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.editor1", ["loc", [null, [128, 12], [128, 25]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [129, 19], [129, 24]]]]], [], []], "relationName", "editor1", "projection", "ApplicationUserL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [133, 12], [133, 77]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [134, 13], [134, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [135, 13], [135, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [136, 15], [136, 23]]]]], [], []], "componentName", "SuggestionEditEditor1"], ["loc", [null, [127, 4], [138, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.editor1", ["loc", [null, [139, 40], [139, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [139, 4], [139, 82]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.files", ["loc", [null, [141, 25], [141, 43]]]], "error", ""], [], ["loc", [null, [141, 20], [141, 56]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.files-caption"], [], ["loc", [null, [142, 11], [142, 76]]]], ["inline", "flexberry-groupedit", [], ["componentName", "filesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.files", ["loc", [null, [145, 14], [145, 25]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [146, 26], [146, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.files", ["loc", [null, [147, 22], [147, 54]]]]], [], []], "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [149, 15], [149, 23]]]]], [], []]], ["loc", [null, [143, 4], [150, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.files", ["loc", [null, [151, 40], [151, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [151, 4], [151, 80]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.userVotes", ["loc", [null, [153, 25], [153, 47]]]], "error", ""], [], ["loc", [null, [153, 20], [153, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.userVotes-caption"], [], ["loc", [null, [154, 11], [154, 80]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionUserVotesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.userVotes", ["loc", [null, [157, 14], [157, 29]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [158, 26], [158, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.userVotes", ["loc", [null, [159, 22], [159, 58]]]]], [], []], "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [161, 15], [161, 23]]]]], [], []]], ["loc", [null, [155, 4], [162, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.userVotes", ["loc", [null, [163, 40], [163, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [163, 4], [163, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.comments", ["loc", [null, [165, 25], [165, 46]]]], "error", ""], [], ["loc", [null, [165, 20], [165, 59]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.comments-caption"], [], ["loc", [null, [166, 11], [166, 79]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionCommentsGroupEdit", "content", ["subexpr", "@mut", [["get", "model.comments", ["loc", [null, [169, 14], [169, 28]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [170, 26], [170, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.comments", ["loc", [null, [171, 22], [171, 57]]]]], [], []], "rowClickable", true, "rowClick", "rowClick", "editOnSeparateRoute", true, "editFormRoute", ["subexpr", "@mut", [["get", "commentsEditRoute", ["loc", [null, [175, 20], [175, 37]]]]], [], []], "saveBeforeRouteLeave", true, "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [178, 15], [178, 23]]]]], [], []]], ["loc", [null, [167, 4], [179, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.comments", ["loc", [null, [180, 40], [180, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [180, 4], [180, 83]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 52,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/return-with-query-params/ember-flexberry-dummy-suggestion-return-with-query-params-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(element0, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [5]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-list.caption"], [], ["loc", [null, [2, 4], [2, 63]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [7, 12], [7, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [8, 12], [8, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [9, 12], [9, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [10, 11], [10, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [11, 11], [11, 42]]]]], ["loc", [null, [4, 2], [12, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [16, 12], [16, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [17, 12], [17, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [18, 12], [18, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [19, 11], [19, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [20, 11], [20, 40]]]]], ["loc", [null, [13, 2], [21, 4]]]], ["inline", "flexberry-objectlistview", [], ["editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [24, 18], [24, 31]]]]], [], []], "showCheckBoxInRow", true, "modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [27, 20], [27, 35]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [28, 12], [28, 17]]]]], [], []], "createNewButton", false, "refreshButton", true, "exportExcelButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [32, 12], [32, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [34, 17], [34, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [35, 23], [35, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [36, 10], [36, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [37, 17], [37, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [38, 18], [38, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [39, 22], [39, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [40, 20], [40, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [41, 16], [41, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [42, 17], [42, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [43, 13], [43, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [44, 13], [44, 32]]]], "componentName", "SuggestionObjectListView", "showDeleteMenuItemInRow", true, "deleteButton", false, "showEditButtonInRow", true], ["loc", [null, [23, 2], [49, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/selected-rows", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/selected-rows.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "inline field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("Count selected row:");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui teal label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [1, 3]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.selected-rows.caption"], [], ["loc", [null, [2, 22], [2, 102]]]], ["content", "countSelectedRows", ["loc", [null, [6, 31], [6, 52]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [10, 14], [10, 19]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion-type", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [12, 22], [12, 37]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [13, 20], [13, 33]]]]], [], []], "orderable", false, "showShowingEntries", false, "componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [16, 20], [16, 33]]]]], [], []], "colsConfigButton", false, "disableHierarchicalMode", true, "showCheckBoxInRow", true, "configurateSelectedRows", ["subexpr", "action", ["configurateSelectedRows"], [], ["loc", [null, [20, 30], [20, 64]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [21, 29], [21, 62]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [22, 12], [22, 17]]]]], [], []]], ["loc", [null, [9, 4], [23, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-objectlistview", [], ["colsConfigButton", ["subexpr", "@mut", [["get", "colsConfigButton", ["loc", [null, [11, 25], [11, 41]]]]], [], []], "exportExcelButton", ["subexpr", "@mut", [["get", "exportExcelButton", ["loc", [null, [12, 26], [12, 43]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [13, 16], [13, 21]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion", "editFormRoute", "ember-flexberry-dummy-suggestion-edit", "modelProjection", ["subexpr", "@mut", [["get", "projection", ["loc", [null, [16, 24], [16, 34]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [17, 20], [17, 31]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [18, 17], [18, 25]]]]], [], []], "tableStriped", ["subexpr", "@mut", [["get", "tableStriped", ["loc", [null, [19, 21], [19, 33]]]]], [], []], "allowColumnResize", ["subexpr", "@mut", [["get", "allowColumnResize", ["loc", [null, [20, 26], [20, 43]]]]], [], []], "minAutoColumnWidth", ["subexpr", "@mut", [["get", "minAutoColumnWidth", ["loc", [null, [21, 27], [21, 45]]]]], [], []], "columnsWidthAutoresize", ["subexpr", "@mut", [["get", "columnsWidthAutoresize", ["loc", [null, [22, 31], [22, 53]]]]], [], []], "createNewButton", ["subexpr", "@mut", [["get", "createNewButton", ["loc", [null, [23, 24], [23, 39]]]]], [], []], "deleteButton", ["subexpr", "@mut", [["get", "deleteButton", ["loc", [null, [24, 21], [24, 33]]]]], [], []], "refreshButton", ["subexpr", "@mut", [["get", "refreshButton", ["loc", [null, [25, 22], [25, 35]]]]], [], []], "defaultSortingButton", ["subexpr", "@mut", [["get", "defaultSortingButton", ["loc", [null, [26, 29], [26, 49]]]]], [], []], "advLimitButton", ["subexpr", "@mut", [["get", "advLimitButton", ["loc", [null, [27, 23], [27, 37]]]]], [], []], "showFiltersInModal", ["subexpr", "@mut", [["get", "showFiltersInModal", ["loc", [null, [28, 27], [28, 45]]]]], [], []], "enableFilters", ["subexpr", "@mut", [["get", "enableFilters", ["loc", [null, [29, 22], [29, 35]]]]], [], []], "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [30, 16], [30, 23]]]]], [], []], "applyFilters", ["subexpr", "action", ["applyFilters"], [], ["loc", [null, [31, 21], [31, 44]]]], "resetFilters", ["subexpr", "action", ["resetFilters"], [], ["loc", [null, [32, 21], [32, 44]]]], "filterButton", ["subexpr", "@mut", [["get", "filterButton", ["loc", [null, [33, 21], [33, 33]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [34, 26], [34, 43]]]]], [], []], "showEditButtonInRow", ["subexpr", "@mut", [["get", "showEditButtonInRow", ["loc", [null, [35, 28], [35, 47]]]]], [], []], "showPrototypeButtonInRow", ["subexpr", "@mut", [["get", "showPrototypeButtonInRow", ["loc", [null, [36, 33], [36, 57]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [37, 30], [37, 51]]]]], [], []], "showEditMenuItemInRow", ["subexpr", "@mut", [["get", "showEditMenuItemInRow", ["loc", [null, [38, 30], [38, 51]]]]], [], []], "showPrototypeMenuItemInRow", ["subexpr", "@mut", [["get", "showPrototypeMenuItemInRow", ["loc", [null, [39, 35], [39, 61]]]]], [], []], "showDeleteMenuItemInRow", ["subexpr", "@mut", [["get", "showDeleteMenuItemInRow", ["loc", [null, [40, 32], [40, 55]]]]], [], []], "rowClickable", ["subexpr", "@mut", [["get", "rowClickable", ["loc", [null, [41, 21], [41, 33]]]]], [], []], "orderable", ["subexpr", "@mut", [["get", "orderable", ["loc", [null, [42, 18], [42, 27]]]]], [], []], "singleColumnHeaderTitle", ["subexpr", "@mut", [["get", "singleColumnHeaderTitle", ["loc", [null, [43, 32], [43, 55]]]]], [], []], "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [44, 25], [44, 52]]]], "filterText", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [45, 19], [45, 25]]]]], [], []], "filterByAnyWord", ["subexpr", "@mut", [["get", "filterByAnyWord", ["loc", [null, [46, 24], [46, 39]]]]], [], []], "filterByAllWords", ["subexpr", "@mut", [["get", "filterByAllWords", ["loc", [null, [47, 25], [47, 41]]]]], [], []], "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [48, 16], [48, 31]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [49, 21], [49, 44]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [50, 27], [50, 56]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [51, 31], [51, 64]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [52, 14], [52, 19]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [53, 21], [53, 33]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [54, 22], [54, 35]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [55, 26], [55, 43]]]]], [], []], "_availableHierarchicalMode", ["subexpr", "@mut", [["get", "availableHierarchicalMode", ["loc", [null, [56, 35], [56, 60]]]]], [], []], "availableCollExpandMode", ["subexpr", "@mut", [["get", "availableCollExpandMode", ["loc", [null, [57, 32], [57, 55]]]]], [], []], "disableHierarchicalMode", false, "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [59, 24], [59, 39]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [60, 20], [60, 31]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [61, 21], [61, 44]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [62, 17], [62, 36]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [63, 17], [63, 36]]]], "componentName", "FOLVSettingsExampleObjectListView", "fixedHeader", ["subexpr", "@mut", [["get", "fixedHeader", ["loc", [null, [65, 20], [65, 31]]]]], [], []]], ["loc", [null, [10, 6], [66, 10]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 70,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4, 1]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.settings-example.caption"], [], ["loc", [null, [2, 22], [2, 105]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [6, 27], [6, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [7, 32], [7, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [8, 28], [8, 49]]]]], [], []]], 0, null, ["loc", [null, [5, 4], [67, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 38,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [6]), 0, 0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.caption"], [], ["loc", [null, [2, 22], [2, 119]]]], ["inline", "flexberry-objectlistview", [], ["modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 18], [6, 33]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 10], [7, 15]]]]], [], []], "createNewButton", false, "showCheckBoxInRow", false, "showDeleteButtonInRow", false, "showEditMenuItemInRow", false, "showDeleteMenuItemInRow", false, "rowClickable", false, "refreshButton", false, "colsConfigButton", false, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [18, 8], [18, 13]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [19, 15], [19, 27]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [20, 16], [20, 29]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [21, 20], [21, 37]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [22, 18], [22, 33]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [23, 14], [23, 25]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [24, 15], [24, 38]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [25, 11], [25, 30]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [26, 11], [26, 30]]]], "customButtons", ["subexpr", "@mut", [["get", "customButtons", ["loc", [null, [28, 16], [28, 29]]]]], [], []], "userButtonActionTest", "userButtonActionTest", "toggleHiButton", "toggleHiButton", "customButtonsInRow", ["subexpr", "@mut", [["get", "customButtonsInRow", ["loc", [null, [31, 21], [31, 39]]]]], [], []], "userButtonInRowActionTest", "userButtonInRowActionTest", "componentName", "FOLVToolbarCustomButtonsExample"], ["loc", [null, [4, 0], [35, 2]]]], ["content", "messageForUser", ["loc", [null, [37, 17], [37, 35]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-simpledatetime/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 19,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-simpledatetime/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-simpledatetime", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [11, 13], [11, 17]]]]], [], []], "removeButton", ["subexpr", "@mut", [["get", "removeButton", ["loc", [null, [12, 21], [12, 33]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [13, 14], [13, 19]]]]], [], []], "min", ["subexpr", "@mut", [["get", "min", ["loc", [null, [14, 12], [14, 15]]]]], [], []], "max", ["subexpr", "@mut", [["get", "max", ["loc", [null, [15, 12], [15, 15]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [16, 17], [16, 25]]]]], [], []], "class", "example-simpledatetime"], ["loc", [null, [10, 6], [18, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-simpledatetime/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-simpledatetime.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 105]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []], "componentBlockOverflow", "visible"], 0, null, ["loc", [null, [4, 4], [19, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-simpleolv/configurate-rows", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 4
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/configurate-rows.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-simpleolv", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [14, 16], [14, 21]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion", "editFormRoute", "ember-flexberry-dummy-suggestion-edit", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [17, 24], [17, 39]]]]], [], []], "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [18, 25], [18, 52]]]], "refreshButton", true, "filterText", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [20, 19], [20, 25]]]]], [], []], "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [21, 16], [21, 31]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [22, 21], [22, 44]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [23, 27], [23, 56]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [24, 31], [24, 64]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [25, 14], [25, 19]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [26, 21], [26, 33]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [27, 22], [27, 35]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [28, 26], [28, 43]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [29, 24], [29, 39]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [30, 20], [30, 31]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [31, 21], [31, 44]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [32, 17], [32, 36]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [33, 17], [33, 36]]]], "configurateRow", ["subexpr", "action", ["configurateRow"], [], ["loc", [null, [34, 23], [34, 48]]]], "componentName", "SOLVConfigurateRowsObjectListView"], ["loc", [null, [13, 6], [36, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 40,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/configurate-rows.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "class", "ui button");
        var el4 = dom.createTextNode("Change attribute 2");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4]);
        var element1 = dom.childAt(element0, [1, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createElementMorph(element1);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-simpleolv.configurate-rows.caption"], [], ["loc", [null, [2, 22], [2, 100]]]], ["element", "action", ["changeAttribute2"], [], ["loc", [null, [5, 12], [5, 41]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [9, 27], [9, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [10, 32], [10, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [11, 28], [11, 49]]]]], [], []]], 0, null, ["loc", [null, [8, 4], [37, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-simpleolv/custom-filter", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 44,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/custom-filter.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-simpleolv.custom-filter.caption"], [], ["loc", [null, [2, 4], [2, 79]]]], ["inline", "flexberry-simpleolv", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [5, 12], [5, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [7, 20], [7, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [8, 18], [8, 31]]]]], [], []], "createNewButton", false, "refreshButton", true, "enableFilters", true, "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [12, 12], [12, 19]]]]], [], []], "applyFilters", ["subexpr", "action", ["applyFilters"], [], ["loc", [null, [13, 17], [13, 40]]]], "resetFilters", ["subexpr", "action", ["resetFilters"], [], ["loc", [null, [14, 17], [14, 40]]]], "componentForFilter", ["subexpr", "action", ["componentForFilter"], [], ["loc", [null, [15, 23], [15, 52]]]], "conditionsByType", ["subexpr", "action", ["conditionsByType"], [], ["loc", [null, [16, 21], [16, 48]]]], "filterButton", true, "filterText", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [18, 15], [18, 21]]]]], [], []], "filterByAnyWord", ["subexpr", "@mut", [["get", "filterByAnyWord", ["loc", [null, [19, 20], [19, 35]]]]], [], []], "filterByAllWords", ["subexpr", "@mut", [["get", "filterByAllWords", ["loc", [null, [20, 21], [20, 37]]]]], [], []], "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [21, 21], [21, 48]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [22, 27], [22, 60]]]], "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [23, 12], [23, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [25, 10], [25, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [26, 17], [26, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [27, 18], [27, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [28, 22], [28, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [29, 20], [29, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [30, 16], [30, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [31, 17], [31, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [32, 23], [32, 52]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [33, 17], [33, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [34, 13], [34, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [35, 13], [35, 32]]]], "colsConfigButton", false, "componentName", "SOLVCustomFilterObjectListView", "customButtons", ["subexpr", "@mut", [["get", "customButtons", ["loc", [null, [38, 18], [38, 31]]]]], [], []], "toggleFilterByAnyWord", "toggleFilterByAnyWord", "toggleFilterByAllWords", "toggleFilterByAllWords", "addObjects", "addObjects"], ["loc", [null, [4, 2], [42, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-simpleolv/limit-function-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 46,
            "column": 9
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/limit-function-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "class", "ui button");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "class", "ui button");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "class", "ui button");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [8]);
        var element1 = dom.childAt(fragment, [10]);
        var element2 = dom.childAt(fragment, [12]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[3] = dom.createElementMorph(element0);
        morphs[4] = dom.createMorphAt(element0, 1, 1);
        morphs[5] = dom.createElementMorph(element1);
        morphs[6] = dom.createMorphAt(element1, 1, 1);
        morphs[7] = dom.createElementMorph(element2);
        morphs[8] = dom.createMorphAt(element2, 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-simpleolv.limit-function-example.caption"], [], ["loc", [null, [2, 22], [2, 106]]]], ["inline", "flexberry-simpleolv", [], ["modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 18], [6, 33]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 10], [7, 15]]]]], [], []], "createNewButton", false, "showCheckBoxInRow", false, "showDeleteButtonInRow", false, "showEditMenuItemInRow", false, "showDeleteMenuItemInRow", false, "rowClickable", false, "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [16, 19], [16, 46]]]], "filterText", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [17, 13], [17, 19]]]]], [], []], "filterButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [21, 10], [21, 25]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [23, 15], [23, 38]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [24, 21], [24, 50]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [25, 8], [25, 13]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [26, 15], [26, 27]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [27, 16], [27, 29]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [28, 20], [28, 37]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [29, 18], [29, 33]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [30, 14], [30, 25]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [31, 15], [31, 38]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [32, 11], [32, 30]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [33, 11], [33, 30]]]], "componentName", "SOLVLimitFunctionExampleObjectListView"], ["loc", [null, [4, 0], [35, 2]]]], ["element", "action", ["firstLimitFunction"], ["on", "click"], ["loc", [null, [38, 26], [38, 68]]]], ["inline", "concat", [["subexpr", "t", ["forms.components-examples.flexberry-simpleolv.limit-function-example.captionFirstLimitFunction"], [], ["loc", [null, [39, 11], [39, 111]]]], ": ", ["get", "firstLimitType", ["loc", [null, [39, 117], [39, 131]]]]], [], ["loc", [null, [39, 2], [39, 133]]]], ["element", "action", ["secondLimitFunction"], ["on", "click"], ["loc", [null, [41, 26], [41, 69]]]], ["inline", "concat", [["subexpr", "t", ["forms.components-examples.flexberry-simpleolv.limit-function-example.captionSecondLimitFunction"], [], ["loc", [null, [42, 11], [42, 112]]]], ": ", ["get", "secondLimitType", ["loc", [null, [42, 118], [42, 133]]]]], [], ["loc", [null, [42, 2], [42, 135]]]], ["element", "action", ["clearLimitFunction"], ["on", "click"], ["loc", [null, [44, 26], [44, 68]]]], ["inline", "t", ["forms.components-examples.flexberry-simpleolv.limit-function-example.captionClearLimitFunction"], [], ["loc", [null, [45, 2], [45, 104]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-simpleolv/on-edit-form", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/on-edit-form.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-list.caption"], [], ["loc", [null, [2, 4], [2, 69]]]], ["inline", "flexberry-simpleolv", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [5, 12], [5, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-application-user", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [7, 20], [7, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [8, 18], [8, 31]]]]], [], []], "createNewButton", false, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [11, 12], [11, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [13, 10], [13, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [14, 17], [14, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [15, 18], [15, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [16, 22], [16, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [19, 17], [19, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [20, 23], [20, 52]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [21, 17], [21, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [22, 13], [22, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [23, 13], [23, 32]]]], "componentName", "SOLVOnEditFormObjectListView", "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [25, 27], [25, 60]]]]], ["loc", [null, [4, 2], [26, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-simpleolv/on-edit-form/user", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 8
              },
              "end": {
                "line": 27,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/on-edit-form/user.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [26, 62], [26, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [26, 80], [26, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/on-edit-form/user.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [29, 68], [29, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [29, 94], [29, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 8
              },
              "end": {
                "line": 33,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/on-edit-form/user.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [32, 66], [32, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [32, 86], [32, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 6
            },
            "end": {
              "line": 34,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [25, 23], [25, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [25, 43], [25, 63]]]]], [], ["loc", [null, [25, 38], [25, 64]]]]], [], ["loc", [null, [25, 18], [25, 65]]]]], [], 0, null, ["loc", [null, [25, 8], [27, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [28, 23], [28, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [28, 43], [28, 63]]]]], [], ["loc", [null, [28, 38], [28, 64]]]]], [], ["loc", [null, [28, 18], [28, 65]]]]], [], 1, null, ["loc", [null, [28, 8], [30, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [31, 23], [31, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [31, 44], [31, 58]]]]], [], ["loc", [null, [31, 39], [31, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [31, 65], [31, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [31, 80], [31, 100]]]]], [], ["loc", [null, [31, 60], [31, 101]]]]], [], ["loc", [null, [31, 35], [31, 102]]]]], [], ["loc", [null, [31, 18], [31, 103]]]]], [], 2, null, ["loc", [null, [31, 8], [33, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.name", ["loc", [null, [40, 31], [40, 52]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 51,
              "column": 4
            },
            "end": {
              "line": 53,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.eMail", ["loc", [null, [52, 31], [52, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 63,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.phone1", ["loc", [null, [64, 31], [64, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.phone2", ["loc", [null, [76, 31], [76, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.phone3", ["loc", [null, [88, 31], [88, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 100,
              "column": 4
            },
            "end": {
              "line": 102,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.activated", ["loc", [null, [101, 30], [101, 56]]]]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 108,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.vK", ["loc", [null, [107, 31], [107, 50]]]]],
        locals: [],
        templates: []
      };
    })();
    var child8 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 120,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.facebook", ["loc", [null, [119, 31], [119, 56]]]]],
        locals: [],
        templates: []
      };
    })();
    var child9 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 130,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.twitter", ["loc", [null, [131, 31], [131, 55]]]]],
        locals: [],
        templates: []
      };
    })();
    var child10 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.birthday", ["loc", [null, [144, 30], [144, 55]]]]],
        locals: [],
        templates: []
      };
    })();
    var child11 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 154,
              "column": 4
            },
            "end": {
              "line": 156,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.gender", ["loc", [null, [155, 30], [155, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    var child12 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 161,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.vip", ["loc", [null, [162, 30], [162, 50]]]]],
        locals: [],
        templates: []
      };
    })();
    var child13 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 167,
              "column": 4
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.karma", ["loc", [null, [168, 31], [168, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 194,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/on-edit-form/user.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("hr");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h3");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(":");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [4]);
        var element4 = dom.childAt(element3, [5, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [7]);
        var element7 = dom.childAt(element3, [9]);
        var element8 = dom.childAt(element3, [11]);
        var element9 = dom.childAt(element3, [13]);
        var element10 = dom.childAt(element3, [15]);
        var element11 = dom.childAt(element3, [17]);
        var element12 = dom.childAt(element3, [19]);
        var element13 = dom.childAt(element3, [21]);
        var element14 = dom.childAt(element3, [23]);
        var element15 = dom.childAt(element3, [25]);
        var element16 = dom.childAt(element3, [27]);
        var element17 = dom.childAt(element3, [29]);
        var element18 = dom.childAt(element3, [31]);
        var element19 = dom.childAt(element3, [35]);
        var morphs = new Array(39);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(element3, 1, 1);
        morphs[3] = dom.createMorphAt(element3, 3, 3);
        morphs[4] = dom.createMorphAt(element4, 1, 1);
        morphs[5] = dom.createElementMorph(element5);
        morphs[6] = dom.createMorphAt(element5, 0, 0);
        morphs[7] = dom.createMorphAt(element6, 1, 1);
        morphs[8] = dom.createMorphAt(element6, 3, 3);
        morphs[9] = dom.createMorphAt(element7, 1, 1);
        morphs[10] = dom.createMorphAt(element7, 3, 3);
        morphs[11] = dom.createMorphAt(element8, 1, 1);
        morphs[12] = dom.createMorphAt(element8, 3, 3);
        morphs[13] = dom.createMorphAt(element9, 1, 1);
        morphs[14] = dom.createMorphAt(element9, 3, 3);
        morphs[15] = dom.createMorphAt(element10, 1, 1);
        morphs[16] = dom.createMorphAt(element10, 3, 3);
        morphs[17] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[18] = dom.createMorphAt(element11, 3, 3);
        morphs[19] = dom.createMorphAt(element11, 5, 5);
        morphs[20] = dom.createMorphAt(element12, 1, 1);
        morphs[21] = dom.createMorphAt(element12, 3, 3);
        morphs[22] = dom.createMorphAt(element13, 1, 1);
        morphs[23] = dom.createMorphAt(element13, 3, 3);
        morphs[24] = dom.createMorphAt(element14, 1, 1);
        morphs[25] = dom.createMorphAt(element14, 3, 3);
        morphs[26] = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
        morphs[27] = dom.createMorphAt(element15, 3, 3);
        morphs[28] = dom.createMorphAt(element15, 5, 5);
        morphs[29] = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
        morphs[30] = dom.createMorphAt(element16, 3, 3);
        morphs[31] = dom.createMorphAt(element16, 5, 5);
        morphs[32] = dom.createMorphAt(dom.childAt(element17, [1]), 0, 0);
        morphs[33] = dom.createMorphAt(element17, 3, 3);
        morphs[34] = dom.createMorphAt(element17, 5, 5);
        morphs[35] = dom.createMorphAt(element18, 1, 1);
        morphs[36] = dom.createMorphAt(element18, 3, 3);
        morphs[37] = dom.createMorphAt(dom.childAt(element19, [1]), 0, 0);
        morphs[38] = dom.createMorphAt(element19, 3, 3);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.caption"], [], ["loc", [null, [2, 22], [2, 87]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [7, 12], [7, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [8, 12], [8, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [9, 12], [9, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [10, 11], [10, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [11, 11], [11, 42]]]]], ["loc", [null, [4, 2], [12, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [16, 12], [16, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [17, 12], [17, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [18, 12], [18, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [19, 11], [19, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [20, 11], [20, 40]]]]], ["loc", [null, [13, 2], [21, 4]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [24, 16], [24, 24]]]]], [], 0, null, ["loc", [null, [24, 6], [34, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [35, 59], [35, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [35, 78], [35, 119]]]], ["block", "if", [["get", "model.errors.name", ["loc", [null, [39, 10], [39, 27]]]]], [], 1, null, ["loc", [null, [39, 4], [41, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [43, 15], [43, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [45, 12], [45, 22]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [46, 16], [46, 33]]]], "error", ""], [], ["loc", [null, [46, 12], [46, 45]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.name-caption"], [], ["loc", [null, [47, 12], [47, 80]]]]], ["loc", [null, [42, 4], [48, 6]]]], ["block", "if", [["get", "model.errors.eMail", ["loc", [null, [51, 10], [51, 28]]]]], [], 2, null, ["loc", [null, [51, 4], [53, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [55, 15], [55, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.eMail", ["loc", [null, [57, 12], [57, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.eMail", ["loc", [null, [58, 16], [58, 34]]]], "error", ""], [], ["loc", [null, [58, 12], [58, 46]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.eMail-caption"], [], ["loc", [null, [59, 12], [59, 81]]]]], ["loc", [null, [54, 4], [60, 6]]]], ["block", "if", [["get", "model.errors.phone1", ["loc", [null, [63, 10], [63, 29]]]]], [], 3, null, ["loc", [null, [63, 4], [65, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [67, 15], [67, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.phone1", ["loc", [null, [69, 12], [69, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.phone1", ["loc", [null, [70, 16], [70, 35]]]], "error", ""], [], ["loc", [null, [70, 12], [70, 47]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone1-caption"], [], ["loc", [null, [71, 12], [71, 82]]]]], ["loc", [null, [66, 4], [72, 6]]]], ["block", "if", [["get", "model.errors.phone2", ["loc", [null, [75, 10], [75, 29]]]]], [], 4, null, ["loc", [null, [75, 4], [77, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [79, 15], [79, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.phone2", ["loc", [null, [81, 12], [81, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.phone2", ["loc", [null, [82, 16], [82, 35]]]], "error", ""], [], ["loc", [null, [82, 12], [82, 47]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone2-caption"], [], ["loc", [null, [83, 12], [83, 82]]]]], ["loc", [null, [78, 4], [84, 6]]]], ["block", "if", [["get", "model.errors.phone3", ["loc", [null, [87, 10], [87, 29]]]]], [], 5, null, ["loc", [null, [87, 4], [89, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [91, 15], [91, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.phone3", ["loc", [null, [93, 12], [93, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.phone3", ["loc", [null, [94, 16], [94, 35]]]], "error", ""], [], ["loc", [null, [94, 12], [94, 47]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone3-caption"], [], ["loc", [null, [95, 12], [95, 82]]]]], ["loc", [null, [90, 4], [96, 6]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.activated-caption"], [], ["loc", [null, [99, 11], [99, 86]]]], ["block", "if", [["get", "model.errors.activated", ["loc", [null, [100, 10], [100, 32]]]]], [], 6, null, ["loc", [null, [100, 4], [102, 11]]]], ["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [103, 34], [103, 42]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.activated", ["loc", [null, [103, 49], [103, 64]]]]], [], []]], ["loc", [null, [103, 4], [103, 66]]]], ["block", "if", [["get", "model.errors.vK", ["loc", [null, [106, 10], [106, 25]]]]], [], 7, null, ["loc", [null, [106, 4], [108, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [110, 15], [110, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.vK", ["loc", [null, [112, 12], [112, 20]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.vK", ["loc", [null, [113, 16], [113, 31]]]], "error", ""], [], ["loc", [null, [113, 12], [113, 43]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.vK-caption"], [], ["loc", [null, [114, 12], [114, 78]]]]], ["loc", [null, [109, 4], [115, 6]]]], ["block", "if", [["get", "model.errors.facebook", ["loc", [null, [118, 10], [118, 31]]]]], [], 8, null, ["loc", [null, [118, 4], [120, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [122, 15], [122, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.facebook", ["loc", [null, [124, 12], [124, 26]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.facebook", ["loc", [null, [125, 16], [125, 37]]]], "error", ""], [], ["loc", [null, [125, 12], [125, 49]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.facebook-caption"], [], ["loc", [null, [126, 12], [126, 84]]]]], ["loc", [null, [121, 4], [127, 6]]]], ["block", "if", [["get", "model.errors.twitter", ["loc", [null, [130, 10], [130, 30]]]]], [], 9, null, ["loc", [null, [130, 4], [132, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [134, 15], [134, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.twitter", ["loc", [null, [136, 12], [136, 25]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.twitter", ["loc", [null, [137, 16], [137, 36]]]], "error", ""], [], ["loc", [null, [137, 12], [137, 48]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.twitter-caption"], [], ["loc", [null, [138, 12], [138, 83]]]]], ["loc", [null, [133, 4], [139, 6]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.birthday-caption"], [], ["loc", [null, [142, 11], [142, 85]]]], ["block", "if", [["get", "model.errors.birthday", ["loc", [null, [143, 10], [143, 31]]]]], [], 10, null, ["loc", [null, [143, 4], [145, 11]]]], ["inline", "flexberry-datepicker", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [147, 15], [147, 23]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.birthday", ["loc", [null, [148, 12], [148, 26]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.birthday", ["loc", [null, [149, 16], [149, 37]]]], "error", ""], [], ["loc", [null, [149, 12], [149, 49]]]]], ["loc", [null, [146, 4], [150, 6]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.gender-caption"], [], ["loc", [null, [153, 11], [153, 83]]]], ["block", "if", [["get", "model.errors.gender", ["loc", [null, [154, 10], [154, 29]]]]], [], 11, null, ["loc", [null, [154, 4], [156, 11]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "flexberry-enum", ["ember-flexberry-dummy-gender"], [], ["loc", [null, [157, 31], [157, 78]]]], "value", ["subexpr", "@mut", [["get", "model.gender", ["loc", [null, [157, 85], [157, 97]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [157, 107], [157, 115]]]]], [], []]], ["loc", [null, [157, 4], [157, 117]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.vip-caption"], [], ["loc", [null, [160, 11], [160, 80]]]], ["block", "if", [["get", "model.errors.vip", ["loc", [null, [161, 10], [161, 26]]]]], [], 12, null, ["loc", [null, [161, 4], [163, 11]]]], ["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [164, 34], [164, 42]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.vip", ["loc", [null, [164, 49], [164, 58]]]]], [], []]], ["loc", [null, [164, 4], [164, 60]]]], ["block", "if", [["get", "model.errors.karma", ["loc", [null, [167, 10], [167, 28]]]]], [], 13, null, ["loc", [null, [167, 4], [169, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [171, 15], [171, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.karma", ["loc", [null, [173, 12], [173, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.karma", ["loc", [null, [174, 16], [174, 34]]]], "error", ""], [], ["loc", [null, [174, 12], [174, 46]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.karma-caption"], [], ["loc", [null, [175, 12], [175, 81]]]]], ["loc", [null, [170, 4], [176, 6]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.on-edit-form.caption"], [], ["loc", [null, [180, 8], [180, 87]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "customContent", ["loc", [null, [182, 14], [182, 27]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion", "modelProjection", "SuggestionL", "rowClickable", false, "colsConfigButton", false, "showShowingEntries", false, "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [188, 20], [188, 33]]]]], [], []], "componentName", "FOLVOnEditFormSuggestionsObjectListView", "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [190, 29], [190, 62]]]]], ["loc", [null, [181, 4], [191, 6]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-simpleolv/selected-rows", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/selected-rows.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "inline field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("Count selected row:");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui teal label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [1, 3]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-simpleolv.selected-rows.caption"], [], ["loc", [null, [2, 22], [2, 97]]]], ["content", "countSelectedRows", ["loc", [null, [6, 31], [6, 52]]]], ["inline", "flexberry-simpleolv", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [10, 14], [10, 19]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion-type", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [12, 22], [12, 37]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [13, 20], [13, 33]]]]], [], []], "orderable", false, "showShowingEntries", false, "componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [16, 20], [16, 33]]]]], [], []], "colsConfigButton", false, "disableHierarchicalMode", true, "showCheckBoxInRow", true, "configurateSelectedRows", ["subexpr", "action", ["configurateSelectedRows"], [], ["loc", [null, [20, 30], [20, 64]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [21, 29], [21, 62]]]]], ["loc", [null, [9, 4], [22, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-simpleolv/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-simpleolv", [], ["colsConfigButton", ["subexpr", "@mut", [["get", "colsConfigButton", ["loc", [null, [11, 25], [11, 41]]]]], [], []], "exportExcelButton", ["subexpr", "@mut", [["get", "exportExcelButton", ["loc", [null, [12, 26], [12, 43]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [13, 16], [13, 21]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion", "editFormRoute", "ember-flexberry-dummy-suggestion-edit", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [16, 24], [16, 39]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [17, 20], [17, 31]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [18, 17], [18, 25]]]]], [], []], "tableStriped", ["subexpr", "@mut", [["get", "tableStriped", ["loc", [null, [19, 21], [19, 33]]]]], [], []], "allowColumnResize", ["subexpr", "@mut", [["get", "allowColumnResize", ["loc", [null, [20, 26], [20, 43]]]]], [], []], "minAutoColumnWidth", ["subexpr", "@mut", [["get", "minAutoColumnWidth", ["loc", [null, [21, 27], [21, 45]]]]], [], []], "columnsWidthAutoresize", ["subexpr", "@mut", [["get", "columnsWidthAutoresize", ["loc", [null, [22, 31], [22, 53]]]]], [], []], "createNewButton", ["subexpr", "@mut", [["get", "createNewButton", ["loc", [null, [23, 24], [23, 39]]]]], [], []], "deleteButton", ["subexpr", "@mut", [["get", "deleteButton", ["loc", [null, [24, 21], [24, 33]]]]], [], []], "refreshButton", ["subexpr", "@mut", [["get", "refreshButton", ["loc", [null, [25, 22], [25, 35]]]]], [], []], "defaultSortingButton", ["subexpr", "@mut", [["get", "defaultSortingButton", ["loc", [null, [26, 29], [26, 49]]]]], [], []], "enableFilters", ["subexpr", "@mut", [["get", "enableFilters", ["loc", [null, [27, 22], [27, 35]]]]], [], []], "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [28, 16], [28, 23]]]]], [], []], "applyFilters", ["subexpr", "action", ["applyFilters"], [], ["loc", [null, [29, 21], [29, 44]]]], "resetFilters", ["subexpr", "action", ["resetFilters"], [], ["loc", [null, [30, 21], [30, 44]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [31, 31], [31, 64]]]], "filterButton", ["subexpr", "@mut", [["get", "filterButton", ["loc", [null, [32, 21], [32, 33]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [33, 26], [33, 43]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [34, 30], [34, 51]]]]], [], []], "showEditButtonInRow", ["subexpr", "@mut", [["get", "showEditButtonInRow", ["loc", [null, [35, 28], [35, 47]]]]], [], []], "showEditMenuItemInRow", ["subexpr", "@mut", [["get", "showEditMenuItemInRow", ["loc", [null, [36, 30], [36, 51]]]]], [], []], "showDeleteMenuItemInRow", ["subexpr", "@mut", [["get", "showDeleteMenuItemInRow", ["loc", [null, [37, 32], [37, 55]]]]], [], []], "rowClickable", ["subexpr", "@mut", [["get", "rowClickable", ["loc", [null, [38, 21], [38, 33]]]]], [], []], "orderable", ["subexpr", "@mut", [["get", "orderable", ["loc", [null, [39, 18], [39, 27]]]]], [], []], "singleColumnHeaderTitle", ["subexpr", "@mut", [["get", "singleColumnHeaderTitle", ["loc", [null, [40, 32], [40, 55]]]]], [], []], "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [41, 25], [41, 52]]]], "filterText", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [42, 19], [42, 25]]]]], [], []], "filterByAnyWord", ["subexpr", "@mut", [["get", "filterByAnyWord", ["loc", [null, [43, 24], [43, 39]]]]], [], []], "filterByAllWords", ["subexpr", "@mut", [["get", "filterByAllWords", ["loc", [null, [44, 25], [44, 41]]]]], [], []], "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [45, 16], [45, 31]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [46, 21], [46, 44]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [47, 27], [47, 56]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [48, 14], [48, 19]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [49, 21], [49, 33]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [50, 22], [50, 35]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [51, 26], [51, 43]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [52, 24], [52, 39]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [53, 20], [53, 31]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [54, 21], [54, 44]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [55, 17], [55, 36]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [56, 17], [56, 36]]]], "componentName", "SOLVSettingsExampleObjectListView", "fixedHeader", ["subexpr", "@mut", [["get", "fixedHeader", ["loc", [null, [58, 20], [58, 31]]]]], [], []]], ["loc", [null, [10, 6], [59, 10]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 63,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4, 1]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-simpleolv.settings-example.caption"], [], ["loc", [null, [2, 22], [2, 100]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [6, 27], [6, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [7, 32], [7, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [8, 28], [8, 49]]]]], [], []]], 0, null, ["loc", [null, [5, 4], [60, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-simpleolv/toolbar-custom-buttons-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 35,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-simpleolv/toolbar-custom-buttons-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [6]), 0, 0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-simpleolv.toolbar-custom-buttons-example.caption"], [], ["loc", [null, [2, 22], [2, 114]]]], ["inline", "flexberry-simpleolv", [], ["modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 18], [6, 33]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 10], [7, 15]]]]], [], []], "createNewButton", false, "showCheckBoxInRow", false, "showDeleteButtonInRow", false, "showEditMenuItemInRow", false, "showDeleteMenuItemInRow", false, "rowClickable", false, "refreshButton", false, "colsConfigButton", false, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [18, 8], [18, 13]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [19, 15], [19, 27]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [20, 16], [20, 29]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [21, 20], [21, 37]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [22, 18], [22, 33]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [23, 14], [23, 25]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [24, 15], [24, 38]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [25, 11], [25, 30]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [26, 11], [26, 30]]]], "customButtons", ["subexpr", "@mut", [["get", "customButtons", ["loc", [null, [28, 16], [28, 29]]]]], [], []], "userButtonActionTest", "userButtonActionTest", "toggleHiButton", "toggleHiButton", "componentName", "SOLVToolbarCustomButtonsExample"], ["loc", [null, [4, 0], [32, 2]]]], ["content", "messageForUser", ["loc", [null, [34, 17], [34, 35]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-text-cell/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-text-cell/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-text-cell", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [12, 12], [12, 17]]]]], [], []], "maxTextLength", ["subexpr", "@mut", [["get", "maxTextLength", ["loc", [null, [13, 20], [13, 33]]]]], [], []], "cutBySpaces", ["subexpr", "@mut", [["get", "cutBySpaces", ["loc", [null, [14, 18], [14, 29]]]]], [], []]], ["loc", [null, [11, 4], [15, 6]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-text-cell/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4, 1]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-text-cell.settings-example.caption"], [], ["loc", [null, [2, 22], [2, 100]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [6, 27], [6, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [7, 32], [7, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [8, 28], [8, 49]]]]], [], []], "componentBlockOverflow", "visible"], 0, null, ["loc", [null, [5, 4], [16, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-textarea/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 26,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-textarea/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-textarea", [], ["value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [10, 12], [10, 22]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [11, 18], [11, 29]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [12, 15], [12, 23]]]]], [], []], "class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [13, 11], [13, 16]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [14, 15], [14, 23]]]]], [], []], "rows", ["subexpr", "@mut", [["get", "rows", ["loc", [null, [15, 11], [15, 15]]]]], [], []], "cols", ["subexpr", "@mut", [["get", "cols", ["loc", [null, [16, 11], [16, 15]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [17, 15], [17, 23]]]]], [], []], "maxlength", ["subexpr", "@mut", [["get", "maxlength", ["loc", [null, [18, 16], [18, 25]]]]], [], []], "selectionStart", ["subexpr", "@mut", [["get", "selectionStart", ["loc", [null, [19, 21], [19, 35]]]]], [], []], "selectionEnd", ["subexpr", "@mut", [["get", "selectionEnd", ["loc", [null, [20, 19], [20, 31]]]]], [], []], "selectionDirection", ["subexpr", "@mut", [["get", "selectionDirection", ["loc", [null, [21, 25], [21, 43]]]]], [], []], "wrap", ["subexpr", "@mut", [["get", "wrap", ["loc", [null, [22, 11], [22, 15]]]]], [], []], "autofocus", ["subexpr", "@mut", [["get", "autofocus", ["loc", [null, [23, 16], [23, 25]]]]], [], []], "spellcheck", ["subexpr", "@mut", [["get", "spellcheck", ["loc", [null, [24, 17], [24, 27]]]]], [], []]], ["loc", [null, [9, 4], [25, 6]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-textarea/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-textarea.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 99]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [4, 25], [4, 29]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [5, 30], [5, 55]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [6, 26], [6, 47]]]]], [], []], "componentBlockOverflow", "visible"], 0, null, ["loc", [null, [3, 2], [26, 23]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-textbox/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 16,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-textbox/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-textbox", [], ["class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [10, 12], [10, 17]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [11, 12], [11, 22]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [12, 18], [12, 29]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [13, 15], [13, 23]]]]], [], []], "maxlength", ["subexpr", "@mut", [["get", "maxlength", ["loc", [null, [14, 16], [14, 25]]]]], [], []]], ["loc", [null, [9, 4], [15, 6]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-textbox/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-textbox.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 98]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [4, 25], [4, 29]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [5, 30], [5, 55]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [6, 26], [6, 47]]]]], [], []], "componentBlockOverflow", "visible"], 0, null, ["loc", [null, [3, 2], [16, 23]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-toggler/ge-into-toggler-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-toggler/ge-into-toggler-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.components-examples.flexberry-toggler.ge-into-toggler-example.caption"], [], ["loc", [null, [2, 4], [2, 87]]]], ["inline", "flexberry-objectlistview", [], ["editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [5, 18], [5, 31]]]]], [], []], "showCheckBoxInRow", true, "modelName", "ember-flexberry-dummy-toggler-example-master", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [8, 20], [8, 35]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [9, 12], [9, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "exportExcelButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [13, 12], [13, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [15, 17], [15, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [16, 23], [16, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [17, 27], [17, 60]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [18, 10], [18, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [19, 17], [19, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [20, 18], [20, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [21, 22], [21, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [22, 20], [22, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [23, 16], [23, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [24, 17], [24, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [25, 13], [25, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [26, 13], [26, 32]]]], "componentName", "SuggestionObjectListView", "showDeleteMenuItemInRow", true, "deleteButton", true], ["loc", [null, [4, 2], [30, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-toggler/settings-example-inner", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 8
                },
                "end": {
                  "line": 27,
                  "column": 8
                }
              },
              "moduleName": "dummy/templates/components-examples/flexberry-toggler/settings-example-inner.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "t", ["forms.components-examples.flexberry-toggler.settings-example-inner.innerTogglerContent"], [], ["loc", [null, [26, 10], [26, 104]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 6
              },
              "end": {
                "line": 28,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-toggler/settings-example-inner.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["forms.components-examples.flexberry-toggler.settings-example-inner.togglerContent"], [], ["loc", [null, [17, 8], [17, 97]]]], ["block", "flexberry-toggler", [], ["caption", ["subexpr", "@mut", [["get", "innerCaption", ["loc", [null, [19, 18], [19, 30]]]]], [], []], "expandedCaption", ["subexpr", "@mut", [["get", "expandedInnerCaption", ["loc", [null, [20, 26], [20, 46]]]]], [], []], "collapsedCaption", ["subexpr", "@mut", [["get", "collapsedInnerCaption", ["loc", [null, [21, 27], [21, 48]]]]], [], []], "expanded", ["subexpr", "@mut", [["get", "innerExpanded", ["loc", [null, [22, 19], [22, 32]]]]], [], []], "iconClass", ["subexpr", "@mut", [["get", "iconClass", ["loc", [null, [23, 20], [23, 29]]]]], [], []], "componentName", "myInnerToggler"], 0, null, ["loc", [null, [18, 8], [27, 30]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-toggler/settings-example-inner.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "flexberry-toggler", [], ["caption", ["subexpr", "@mut", [["get", "caption", ["loc", [null, [10, 16], [10, 23]]]]], [], []], "expandedCaption", ["subexpr", "@mut", [["get", "expandedCaption", ["loc", [null, [11, 24], [11, 39]]]]], [], []], "collapsedCaption", ["subexpr", "@mut", [["get", "collapsedCaption", ["loc", [null, [12, 25], [12, 41]]]]], [], []], "expanded", ["subexpr", "@mut", [["get", "expanded", ["loc", [null, [13, 17], [13, 25]]]]], [], []], "iconClass", ["subexpr", "@mut", [["get", "iconClass", ["loc", [null, [14, 18], [14, 27]]]]], [], []], "componentName", "myToggler"], 0, null, ["loc", [null, [9, 6], [28, 28]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 31,
            "column": 7
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-toggler/settings-example-inner.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-toggler.settings-example-inner.caption"], [], ["loc", [null, [1, 22], [1, 104]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []]], 0, null, ["loc", [null, [4, 4], [29, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-toggler/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 6
              },
              "end": {
                "line": 21,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-toggler/settings-example.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["forms.components-examples.flexberry-toggler.settings-example.togglerContent"], [], ["loc", [null, [20, 10], [20, 93]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 22,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-toggler/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "flexberry-toggler", [], ["caption", ["subexpr", "@mut", [["get", "caption", ["loc", [null, [11, 16], [11, 23]]]]], [], []], "expandedCaption", ["subexpr", "@mut", [["get", "expandedCaption", ["loc", [null, [12, 24], [12, 39]]]]], [], []], "collapsedCaption", ["subexpr", "@mut", [["get", "collapsedCaption", ["loc", [null, [13, 25], [13, 41]]]]], [], []], "expanded", ["subexpr", "@mut", [["get", "expanded", ["loc", [null, [14, 17], [14, 25]]]]], [], []], "hasBorder", ["subexpr", "@mut", [["get", "hasBorder", ["loc", [null, [15, 18], [15, 27]]]]], [], []], "hasShadow", ["subexpr", "@mut", [["get", "hasShadow", ["loc", [null, [16, 18], [16, 27]]]]], [], []], "iconClass", ["subexpr", "@mut", [["get", "iconClass", ["loc", [null, [17, 18], [17, 27]]]]], [], []], "componentName", "myToggler"], 0, null, ["loc", [null, [10, 6], [21, 28]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 7
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-toggler/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-toggler.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 98]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []], "componentBlockOverflow", "visible"], 0, null, ["loc", [null, [4, 4], [22, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-tree/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 6
            },
            "end": {
              "line": 34,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-tree/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-tree", [], ["class", ["subexpr", "@mut", [["get", "jsonTreeClass", ["loc", [null, [17, 16], [17, 29]]]]], [], []], "exclusive", ["subexpr", "@mut", [["get", "jsonTreeExclusive", ["loc", [null, [18, 20], [18, 37]]]]], [], []], "collapsible", ["subexpr", "@mut", [["get", "jsonTreeCollapsible", ["loc", [null, [19, 22], [19, 41]]]]], [], []], "animateChildren", ["subexpr", "@mut", [["get", "jsonTreeAnimateChildren", ["loc", [null, [20, 26], [20, 49]]]]], [], []], "duration", ["subexpr", "@mut", [["get", "jsonTreeDuration", ["loc", [null, [21, 19], [21, 35]]]]], [], []], "nodes", ["subexpr", "get-with-dynamic-actions", [["get", "this", ["loc", [null, [22, 42], [22, 46]]]], "jsonTreeNodes"], ["hierarchyPropertyName", "nodes", "pathKeyword", "nodePath", "dynamicActions", ["subexpr", "array", [["subexpr", "hash", [], ["on", "headerClick", "actionName", "onTreenodeHeaderClick", "actionArguments", ["subexpr", "array", ["{% nodePath %}"], [], ["loc", [null, [29, 32], [29, 56]]]]], ["loc", [null, [26, 14], [30, 15]]]]], [], ["loc", [null, [25, 27], [31, 13]]]]], ["loc", [null, [22, 16], [32, 11]]]]], ["loc", [null, [16, 8], [33, 10]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-tree/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui top attached tabular menu");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "class", "item active");
        dom.setAttribute(el4, "data-tab", "jsonTree");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui bottom attached tab segment active");
        dom.setAttribute(el3, "data-tab", "jsonTree");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("br");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2, 1]);
        var element1 = dom.childAt(element0, [3]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 1, 1);
        morphs[2] = dom.createMorphAt(element1, 1, 1);
        morphs[3] = dom.createMorphAt(element1, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-tree.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 95]]]], ["inline", "t", ["forms.components-examples.flexberry-tree.settings-example.json-tree-tab-caption"], [], ["loc", [null, [6, 8], [6, 95]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [11, 29], [11, 33]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "jsonTreeComponentSettingsMetadata", ["loc", [null, [12, 34], [12, 67]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "jsonTreeComponentTemplateText", ["loc", [null, [13, 30], [13, 59]]]]], [], []], "componentBlockOverflow", "visible"], 0, null, ["loc", [null, [10, 6], [34, 27]]]], ["inline", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [37, 29], [37, 33]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "jsonTreeLatestClickedNodeComponentSettingsMetadata", ["loc", [null, [38, 34], [38, 84]]]]], [], []], "componentSettingsCaption", ["subexpr", "t", ["forms.components-examples.flexberry-tree.settings-example.json-tree-latest-clicked-node-caption"], [], ["loc", [null, [39, 33], [39, 134]]]], "componentSettingsPlaceholder", ["subexpr", "t", ["forms.components-examples.flexberry-tree.settings-example.json-tree-latest-clicked-node-placeholder"], [], ["loc", [null, [40, 37], [40, 142]]]]], ["loc", [null, [36, 6], [41, 8]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/ui-message/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 9,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components-examples/ui-message/settings-example.hbs"
        },
        isEmpty: true,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 2
            },
            "end": {
              "line": 16,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components-examples/ui-message/settings-example.hbs"
        },
        isEmpty: true,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 2
            },
            "end": {
              "line": 23,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components-examples/ui-message/settings-example.hbs"
        },
        isEmpty: true,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 2
            },
            "end": {
              "line": 30,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components-examples/ui-message/settings-example.hbs"
        },
        isEmpty: true,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 31,
              "column": 2
            },
            "end": {
              "line": 38,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components-examples/ui-message/settings-example.hbs"
        },
        isEmpty: true,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 39,
              "column": 2
            },
            "end": {
              "line": 47,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components-examples/ui-message/settings-example.hbs"
        },
        isEmpty: true,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 48,
              "column": 2
            },
            "end": {
              "line": 55,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components-examples/ui-message/settings-example.hbs"
        },
        isEmpty: true,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 56,
              "column": 2
            },
            "end": {
              "line": 62,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components-examples/ui-message/settings-example.hbs"
        },
        isEmpty: true,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 64,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/ui-message/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "content ui form success error warning");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        morphs[2] = dom.createMorphAt(element0, 2, 2);
        morphs[3] = dom.createMorphAt(element0, 3, 3);
        morphs[4] = dom.createMorphAt(element0, 4, 4);
        morphs[5] = dom.createMorphAt(element0, 5, 5);
        morphs[6] = dom.createMorphAt(element0, 6, 6);
        morphs[7] = dom.createMorphAt(element0, 7, 7);
        morphs[8] = dom.createMorphAt(element0, 8, 8);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.ui-message.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 91]]]], ["block", "ui-message", [], ["caption", ["subexpr", "t", ["forms.components-examples.ui-message.settings-example.captionMessage"], [], ["loc", [null, [4, 12], [4, 86]]]], "type", "success", "message", ["subexpr", "t", ["forms.components-examples.ui-message.settings-example.messageSuccess"], [], ["loc", [null, [6, 12], [6, 86]]]], "closeable", true], 0, null, ["loc", [null, [3, 2], [9, 17]]]], ["block", "ui-message", [], ["caption", ["subexpr", "t", ["forms.components-examples.ui-message.settings-example.captionMessage"], [], ["loc", [null, [11, 12], [11, 86]]]], "type", "positive", "message", ["subexpr", "t", ["forms.components-examples.ui-message.settings-example.messageSuccess"], [], ["loc", [null, [13, 12], [13, 86]]]], "icon", "paw icon"], 1, null, ["loc", [null, [10, 2], [16, 17]]]], ["block", "ui-message", [], ["caption", ["subexpr", "t", ["forms.components-examples.ui-message.settings-example.captionMessage"], [], ["loc", [null, [18, 12], [18, 86]]]], "type", "error", "message", ["subexpr", "t", ["forms.components-examples.ui-message.settings-example.messageError"], [], ["loc", [null, [20, 12], [20, 84]]]], "closeable", true], 2, null, ["loc", [null, [17, 2], [23, 17]]]], ["block", "ui-message", [], ["caption", ["subexpr", "t", ["forms.components-examples.ui-message.settings-example.captionMessage"], [], ["loc", [null, [25, 12], [25, 86]]]], "type", "negative", "message", ["subexpr", "t", ["forms.components-examples.ui-message.settings-example.messageError"], [], ["loc", [null, [27, 12], [27, 84]]]], "attached", true], 3, null, ["loc", [null, [24, 2], [30, 17]]]], ["block", "ui-message", [], ["caption", ["subexpr", "t", ["forms.components-examples.ui-message.settings-example.captionMessage"], [], ["loc", [null, [32, 12], [32, 86]]]], "type", "warning", "message", ["subexpr", "t", ["forms.components-examples.ui-message.settings-example.messageWarning"], [], ["loc", [null, [34, 12], [34, 86]]]], "closeable", true, "attached", true], 4, null, ["loc", [null, [31, 2], [38, 17]]]], ["block", "ui-message", [], ["caption", ["subexpr", "t", ["forms.components-examples.ui-message.settings-example.captionMessage"], [], ["loc", [null, [40, 12], [40, 86]]]], "type", "info", "size", "small", "icon", "alarm icon", "message", ["subexpr", "t", ["forms.components-examples.ui-message.settings-example.messageInfo"], [], ["loc", [null, [44, 12], [44, 83]]]], "closeable", true], 5, null, ["loc", [null, [39, 2], [47, 17]]]], ["block", "ui-message", [], ["caption", ["subexpr", "t", ["forms.components-examples.ui-message.settings-example.captionMessage"], [], ["loc", [null, [49, 12], [49, 86]]]], "type", "info", "color", "violet", "message", ["subexpr", "t", ["forms.components-examples.ui-message.settings-example.messageError"], [], ["loc", [null, [52, 12], [52, 84]]]], "compact", true], 6, null, ["loc", [null, [48, 2], [55, 17]]]], ["block", "ui-message", [], ["caption", ["subexpr", "t", ["forms.components-examples.ui-message.settings-example.captionMessage"], [], ["loc", [null, [57, 12], [57, 86]]]], "message", ["subexpr", "t", ["forms.components-examples.ui-message.settings-example.messageInfo"], [], ["loc", [null, [58, 12], [58, 83]]]], "floating", true, "color", "orange"], 7, null, ["loc", [null, [56, 2], [62, 17]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  })());
});
define("dummy/templates/components/advlimit-dialog-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components/advlimit-dialog-content.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createElementMorph(element0);
          morphs[2] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui small button cols-config-save", ["subexpr", "unless", [["get", "model.advLimitName", ["loc", [null, [18, 61], [18, 79]]]], " disabled"], [], ["loc", [null, [18, 52], [18, 93]]]]]]], ["element", "action", ["saveAdvLimit"], [], ["loc", [null, [18, 95], [18, 120]]]], ["inline", "t", ["components.advlimit-dialog-content.save"], [], ["loc", [null, [19, 10], [19, 57]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 38,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/advlimit-dialog-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "flexberry-colsconfig content");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui action input flexberry-advlimit-input");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui action input flexberry-advlimit-input");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ui right floated button cols-config-apply");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ui button cols-config-check");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element2, [3]);
        var element4 = dom.childAt(element3, [5]);
        var element5 = dom.childAt(element3, [7]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element1, 'class');
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(element3, 1, 1);
        morphs[3] = dom.createMorphAt(element3, 3, 3);
        morphs[4] = dom.createElementMorph(element4);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 1, 1);
        morphs[8] = dom.createMorphAt(element2, 5, 5);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["ui form ", ["get", "appState.state", ["loc", [null, [1, 22], [1, 36]]]]]]], ["inline", "flexberry-textarea", [], ["value", ["subexpr", "@mut", [["get", "model.advLimit", ["loc", [null, [5, 14], [5, 28]]]]], [], []], "class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [6, 14], [6, 19]]]]], [], []], "rows", "10"], ["loc", [null, [4, 6], [8, 8]]]], ["inline", "input", [], ["type", "input", "class", "setting-name-input fluid", "value", ["subexpr", "@mut", [["get", "model.advLimitName", ["loc", [null, [14, 14], [14, 32]]]]], [], []], "placeholder", ["subexpr", "t", ["components.advlimit-dialog-content.enter-limit-name"], [], ["loc", [null, [15, 20], [15, 77]]]]], ["loc", [null, [11, 6], [16, 8]]]], ["block", "if", [["get", "advLimit.isAdvLimitServiceEnabled", ["loc", [null, [17, 12], [17, 45]]]]], [], 0, null, ["loc", [null, [17, 6], [21, 13]]]], ["element", "action", ["apply"], [], ["loc", [null, [22, 61], [22, 79]]]], ["inline", "t", ["components.advlimit-dialog-content.use"], [], ["loc", [null, [23, 8], [23, 54]]]], ["element", "action", ["check"], [], ["loc", [null, [25, 47], [25, 65]]]], ["inline", "t", ["components.advlimit-dialog-content.check"], [], ["loc", [null, [26, 8], [26, 56]]]], ["inline", "ui-message", [], ["type", ["subexpr", "@mut", [["get", "message.type", ["loc", [null, [30, 11], [30, 23]]]]], [], []], "visible", ["subexpr", "@mut", [["get", "message.visible", ["loc", [null, [31, 14], [31, 29]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "message.caption", ["loc", [null, [32, 14], [32, 29]]]]], [], []], "message", ["subexpr", "@mut", [["get", "message.message", ["loc", [null, [33, 14], [33, 29]]]]], [], []], "closeable", ["subexpr", "@mut", [["get", "message.closeable", ["loc", [null, [34, 16], [34, 33]]]]], [], []]], ["loc", [null, [29, 4], [35, 6]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/colsconfig-dialog-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 12
              },
              "end": {
                "line": 29,
                "column": 115
              }
            },
            "moduleName": "dummy/templates/components/colsconfig-dialog-content.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "input", [], ["class", ["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [29, 70], [29, 82]]]], "disabled"], [], ["loc", [null, [29, 66], [29, 94]]]], "value", ["subexpr", "@mut", [["get", "colDesc.name", ["loc", [null, [29, 101], [29, 113]]]]], [], []]], ["loc", [null, [29, 52], [29, 115]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 115
              },
              "end": {
                "line": 29,
                "column": 139
              }
            },
            "moduleName": "dummy/templates/components/colsconfig-dialog-content.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "colDesc.name", ["loc", [null, [29, 123], [29, 139]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 12
              },
              "end": {
                "line": 40,
                "column": 12
              }
            },
            "moduleName": "dummy/templates/components/colsconfig-dialog-content.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "dropdown icon");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "default text");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "menu");
            var el2 = dom.createTextNode("\n                  ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "item");
            dom.setAttribute(el2, "data-value", "0");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                  ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "item");
            dom.setAttribute(el2, "data-value", "1");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                  ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "item");
            dom.setAttribute(el2, "data-value", "-1");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [5]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
            morphs[3] = dom.createMorphAt(dom.childAt(element1, [5]), 0, 0);
            return morphs;
          },
          statements: [["inline", "t", ["components.colsconfig-dialog-content.sort-direction-none"], [], ["loc", [null, [34, 40], [34, 104]]]], ["inline", "t", ["components.colsconfig-dialog-content.sort-direction-none"], [], ["loc", [null, [36, 51], [36, 115]]]], ["inline", "t", ["components.colsconfig-dialog-content.sort-direction-asc"], [], ["loc", [null, [37, 51], [37, 114]]]], ["inline", "t", ["components.colsconfig-dialog-content.sort-direction-desc"], [], ["loc", [null, [38, 52], [38, 116]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 6
            },
            "end": {
              "line": 60,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components/colsconfig-dialog-content.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "colsConfigHidden", "false");
          dom.setAttribute(el3, "style", "cursor:pointer");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "type", "button");
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "chevron up icon");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "type", "button");
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "chevron down icon");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "class", "sort-direction-cell");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [1, 1]);
          var element4 = dom.childAt(element2, [3]);
          var element5 = dom.childAt(element4, [1]);
          var element6 = dom.childAt(element4, [3]);
          var element7 = dom.childAt(element2, [5]);
          var element8 = dom.childAt(element2, [8]);
          var element9 = dom.childAt(element8, [1]);
          var element10 = dom.childAt(element2, [10]);
          var element11 = dom.childAt(element10, [1]);
          var morphs = new Array(16);
          morphs[0] = dom.createAttrMorph(element2, 'propName');
          morphs[1] = dom.createAttrMorph(element3, 'class');
          morphs[2] = dom.createElementMorph(element3);
          morphs[3] = dom.createAttrMorph(element5, 'class');
          morphs[4] = dom.createElementMorph(element5);
          morphs[5] = dom.createAttrMorph(element6, 'class');
          morphs[6] = dom.createElementMorph(element6);
          morphs[7] = dom.createAttrMorph(element7, 'class');
          morphs[8] = dom.createMorphAt(element7, 1, 1);
          morphs[9] = dom.createMorphAt(dom.childAt(element2, [7]), 1, 1);
          morphs[10] = dom.createAttrMorph(element8, 'class');
          morphs[11] = dom.createAttrMorph(element9, 'class');
          morphs[12] = dom.createMorphAt(element9, 1, 1);
          morphs[13] = dom.createAttrMorph(element10, 'class');
          morphs[14] = dom.createAttrMorph(element11, 'class');
          morphs[15] = dom.createMorphAt(element11, 1, 1);
          return morphs;
        },
        statements: [["attribute", "propName", ["concat", [["get", "colDesc.propName", ["loc", [null, [16, 24], [16, 40]]]]]]], ["attribute", "class", ["concat", ["large ", ["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [18, 33], [18, 45]]]], "hide", "unhide"], [], ["loc", [null, [18, 28], [18, 63]]]], " icon"]]], ["element", "action", ["invertVisibility", ["get", "n", ["loc", [null, [18, 121], [18, 122]]]]], [], ["loc", [null, [18, 93], [18, 124]]]], ["attribute", "class", ["concat", ["ui icon tiny button", ["subexpr", "if", [["subexpr", "eq", [["get", "n", ["loc", [null, [21, 90], [21, 91]]]], 0], [], ["loc", [null, [21, 86], [21, 94]]]], " disabled"], [], ["loc", [null, [21, 81], [21, 108]]]]]]], ["element", "action", ["rowUp", ["get", "n", ["loc", [null, [21, 37], [21, 38]]]]], [], ["loc", [null, [21, 20], [21, 40]]]], ["attribute", "class", ["concat", ["ui icon tiny button row-down-button no-margin", ["subexpr", "if", [["subexpr", "eq", [["get", "colDesc", ["loc", [null, [24, 118], [24, 125]]]], ["get", "model.colDescs.lastObject", ["loc", [null, [24, 126], [24, 151]]]]], [], ["loc", [null, [24, 114], [24, 152]]]], " disabled"], [], ["loc", [null, [24, 109], [24, 166]]]]]]], ["element", "action", ["rowDown", ["get", "n", ["loc", [null, [24, 39], [24, 40]]]]], [], ["loc", [null, [24, 20], [24, 42]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [28, 26], [28, 38]]]], "disabled"], [], ["loc", [null, [28, 21], [28, 51]]]]]]], ["block", "if", [["get", "model.exportParams.isExportExcel", ["loc", [null, [29, 18], [29, 50]]]]], [], 0, 1, ["loc", [null, [29, 12], [29, 146]]]], ["block", "ui-dropdown", [], ["class", ["subexpr", "concat", ["ui compact selection dropdown sort-direction-dropdown", ["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [32, 101], [32, 113]]]], " disabled"], [], ["loc", [null, [32, 97], [32, 126]]]], ["subexpr", "if", [["get", "colDesc.isHasMany", ["loc", [null, [32, 131], [32, 148]]]], " hidden"], [], ["loc", [null, [32, 127], [32, 159]]]]], [], ["loc", [null, [32, 33], [32, 160]]]], "onChange", ["subexpr", "action", ["setSortOrder", ["get", "colDesc", ["loc", [null, [32, 193], [32, 200]]]]], [], ["loc", [null, [32, 170], [32, 201]]]]], 2, null, ["loc", [null, [32, 12], [40, 28]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [41, 31], [41, 43]]]], "disabled"], [], ["loc", [null, [41, 26], [41, 56]]]]]]], ["attribute", "class", ["concat", ["ui input ", ["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [42, 38], [42, 50]]]], "disabled"], [], ["loc", [null, [42, 33], [42, 63]]]]]]], ["inline", "input", [], ["size", "2", "class", ["subexpr", "concat", ["sort-priority-input", ["subexpr", "unless", [["get", "colDesc.sortOrder", ["loc", [null, [45, 60], [45, 77]]]], " hidden"], [], ["loc", [null, [45, 52], [45, 88]]]]], [], ["loc", [null, [45, 22], [45, 89]]]], "value", ["subexpr", "@mut", [["get", "colDesc.sortPriority", ["loc", [null, [46, 22], [46, 42]]]]], [], []]], ["loc", [null, [43, 14], [47, 16]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [50, 26], [50, 38]]]], "disabled"], [], ["loc", [null, [50, 21], [50, 51]]]]]]], ["attribute", "class", ["concat", ["ui input ", ["subexpr", "if", [["subexpr", "or", [["get", "colDesc.hide", ["loc", [null, [51, 42], [51, 54]]]], ["subexpr", "or", [["get", "model.exportParams.isExportExcel", ["loc", [null, [51, 59], [51, 91]]]], ["subexpr", "or", [["get", "colDesc.fixed", ["loc", [null, [51, 96], [51, 109]]]], ["subexpr", "not", [["get", "model.saveColWidthState", ["loc", [null, [51, 115], [51, 138]]]]], [], ["loc", [null, [51, 110], [51, 139]]]]], [], ["loc", [null, [51, 92], [51, 140]]]]], [], ["loc", [null, [51, 55], [51, 141]]]]], [], ["loc", [null, [51, 38], [51, 142]]]], "disabled"], [], ["loc", [null, [51, 33], [51, 155]]]]]]], ["inline", "input", [], ["size", "2", "class", "column-width-input", "value", ["subexpr", "@mut", [["get", "colDesc.columnWidth", ["loc", [null, [55, 22], [55, 41]]]]], [], []]], ["loc", [null, [52, 14], [56, 16]]]]],
        locals: ["colDesc", "n"],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 63,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 8
            }
          },
          "moduleName": "dummy/templates/components/colsconfig-dialog-content.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("th");
          dom.setAttribute(el2, "colspan", "6");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["inline", "flexberry-checkbox", [], ["label", ["subexpr", "t", ["components.colsconfig-dialog-content.det-separate-cols"], [], ["loc", [null, [67, 20], [67, 80]]]], "value", ["subexpr", "@mut", [["get", "model.exportParams.detSeparateCols", ["loc", [null, [68, 20], [68, 54]]]]], [], []]], ["loc", [null, [66, 12], [69, 14]]]], ["inline", "flexberry-checkbox", [], ["label", ["subexpr", "t", ["components.colsconfig-dialog-content.det-separate-rows"], [], ["loc", [null, [71, 20], [71, 80]]]], "value", ["subexpr", "@mut", [["get", "model.exportParams.detSeparateRows", ["loc", [null, [72, 20], [72, 54]]]]], [], []]], ["loc", [null, [70, 12], [73, 14]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 128,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/colsconfig-dialog-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "flexberry-colsconfig content");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3, "class", "ui unstackable fixed selectable celled table");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("thead");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tr");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        dom.setAttribute(el6, "class", "show-columns");
        dom.setAttribute(el6, "style", "cursor:default");
        var el7 = dom.createElement("i");
        dom.setAttribute(el7, "class", "large hide icon");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        dom.setAttribute(el6, "class", "columns-order");
        dom.setAttribute(el6, "style", "cursor:default");
        var el7 = dom.createElement("i");
        dom.setAttribute(el7, "class", "large sort icon");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        dom.setAttribute(el6, "style", "cursor:default");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        dom.setAttribute(el6, "class", "sort-direction");
        dom.setAttribute(el6, "style", "cursor:default");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        dom.setAttribute(el6, "class", "sort-priority");
        dom.setAttribute(el6, "style", "cursor:default");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        dom.setAttribute(el6, "class", "column-width");
        dom.setAttribute(el6, "style", "cursor:default");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tfoot");
        dom.setAttribute(el4, "class", "full-width");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tr");
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        dom.setAttribute(el6, "colspan", "5");
        dom.setAttribute(el6, "style", "text-align:right");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tr");
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        dom.setAttribute(el6, "colspan", "5");
        dom.setAttribute(el6, "style", "text-align:right");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "ui input");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tr");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        dom.setAttribute(el6, "colspan", "4");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "ui action input");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n              ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        dom.setAttribute(el6, "colspan", "2");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("button");
        dom.setAttribute(el7, "type", "button");
        dom.setAttribute(el7, "class", "ui right floated button cols-config-apply");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3, "class", "hidden download-anchor");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element12 = dom.childAt(fragment, [0]);
        var element13 = dom.childAt(element12, [1]);
        var element14 = dom.childAt(element13, [1]);
        var element15 = dom.childAt(element14, [1, 1]);
        var element16 = dom.childAt(element15, [1]);
        var element17 = dom.childAt(element15, [3, 0]);
        var element18 = dom.childAt(element15, [5]);
        var element19 = dom.childAt(element15, [7]);
        var element20 = dom.childAt(element15, [9]);
        var element21 = dom.childAt(element15, [11]);
        var element22 = dom.childAt(element14, [5]);
        var element23 = dom.childAt(element22, [3]);
        var element24 = dom.childAt(element22, [5]);
        var element25 = dom.childAt(element22, [7]);
        var element26 = dom.childAt(element25, [1, 1]);
        var element27 = dom.childAt(element26, [3]);
        var element28 = dom.childAt(element25, [3, 1]);
        var morphs = new Array(26);
        morphs[0] = dom.createAttrMorph(element12, 'class');
        morphs[1] = dom.createAttrMorph(element16, 'title');
        morphs[2] = dom.createAttrMorph(element17, 'title');
        morphs[3] = dom.createAttrMorph(element18, 'title');
        morphs[4] = dom.createMorphAt(element18, 0, 0);
        morphs[5] = dom.createAttrMorph(element19, 'title');
        morphs[6] = dom.createMorphAt(element19, 0, 0);
        morphs[7] = dom.createAttrMorph(element20, 'title');
        morphs[8] = dom.createMorphAt(element20, 0, 0);
        morphs[9] = dom.createAttrMorph(element21, 'title');
        morphs[10] = dom.createMorphAt(element21, 0, 0);
        morphs[11] = dom.createMorphAt(dom.childAt(element14, [3]), 1, 1);
        morphs[12] = dom.createMorphAt(element22, 1, 1);
        morphs[13] = dom.createAttrMorph(element23, 'class');
        morphs[14] = dom.createMorphAt(dom.childAt(element23, [1]), 0, 0);
        morphs[15] = dom.createMorphAt(dom.childAt(element23, [3]), 1, 1);
        morphs[16] = dom.createAttrMorph(element24, 'class');
        morphs[17] = dom.createMorphAt(dom.childAt(element24, [1]), 0, 0);
        morphs[18] = dom.createMorphAt(dom.childAt(element24, [3, 1]), 1, 1);
        morphs[19] = dom.createMorphAt(element26, 1, 1);
        morphs[20] = dom.createAttrMorph(element27, 'class');
        morphs[21] = dom.createElementMorph(element27);
        morphs[22] = dom.createMorphAt(element27, 1, 1);
        morphs[23] = dom.createElementMorph(element28);
        morphs[24] = dom.createMorphAt(element28, 0, 0);
        morphs[25] = dom.createMorphAt(element13, 3, 3);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["ui form ", ["get", "appState.state", ["loc", [null, [1, 22], [1, 36]]]]]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.dont-show-columns"], [], ["loc", [null, [6, 42], [6, 104]]]]]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.columns-order"], [], ["loc", [null, [7, 93], [7, 151]]]]]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.column-name"], [], ["loc", [null, [8, 21], [8, 77]]]]]]], ["inline", "t", ["components.colsconfig-dialog-content.column-name"], [], ["loc", [null, [8, 102], [8, 158]]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.sort-direction"], [], ["loc", [null, [9, 44], [9, 103]]]]]]], ["inline", "t", ["components.colsconfig-dialog-content.sort-direction-caption"], [], ["loc", [null, [9, 128], [9, 195]]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.sort-priority"], [], ["loc", [null, [10, 43], [10, 101]]]]]]], ["inline", "t", ["components.colsconfig-dialog-content.sort-priority-caption"], [], ["loc", [null, [10, 126], [10, 192]]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.column-width"], [], ["loc", [null, [11, 42], [11, 99]]]]]]], ["inline", "t", ["components.colsconfig-dialog-content.column-width-caption"], [], ["loc", [null, [11, 124], [11, 189]]]], ["block", "each", [["get", "model.colDescs", ["loc", [null, [15, 14], [15, 28]]]]], [], 0, null, ["loc", [null, [15, 6], [60, 15]]]], ["block", "if", [["get", "model.exportParams.isExportExcel", ["loc", [null, [63, 14], [63, 46]]]]], [], 1, null, ["loc", [null, [63, 8], [76, 15]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "model.exportParams.isExportExcel", ["loc", [null, [77, 24], [77, 56]]]], "hidden"], [], ["loc", [null, [77, 19], [77, 67]]]]]]], ["inline", "t", ["components.colsconfig-dialog-content.col-width-on"], [], ["loc", [null, [78, 49], [78, 106]]]], ["inline", "flexberry-checkbox", [], ["class", "toggle", "value", ["subexpr", "@mut", [["get", "model.saveColWidthState", ["loc", [null, [82, 20], [82, 43]]]]], [], []]], ["loc", [null, [80, 12], [83, 14]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "model.exportParams.isExportExcel", ["loc", [null, [86, 24], [86, 56]]]], "hidden"], [], ["loc", [null, [86, 19], [86, 67]]]]]]], ["inline", "t", ["components.colsconfig-dialog-content.per-page"], [], ["loc", [null, [87, 49], [87, 102]]]], ["inline", "input", [], ["size", "2", "class", "per-page-input", "value", ["subexpr", "@mut", [["get", "model.perPageValue", ["loc", [null, [93, 22], [93, 40]]]]], [], []]], ["loc", [null, [90, 14], [94, 16]]]], ["inline", "input", [], ["type", "input", "class", "setting-name-input", "value", ["subexpr", "@mut", [["get", "model.settingName", ["loc", [null, [104, 22], [104, 39]]]]], [], []], "placeholder", ["subexpr", "t", ["components.colsconfig-dialog-content.enter-setting-name"], [], ["loc", [null, [105, 28], [105, 89]]]]], ["loc", [null, [101, 14], [106, 16]]]], ["attribute", "class", ["concat", ["ui small button cols-config-save", ["subexpr", "if", [["subexpr", "is-blank", [["get", "model.settingName", ["loc", [null, [107, 73], [107, 90]]]]], [], ["loc", [null, [107, 63], [107, 91]]]], " disabled"], [], ["loc", [null, [107, 58], [107, 105]]]]]]], ["element", "action", ["saveColsSetting"], [], ["loc", [null, [107, 107], [107, 135]]]], ["inline", "t", ["components.colsconfig-dialog-content.save"], [], ["loc", [null, [108, 16], [108, 65]]]], ["element", "action", ["apply"], [], ["loc", [null, [113, 84], [113, 102]]]], ["inline", "if", [["get", "model.exportParams.isExportExcel", ["loc", [null, [113, 108], [113, 140]]]], ["subexpr", "t", ["components.colsconfig-dialog-content.export"], [], ["loc", [null, [113, 141], [113, 190]]]], ["subexpr", "t", ["components.colsconfig-dialog-content.use"], [], ["loc", [null, [113, 191], [113, 237]]]]], [], ["loc", [null, [113, 103], [113, 239]]]], ["inline", "ui-message", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [119, 11], [119, 15]]]]], [], []], "closeable", ["subexpr", "@mut", [["get", "closeable", ["loc", [null, [120, 16], [120, 25]]]]], [], []], "visible", ["subexpr", "@mut", [["get", "visible", ["loc", [null, [121, 14], [121, 21]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "caption", ["loc", [null, [122, 14], [122, 21]]]]], [], []], "message", ["subexpr", "@mut", [["get", "message", ["loc", [null, [123, 14], [123, 21]]]]], [], []]], ["loc", [null, [118, 4], [124, 6]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/components/css-picker", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/css-picker.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "checkbox", "name", ["subexpr", "@mut", [["get", "item.name", ["loc", [null, [3, 33], [3, 42]]]]], [], []], "checked", ["subexpr", "@mut", [["get", "item.checked", ["loc", [null, [3, 51], [3, 63]]]]], [], []], "change", ["subexpr", "action", ["onChange"], ["preventDefault", false], ["loc", [null, [3, 71], [3, 111]]]]], ["loc", [null, [3, 4], [3, 113]]]], ["content", "item.name", ["loc", [null, [4, 11], [4, 24]]]]],
        locals: ["item"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/css-picker.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "_items", ["loc", [null, [1, 8], [1, 14]]]]], [], 0, null, ["loc", [null, [1, 0], [6, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/filters-dialog-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 10
              },
              "end": {
                "line": 21,
                "column": 10
              }
            },
            "moduleName": "dummy/templates/components/filters-dialog-content.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "flexberry-dropdown", [], ["value", ["subexpr", "@mut", [["get", "column.filter.condition", ["loc", [null, [13, 20], [13, 43]]]]], [], []], "items", ["subexpr", "@mut", [["get", "column.filter.conditions", ["loc", [null, [14, 20], [14, 44]]]]], [], []], "displayCaptions", ["subexpr", "not", [["subexpr", "is-array", [["get", "column.filter.conditions", ["loc", [null, [15, 45], [15, 69]]]]], [], ["loc", [null, [15, 35], [15, 70]]]]], [], ["loc", [null, [15, 30], [15, 71]]]], "class", "compact fluid", "placeholder", ["subexpr", "t", ["components.object-list-view.filter-condition"], [], ["loc", [null, [17, 26], [17, 76]]]], "needChecksOnValue", false, "onChange", ["subexpr", "action", ["filterConditionChanged", ["get", "column.filter", ["loc", [null, [19, 56], [19, 69]]]]], [], ["loc", [null, [19, 23], [19, 70]]]]], ["loc", [null, [12, 12], [20, 14]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 24,
                "column": 10
              },
              "end": {
                "line": 33,
                "column": 10
              }
            },
            "moduleName": "dummy/templates/components/filters-dialog-content.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "component", [["get", "column.filter.component.name", ["loc", [null, [25, 24], [25, 52]]]]], ["value", ["subexpr", "@mut", [["get", "column.filter.pattern", ["loc", [null, [26, 20], [26, 41]]]]], [], []], "readonly", ["subexpr", "or", [["subexpr", "eq", [["get", "column.filter.condition", ["loc", [null, [28, 20], [28, 43]]]], "empty"], [], ["loc", [null, [28, 16], [28, 52]]]], ["subexpr", "eq", [["get", "column.filter.condition", ["loc", [null, [29, 20], [29, 43]]]], "nempty"], [], ["loc", [null, [29, 16], [29, 53]]]]], [], ["loc", [null, [27, 23], [30, 15]]]], "dynamicProperties", ["subexpr", "@mut", [["get", "column.filter.component.properties", ["loc", [null, [31, 32], [31, 66]]]]], [], []]], ["loc", [null, [25, 12], [32, 14]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 35,
                "column": 8
              },
              "end": {
                "line": 43,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components/filters-dialog-content.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "class", "ui basic icon button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "trash icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'title');
            morphs[1] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["attribute", "title", ["subexpr", "t", ["components.filters-dialog-content.clear-this-filter"], [], ["loc", [null, [39, 18], [39, 77]]]]], ["element", "action", ["clearFilterField", ["get", "column.filter", ["loc", [null, [40, 40], [40, 53]]]]], [], ["loc", [null, [40, 12], [40, 55]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 45,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components/filters-dialog-content.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "fields object-list-view-filters");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "field");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "field");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "field");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
          morphs[2] = dom.createMorphAt(dom.childAt(element1, [5]), 1, 1);
          morphs[3] = dom.createMorphAt(element1, 7, 7);
          return morphs;
        },
        statements: [["inline", "flexberry-textbox", [], ["value", ["subexpr", "@mut", [["get", "column.header", ["loc", [null, [7, 18], [7, 31]]]]], [], []], "readonly", true], ["loc", [null, [6, 10], [9, 12]]]], ["block", "if", [["get", "column.filter.conditions", ["loc", [null, [11, 16], [11, 40]]]]], [], 0, null, ["loc", [null, [11, 10], [21, 17]]]], ["block", "if", [["get", "column.filter.component.name", ["loc", [null, [24, 16], [24, 44]]]]], [], 1, null, ["loc", [null, [24, 10], [33, 17]]]], ["block", "if", [["get", "column.filter.component.name", ["loc", [null, [35, 14], [35, 42]]]]], [], 2, null, ["loc", [null, [35, 8], [43, 15]]]]],
        locals: ["column"],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 52,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/filters-dialog-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ui equal width form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "flexberry-colsconfig content");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "field");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "button");
        dom.setAttribute(el4, "class", "ui right floated primary button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "button");
        dom.setAttribute(el4, "class", "ui right floated basic button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 1]);
        var element3 = dom.childAt(element2, [3]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element3, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(element2, 1, 1);
        morphs[1] = dom.createElementMorph(element4);
        morphs[2] = dom.createMorphAt(element4, 0, 0);
        morphs[3] = dom.createElementMorph(element5);
        morphs[4] = dom.createMorphAt(element5, 0, 0);
        return morphs;
      },
      statements: [["block", "each", [["get", "filterColumns", ["loc", [null, [3, 12], [3, 25]]]]], [], 0, null, ["loc", [null, [3, 4], [45, 13]]]], ["element", "action", ["applyFilters"], [], ["loc", [null, [47, 68], [47, 93]]]], ["inline", "t", ["components.filters-dialog-content.apply"], [], ["loc", [null, [47, 94], [47, 141]]]], ["element", "action", ["clearFiltersFields"], [], ["loc", [null, [48, 66], [48, 97]]]], ["inline", "t", ["components.filters-dialog-content.clear"], [], ["loc", [null, [48, 98], [48, 145]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/flexberry-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-button.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "iconClass", ["loc", [null, [2, 14], [2, 23]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-button.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "caption", ["loc", [null, [5, 2], [5, 13]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-button.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "_hasIcon", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["block", "if", [["get", "_hasCaption", ["loc", [null, [4, 6], [4, 17]]]]], [], 1, null, ["loc", [null, [4, 0], [6, 7]]]], ["content", "yield", ["loc", [null, [7, 0], [7, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/components/flexberry-checkbox", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-checkbox.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("input");
        dom.setAttribute(el1, "type", "checkbox");
        dom.setAttribute(el1, "class", "flexberry-checkbox-input");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("label");
        dom.setAttribute(el1, "class", "flexberry-checkbox-label");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        return morphs;
      },
      statements: [["content", "label", ["loc", [null, [2, 40], [2, 49]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-colorpicker", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-colorpicker.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "input", [], ["class", ["subexpr", "@mut", [["get", "flexberryClassNames.input", ["loc", [null, [7, 8], [7, 33]]]]], [], []], "type", "hidden", "value", ["subexpr", "get", [["get", "this", ["loc", [null, [9, 13], [9, 17]]]], "value"], [], ["loc", [null, [9, 8], [9, 26]]]]], ["loc", [null, [6, 0], [10, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-datepicker", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-datepicker.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("i");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [2, 7], [2, 11]]]]], [], []], "class", ["subexpr", "@mut", [["get", "classes", ["loc", [null, [3, 8], [3, 15]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonlyAttr", ["loc", [null, [4, 11], [4, 23]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [6, 14], [6, 25]]]]], [], []]], ["loc", [null, [1, 0], [7, 2]]]], ["attribute", "class", ["concat", ["calendar ", ["subexpr", "unless", [["get", "readonly", ["loc", [null, [8, 28], [8, 36]]]], "link"], [], ["loc", [null, [8, 19], [8, 45]]]], " icon"]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-ddau-checkbox", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-ddau-checkbox.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("label");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "input", [], ["class", ["subexpr", "@mut", [["get", "flexberryClassNames.checkboxInput", ["loc", [null, [7, 8], [7, 41]]]]], [], []], "type", "checkbox", "checked", ["subexpr", "get", [["get", "this", ["loc", [null, [9, 15], [9, 19]]]], "value"], [], ["loc", [null, [9, 10], [9, 28]]]]], ["loc", [null, [6, 0], [10, 2]]]], ["attribute", "class", ["get", "flexberryClassNames.checkboxCaption", ["loc", [null, [11, 15], [11, 50]]]]], ["content", "caption", ["loc", [null, [12, 2], [12, 13]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-ddau-slider", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-ddau-slider.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ui-slider", [], ["value", ["subexpr", "get", [["get", "this", ["loc", [null, [7, 13], [7, 17]]]], "value"], [], ["loc", [null, [7, 8], [7, 26]]]], "defaultValue", ["subexpr", "@mut", [["get", "defaultValue", ["loc", [null, [8, 15], [8, 27]]]]], [], []], "min", ["subexpr", "@mut", [["get", "min", ["loc", [null, [9, 6], [9, 9]]]]], [], []], "max", ["subexpr", "@mut", [["get", "max", ["loc", [null, [10, 6], [10, 9]]]]], [], []], "step", ["subexpr", "@mut", [["get", "step", ["loc", [null, [11, 7], [11, 11]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [12, 11], [12, 19]]]]], [], []], "immediateResponse", false, "tooltip", "hide"], ["loc", [null, [6, 0], [15, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("i");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [2]);
        var element2 = dom.childAt(fragment, [4]);
        var element3 = dom.childAt(fragment, [6]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createAttrMorph(element1, 'class');
        morphs[2] = dom.createMorphAt(element1, 1, 1);
        morphs[3] = dom.createAttrMorph(element2, 'class');
        morphs[4] = dom.createMorphAt(element2, 1, 1);
        morphs[5] = dom.createMorphAt(element2, 3, 3);
        morphs[6] = dom.createAttrMorph(element3, 'class');
        morphs[7] = dom.createMorphAt(element3, 1, 1);
        morphs[8] = dom.createMorphAt(element3, 3, 3);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", [["get", "flexberryClassNames.closeButton", ["loc", [null, [1, 12], [1, 43]]]], " close icon"]]], ["attribute", "class", ["concat", [["get", "flexberryClassNames.header", ["loc", [null, [2, 14], [2, 40]]]], " header"]]], ["content", "caption", ["loc", [null, [3, 2], [3, 13]]]], ["attribute", "class", ["concat", [["get", "flexberryClassNames.content", ["loc", [null, [5, 14], [5, 41]]]], " content ", ["get", "contentClass", ["loc", [null, [5, 54], [5, 66]]]]]]], ["content", "content", ["loc", [null, [6, 2], [6, 13]]]], ["content", "yield", ["loc", [null, [7, 2], [7, 11]]]], ["attribute", "class", ["concat", [["get", "flexberryClassNames.toolbar", ["loc", [null, [9, 14], [9, 41]]]], " actions"]]], ["inline", "flexberry-button", [], ["class", ["subexpr", "concat", [["get", "flexberryClassNames.approveButton", ["loc", [null, [11, 18], [11, 51]]]], " approve positive"], [], ["loc", [null, [11, 10], [11, 72]]]], "caption", ["subexpr", "@mut", [["get", "approveButtonCaption", ["loc", [null, [12, 12], [12, 32]]]]], [], []]], ["loc", [null, [10, 2], [13, 4]]]], ["inline", "flexberry-button", [], ["class", ["subexpr", "concat", [["get", "flexberryClassNames.cancelButton", ["loc", [null, [15, 18], [15, 50]]]], " deny negative"], [], ["loc", [null, [15, 10], [15, 68]]]], "caption", ["subexpr", "@mut", [["get", "denyButtonCaption", ["loc", [null, [16, 12], [16, 29]]]]], [], []]], ["loc", [null, [14, 2], [17, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-dropdown", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 2
              },
              "end": {
                "line": 29,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("input");
            dom.setAttribute(el1, "class", "search");
            dom.setAttribute(el1, "autocomplete", "off");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 2
              },
              "end": {
                "line": 33,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("input");
            dom.setAttribute(el1, "class", "search");
            dom.setAttribute(el1, "autocomplete", "off");
            dom.setAttribute(el1, "readonly", "");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 2
              },
              "end": {
                "line": 38,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "default text");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "placeholder", ["loc", [null, [37, 30], [37, 45]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 38,
                "column": 2
              },
              "end": {
                "line": 40,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "text");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "text", ["loc", [null, [39, 22], [39, 30]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 44,
                  "column": 6
                },
                "end": {
                  "line": 46,
                  "column": 6
                }
              },
              "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "item");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element0, 'data-value');
              morphs[1] = dom.createMorphAt(element0, 0, 0);
              return morphs;
            },
            statements: [["attribute", "data-value", ["concat", [["subexpr", "if", [["get", "displayCaptions", ["loc", [null, [45, 43], [45, 58]]]], ["get", "key", ["loc", [null, [45, 59], [45, 62]]]], ["get", "value", ["loc", [null, [45, 63], [45, 68]]]]], [], ["loc", [null, [45, 38], [45, 70]]]]]]], ["content", "value", ["loc", [null, [45, 72], [45, 81]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 46,
                  "column": 6
                },
                "end": {
                  "line": 48,
                  "column": 6
                }
              },
              "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "item");
              dom.setAttribute(el1, "data-value", "_");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "value", ["loc", [null, [47, 41], [47, 50]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 43,
                "column": 4
              },
              "end": {
                "line": 49,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
          },
          isEmpty: false,
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "value", ["loc", [null, [44, 12], [44, 17]]]]], [], 0, 1, ["loc", [null, [44, 6], [48, 13]]]]],
          locals: ["key", "value"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 51,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "dropdown icon");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "menu");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [8]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 6, 6, contextualElement);
          morphs[3] = dom.createMorphAt(element1, 1, 1);
          morphs[4] = dom.createMorphAt(element1, 3, 3);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "and", [["get", "isSearch", ["loc", [null, [27, 13], [27, 21]]]], ["get", "isSearchReadOnly", ["loc", [null, [27, 22], [27, 38]]]]], [], ["loc", [null, [27, 8], [27, 39]]]]], [], 0, null, ["loc", [null, [27, 2], [29, 9]]]], ["block", "if", [["subexpr", "and", [["get", "isSearch", ["loc", [null, [31, 13], [31, 21]]]], ["subexpr", "not", [["get", "isSearchReadOnly", ["loc", [null, [31, 27], [31, 43]]]]], [], ["loc", [null, [31, 22], [31, 44]]]]], [], ["loc", [null, [31, 8], [31, 45]]]]], [], 1, null, ["loc", [null, [31, 2], [33, 9]]]], ["block", "if", [["get", "showPlaceholder", ["loc", [null, [36, 8], [36, 23]]]]], [], 2, 3, ["loc", [null, [36, 2], [40, 9]]]], ["content", "yield", ["loc", [null, [42, 4], [42, 13]]]], ["block", "each-in", [["get", "_items", ["loc", [null, [43, 15], [43, 21]]]]], [], 4, null, ["loc", [null, [43, 4], [49, 16]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 52,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ui-dropdown", [], ["class", ["subexpr", "concat", ["flexberry-dropdown ", ["get", "class", ["loc", [null, [2, 38], [2, 43]]]], " selection", ["subexpr", "if", [["get", "readonly", ["loc", [null, [2, 61], [2, 69]]]], " disabled", ""], [], ["loc", [null, [2, 57], [2, 85]]]]], [], ["loc", [null, [2, 8], [2, 86]]]], "onChange", ["subexpr", "action", ["onChange"], [], ["loc", [null, [3, 11], [3, 30]]]], "onHide", ["subexpr", "action", ["onShowHide"], [], ["loc", [null, [4, 9], [4, 30]]]], "onShow", ["subexpr", "action", ["onShowHide"], [], ["loc", [null, [5, 9], [5, 30]]]], "on", ["subexpr", "@mut", [["get", "on", ["loc", [null, [6, 5], [6, 7]]]]], [], []], "allowReselection", ["subexpr", "@mut", [["get", "allowReselection", ["loc", [null, [7, 19], [7, 35]]]]], [], []], "allowAdditions", ["subexpr", "@mut", [["get", "allowAdditions", ["loc", [null, [8, 17], [8, 31]]]]], [], []], "hideAdditions", ["subexpr", "@mut", [["get", "hideAdditions", ["loc", [null, [9, 16], [9, 29]]]]], [], []], "minCharacters", ["subexpr", "@mut", [["get", "minCharacters", ["loc", [null, [10, 16], [10, 29]]]]], [], []], "match", ["subexpr", "@mut", [["get", "match", ["loc", [null, [11, 8], [11, 13]]]]], [], []], "selectOnKeydown", ["subexpr", "@mut", [["get", "selectOnKeydown", ["loc", [null, [12, 18], [12, 33]]]]], [], []], "forceSelection", ["subexpr", "@mut", [["get", "forceSelection", ["loc", [null, [13, 17], [13, 31]]]]], [], []], "allowCategorySelection", ["subexpr", "@mut", [["get", "allowCategorySelection", ["loc", [null, [14, 25], [14, 47]]]]], [], []], "direction", ["subexpr", "@mut", [["get", "direction", ["loc", [null, [15, 12], [15, 21]]]]], [], []], "keepOnScreen", ["subexpr", "@mut", [["get", "keepOnScreen", ["loc", [null, [16, 15], [16, 27]]]]], [], []], "context", ["subexpr", "@mut", [["get", "context", ["loc", [null, [17, 10], [17, 17]]]]], [], []], "fullTextSearch", ["subexpr", "@mut", [["get", "fullTextSearch", ["loc", [null, [18, 17], [18, 31]]]]], [], []], "preserveHTML", ["subexpr", "@mut", [["get", "preserveHTML", ["loc", [null, [19, 15], [19, 27]]]]], [], []], "sortSelect", ["subexpr", "@mut", [["get", "sortSelect", ["loc", [null, [20, 13], [20, 23]]]]], [], []], "showOnFocus", ["subexpr", "@mut", [["get", "showOnFocus", ["loc", [null, [21, 14], [21, 25]]]]], [], []], "allowTab", ["subexpr", "@mut", [["get", "allowTab", ["loc", [null, [22, 11], [22, 19]]]]], [], []], "transition", ["subexpr", "@mut", [["get", "transition", ["loc", [null, [23, 13], [23, 23]]]]], [], []], "duration", ["subexpr", "@mut", [["get", "duration", ["loc", [null, [24, 11], [24, 19]]]]], [], []], "action", ["subexpr", "@mut", [["get", "action", ["loc", [null, [25, 9], [25, 15]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [51, 16]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/flexberry-error", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.4.6",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 13,
                        "column": 14
                      },
                      "end": {
                        "line": 15,
                        "column": 14
                      }
                    },
                    "moduleName": "dummy/templates/components/flexberry-error.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "item");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "err.reason.message", ["loc", [null, [14, 34], [14, 56]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 12,
                      "column": 12
                    },
                    "end": {
                      "line": 16,
                      "column": 12
                    }
                  },
                  "moduleName": "dummy/templates/components/flexberry-error.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["subexpr", "eq", [["get", "err.state", ["loc", [null, [13, 24], [13, 33]]]], "rejected"], [], ["loc", [null, [13, 20], [13, 45]]]]], [], 0, null, ["loc", [null, [13, 14], [15, 21]]]]],
                locals: ["err"],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 10,
                    "column": 8
                  },
                  "end": {
                    "line": 18,
                    "column": 8
                  }
                },
                "moduleName": "dummy/templates/components/flexberry-error.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "ui bulleted list");
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                return morphs;
              },
              statements: [["block", "each", [["get", "error", ["loc", [null, [12, 20], [12, 25]]]]], [], 0, null, ["loc", [null, [12, 12], [16, 21]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 18,
                      "column": 8
                    },
                    "end": {
                      "line": 20,
                      "column": 8
                    }
                  },
                  "moduleName": "dummy/templates/components/flexberry-error.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "t", [["get", "error.messageLocaleKey", ["loc", [null, [19, 14], [19, 36]]]]], [], ["loc", [null, [19, 10], [19, 38]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.4.6",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 20,
                        "column": 8
                      },
                      "end": {
                        "line": 22,
                        "column": 8
                      }
                    },
                    "moduleName": "dummy/templates/components/flexberry-error.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("          ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["content", "error.message", ["loc", [null, [21, 10], [21, 27]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.4.6",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 22,
                        "column": 8
                      },
                      "end": {
                        "line": 24,
                        "column": 8
                      }
                    },
                    "moduleName": "dummy/templates/components/flexberry-error.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("          ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n        ");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "t", ["components.flexberry-error.unknown-error"], [], ["loc", [null, [23, 10], [23, 58]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 20,
                      "column": 8
                    },
                    "end": {
                      "line": 24,
                      "column": 8
                    }
                  },
                  "moduleName": "dummy/templates/components/flexberry-error.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["get", "error.message", ["loc", [null, [20, 18], [20, 31]]]]], [], 0, 1, ["loc", [null, [20, 8], [24, 8]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 18,
                    "column": 8
                  },
                  "end": {
                    "line": 24,
                    "column": 8
                  }
                },
                "moduleName": "dummy/templates/components/flexberry-error.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "error.messageLocaleKey", ["loc", [null, [18, 18], [18, 40]]]]], [], 0, 1, ["loc", [null, [18, 8], [24, 8]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          var child2 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.4.6",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 32,
                          "column": 14
                        },
                        "end": {
                          "line": 34,
                          "column": 14
                        }
                      },
                      "moduleName": "dummy/templates/components/flexberry-error.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                      return morphs;
                    },
                    statements: [["inline", "t", [["get", "e.messageLocaleKey", ["loc", [null, [33, 20], [33, 38]]]]], [], ["loc", [null, [33, 16], [33, 40]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                var child1 = (function () {
                  var child0 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.4.6",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 34,
                            "column": 14
                          },
                          "end": {
                            "line": 36,
                            "column": 14
                          }
                        },
                        "moduleName": "dummy/templates/components/flexberry-error.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n              ");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        return morphs;
                      },
                      statements: [["content", "e.message", ["loc", [null, [35, 16], [35, 29]]]]],
                      locals: [],
                      templates: []
                    };
                  })();
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.4.6",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 34,
                          "column": 14
                        },
                        "end": {
                          "line": 36,
                          "column": 14
                        }
                      },
                      "moduleName": "dummy/templates/components/flexberry-error.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["block", "if", [["get", "e.message", ["loc", [null, [34, 24], [34, 33]]]]], [], 0, null, ["loc", [null, [34, 14], [36, 14]]]]],
                    locals: [],
                    templates: [child0]
                  };
                })();
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.4.6",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 30,
                        "column": 10
                      },
                      "end": {
                        "line": 39,
                        "column": 10
                      }
                    },
                    "moduleName": "dummy/templates/components/flexberry-error.hbs"
                  },
                  isEmpty: false,
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("h3");
                    dom.setAttribute(el1, "class", "ui header");
                    var el2 = dom.createTextNode("\n");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("            ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("pre");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                    morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
                    return morphs;
                  },
                  statements: [["block", "if", [["get", "e.messageLocaleKey", ["loc", [null, [32, 20], [32, 38]]]]], [], 0, 1, ["loc", [null, [32, 14], [36, 21]]]], ["content", "e.stack", ["loc", [null, [38, 17], [38, 28]]]]],
                  locals: ["e"],
                  templates: [child0, child1]
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 27,
                      "column": 8
                    },
                    "end": {
                      "line": 40,
                      "column": 8
                    }
                  },
                  "moduleName": "dummy/templates/components/flexberry-error.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "each", [["get", "error.errors", ["loc", [null, [30, 18], [30, 30]]]]], [], 0, null, ["loc", [null, [30, 10], [39, 19]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 26,
                    "column": 6
                  },
                  "end": {
                    "line": 41,
                    "column": 6
                  }
                },
                "moduleName": "dummy/templates/components/flexberry-error.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "flexberry-toggler", [], ["caption", ["subexpr", "t", ["components.flexberry-error.show-more"], [], ["loc", [null, [28, 18], [28, 60]]]]], 0, null, ["loc", [null, [27, 8], [40, 30]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 42,
                  "column": 4
                }
              },
              "moduleName": "dummy/templates/components/flexberry-error.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("h2");
              dom.setAttribute(el1, "class", "ui header");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "and", [["get", "_errorIsArray", ["loc", [null, [10, 19], [10, 32]]]], ["get", "_messageIsNotSpecified", ["loc", [null, [10, 33], [10, 55]]]]], [], ["loc", [null, [10, 14], [10, 56]]]]], [], 0, 1, ["loc", [null, [10, 8], [24, 15]]]], ["block", "if", [["get", "error.errors", ["loc", [null, [26, 12], [26, 24]]]]], [], 2, null, ["loc", [null, [26, 6], [41, 13]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 43,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-error.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "modal-dialog", [], ["title", ["subexpr", "t", ["components.flexberry-error.caption"], [], ["loc", [null, [4, 12], [4, 52]]]], "useOkButton", ["subexpr", "@mut", [["get", "useOkButton", ["loc", [null, [5, 18], [5, 29]]]]], [], []], "useCloseButton", ["subexpr", "@mut", [["get", "useCloseButton", ["loc", [null, [6, 21], [6, 35]]]]], [], []], "settings", ["subexpr", "hash", [], ["context", ["get", "modalContext", ["loc", [null, [7, 29], [7, 41]]]], "onHidden", ["subexpr", "action", ["close"], [], ["loc", [null, [7, 51], [7, 67]]]]], ["loc", [null, [7, 15], [7, 68]]]]], 0, null, ["loc", [null, [3, 4], [42, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 50,
                    "column": 8
                  },
                  "end": {
                    "line": 52,
                    "column": 8
                  }
                },
                "moduleName": "dummy/templates/components/flexberry-error.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "t", [["get", "error.messageLocaleKey", ["loc", [null, [51, 14], [51, 36]]]]], [], ["loc", [null, [51, 10], [51, 38]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 52,
                      "column": 8
                    },
                    "end": {
                      "line": 54,
                      "column": 8
                    }
                  },
                  "moduleName": "dummy/templates/components/flexberry-error.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["content", "error.message", ["loc", [null, [53, 10], [53, 27]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 54,
                      "column": 8
                    },
                    "end": {
                      "line": 56,
                      "column": 8
                    }
                  },
                  "moduleName": "dummy/templates/components/flexberry-error.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n        ");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "t", ["components.flexberry-error.unknown-error"], [], ["loc", [null, [55, 10], [55, 58]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 52,
                    "column": 8
                  },
                  "end": {
                    "line": 56,
                    "column": 8
                  }
                },
                "moduleName": "dummy/templates/components/flexberry-error.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "error.message", ["loc", [null, [52, 18], [52, 31]]]]], [], 0, 1, ["loc", [null, [52, 8], [56, 8]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          var child2 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.4.6",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 64,
                          "column": 14
                        },
                        "end": {
                          "line": 66,
                          "column": 14
                        }
                      },
                      "moduleName": "dummy/templates/components/flexberry-error.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                      return morphs;
                    },
                    statements: [["inline", "t", [["get", "e.messageLocaleKey", ["loc", [null, [65, 20], [65, 38]]]]], [], ["loc", [null, [65, 16], [65, 40]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                var child1 = (function () {
                  var child0 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.4.6",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 66,
                            "column": 14
                          },
                          "end": {
                            "line": 68,
                            "column": 14
                          }
                        },
                        "moduleName": "dummy/templates/components/flexberry-error.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n              ");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        return morphs;
                      },
                      statements: [["content", "e.message", ["loc", [null, [67, 16], [67, 29]]]]],
                      locals: [],
                      templates: []
                    };
                  })();
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.4.6",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 66,
                          "column": 14
                        },
                        "end": {
                          "line": 68,
                          "column": 14
                        }
                      },
                      "moduleName": "dummy/templates/components/flexberry-error.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["block", "if", [["get", "e.message", ["loc", [null, [66, 24], [66, 33]]]]], [], 0, null, ["loc", [null, [66, 14], [68, 14]]]]],
                    locals: [],
                    templates: [child0]
                  };
                })();
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.4.6",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 62,
                        "column": 10
                      },
                      "end": {
                        "line": 71,
                        "column": 10
                      }
                    },
                    "moduleName": "dummy/templates/components/flexberry-error.hbs"
                  },
                  isEmpty: false,
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("h3");
                    dom.setAttribute(el1, "class", "ui header");
                    var el2 = dom.createTextNode("\n");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("            ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("pre");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                    morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
                    return morphs;
                  },
                  statements: [["block", "if", [["get", "e.messageLocaleKey", ["loc", [null, [64, 20], [64, 38]]]]], [], 0, 1, ["loc", [null, [64, 14], [68, 21]]]], ["content", "e.stack", ["loc", [null, [70, 17], [70, 28]]]]],
                  locals: ["e"],
                  templates: [child0, child1]
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 59,
                      "column": 8
                    },
                    "end": {
                      "line": 72,
                      "column": 8
                    }
                  },
                  "moduleName": "dummy/templates/components/flexberry-error.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "each", [["get", "error.errors", ["loc", [null, [62, 18], [62, 30]]]]], [], 0, null, ["loc", [null, [62, 10], [71, 19]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 58,
                    "column": 6
                  },
                  "end": {
                    "line": 73,
                    "column": 6
                  }
                },
                "moduleName": "dummy/templates/components/flexberry-error.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "flexberry-toggler", [], ["caption", ["subexpr", "t", ["components.flexberry-error.show-more"], [], ["loc", [null, [60, 18], [60, 60]]]]], 0, null, ["loc", [null, [59, 8], [72, 30]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 44,
                  "column": 4
                },
                "end": {
                  "line": 74,
                  "column": 4
                }
              },
              "moduleName": "dummy/templates/components/flexberry-error.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("h2");
              dom.setAttribute(el1, "class", "ui header");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "error.messageLocaleKey", ["loc", [null, [50, 14], [50, 36]]]]], [], 0, 1, ["loc", [null, [50, 8], [56, 15]]]], ["block", "if", [["get", "error.errors", ["loc", [null, [58, 12], [58, 24]]]]], [], 2, null, ["loc", [null, [58, 6], [73, 13]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 43,
                "column": 2
              },
              "end": {
                "line": 75,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-error.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ui-message", [], ["type", "negative", "onHide", "close", "closeable", true], 0, null, ["loc", [null, [44, 4], [74, 19]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 76,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-error.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "modal", ["loc", [null, [2, 8], [2, 13]]]]], [], 0, 1, ["loc", [null, [2, 2], [75, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 77,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-error.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "error", ["loc", [null, [1, 6], [1, 11]]]]], [], 0, null, ["loc", [null, [1, 0], [76, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/flexberry-field", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-field.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
          return morphs;
        },
        statements: [["content", "label", ["loc", [null, [2, 7], [2, 16]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-field.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "label", ["loc", [null, [1, 6], [1, 11]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["inline", "flexberry-textbox", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [5, 7], [5, 11]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [6, 8], [6, 13]]]]], [], []], "readonly", ["subexpr", "if", [["get", "readonly", ["loc", [null, [7, 15], [7, 23]]]], "readonly"], [], ["loc", [null, [7, 11], [7, 35]]]], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [8, 11], [8, 19]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [9, 14], [9, 25]]]]], [], []], "maxlength", ["subexpr", "@mut", [["get", "maxlength", ["loc", [null, [10, 12], [10, 21]]]]], [], []]], ["loc", [null, [4, 0], [11, 2]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/flexberry-file", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 4
              },
              "end": {
                "line": 20,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-file.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "add outline square icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element6 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element6, 'class');
            morphs[1] = dom.createAttrMorph(element6, 'title');
            morphs[2] = dom.createAttrMorph(element6, 'for');
            morphs[3] = dom.createElementMorph(element6);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["flexberry-file-add-button ui icon ", ["get", "buttonClass", ["loc", [null, [14, 51], [14, 62]]]], " ", ["subexpr", "unless", [["get", "_addButtonIsEnabled", ["loc", [null, [14, 74], [14, 93]]]], "disabled"], [], ["loc", [null, [14, 65], [14, 106]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-file.add-button-title"], [], ["loc", [null, [15, 14], [15, 64]]]]], ["attribute", "for", ["get", "_fileInputId", ["loc", [null, [16, 14], [16, 26]]]]], ["element", "action", ["addButtonClick"], ["on", "click", "preventDefault", false], ["loc", [null, [17, 8], [17, 67]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 4
              },
              "end": {
                "line": 28,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-file.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "trash outline icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element5 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element5, 'class');
            morphs[1] = dom.createAttrMorph(element5, 'title');
            morphs[2] = dom.createElementMorph(element5);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["flexberry-file-remove-button ui icon ", ["get", "buttonClass", ["loc", [null, [23, 54], [23, 65]]]], " ", ["subexpr", "unless", [["get", "_removeButtonIsEnabled", ["loc", [null, [23, 77], [23, 99]]]], "disabled"], [], ["loc", [null, [23, 68], [23, 112]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-file.remove-button-title"], [], ["loc", [null, [24, 14], [24, 67]]]]], ["element", "action", ["removeButtonClick"], ["on", "click", "preventDefault", false], ["loc", [null, [25, 8], [25, 70]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 4
              },
              "end": {
                "line": 36,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-file.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "upload outline icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element4, 'class');
            morphs[1] = dom.createAttrMorph(element4, 'title');
            morphs[2] = dom.createElementMorph(element4);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["flexberry-file-upload-button ui icon ", ["get", "buttonClass", ["loc", [null, [31, 54], [31, 65]]]], " ", ["subexpr", "unless", [["get", "_uploadButtonIsEnabled", ["loc", [null, [31, 77], [31, 99]]]], "disabled"], [], ["loc", [null, [31, 68], [31, 112]]]], " ", ["subexpr", "if", [["get", "_uploadIsInProgress", ["loc", [null, [31, 118], [31, 137]]]], "loading"], [], ["loc", [null, [31, 113], [31, 149]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-file.upload-button-title"], [], ["loc", [null, [32, 14], [32, 67]]]]], ["element", "action", ["uploadButtonClick"], ["on", "click", "preventDefault", false], ["loc", [null, [33, 8], [33, 70]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 2
            },
            "end": {
              "line": 37,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/flexberry-file.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "_addButtonIsVisible", ["loc", [null, [12, 10], [12, 29]]]]], [], 0, null, ["loc", [null, [12, 4], [20, 11]]]], ["block", "if", [["get", "_removeButtonIsVisible", ["loc", [null, [21, 10], [21, 32]]]]], [], 1, null, ["loc", [null, [21, 4], [28, 11]]]], ["block", "if", [["get", "_uploadButtonIsVisible", ["loc", [null, [29, 10], [29, 32]]]]], [], 2, null, ["loc", [null, [29, 4], [36, 11]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 45,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/flexberry-file.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "download outline icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element3, 'class');
          morphs[1] = dom.createAttrMorph(element3, 'title');
          morphs[2] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["flexberry-file-download-button ui icon ", ["get", "buttonClass", ["loc", [null, [40, 54], [40, 65]]]], " ", ["subexpr", "unless", [["get", "_downloadButtonIsEnabled", ["loc", [null, [40, 77], [40, 101]]]], "disabled"], [], ["loc", [null, [40, 68], [40, 114]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-file.download-button-title"], [], ["loc", [null, [41, 12], [41, 67]]]]], ["element", "action", ["downloadButtonClick"], ["on", "click", "preventDefault", false], ["loc", [null, [42, 6], [42, 70]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 50,
                  "column": 6
                },
                "end": {
                  "line": 55,
                  "column": 6
                }
              },
              "moduleName": "dummy/templates/components/flexberry-file.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("img");
              dom.setAttribute(el1, "class", "flexberry-file-image-preview ui small centered image");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element0, 'src');
              morphs[1] = dom.createAttrMorph(element0, 'alt');
              return morphs;
            },
            statements: [["attribute", "src", ["get", "_previewImageAsBase64String", ["loc", [null, [53, 16], [53, 43]]]]], ["attribute", "alt", ["subexpr", "t", ["components.flexberry-file.preview-image-alternative-text"], [], ["loc", [null, [54, 14], [54, 78]]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 48,
                "column": 2
              },
              "end": {
                "line": 58,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-file.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "flexberry-file-image-preview-wrapper ui segment");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var element2 = dom.childAt(element1, [3]);
            var morphs = new Array(3);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 1, 1);
            morphs[2] = dom.createAttrMorph(element2, 'class');
            return morphs;
          },
          statements: [["element", "action", ["viewLoadedImage"], [], ["loc", [null, [49, 65], [49, 93]]]], ["block", "unless", [["get", "_previewDownloadIsInProgress", ["loc", [null, [50, 16], [50, 44]]]]], [], 0, null, ["loc", [null, [50, 6], [55, 17]]]], ["attribute", "class", ["concat", ["ui ", ["subexpr", "if", [["get", "_previewDownloadIsInProgress", ["loc", [null, [56, 26], [56, 54]]]], "active", "disabled"], [], ["loc", [null, [56, 21], [56, 76]]]], " loader"]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 58,
                "column": 2
              },
              "end": {
                "line": 60,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-file.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "style", "color:red");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
            return morphs;
          },
          statements: [["content", "_fileName", ["loc", [null, [59, 10], [59, 23]]]], ["content", "_errorPreviewCaption", ["loc", [null, [59, 61], [59, 85]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 0
            },
            "end": {
              "line": 61,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-file.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "_canLoadPreview", ["loc", [null, [48, 8], [48, 23]]]]], [], 0, 1, ["loc", [null, [48, 2], [60, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 84,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-file.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("input");
        dom.setAttribute(el2, "type", "file");
        dom.setAttribute(el2, "name", "files[]");
        dom.setAttribute(el2, "class", "flexberry-file-file-input");
        dom.setAttribute(el2, "style", "display:none");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-file-download-iframes-container");
        dom.setAttribute(el1, "style", "display: none;");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-file-error-modal-dialog ui small basic modal");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui icon header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("i");
        dom.setAttribute(el3, "class", "file icon");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "content");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-file-error-modal-dialog-content center aligned ui grid");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "flexberry-file-error-modal-dialog-button center aligned ui grid");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "actions");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ui button flexberry-file-error-modal-dialog-ok-button approve");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "checkmark icon");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element7 = dom.childAt(fragment, [0]);
        var element8 = dom.childAt(element7, [1]);
        var element9 = dom.childAt(fragment, [5]);
        var morphs = new Array(10);
        morphs[0] = dom.createAttrMorph(element7, 'class');
        morphs[1] = dom.createAttrMorph(element8, 'accept');
        morphs[2] = dom.createAttrMorph(element8, 'id');
        morphs[3] = dom.createMorphAt(element7, 4, 4);
        morphs[4] = dom.createMorphAt(element7, 6, 6);
        morphs[5] = dom.createMorphAt(element7, 7, 7);
        morphs[6] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[7] = dom.createMorphAt(dom.childAt(element9, [1]), 3, 3);
        morphs[8] = dom.createMorphAt(dom.childAt(element9, [3, 1]), 1, 1);
        morphs[9] = dom.createMorphAt(dom.childAt(element9, [5, 1, 1]), 3, 3);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["ui ", ["get", "inputClass", ["loc", [null, [1, 17], [1, 27]]]], " action input"]]], ["attribute", "accept", ["get", "accept", ["loc", [null, [2, 45], [2, 51]]]]], ["attribute", "id", ["get", "_fileInputId", ["loc", [null, [2, 59], [2, 71]]]]], ["inline", "input", [], ["type", "text", "class", "flexberry-file-filename-input", "readonly", "readonly", "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [8, 16], [8, 27]]]]], [], []], "value", ["subexpr", "get", [["get", "this", ["loc", [null, [9, 15], [9, 19]]]], "_fileName"], [], ["loc", [null, [9, 10], [9, 32]]]]], ["loc", [null, [4, 2], [10, 4]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [11, 12], [11, 20]]]]], [], 0, null, ["loc", [null, [11, 2], [37, 13]]]], ["block", "if", [["get", "_downloadButtonIsVisible", ["loc", [null, [38, 8], [38, 32]]]]], [], 1, null, ["loc", [null, [38, 2], [45, 9]]]], ["block", "if", [["subexpr", "and", [["get", "showPreview", ["loc", [null, [47, 11], [47, 22]]]], ["get", "_hasFile", ["loc", [null, [47, 23], [47, 31]]]]], [], ["loc", [null, [47, 6], [47, 32]]]]], [], 2, null, ["loc", [null, [47, 0], [61, 7]]]], ["content", "_errorModalDialogCaption", ["loc", [null, [68, 4], [68, 32]]]], ["content", "_errorModalDialogContent", ["loc", [null, [72, 6], [72, 34]]]], ["inline", "t", ["components.flexberry-file.error-dialog-ok-button-caption"], [], ["loc", [null, [79, 8], [79, 72]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("dummy/templates/components/flexberry-groupedit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 60,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-groupedit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "groupedit-toolbar", [], ["componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [2, 16], [2, 29]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [3, 11], [3, 19]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [4, 14], [4, 25]]]]], [], []], "createNewButton", ["subexpr", "@mut", [["get", "createNewButton", ["loc", [null, [5, 18], [5, 33]]]]], [], []], "deleteButton", ["subexpr", "@mut", [["get", "deleteButton", ["loc", [null, [6, 15], [6, 27]]]]], [], []], "defaultSettingsButton", ["subexpr", "@mut", [["get", "defaultSettingsButton", ["loc", [null, [7, 24], [7, 45]]]]], [], []], "confirmDeleteRows", ["subexpr", "@mut", [["get", "confirmDeleteRows", ["loc", [null, [8, 20], [8, 37]]]]], [], []], "sorting", ["subexpr", "@mut", [["get", "sorting", ["loc", [null, [9, 10], [9, 17]]]]], [], []], "customButtonAction", "customButtonAction", "customButtons", ["subexpr", "@mut", [["get", "customButtons", ["loc", [null, [11, 16], [11, 29]]]]], [], []], "orderedProperty", ["subexpr", "@mut", [["get", "orderedProperty", ["loc", [null, [12, 18], [12, 33]]]]], [], []]], ["loc", [null, [1, 0], [13, 2]]]], ["inline", "object-list-view", [], ["class", "groupedit-container", "orderedProperty", ["subexpr", "@mut", [["get", "orderedProperty", ["loc", [null, [16, 18], [16, 33]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [17, 14], [17, 25]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [18, 11], [18, 19]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [19, 14], [19, 25]]]]], [], []], "tableStriped", ["subexpr", "@mut", [["get", "tableStriped", ["loc", [null, [20, 15], [20, 27]]]]], [], []], "columnsWidthAutoresize", ["subexpr", "@mut", [["get", "columnsWidthAutoresize", ["loc", [null, [21, 25], [21, 47]]]]], [], []], "minAutoColumnWidth", ["subexpr", "@mut", [["get", "minAutoColumnWidth", ["loc", [null, [22, 21], [22, 39]]]]], [], []], "customTableClass", ["subexpr", "@mut", [["get", "customTableClass", ["loc", [null, [23, 19], [23, 35]]]]], [], []], "cellComponent", ["subexpr", "@mut", [["get", "cellComponent", ["loc", [null, [24, 16], [24, 29]]]]], [], []], "singleColumnCellComponent", ["subexpr", "@mut", [["get", "singleColumnCellComponent", ["loc", [null, [25, 28], [25, 53]]]]], [], []], "singleColumnHeaderTitle", ["subexpr", "@mut", [["get", "singleColumnHeaderTitle", ["loc", [null, [26, 26], [26, 49]]]]], [], []], "showValidationMessagesInRow", ["subexpr", "@mut", [["get", "showValidationMessagesInRow", ["loc", [null, [27, 30], [27, 57]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [28, 20], [28, 37]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [29, 20], [29, 37]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [30, 24], [30, 45]]]]], [], []], "showEditMenuItemInRow", ["subexpr", "@mut", [["get", "showEditMenuItemInRow", ["loc", [null, [31, 24], [31, 45]]]]], [], []], "showDeleteMenuItemInRow", ["subexpr", "@mut", [["get", "showDeleteMenuItemInRow", ["loc", [null, [32, 26], [32, 49]]]]], [], []], "sendMenuItemAction", ["subexpr", "action", ["sendMenuItemAction"], [], ["loc", [null, [33, 21], [33, 50]]]], "menuInRowAdditionalItems", ["subexpr", "@mut", [["get", "menuInRowAdditionalItems", ["loc", [null, [34, 27], [34, 51]]]]], [], []], "rowClickable", ["subexpr", "@mut", [["get", "rowClickable", ["loc", [null, [35, 15], [35, 27]]]]], [], []], "orderable", ["subexpr", "@mut", [["get", "orderable", ["loc", [null, [36, 12], [36, 21]]]]], [], []], "editOnSeparateRoute", ["subexpr", "@mut", [["get", "editOnSeparateRoute", ["loc", [null, [37, 22], [37, 41]]]]], [], []], "saveBeforeRouteLeave", ["subexpr", "@mut", [["get", "saveBeforeRouteLeave", ["loc", [null, [38, 23], [38, 43]]]]], [], []], "sorting", ["subexpr", "@mut", [["get", "sorting", ["loc", [null, [39, 10], [39, 17]]]]], [], []], "modelName", ["subexpr", "@mut", [["get", "modelName", ["loc", [null, [40, 12], [40, 21]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "mainModelProjection", ["loc", [null, [41, 22], [41, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [42, 18], [42, 33]]]]], [], []], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [43, 10], [43, 17]]]]], [], []], "sortByColumn", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.sortByColumn", ["loc", [null, [44, 27], [44, 50]]]], ["get", "this.attrs.sortByColumn", ["loc", [null, [44, 51], [44, 74]]]], "sortByColumn"], [], ["loc", [null, [44, 23], [44, 90]]]]], [], ["loc", [null, [44, 15], [44, 91]]]], "addColumnToSorting", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.addColumnToSorting", ["loc", [null, [45, 33], [45, 62]]]], ["get", "this.attrs.addColumnToSorting", ["loc", [null, [45, 63], [45, 92]]]], "addColumnToSorting"], [], ["loc", [null, [45, 29], [45, 114]]]]], [], ["loc", [null, [45, 21], [45, 115]]]], "action", "groupEditRowClick", "componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [47, 16], [47, 29]]]]], [], []], "allowColumnResize", ["subexpr", "@mut", [["get", "allowColumnResize", ["loc", [null, [48, 20], [48, 37]]]]], [], []], "configurateRow", ["subexpr", "@mut", [["get", "this.attrs.configurateRow", ["loc", [null, [49, 17], [49, 42]]]]], [], []], "confirmDeleteRow", ["subexpr", "@mut", [["get", "confirmDeleteRow", ["loc", [null, [50, 19], [50, 35]]]]], [], []], "configurateSelectedRows", ["subexpr", "@mut", [["get", "this.attrs.configurateSelectedRows", ["loc", [null, [51, 26], [51, 60]]]]], [], []], "beforeDeleteRecord", ["subexpr", "@mut", [["get", "beforeDeleteRecord", ["loc", [null, [52, 21], [52, 39]]]]], [], []], "searchForContentChange", ["subexpr", "@mut", [["get", "searchForContentChange", ["loc", [null, [53, 25], [53, 47]]]]], [], []], "immediateDelete", false, "notUseUserSettings", ["subexpr", "@mut", [["get", "notUseUserSettings", ["loc", [null, [55, 21], [55, 39]]]]], [], []], "defaultSortingButton", ["subexpr", "@mut", [["get", "defaultSortingButton", ["loc", [null, [56, 23], [56, 43]]]]], [], []], "overflowedComponents", ["subexpr", "@mut", [["get", "overflowedComponents", ["loc", [null, [57, 23], [57, 43]]]]], [], []], "fixedHeader", ["subexpr", "@mut", [["get", "fixedHeader", ["loc", [null, [58, 14], [58, 25]]]]], [], []]], ["loc", [null, [14, 0], [59, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-icon", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-icon.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-jsonarea", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-jsonarea.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "sexteen wide column");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "_showErrorMessage", ["loc", [null, [7, 16], [7, 33]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "_errorMessageCaption", ["loc", [null, [8, 16], [8, 36]]]]], [], []], "message", ["subexpr", "@mut", [["get", "_errorMessage", ["loc", [null, [9, 16], [9, 29]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [10, 15], [10, 44]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [11, 15], [11, 44]]]]], ["loc", [null, [4, 6], [12, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-jsonarea.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "sexteen wide column");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "flexberry-button", [], ["class", ["subexpr", "concat", [["get", "flexberryClassNames.editButton", ["loc", [null, [21, 22], [21, 52]]]], " fluid", ["subexpr", "if", [["get", "_isEditing", ["loc", [null, [21, 66], [21, 76]]]], " positive"], [], ["loc", [null, [21, 62], [21, 89]]]]], [], ["loc", [null, [21, 14], [21, 90]]]], "iconClass", ["subexpr", "if", [["get", "_isEditing", ["loc", [null, [22, 22], [22, 32]]]], "checkmark icon", "edit icon"], [], ["loc", [null, [22, 18], [22, 62]]]], "click", ["subexpr", "action", ["onEditButtonClick"], [], ["loc", [null, [23, 14], [23, 42]]]]], ["loc", [null, [20, 6], [24, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 39,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-jsonarea.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "sexteen wide column");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4, 1]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "_showErrorMessage", ["loc", [null, [1, 6], [1, 23]]]]], [], 0, null, ["loc", [null, [1, 0], [15, 7]]]], ["block", "if", [["subexpr", "not", [["get", "readonly", ["loc", [null, [17, 11], [17, 19]]]]], [], ["loc", [null, [17, 6], [17, 20]]]]], [], 1, null, ["loc", [null, [17, 0], [27, 7]]]], ["inline", "flexberry-textarea", [], ["class", ["subexpr", "concat", [["get", "flexberryClassNames.textarea", ["loc", [null, [32, 20], [32, 48]]]], " fluid"], [], ["loc", [null, [32, 12], [32, 58]]]], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [33, 18], [33, 29]]]]], [], []], "value", ["subexpr", "@mut", [["get", "_jsonText", ["loc", [null, [34, 12], [34, 21]]]]], [], []], "readonly", ["subexpr", "not", [["get", "_isEditing", ["loc", [null, [35, 20], [35, 30]]]]], [], ["loc", [null, [35, 15], [35, 31]]]]], ["loc", [null, [31, 4], [36, 6]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/components/flexberry-lookup", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-dropdown", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [3, 16], [3, 27]]]]], [], []], "class", ["subexpr", "concat", ["search ", ["get", "dropdownClass", ["loc", [null, [4, 28], [4, 41]]]]], [], ["loc", [null, [4, 10], [4, 42]]]], "value", ["subexpr", "@mut", [["get", "displayValue", ["loc", [null, [5, 10], [5, 22]]]]], [], []], "readonly", ["subexpr", "if", [["get", "readonly", ["loc", [null, [6, 17], [6, 25]]]], "readonly"], [], ["loc", [null, [6, 13], [6, 37]]]], "needChecksOnValue", false, "isSearch", true, "isSearchReadOnly", ["subexpr", "@mut", [["get", "dropdownIsSearch", ["loc", [null, [9, 21], [9, 37]]]]], [], []]], ["loc", [null, [2, 2], [10, 4]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 10
                },
                "end": {
                  "line": 20,
                  "column": 10
                }
              },
              "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "yield", ["loc", [null, [19, 12], [19, 21]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 10
                },
                "end": {
                  "line": 22,
                  "column": 10
                }
              },
              "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "placeholder", ["loc", [null, [21, 12], [21, 27]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 26,
                  "column": 8
                }
              },
              "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "chevron right icon");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 4
              },
              "end": {
                "line": 28,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "lookup-field");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element2, 'class');
            morphs[1] = dom.createElementMorph(element2);
            morphs[2] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
            morphs[3] = dom.createMorphAt(element2, 3, 3);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui transparent ", ["subexpr", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [16, 39], [16, 47]]]], ["get", "isBlocked", ["loc", [null, [16, 48], [16, 57]]]]], [], ["loc", [null, [16, 35], [16, 58]]]], "disabled"], [], ["loc", [null, [16, 30], [16, 71]]]], " ", ["subexpr", "if", [["subexpr", "or", [["get", "modalIsBeforeToShow", ["loc", [null, [16, 81], [16, 100]]]], ["get", "modalIsStartToShow", ["loc", [null, [16, 101], [16, 119]]]]], [], ["loc", [null, [16, 77], [16, 120]]]], "loading"], [], ["loc", [null, [16, 72], [16, 132]]]], " icon input"]]], ["element", "action", ["choose", ["get", "chooseData", ["loc", [null, [15, 26], [15, 36]]]]], [], ["loc", [null, [15, 8], [15, 38]]]], ["block", "if", [["get", "value", ["loc", [null, [18, 16], [18, 21]]]]], [], 0, 1, ["loc", [null, [18, 10], [22, 17]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [24, 18], [24, 26]]]]], [], 2, null, ["loc", [null, [24, 8], [26, 19]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 4
              },
              "end": {
                "line": 37,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "input", [], ["type", "text", "class", ["subexpr", "concat", ["lookup-field ", ["subexpr", "if", [["get", "autocomplete", ["loc", [null, [31, 42], [31, 54]]]], "prompt"], [], ["loc", [null, [31, 38], [31, 64]]]]], [], ["loc", [null, [31, 14], [31, 65]]]], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [32, 20], [32, 31]]]]], [], []], "value", ["subexpr", "@mut", [["get", "displayValue", ["loc", [null, [33, 14], [33, 26]]]]], [], []], "focusOut", ["subexpr", "action", ["onInputFocusOut"], [], ["loc", [null, [34, 17], [34, 43]]]], "readonly", ["subexpr", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [35, 25], [35, 33]]]], ["subexpr", "not", [["get", "autocomplete", ["loc", [null, [35, 39], [35, 51]]]]], [], ["loc", [null, [35, 34], [35, 52]]]]], [], ["loc", [null, [35, 21], [35, 53]]]], "readonly"], [], ["loc", [null, [35, 17], [35, 65]]]]], ["loc", [null, [29, 6], [36, 8]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 39,
                  "column": 6
                },
                "end": {
                  "line": 48,
                  "column": 6
                }
              },
              "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "data-test-lookup-preview", "");
              dom.setAttribute(el1, "type", "button");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var morphs = new Array(4);
              morphs[0] = dom.createAttrMorph(element1, 'class');
              morphs[1] = dom.createAttrMorph(element1, 'title');
              morphs[2] = dom.createElementMorph(element1);
              morphs[3] = dom.createUnsafeMorphAt(element1, 1, 1);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["ui ui-preview ", ["subexpr", "if", [["get", "isBlocked", ["loc", [null, [42, 36], [42, 45]]]], " disabled"], [], ["loc", [null, [42, 31], [42, 59]]]], " ", ["get", "previewButtonClass", ["loc", [null, [42, 62], [42, 80]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-lookup.preview-button-text"], [], ["loc", [null, [43, 16], [43, 71]]]]], ["element", "action", ["preview"], [], ["loc", [null, [45, 10], [45, 30]]]], ["content", "previewText", ["loc", [null, [46, 10], [46, 27]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 38,
                "column": 4
              },
              "end": {
                "line": 49,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "and", [["get", "previewFormRoute", ["loc", [null, [39, 17], [39, 33]]]], ["get", "value", ["loc", [null, [39, 34], [39, 39]]]]], [], ["loc", [null, [39, 12], [39, 40]]]]], [], 0, null, ["loc", [null, [39, 6], [48, 13]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 50,
                "column": 4
              },
              "end": {
                "line": 59,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "data-test-lookup-change", "");
            dom.setAttribute(el1, "type", "button");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createAttrMorph(element0, 'title');
            morphs[2] = dom.createElementMorph(element0);
            morphs[3] = dom.createUnsafeMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui ui-change ", ["subexpr", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [53, 37], [53, 45]]]], ["get", "isBlocked", ["loc", [null, [53, 46], [53, 55]]]]], [], ["loc", [null, [53, 33], [53, 56]]]], " disabled"], [], ["loc", [null, [53, 28], [53, 70]]]], " ", ["get", "chooseButtonClass", ["loc", [null, [53, 73], [53, 90]]]], " ", ["subexpr", "if", [["subexpr", "or", [["get", "modalIsBeforeToShow", ["loc", [null, [53, 102], [53, 121]]]], ["get", "modalIsStartToShow", ["loc", [null, [53, 122], [53, 140]]]]], [], ["loc", [null, [53, 98], [53, 141]]]], " loading"], [], ["loc", [null, [53, 93], [53, 154]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-lookup.choose-button-text"], [], ["loc", [null, [54, 14], [54, 68]]]]], ["element", "action", ["choose", ["get", "chooseData", ["loc", [null, [56, 26], [56, 36]]]]], [], ["loc", [null, [56, 8], [56, 38]]]], ["content", "chooseText", ["loc", [null, [57, 8], [57, 24]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 69,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "data-test-lookup", "");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "data-test-lookup-clear", "");
          dom.setAttribute(el2, "type", "button");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var element4 = dom.childAt(element3, [5]);
          var morphs = new Array(8);
          morphs[0] = dom.createAttrMorph(element3, 'class');
          morphs[1] = dom.createMorphAt(element3, 1, 1);
          morphs[2] = dom.createMorphAt(element3, 2, 2);
          morphs[3] = dom.createMorphAt(element3, 3, 3);
          morphs[4] = dom.createAttrMorph(element4, 'class');
          morphs[5] = dom.createAttrMorph(element4, 'title');
          morphs[6] = dom.createElementMorph(element4);
          morphs[7] = dom.createUnsafeMorphAt(element4, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["subexpr", "unless", [["get", "hasBlock", ["loc", [null, [12, 43], [12, 51]]]], "fluid"], [], ["loc", [null, [12, 34], [12, 61]]]], " action input ", ["subexpr", "if", [["subexpr", "and", [["get", "readonly", ["loc", [null, [12, 85], [12, 93]]]], ["subexpr", "not", [["get", "hasBlock", ["loc", [null, [12, 99], [12, 107]]]]], [], ["loc", [null, [12, 94], [12, 108]]]]], [], ["loc", [null, [12, 80], [12, 109]]]], "disabled"], [], ["loc", [null, [12, 75], [12, 122]]]]]]], ["block", "if", [["get", "hasBlock", ["loc", [null, [13, 10], [13, 18]]]]], [], 0, 1, ["loc", [null, [13, 4], [37, 11]]]], ["block", "if", [["get", "showPreviewButton", ["loc", [null, [38, 10], [38, 27]]]]], [], 2, null, ["loc", [null, [38, 4], [49, 11]]]], ["block", "unless", [["get", "hasBlock", ["loc", [null, [50, 14], [50, 22]]]]], [], 3, null, ["loc", [null, [50, 4], [59, 15]]]], ["attribute", "class", ["concat", ["ui ui-clear ", ["subexpr", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [62, 34], [62, 42]]]], ["get", "isBlocked", ["loc", [null, [62, 43], [62, 52]]]]], [], ["loc", [null, [62, 30], [62, 53]]]], " disabled"], [], ["loc", [null, [62, 25], [62, 67]]]], " ", ["get", "removeButtonClass", ["loc", [null, [62, 70], [62, 87]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-lookup.remove-button-text"], [], ["loc", [null, [63, 12], [63, 66]]]]], ["element", "action", ["remove", ["get", "removeData", ["loc", [null, [65, 24], [65, 34]]]]], [], ["loc", [null, [65, 6], [65, 36]]]], ["content", "removeText", ["loc", [null, [66, 6], [66, 22]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 70,
              "column": 0
            },
            "end": {
              "line": 72,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "_hasBlockSetter", ["loc", [null, [71, 2], [71, 21]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 72,
                "column": 0
              },
              "end": {
                "line": 74,
                "column": 0
              }
            },
            "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "results");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 72,
              "column": 0
            },
            "end": {
              "line": 74,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "autocomplete", ["loc", [null, [72, 10], [72, 22]]]]], [], 0, null, ["loc", [null, [72, 0], [74, 0]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 75,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "dropdown", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, 1, ["loc", [null, [1, 0], [69, 7]]]], ["block", "if", [["get", "hasBlock", ["loc", [null, [70, 6], [70, 14]]]]], [], 2, 3, ["loc", [null, [70, 0], [74, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("dummy/templates/components/flexberry-menu", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-menu.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-menuitem", [], ["tagName", "", "item", ["subexpr", "@mut", [["get", "item", ["loc", [null, [4, 9], [4, 13]]]]], [], []], "settings", ["subexpr", "@mut", [["get", "settings", ["loc", [null, [5, 13], [5, 21]]]]], [], []]], ["loc", [null, [2, 2], [6, 4]]]]],
        locals: ["item"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 9
          }
        },
        "moduleName": "dummy/templates/components/flexberry-menu.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "items", ["loc", [null, [1, 8], [1, 13]]]]], [], 0, null, ["loc", [null, [1, 0], [7, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/flexberry-menuitem", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["inline", "t", [["get", "item.localeKey", ["loc", [null, [3, 14], [3, 28]]]]], [], ["loc", [null, [3, 10], [3, 30]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "item.title", ["loc", [null, [5, 10], [5, 24]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "item.localeKey", ["loc", [null, [2, 8], [2, 22]]]]], [], 0, 1, ["loc", [null, [2, 2], [6, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element3, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "item.icon", ["loc", [null, [9, 14], [9, 23]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 14,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["inline", "t", [["get", "item.localeKey", ["loc", [null, [13, 14], [13, 28]]]]], [], ["loc", [null, [13, 10], [13, 30]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 2
              },
              "end": {
                "line": 16,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "item.title", ["loc", [null, [15, 10], [15, 24]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "item.localeKey", ["loc", [null, [12, 8], [12, 22]]]]], [], 0, 1, ["loc", [null, [12, 2], [16, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 6
              },
              "end": {
                "line": 27,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element1, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", [["get", "button.iconClass", ["loc", [null, [26, 20], [26, 36]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 0
            },
            "end": {
              "line": 30,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(6);
          morphs[0] = dom.createAttrMorph(element2, 'class');
          morphs[1] = dom.createAttrMorph(element2, 'title');
          morphs[2] = dom.createAttrMorph(element2, 'disabled');
          morphs[3] = dom.createElementMorph(element2);
          morphs[4] = dom.createMorphAt(element2, 1, 1);
          morphs[5] = dom.createMorphAt(element2, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["get", "button.buttonClasses", ["loc", [null, [21, 16], [21, 36]]]], " button"]]], ["attribute", "title", ["get", "button.buttonTitle", ["loc", [null, [22, 12], [22, 30]]]]], ["attribute", "disabled", ["get", "button.disabled", ["loc", [null, [23, 15], [23, 30]]]]], ["element", "action", ["itemButtonAction", ["get", "button.buttonAction", ["loc", [null, [24, 32], [24, 51]]]]], ["bubbles", false], ["loc", [null, [24, 4], [24, 67]]]], ["block", "if", [["get", "button.iconClass", ["loc", [null, [25, 12], [25, 28]]]]], [], 0, null, ["loc", [null, [25, 6], [27, 13]]]], ["inline", "if", [["get", "button.buttonName", ["loc", [null, [28, 11], [28, 28]]]], ["get", "button.buttonName", ["loc", [null, [28, 29], [28, 46]]]]], [], ["loc", [null, [28, 6], [28, 48]]]]],
        locals: ["button"],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 4
              },
              "end": {
                "line": 35,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "flexberry-menuitem", [], ["item", ["subexpr", "@mut", [["get", "item", ["loc", [null, [34, 32], [34, 36]]]]], [], []]], ["loc", [null, [34, 6], [34, 38]]]]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 31,
              "column": 0
            },
            "end": {
              "line": 37,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "item.itemsAlignment", ["loc", [null, [32, 19], [32, 38]]]], ["get", "item.itemsAlignment", ["loc", [null, [32, 39], [32, 58]]]]], [], ["loc", [null, [32, 14], [32, 60]]]], " menu"]]], ["block", "each", [["get", "item.items", ["loc", [null, [33, 12], [33, 22]]]]], [], 0, null, ["loc", [null, [33, 4], [35, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 39,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        morphs[4] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        morphs[5] = dom.createMorphAt(fragment, 5, 5, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "titleIsBeforeIcon", ["loc", [null, [1, 6], [1, 23]]]]], [], 0, null, ["loc", [null, [1, 0], [7, 7]]]], ["block", "if", [["get", "item.icon", ["loc", [null, [8, 6], [8, 15]]]]], [], 1, null, ["loc", [null, [8, 0], [10, 7]]]], ["block", "if", [["subexpr", "not", [["get", "titleIsBeforeIcon", ["loc", [null, [11, 11], [11, 28]]]]], [], ["loc", [null, [11, 6], [11, 29]]]]], [], 2, null, ["loc", [null, [11, 0], [17, 7]]]], ["block", "each", [["get", "item.buttons", ["loc", [null, [18, 8], [18, 20]]]]], [], 3, null, ["loc", [null, [18, 0], [30, 9]]]], ["block", "if", [["get", "hasSubitems", ["loc", [null, [31, 6], [31, 17]]]]], [], 4, null, ["loc", [null, [31, 0], [37, 7]]]], ["content", "yield", ["loc", [null, [38, 0], [38, 9]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("dummy/templates/components/flexberry-objectlistview", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 120,
                  "column": 8
                },
                "end": {
                  "line": 122,
                  "column": 8
                }
              },
              "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ui button");
              var el2 = dom.createTextNode("...");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 122,
                    "column": 8
                  },
                  "end": {
                    "line": 124,
                    "column": 8
                  }
                },
                "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "type", "button");
                dom.setAttribute(el1, "class", "ui disabled active button");
                dom.setAttribute(el1, "disabled", "");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["content", "page.number", ["loc", [null, [123, 75], [123, 90]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 124,
                    "column": 8
                  },
                  "end": {
                    "line": 126,
                    "column": 8
                  }
                },
                "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "type", "button");
                dom.setAttribute(el1, "class", "ui button");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createElementMorph(element1);
                morphs[1] = dom.createMorphAt(element1, 0, 0);
                return morphs;
              },
              statements: [["element", "action", ["gotoPage", ["get", "this.attrs.gotoPage", ["loc", [null, [125, 70], [125, 89]]]], ["get", "page.number", ["loc", [null, [125, 90], [125, 101]]]]], [], ["loc", [null, [125, 50], [125, 103]]]], ["content", "page.number", ["loc", [null, [125, 104], [125, 119]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 122,
                  "column": 8
                },
                "end": {
                  "line": 126,
                  "column": 8
                }
              },
              "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "page.isCurrent", ["loc", [null, [122, 18], [122, 32]]]]], [], 0, 1, ["loc", [null, [122, 8], [126, 8]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 119,
                "column": 6
              },
              "end": {
                "line": 127,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "page.isEllipsis", ["loc", [null, [120, 14], [120, 29]]]]], [], 0, 1, ["loc", [null, [120, 8], [126, 15]]]]],
          locals: ["page"],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 146,
                "column": 6
              },
              "end": {
                "line": 154,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createAttrMorph(element0, 'title');
            morphs[2] = dom.createAttrMorph(element0, 'disabled');
            morphs[3] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [149, 22], [149, 33]]]], " icon button ", ["subexpr", "if", [["get", "searchPageButtonReadonly", ["loc", [null, [149, 53], [149, 77]]]], "disabled", "primary"], [], ["loc", [null, [149, 48], [149, 100]]]], " goto-page-button small"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-objectlistview.search-button-text"], [], ["loc", [null, [150, 16], [150, 78]]]]], ["attribute", "disabled", ["get", "searchPageButtonReadonly", ["loc", [null, [151, 21], [151, 45]]]]], ["element", "action", ["searchPageButtonAction", ["get", "this.attrs.gotoPage", ["loc", [null, [152, 44], [152, 63]]]]], [], ["loc", [null, [152, 10], [152, 65]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 159,
                  "column": 10
                },
                "end": {
                  "line": 163,
                  "column": 10
                }
              },
              "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "concat", [["subexpr", "t", ["components.flexberry-objectlistview.showing-entries.showing"], [], ["loc", [null, [161, 14], [161, 79]]]], ["get", "currentIntervalRecords", ["loc", [null, [161, 80], [161, 102]]]], ["subexpr", "t", ["components.flexberry-objectlistview.showing-entries.of"], [], ["loc", [null, [161, 103], [161, 163]]]], ["get", "recordsTotalCount", ["loc", [null, [161, 164], [161, 181]]]], ["subexpr", "t", ["components.flexberry-objectlistview.showing-entries.entries"], [], ["loc", [null, [161, 182], [161, 247]]]]], [], ["loc", [null, [160, 12], [162, 14]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 157,
                "column": 6
              },
              "end": {
                "line": 165,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "showing-entries");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "and", [["get", "currentIntervalRecords", ["loc", [null, [159, 21], [159, 43]]]], ["get", "recordsTotalCount", ["loc", [null, [159, 44], [159, 61]]]]], [], ["loc", [null, [159, 16], [159, 62]]]]], [], 0, null, ["loc", [null, [159, 10], [163, 17]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 110,
              "column": 0
            },
            "end": {
              "line": 169,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui secondary menu no-margin nav-bar");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ui basic buttons");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "type", "button");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "type", "button");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "right menu");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [1]);
          var element4 = dom.childAt(element3, [1]);
          var element5 = dom.childAt(element3, [5]);
          var element6 = dom.childAt(element2, [3]);
          var element7 = dom.childAt(element2, [5]);
          var morphs = new Array(13);
          morphs[0] = dom.createAttrMorph(element4, 'class');
          morphs[1] = dom.createAttrMorph(element4, 'disabled');
          morphs[2] = dom.createElementMorph(element4);
          morphs[3] = dom.createMorphAt(element3, 3, 3);
          morphs[4] = dom.createAttrMorph(element5, 'class');
          morphs[5] = dom.createAttrMorph(element5, 'disabled');
          morphs[6] = dom.createElementMorph(element5);
          morphs[7] = dom.createAttrMorph(element6, 'class');
          morphs[8] = dom.createMorphAt(element6, 1, 1);
          morphs[9] = dom.createMorphAt(element6, 4, 4);
          morphs[10] = dom.createMorphAt(element6, 6, 6);
          morphs[11] = dom.createMorphAt(element7, 1, 1);
          morphs[12] = dom.createMorphAt(element7, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["subexpr", "unless", [["get", "hasPreviousPage", ["loc", [null, [115, 27], [115, 42]]]], "disabled"], [], ["loc", [null, [115, 18], [115, 55]]]], " button prev-page-button"]]], ["attribute", "disabled", ["subexpr", "not", [["get", "hasPreviousPage", ["loc", [null, [116, 23], [116, 38]]]]], [], ["loc", [null, [116, 17], [116, 40]]]]], ["element", "action", ["previousPage", ["get", "this.attrs.previousPage", ["loc", [null, [117, 32], [117, 55]]]]], [], ["loc", [null, [117, 8], [117, 57]]]], ["block", "each", [["get", "pages", ["loc", [null, [119, 14], [119, 19]]]]], [], 0, null, ["loc", [null, [119, 6], [127, 15]]]], ["attribute", "class", ["concat", ["ui ", ["subexpr", "unless", [["get", "hasNextPage", ["loc", [null, [130, 27], [130, 38]]]], "disabled"], [], ["loc", [null, [130, 18], [130, 51]]]], " button next-page-button"]]], ["attribute", "disabled", ["subexpr", "not", [["get", "hasNextPage", ["loc", [null, [131, 23], [131, 34]]]]], [], ["loc", [null, [131, 17], [131, 36]]]]], ["element", "action", ["nextPage", ["get", "this.attrs.nextPage", ["loc", [null, [132, 28], [132, 47]]]]], [], ["loc", [null, [132, 8], [132, 49]]]], ["attribute", "class", ["concat", ["ui input nav-bar-search-page ", ["subexpr", "if", [["subexpr", "and", [["get", "searchPageValue", ["loc", [null, [135, 55], [135, 70]]]], ["get", "searchPageButtonReadonly", ["loc", [null, [135, 71], [135, 95]]]]], [], ["loc", [null, [135, 50], [135, 96]]]], "error"], [], ["loc", [null, [135, 45], [135, 107]]]]]]], ["inline", "input", [], ["type", "number", "min", ["subexpr", "@mut", [["get", "_pages.firstObject.number", ["loc", [null, [138, 12], [138, 37]]]]], [], []], "max", ["subexpr", "@mut", [["get", "_pages.lastObject.number", ["loc", [null, [139, 12], [139, 36]]]]], [], []], "placeholder", ["subexpr", "t", ["components.flexberry-objectlistview.search-page-placeholder"], [], ["loc", [null, [140, 20], [140, 85]]]], "value", ["subexpr", "@mut", [["get", "searchPageValue", ["loc", [null, [141, 14], [141, 29]]]]], [], []], "enter", ["subexpr", "action", ["searchPageButtonAction", ["get", "this.attrs.gotoPage", ["loc", [null, [142, 47], [142, 66]]]]], [], ["loc", [null, [142, 14], [142, 67]]]]], ["loc", [null, [136, 6], [143, 8]]]], ["inline", "input", [], ["classNames", ["subexpr", "array", ["hidden"], [], ["loc", [null, [145, 25], [145, 41]]]]], ["loc", [null, [145, 6], [145, 43]]]], ["block", "if", [["get", "searchPageValue", ["loc", [null, [146, 12], [146, 27]]]]], [], 1, null, ["loc", [null, [146, 6], [154, 13]]]], ["block", "if", [["get", "showShowingEntries", ["loc", [null, [157, 12], [157, 30]]]]], [], 2, null, ["loc", [null, [157, 6], [165, 13]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [166, 33], [166, 46]]]]], [], []], "value", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [166, 53], [166, 65]]]]], [], []], "class", "compact selection", "onChange", ["subexpr", "action", ["perPageClick"], [], ["loc", [null, [166, 101], [166, 124]]]], "needChecksOnValue", false, "direction", "upward"], ["loc", [null, [166, 6], [166, 169]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 169,
            "column": 7
          }
        },
        "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "olv-toolbar", [], ["class", "ui secondary menu no-margin", "createNewButton", ["subexpr", "@mut", [["get", "createNewButton", ["loc", [null, [3, 18], [3, 33]]]]], [], []], "enableCreateNewButton", ["subexpr", "not", [["get", "readonly", ["loc", [null, [4, 29], [4, 37]]]]], [], ["loc", [null, [4, 24], [4, 38]]]], "refreshButton", ["subexpr", "@mut", [["get", "refreshButton", ["loc", [null, [5, 16], [5, 29]]]]], [], []], "deleteButton", ["subexpr", "@mut", [["get", "deleteButton", ["loc", [null, [6, 15], [6, 27]]]]], [], []], "colsConfigButton", ["subexpr", "@mut", [["get", "colsConfigButton", ["loc", [null, [7, 19], [7, 35]]]]], [], []], "advLimitButton", ["subexpr", "@mut", [["get", "advLimitButton", ["loc", [null, [8, 17], [8, 31]]]]], [], []], "enableFilters", ["subexpr", "@mut", [["get", "enableFilters", ["loc", [null, [9, 16], [9, 29]]]]], [], []], "exportExcelButton", ["subexpr", "@mut", [["get", "exportExcelButton", ["loc", [null, [10, 20], [10, 37]]]]], [], []], "showFilters", ["subexpr", "@mut", [["get", "_showFilters", ["loc", [null, [11, 14], [11, 26]]]]], [], []], "showFiltersInModal", ["subexpr", "@mut", [["get", "showFiltersInModal", ["loc", [null, [12, 21], [12, 39]]]]], [], []], "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [13, 10], [13, 17]]]]], [], []], "toggleStateFilters", ["subexpr", "action", ["toggleStateFilters"], [], ["loc", [null, [14, 21], [14, 50]]]], "resetFilters", ["subexpr", "action", ["resetFilters", ["get", "this.attrs.resetFilters", ["loc", [null, [15, 38], [15, 61]]]]], [], ["loc", [null, [15, 15], [15, 62]]]], "filterButton", ["subexpr", "@mut", [["get", "filterButton", ["loc", [null, [16, 15], [16, 27]]]]], [], []], "filterText", ["subexpr", "@mut", [["get", "filterText", ["loc", [null, [17, 13], [17, 23]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [18, 14], [18, 25]]]]], [], []], "enableDeleteButton", ["subexpr", "not", [["get", "readonly", ["loc", [null, [19, 26], [19, 34]]]]], [], ["loc", [null, [19, 21], [19, 35]]]], "inLookup", ["subexpr", "eq", [["get", "componentMode", ["loc", [null, [20, 15], [20, 28]]]], "lookupform"], [], ["loc", [null, [20, 11], [20, 42]]]], "componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [21, 16], [21, 29]]]]], [], []], "lookupComponentName", ["subexpr", "@mut", [["get", "lookupComponentName", ["loc", [null, [22, 22], [22, 41]]]]], [], []], "modelController", ["subexpr", "@mut", [["get", "currentController", ["loc", [null, [23, 18], [23, 35]]]]], [], []], "customButtonAction", "customButtonAction", "customButtons", ["subexpr", "@mut", [["get", "customButtons", ["loc", [null, [25, 16], [25, 29]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [26, 16], [26, 29]]]]], [], []], "showConfigDialog", "showConfigDialog", "showAdvLimitDialog", "showConfigDialog", "confirmDeleteRows", ["subexpr", "@mut", [["get", "confirmDeleteRows", ["loc", [null, [29, 20], [29, 37]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "inHierarchicalMode", ["loc", [null, [30, 21], [30, 39]]]]], [], []], "inExpandMode", ["subexpr", "@mut", [["get", "inExpandMode", ["loc", [null, [31, 15], [31, 27]]]]], [], []], "availableHierarchicalMode", ["subexpr", "@mut", [["get", "_availableHierarchicalMode", ["loc", [null, [32, 28], [32, 54]]]]], [], []], "availableCollExpandMode", ["subexpr", "@mut", [["get", "availableCollExpandMode", ["loc", [null, [33, 26], [33, 49]]]]], [], []], "switchHierarchicalMode", ["subexpr", "action", ["switchHierarchicalMode"], [], ["loc", [null, [34, 25], [34, 58]]]], "switchExpandMode", ["subexpr", "action", ["switchExpandMode"], [], ["loc", [null, [35, 19], [35, 46]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [36, 11], [36, 19]]]]], [], []]], ["loc", [null, [1, 0], [37, 2]]]], ["inline", "object-list-view", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [39, 14], [39, 25]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [40, 11], [40, 19]]]]], [], []], "columnsWidthAutoresize", ["subexpr", "@mut", [["get", "columnsWidthAutoresize", ["loc", [null, [41, 25], [41, 47]]]]], [], []], "minAutoColumnWidth", ["subexpr", "@mut", [["get", "minAutoColumnWidth", ["loc", [null, [42, 21], [42, 39]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [43, 14], [43, 25]]]]], [], []], "tableStriped", ["subexpr", "@mut", [["get", "tableStriped", ["loc", [null, [44, 15], [44, 27]]]]], [], []], "customTableClass", ["subexpr", "@mut", [["get", "customTableClass", ["loc", [null, [45, 19], [45, 35]]]]], [], []], "cellComponent", ["subexpr", "@mut", [["get", "cellComponent", ["loc", [null, [46, 16], [46, 29]]]]], [], []], "singleColumnCellComponent", ["subexpr", "@mut", [["get", "singleColumnCellComponent", ["loc", [null, [47, 28], [47, 53]]]]], [], []], "singleColumnHeaderTitle", ["subexpr", "@mut", [["get", "singleColumnHeaderTitle", ["loc", [null, [48, 26], [48, 49]]]]], [], []], "createNewByPrototype", ["subexpr", "action", ["createNewByPrototype"], [], ["loc", [null, [49, 23], [49, 54]]]], "showValidationMessagesInRow", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [50, 40], [50, 48]]]]], [], ["loc", [null, [50, 35], [50, 49]]]], ["get", "showValidationMessagesInRow", ["loc", [null, [50, 50], [50, 77]]]]], [], ["loc", [null, [50, 30], [50, 78]]]], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [51, 20], [51, 37]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [52, 20], [52, 37]]]]], [], []], "showEditButtonInRow", ["subexpr", "@mut", [["get", "showEditButtonInRow", ["loc", [null, [53, 22], [53, 41]]]]], [], []], "showPrototypeButtonInRow", ["subexpr", "@mut", [["get", "showPrototypeButtonInRow", ["loc", [null, [54, 27], [54, 51]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [55, 24], [55, 45]]]]], [], []], "showEditMenuItemInRow", ["subexpr", "@mut", [["get", "showEditMenuItemInRow", ["loc", [null, [56, 24], [56, 45]]]]], [], []], "showPrototypeMenuItemInRow", ["subexpr", "@mut", [["get", "showPrototypeMenuItemInRow", ["loc", [null, [57, 29], [57, 55]]]]], [], []], "showDeleteMenuItemInRow", ["subexpr", "@mut", [["get", "showDeleteMenuItemInRow", ["loc", [null, [58, 26], [58, 49]]]]], [], []], "sendMenuItemAction", ["subexpr", "action", ["sendMenuItemAction"], [], ["loc", [null, [59, 21], [59, 50]]]], "menuInRowAdditionalItems", ["subexpr", "@mut", [["get", "menuInRowAdditionalItems", ["loc", [null, [60, 27], [60, 51]]]]], [], []], "rowClickable", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [61, 25], [61, 33]]]]], [], ["loc", [null, [61, 20], [61, 34]]]], ["get", "rowClickable", ["loc", [null, [61, 35], [61, 47]]]]], [], ["loc", [null, [61, 15], [61, 48]]]], "orderable", ["subexpr", "@mut", [["get", "orderable", ["loc", [null, [62, 12], [62, 21]]]]], [], []], "sorting", ["subexpr", "@mut", [["get", "sorting", ["loc", [null, [63, 10], [63, 17]]]]], [], []], "immediateDelete", true, "modelName", ["subexpr", "@mut", [["get", "modelName", ["loc", [null, [65, 12], [65, 21]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [66, 18], [66, 33]]]]], [], []], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [67, 10], [67, 17]]]]], [], []], "sortByColumn", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.sortByColumn", ["loc", [null, [68, 27], [68, 50]]]], ["get", "this.attrs.sortByColumn", ["loc", [null, [68, 51], [68, 74]]]], "sortByColumn"], [], ["loc", [null, [68, 23], [68, 90]]]]], [], ["loc", [null, [68, 15], [68, 91]]]], "addColumnToSorting", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.addColumnToSorting", ["loc", [null, [69, 33], [69, 62]]]], ["get", "this.attrs.addColumnToSorting", ["loc", [null, [69, 63], [69, 92]]]], "addColumnToSorting"], [], ["loc", [null, [69, 29], [69, 114]]]]], [], ["loc", [null, [69, 21], [69, 115]]]], "enableFilters", ["subexpr", "@mut", [["get", "enableFilters", ["loc", [null, [70, 16], [70, 29]]]]], [], []], "showFilters", ["subexpr", "@mut", [["get", "_showFilters", ["loc", [null, [71, 14], [71, 26]]]]], [], []], "showFiltersInModal", ["subexpr", "@mut", [["get", "showFiltersInModal", ["loc", [null, [72, 21], [72, 39]]]]], [], []], "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [73, 10], [73, 17]]]]], [], []], "applyFilters", ["subexpr", "action", [["subexpr", "if", [["get", "applyFilters", ["loc", [null, [74, 27], [74, 39]]]], ["get", "applyFilters", ["loc", [null, [74, 40], [74, 52]]]], "applyFilters"], [], ["loc", [null, [74, 23], [74, 68]]]]], [], ["loc", [null, [74, 15], [74, 69]]]], "componentForFilter", ["subexpr", "@mut", [["get", "componentForFilter", ["loc", [null, [75, 21], [75, 39]]]]], [], []], "componentForFilterByCondition", ["subexpr", "@mut", [["get", "componentForFilterByCondition", ["loc", [null, [76, 32], [76, 61]]]]], [], []], "conditionsByType", ["subexpr", "@mut", [["get", "conditionsByType", ["loc", [null, [77, 19], [77, 35]]]]], [], []], "filterByAnyMatch", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.filterByAnyMatch", ["loc", [null, [78, 31], [78, 58]]]], ["get", "this.attrs.filterByAnyMatch", ["loc", [null, [78, 59], [78, 86]]]], "filterByAnyMatch"], [], ["loc", [null, [78, 27], [78, 106]]]]], [], ["loc", [null, [78, 19], [78, 107]]]], "filterByAnyWord", ["subexpr", "@mut", [["get", "filterByAnyWord", ["loc", [null, [79, 18], [79, 33]]]]], [], []], "filterByAllWords", ["subexpr", "@mut", [["get", "filterByAllWords", ["loc", [null, [80, 19], [80, 35]]]]], [], []], "configurateRow", ["subexpr", "@mut", [["get", "this.attrs.configurateRow", ["loc", [null, [81, 17], [81, 42]]]]], [], []], "configurateSelectedRows", ["subexpr", "@mut", [["get", "this.attrs.configurateSelectedRows", ["loc", [null, [82, 26], [82, 60]]]]], [], []], "confirmDeleteRow", ["subexpr", "@mut", [["get", "confirmDeleteRow", ["loc", [null, [83, 19], [83, 35]]]]], [], []], "beforeDeleteRecord", ["subexpr", "@mut", [["get", "beforeDeleteRecord", ["loc", [null, [84, 21], [84, 39]]]]], [], []], "beforeDeleteAllRecords", ["subexpr", "@mut", [["get", "beforeDeleteAllRecords", ["loc", [null, [85, 25], [85, 47]]]]], [], []], "action", "objectListViewRowClick", "componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [87, 16], [87, 29]]]]], [], []], "allowColumnResize", ["subexpr", "@mut", [["get", "allowColumnResize", ["loc", [null, [88, 20], [88, 37]]]]], [], []], "selectedRecord", ["subexpr", "@mut", [["get", "selectedRecord", ["loc", [null, [89, 17], [89, 31]]]]], [], []], "notUseUserSettings", ["subexpr", "@mut", [["get", "notUseUserSettings", ["loc", [null, [90, 21], [90, 39]]]]], [], []], "isParentRecordPropertyName", ["subexpr", "@mut", [["get", "isParentRecordPropertyName", ["loc", [null, [91, 29], [91, 55]]]]], [], []], "hierarchicalIndent", ["subexpr", "@mut", [["get", "hierarchicalIndent", ["loc", [null, [92, 21], [92, 39]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "inHierarchicalMode", ["loc", [null, [93, 21], [93, 39]]]]], [], []], "inExpandMode", ["subexpr", "@mut", [["get", "inExpandMode", ["loc", [null, [94, 15], [94, 27]]]]], [], []], "disableHierarchicalMode", ["subexpr", "if", [["get", "hierarchyByAttribute", ["loc", [null, [95, 30], [95, 50]]]], true, ["get", "disableHierarchicalMode", ["loc", [null, [95, 56], [95, 79]]]]], [], ["loc", [null, [95, 26], [95, 80]]]], "loadRecords", ["subexpr", "action", ["loadRecords"], [], ["loc", [null, [96, 14], [96, 36]]]], "availableHierarchicalMode", ["subexpr", "action", ["availableHierarchicalMode"], [], ["loc", [null, [97, 28], [97, 64]]]], "hierarchyAttribute", ["subexpr", "@mut", [["get", "hierarchyAttribute", ["loc", [null, [98, 21], [98, 39]]]]], [], []], "useRowByRowLoading", ["subexpr", "@mut", [["get", "useRowByRowLoading", ["loc", [null, [99, 21], [99, 39]]]]], [], []], "useRowByRowLoadingProgress", ["subexpr", "@mut", [["get", "useRowByRowLoadingProgress", ["loc", [null, [100, 29], [100, 55]]]]], [], []], "eventsBus", ["subexpr", "@mut", [["get", "eventsBus", ["loc", [null, [101, 12], [101, 21]]]]], [], []], "onEditForm", ["subexpr", "@mut", [["get", "onEditForm", ["loc", [null, [102, 13], [102, 23]]]]], [], []], "customButtonInRowAction", "customButtonInRowAction", "customButtonsInRow", ["subexpr", "@mut", [["get", "customButtonsInRow", ["loc", [null, [104, 21], [104, 39]]]]], [], []], "defaultSortingButton", ["subexpr", "@mut", [["get", "defaultSortingButton", ["loc", [null, [105, 23], [105, 43]]]]], [], []], "defaultLeftPadding", ["subexpr", "@mut", [["get", "defaultLeftPadding", ["loc", [null, [106, 21], [106, 39]]]]], [], []], "overflowedComponents", ["subexpr", "@mut", [["get", "overflowedComponents", ["loc", [null, [107, 23], [107, 43]]]]], [], []], "fixedHeader", ["subexpr", "@mut", [["get", "fixedHeader", ["loc", [null, [108, 14], [108, 25]]]]], [], []]], ["loc", [null, [38, 0], [109, 2]]]], ["block", "if", [["subexpr", "or", [["subexpr", "not", [["get", "inHierarchicalMode", ["loc", [null, [110, 15], [110, 33]]]]], [], ["loc", [null, [110, 10], [110, 34]]]], ["get", "hierarchyPaging", ["loc", [null, [110, 35], [110, 50]]]]], [], ["loc", [null, [110, 6], [110, 51]]]]], [], 0, null, ["loc", [null, [110, 0], [169, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/flexberry-simpledatetime", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-simpledatetime.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [2, 15], [2, 19]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonlyAttr", ["loc", [null, [2, 29], [2, 41]]]]], [], []], "value", ["subexpr", "@mut", [["get", "_valueAsString", ["loc", [null, [2, 48], [2, 62]]]]], [], []], "min", ["subexpr", "@mut", [["get", "_minAsString", ["loc", [null, [2, 67], [2, 79]]]]], [], []], "max", ["subexpr", "@mut", [["get", "_maxAsString", ["loc", [null, [2, 84], [2, 96]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [2, 109], [2, 120]]]]], [], []]], ["loc", [null, [2, 2], [2, 122]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 4
              },
              "end": {
                "line": 15,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-simpledatetime.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "remove icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createAttrMorph(element0, 'title');
            morphs[2] = dom.createAttrMorph(element0, 'disabled');
            morphs[3] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui ui-clear ", ["subexpr", "if", [["get", "readonlyAttr", ["loc", [null, [8, 32], [8, 44]]]], "disabled"], [], ["loc", [null, [8, 27], [8, 57]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-lookup.remove-button-text"], [], ["loc", [null, [9, 14], [9, 68]]]]], ["attribute", "disabled", ["get", "readonlyAttr", ["loc", [null, [10, 19], [10, 31]]]]], ["element", "action", ["remove"], ["bubbles", false], ["loc", [null, [12, 8], [12, 41]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-simpledatetime.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui fluid action input flatpickr");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("input");
          dom.setAttribute(el2, "type", "text");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element2, 'placeholder');
          morphs[1] = dom.createMorphAt(element1, 3, 3);
          return morphs;
        },
        statements: [["attribute", "placeholder", ["get", "placeholder", ["loc", [null, [5, 37], [5, 48]]]]], ["block", "if", [["get", "removeButton", ["loc", [null, [6, 10], [6, 22]]]]], [], 0, null, ["loc", [null, [6, 4], [15, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-simpledatetime.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["subexpr", "and", [["get", "currentTypeSupported", ["loc", [null, [1, 11], [1, 31]]]], ["get", "useBrowserInput", ["loc", [null, [1, 32], [1, 47]]]]], [], ["loc", [null, [1, 6], [1, 48]]]]], [], 0, 1, ["loc", [null, [1, 0], [17, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/components/flexberry-simpleolv",["exports"],function(exports){exports["default"] = Ember.HTMLBars.template((function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":2,"column":2},"end":{"line":11,"column":2}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","refresh icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element52=dom.childAt(fragment,[1]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element52,'class');morphs[1] = dom.createAttrMorph(element52,'title');morphs[2] = dom.createElementMorph(element52);morphs[3] = dom.createMorphAt(element52,1,1);return morphs;},statements:[["attribute","class",["concat",["ui refresh-button ",["get","buttonClass",["loc",[null,[5,33],[5,44]]]]," button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.refresh-button-text"],[],["loc",[null,[6,12],[6,62]]]]],["element","action",["refresh"],[],["loc",[null,[7,6],[7,26]]]],["inline","t",["components.olv-toolbar.refresh-button-text"],[],["loc",[null,[8,8],[8,58]]]]],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":13,"column":4},"end":{"line":22,"column":4}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"disabled","disabled");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element51=dom.childAt(fragment,[1]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element51,'class');morphs[1] = dom.createAttrMorph(element51,'title');morphs[2] = dom.createElementMorph(element51);morphs[3] = dom.createMorphAt(element51,1,1);return morphs;},statements:[["attribute","class",["concat",["ui create-button ",["get","buttonClass",["loc",[null,[16,34],[16,45]]]]," disabled button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.add-button-text"],[],["loc",[null,[17,14],[17,60]]]]],["element","action",["createNew"],[],["loc",[null,[19,8],[19,30]]]],["inline","t",["components.olv-toolbar.add-button-text"],[],["loc",[null,[20,10],[20,56]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":22,"column":4},"end":{"line":30,"column":4}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element50=dom.childAt(fragment,[1]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element50,'class');morphs[1] = dom.createAttrMorph(element50,'title');morphs[2] = dom.createElementMorph(element50);morphs[3] = dom.createMorphAt(element50,1,1);return morphs;},statements:[["attribute","class",["concat",["ui create-button ",["get","buttonClass",["loc",[null,[25,34],[25,45]]]]," button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.add-button-text"],[],["loc",[null,[26,14],[26,60]]]]],["element","action",["createNew"],[],["loc",[null,[27,8],[27,30]]]],["inline","t",["components.olv-toolbar.add-button-text"],[],["loc",[null,[28,10],[28,56]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":12,"column":2},"end":{"line":31,"column":2}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["subexpr","or",[["get","readonly",["loc",[null,[13,14],[13,22]]]],["subexpr","not",[["get","enableCreateNewButton",["loc",[null,[13,28],[13,49]]]]],[],["loc",[null,[13,23],[13,50]]]]],[],["loc",[null,[13,10],[13,51]]]]],[],0,1,["loc",[null,[13,4],[30,11]]]]],locals:[],templates:[child0,child1]};})();var child2=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":33,"column":4},"end":{"line":43,"column":4}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"disabled","disabled");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","delete icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element49=dom.childAt(fragment,[1]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element49,'class');morphs[1] = dom.createAttrMorph(element49,'title');morphs[2] = dom.createElementMorph(element49);morphs[3] = dom.createMorphAt(element49,1,1);return morphs;},statements:[["attribute","class",["concat",["ui delete-button ",["get","buttonClass",["loc",[null,[36,34],[36,45]]]]," disabled button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.delete-button-text"],[],["loc",[null,[37,14],[37,63]]]]],["element","action",["delete"],[],["loc",[null,[39,8],[39,27]]]],["inline","t",["components.olv-toolbar.delete-button-text"],[],["loc",[null,[40,10],[40,59]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":43,"column":4},"end":{"line":52,"column":4}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","delete icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element48=dom.childAt(fragment,[1]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element48,'class');morphs[1] = dom.createAttrMorph(element48,'title');morphs[2] = dom.createElementMorph(element48);morphs[3] = dom.createMorphAt(element48,1,1);return morphs;},statements:[["attribute","class",["concat",["ui delete-button ",["get","buttonClass",["loc",[null,[46,34],[46,45]]]]," button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.delete-button-text"],[],["loc",[null,[47,14],[47,63]]]]],["element","action",["delete"],[],["loc",[null,[48,8],[48,27]]]],["inline","t",["components.olv-toolbar.delete-button-text"],[],["loc",[null,[49,10],[49,59]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":32,"column":2},"end":{"line":53,"column":2}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["subexpr","or",[["get","readonly",["loc",[null,[33,14],[33,22]]]],["subexpr","not",[["get","isDeleteButtonEnabled",["loc",[null,[33,28],[33,49]]]]],[],["loc",[null,[33,23],[33,50]]]]],[],["loc",[null,[33,10],[33,51]]]]],[],0,1,["loc",[null,[33,4],[52,11]]]]],locals:[],templates:[child0,child1]};})();var child3=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":54,"column":2},"end":{"line":62,"column":2}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","sitemap icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element47=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element47,'class');morphs[1] = dom.createAttrMorph(element47,'title');morphs[2] = dom.createElementMorph(element47);return morphs;},statements:[["attribute","class",["concat",["ui button icon hierarchical-button ",["get","buttonClass",["loc",[null,[57,50],[57,61]]]]," ",["subexpr","if",[["get","inHierarchicalMode",["loc",[null,[57,69],[57,87]]]],"active"],[],["loc",[null,[57,64],[57,98]]]]]]],["attribute","title",["subexpr","t",["components.olv-toolbar.hierarchy-button-text"],[],["loc",[null,[58,12],[58,64]]]]],["element","action",["switchHierarchicalMode"],[],["loc",[null,[59,6],[59,41]]]]],locals:[],templates:[]};})();var child4=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":72,"column":6},"end":{"line":81,"column":6}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","or");dom.setAttribute(el1,"data-text","•");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n        ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","remove icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element44=dom.childAt(fragment,[3]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element44,'class');morphs[1] = dom.createAttrMorph(element44,'title');morphs[2] = dom.createElementMorph(element44);return morphs;},statements:[["attribute","class",["concat",["ui button removeFilter-button ",["get","buttonClass",["loc",[null,[76,49],[76,60]]]]]]],["attribute","title",["subexpr","t",["components.olv-toolbar.remove-filter-button-text"],[],["loc",[null,[77,16],[77,72]]]]],["element","action",["resetFilters",["get","this.attrs.resetFilters",["loc",[null,[78,34],[78,57]]]]],[],["loc",[null,[78,10],[78,59]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":63,"column":2},"end":{"line":83,"column":2}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui icon buttons filter-active");var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","filter icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element45=dom.childAt(fragment,[1]);var element46=dom.childAt(element45,[1]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element46,'class');morphs[1] = dom.createAttrMorph(element46,'title');morphs[2] = dom.createElementMorph(element46);morphs[3] = dom.createMorphAt(element45,3,3);return morphs;},statements:[["attribute","class",["concat",["ui button ",["get","buttonClass",["loc",[null,[67,27],[67,38]]]]," ",["subexpr","if",[["get","showFilters",["loc",[null,[67,46],[67,57]]]],"active"],[],["loc",[null,[67,41],[67,68]]]]]]],["attribute","title",["subexpr","t",["components.olv-toolbar.filter-button-text"],[],["loc",[null,[68,14],[68,63]]]]],["element","action",["toggleStateFilters"],[],["loc",[null,[69,8],[69,39]]]],["block","if",[["get","filters",["loc",[null,[72,12],[72,19]]]]],[],0,null,["loc",[null,[72,6],[81,13]]]]],locals:[],templates:[child0]};})();var child5=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":84,"column":2},"end":{"line":109,"column":2}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui action input");var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","block-action-input");var el3=dom.createTextNode("\n        ");dom.appendChild(el2,el3);var el3=dom.createElement("input");dom.setAttribute(el3,"type","text");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","search icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","remove icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element40=dom.childAt(fragment,[1]);var element41=dom.childAt(element40,[1,1]);var element42=dom.childAt(element40,[3]);var element43=dom.childAt(element40,[5]);var morphs=new Array(9);morphs[0] = dom.createAttrMorph(element41,'value');morphs[1] = dom.createAttrMorph(element41,'placeholder');morphs[2] = dom.createAttrMorph(element41,'onkeyup');morphs[3] = dom.createAttrMorph(element42,'class');morphs[4] = dom.createAttrMorph(element42,'title');morphs[5] = dom.createElementMorph(element42);morphs[6] = dom.createAttrMorph(element43,'class');morphs[7] = dom.createAttrMorph(element43,'title');morphs[8] = dom.createElementMorph(element43);return morphs;},statements:[["attribute","value",["get","filterByAnyMatchText",["loc",[null,[89,18],[89,38]]]]],["attribute","placeholder",["subexpr","t",["components.olv-toolbar.filter-by-any-match-placeholder"],[],["loc",[null,[90,22],[90,84]]]]],["attribute","onkeyup",["subexpr","action",["filterByAnyMatch"],[],["loc",[null,[91,18],[91,47]]]]],["attribute","class",["concat",["ui ",["get","buttonClass",["loc",[null,[96,20],[96,31]]]]," icon button search-button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.search-button-text"],[],["loc",[null,[97,14],[97,63]]]]],["element","action",["filterByAnyMatch"],[],["loc",[null,[98,8],[98,37]]]],["attribute","class",["concat",["ui ",["get","buttonClass",["loc",[null,[103,20],[103,31]]]]," icon button clear-search-button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.clear-search-button-text"],[],["loc",[null,[104,14],[104,69]]]]],["element","action",["removeFilter"],[],["loc",[null,[105,8],[105,33]]]]],locals:[],templates:[]};})();var child6=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":110,"column":2},"end":{"line":124,"column":2}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui buttons export-config");var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","large file excel outline icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element38=dom.childAt(fragment,[1]);var element39=dom.childAt(element38,[1]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element39,'class');morphs[1] = dom.createAttrMorph(element39,'title');morphs[2] = dom.createElementMorph(element39);morphs[3] = dom.createMorphAt(element38,3,3);return morphs;},statements:[["attribute","class",["concat",["ui button icon export-button ",["get","buttonClass",["loc",[null,[114,46],[114,57]]]]]]],["attribute","title",["subexpr","t",["components.olv-toolbar.export-excel-button-text"],[],["loc",[null,[115,14],[115,69]]]]],["element","action",["showExportDialog"],[],["loc",[null,[116,8],[116,37]]]],["inline","flexberry-menu",[],["items",["subexpr","@mut",[["get","exportExcelItems",["loc",[null,[120,14],[120,30]]]]],[],[]],"onItemClick",["subexpr","action",["onExportMenuItemClick"],[],["loc",[null,[121,20],[121,52]]]]],["loc",[null,[119,6],[122,8]]]]],locals:[],templates:[]};})();var child7=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":134,"column":6},"end":{"line":139,"column":6}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","flexberry-menu",[],["items",["subexpr","@mut",[["get","colsSettingsItems",["loc",[null,[136,16],[136,33]]]]],[],[]],"onItemClick",["subexpr","action",["onMenuItemClick"],[],["loc",[null,[137,22],[137,48]]]]],["loc",[null,[135,8],[138,10]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":125,"column":2},"end":{"line":141,"column":2}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui buttons cols-config");var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");dom.setAttribute(el2,"class","ui icon button config-button");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","large table icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element36=dom.childAt(fragment,[1]);var element37=dom.childAt(element36,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element37,'title');morphs[1] = dom.createElementMorph(element37);morphs[2] = dom.createMorphAt(element36,3,3);return morphs;},statements:[["attribute","title",["subexpr","t",["components.colsconfig-dialog-content.title"],[],["loc",[null,[130,14],[130,64]]]]],["element","action",["showConfigDialog"],[],["loc",[null,[131,8],[131,37]]]],["block","if",[["get","colsSettingsItems",["loc",[null,[134,12],[134,29]]]]],[],0,null,["loc",[null,[134,6],[139,13]]]]],locals:[],templates:[child0]};})();var child8=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":149,"column":6},"end":{"line":152,"column":6}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("i");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n        ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element34=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element34,'class');morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);return morphs;},statements:[["attribute","class",["get","customButton.iconClasses",["loc",[null,[150,19],[150,43]]]]],["content","customButton.buttonName",["loc",[null,[151,8],[151,35]]]]],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":152,"column":6},"end":{"line":154,"column":6}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["content","customButton.buttonName",["loc",[null,[153,8],[153,35]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":154,"column":6},"end":{"line":156,"column":6}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n      ");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","t",["components.olv-toolbar.custom-button-text"],[],["loc",[null,[155,8],[155,57]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":152,"column":6},"end":{"line":156,"column":6}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","customButton.buttonName",["loc",[null,[152,16],[152,39]]]]],[],0,1,["loc",[null,[152,6],[156,6]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":142,"column":2},"end":{"line":158,"column":2}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element35=dom.childAt(fragment,[1]);var morphs=new Array(5);morphs[0] = dom.createAttrMorph(element35,'class');morphs[1] = dom.createAttrMorph(element35,'title');morphs[2] = dom.createAttrMorph(element35,'disabled');morphs[3] = dom.createElementMorph(element35);morphs[4] = dom.createMorphAt(element35,1,1);return morphs;},statements:[["attribute","class",["concat",["ui ",["subexpr","if",[["get","customButton.buttonClasses",["loc",[null,[145,21],[145,47]]]],["get","customButton.buttonClasses",["loc",[null,[145,48],[145,74]]]]],[],["loc",[null,[145,16],[145,76]]]]," button"]]],["attribute","title",["subexpr","if",[["get","customButton.buttonTitle",["loc",[null,[146,17],[146,41]]]],["get","customButton.buttonTitle",["loc",[null,[146,42],[146,66]]]]],[],["loc",[null,[146,12],[146,68]]]]],["attribute","disabled",["get","customButton.disabled",["loc",[null,[147,17],[147,38]]]]],["element","action",["customButtonAction",["get","customButton.buttonAction",["loc",[null,[148,36],[148,61]]]]],[],["loc",[null,[148,6],[148,63]]]],["block","if",[["get","customButton.iconClasses",["loc",[null,[149,12],[149,36]]]]],[],0,1,["loc",[null,[149,6],[156,13]]]]],locals:["customButton"],templates:[child0,child1]};})();var child9=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":195,"column":14},"end":{"line":204,"column":14}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"disabled","disabled");var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","check-square-o icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element33=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element33,'class');morphs[1] = dom.createAttrMorph(element33,'title');morphs[2] = dom.createElementMorph(element33);return morphs;},statements:[["attribute","class",["concat",["ui check-all-at-page-button ",["get","buttonClass",["loc",[null,[198,55],[198,66]]]]," disabled button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.check-all-at-page-button-text"],[],["loc",[null,[199,24],[199,84]]]]],["element","action",["checkAllAtPage"],[],["loc",[null,[201,18],[201,45]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":204,"column":14},"end":{"line":212,"column":14}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","check-square-o icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element32=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element32,'class');morphs[1] = dom.createAttrMorph(element32,'title');morphs[2] = dom.createElementMorph(element32);return morphs;},statements:[["attribute","class",["concat",["ui check-all-at-page-button ",["get","buttonClass",["loc",[null,[207,55],[207,66]]]]," button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.check-all-at-page-button-text"],[],["loc",[null,[208,24],[208,84]]]]],["element","action",["checkAllAtPage"],[],["loc",[null,[209,18],[209,45]]]]],locals:[],templates:[]};})();var child2=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":213,"column":14},"end":{"line":222,"column":14}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"disabled","disabled");var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","check-all-square-o icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element31=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element31,'class');morphs[1] = dom.createAttrMorph(element31,'title');morphs[2] = dom.createElementMorph(element31);return morphs;},statements:[["attribute","class",["concat",["ui check-all-button ",["get","buttonClass",["loc",[null,[216,47],[216,58]]]]," ",["subexpr","if",[["get","allSelect",["loc",[null,[216,66],[216,75]]]],"activated"],[],["loc",[null,[216,61],[216,89]]]]," disabled button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.check-all-button-text"],[],["loc",[null,[217,24],[217,76]]]]],["element","action",["checkAll"],[],["loc",[null,[219,18],[219,39]]]]],locals:[],templates:[]};})();var child3=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":222,"column":14},"end":{"line":230,"column":14}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","check-all-square-o icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element30=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element30,'class');morphs[1] = dom.createAttrMorph(element30,'title');morphs[2] = dom.createElementMorph(element30);return morphs;},statements:[["attribute","class",["concat",["ui check-all-button ",["get","buttonClass",["loc",[null,[225,47],[225,58]]]]," ",["subexpr","if",[["get","allSelect",["loc",[null,[225,66],[225,75]]]],"activated"],[],["loc",[null,[225,61],[225,89]]]]," button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.check-all-button-text"],[],["loc",[null,[226,24],[226,76]]]]],["element","action",["checkAll"],[],["loc",[null,[227,18],[227,39]]]]],locals:[],templates:[]};})();var child4=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":231,"column":14},"end":{"line":239,"column":14}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","sort icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element29=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element29,'class');morphs[1] = dom.createAttrMorph(element29,'title');morphs[2] = dom.createElementMorph(element29);return morphs;},statements:[["attribute","class",["concat",["ui clear-sorting-button ",["get","buttonClass",["loc",[null,[234,51],[234,62]]]]," button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.clear-sorting-button-text"],[],["loc",[null,[235,24],[235,80]]]]],["element","action",["clearSorting"],[],["loc",[null,[236,18],[236,43]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":194,"column":12},"end":{"line":240,"column":12}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(3);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[2] = dom.createMorphAt(fragment,2,2,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["subexpr","or",[["get","readonly",["loc",[null,[195,24],[195,32]]]],["get","allSelect",["loc",[null,[195,33],[195,42]]]]],[],["loc",[null,[195,20],[195,43]]]]],[],0,1,["loc",[null,[195,14],[212,21]]]],["block","if",[["get","readonly",["loc",[null,[213,20],[213,28]]]]],[],2,3,["loc",[null,[213,14],[230,21]]]],["block","if",[["get","defaultSortingButton",["loc",[null,[231,20],[231,40]]]]],[],4,null,["loc",[null,[231,14],[239,21]]]]],locals:[],templates:[child0,child1,child2,child3,child4]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":192,"column":8},"end":{"line":242,"column":8}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("th");dom.setAttribute(el1,"class","object-list-view-operations collapsing");dom.setAttribute(el1,"data-olv-header-property-name","OlvRowToolbar");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("          ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),1,1);return morphs;},statements:[["block","if",[["get","showCheckBoxInRow",["loc",[null,[194,18],[194,35]]]]],[],0,null,["loc",[null,[194,12],[240,19]]]]],locals:[],templates:[child0]};})();var child10=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":248,"column":16},"end":{"line":250,"column":16}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","t",[["get","column.keyLocale",["loc",[null,[249,22],[249,38]]]]],[],["loc",[null,[249,18],[249,40]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":250,"column":16},"end":{"line":252,"column":16}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["content","column.header",["loc",[null,[251,18],[251,35]]]]],locals:[],templates:[]};})();var child2=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":256,"column":20},"end":{"line":260,"column":20}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");var el2=dom.createTextNode("\n                      ▲");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element26=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element26,'title');morphs[1] = dom.createMorphAt(element26,1,1);return morphs;},statements:[["attribute","title",["concat",[["subexpr","t",["components.object-list-view.sort-ascending"],[],["loc",[null,[257,34],[257,84]]]]]]],["content","column.sortNumber",["loc",[null,[258,23],[258,44]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":260,"column":20},"end":{"line":264,"column":20}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");var el2=dom.createTextNode("\n                      ▼");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element25=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element25,'title');morphs[1] = dom.createMorphAt(element25,1,1);return morphs;},statements:[["attribute","title",["concat",[["subexpr","t",["components.object-list-view.sort-descending"],[],["loc",[null,[261,34],[261,85]]]]]]],["content","column.sortNumber",["loc",[null,[262,23],[262,44]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":254,"column":16},"end":{"line":266,"column":16}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"style","float:right;");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("                  ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),1,1);return morphs;},statements:[["block","if",[["get","column.sortAscending",["loc",[null,[256,26],[256,46]]]]],[],0,1,["loc",[null,[256,20],[264,27]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":244,"column":10},"end":{"line":269,"column":10}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("th");dom.setAttribute(el1,"class","dt-head-left me class");var el2=dom.createTextNode("\n              ");dom.appendChild(el1,el2);var el2=dom.createElement("div");var el3=dom.createTextNode("\n                ");dom.appendChild(el2,el3);var el3=dom.createElement("span");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("                ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("              ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element27=dom.childAt(fragment,[1]);var element28=dom.childAt(element27,[1]);var morphs=new Array(5);morphs[0] = dom.createAttrMorph(element27,'onclick');morphs[1] = dom.createAttrMorph(element28,'data-olv-header-property-name');morphs[2] = dom.createAttrMorph(element28,'title');morphs[3] = dom.createMorphAt(dom.childAt(element28,[1]),1,1);morphs[4] = dom.createMorphAt(element28,3,3);return morphs;},statements:[["attribute","onclick",["subexpr","action",["headerCellClick",["get","column",["loc",[null,[245,82],[245,88]]]]],[],["loc",[null,[245,54],[245,91]]]]],["attribute","data-olv-header-property-name",["get","column.propName",["loc",[null,[246,51],[246,66]]]]],["attribute","title",["get","sortTitleCompute",["loc",[null,[246,77],[246,93]]]]],["block","if",[["get","column.keyLocale",["loc",[null,[248,22],[248,38]]]]],[],0,1,["loc",[null,[248,16],[252,23]]]],["block","if",[["get","column.sorted",["loc",[null,[254,22],[254,35]]]]],[],2,null,["loc",[null,[254,16],[266,23]]]]],locals:[],templates:[child0,child1,child2]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":243,"column":8},"end":{"line":270,"column":8}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","column.hide",["loc",[null,[244,20],[244,31]]]]],[],0,null,["loc",[null,[244,10],[269,21]]]]],locals:["column"],templates:[child0]};})();var child11=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":271,"column":8},"end":{"line":273,"column":8}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("th");dom.setAttribute(el1,"class","object-list-view-menu collapsing");dom.setAttribute(el1,"data-olv-header-property-name","OlvRowMenu");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child12=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":279,"column":10},"end":{"line":281,"column":10}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("td");dom.setAttribute(el1,"rowspan","1");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":285,"column":16},"end":{"line":295,"column":16}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","flexberry-dropdown",[],["value",["subexpr","@mut",[["get","column.filter.condition",["loc",[null,[287,26],[287,49]]]]],[],[]],"items",["subexpr","@mut",[["get","column.filter.conditions",["loc",[null,[288,26],[288,50]]]]],[],[]],"displayCaptions",["subexpr","not",[["subexpr","is-array",[["get","column.filter.conditions",["loc",[null,[289,51],[289,75]]]]],[],["loc",[null,[289,41],[289,76]]]]],[],["loc",[null,[289,36],[289,77]]]],"class","compact fluid","placeholder",["subexpr","t",["components.object-list-view.filter-condition"],[],["loc",[null,[291,32],[291,82]]]],"needChecksOnValue",false,"onChange",["subexpr","action",["filterConditionChanged",["get","column.filter",["loc",[null,[293,62],[293,75]]]]],[],["loc",[null,[293,29],[293,76]]]]],["loc",[null,[286,18],[294,20]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":283,"column":12},"end":{"line":297,"column":12}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("              ");dom.appendChild(el0,el1);var el1=dom.createElement("td");dom.setAttribute(el1,"class","overflowed-cell");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("              ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element22=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element22,'style');morphs[1] = dom.createMorphAt(element22,1,1);return morphs;},statements:[["attribute","style",["get","defaultPaddingStyle",["loc",[null,[284,26],[284,45]]]]],["block","if",[["get","column.filter.conditions",["loc",[null,[285,22],[285,46]]]]],[],0,null,["loc",[null,[285,16],[295,23]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":282,"column":10},"end":{"line":298,"column":10}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","column.hide",["loc",[null,[283,22],[283,33]]]]],[],0,null,["loc",[null,[283,12],[297,23]]]]],locals:["column"],templates:[child0]};})();var child2=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":299,"column":10},"end":{"line":301,"column":10}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("td");dom.setAttribute(el1,"rowspan","1");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child3=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":304,"column":10},"end":{"line":306,"column":10}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("td");dom.setAttribute(el1,"rowspan","1");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child4=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":310,"column":16},"end":{"line":329,"column":16}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","fluid action input ui");var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");dom.setAttribute(el2,"class","ui clear-filter button");var el3=dom.createTextNode("\n                      ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","remove icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                    ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element19=dom.childAt(fragment,[1]);var element20=dom.childAt(element19,[3]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(element19,1,1);morphs[1] = dom.createAttrMorph(element20,'title');morphs[2] = dom.createElementMorph(element20);return morphs;},statements:[["inline","component",[["get","column.filter.component.name",["loc",[null,[312,32],[312,60]]]]],["value",["subexpr","@mut",[["get","column.filter.pattern",["loc",[null,[313,28],[313,49]]]]],[],[]],"readonly",["subexpr","or",[["subexpr","eq",[["get","column.filter.condition",["loc",[null,[315,28],[315,51]]]],"empty"],[],["loc",[null,[315,24],[315,60]]]],["subexpr","eq",[["get","column.filter.condition",["loc",[null,[316,28],[316,51]]]],"nempty"],[],["loc",[null,[316,24],[316,61]]]]],[],["loc",[null,[314,31],[317,23]]]],"dynamicProperties",["subexpr","@mut",[["get","column.filter.component.properties",["loc",[null,[318,40],[318,74]]]]],[],[]]],["loc",[null,[312,20],[319,22]]]],["attribute","title",["subexpr","t",["components.object-list-view.clear-filter-in-column"],[],["loc",[null,[323,28],[323,86]]]]],["element","action",["clearFilterForColumn",["get","column.filter",["loc",[null,[324,54],[324,67]]]]],[],["loc",[null,[324,22],[324,69]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":308,"column":12},"end":{"line":331,"column":12}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("              ");dom.appendChild(el0,el1);var el1=dom.createElement("td");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("              ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element21=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element21,'style');morphs[1] = dom.createAttrMorph(element21,'class');morphs[2] = dom.createMorphAt(element21,1,1);return morphs;},statements:[["attribute","style",["get","defaultPaddingStyle",["loc",[null,[309,26],[309,45]]]]],["attribute","class",["concat",[["subexpr","if",[["subexpr","array-contains",[["get","overflowedComponents",["loc",[null,[309,76],[309,96]]]],["get","column.filter.component.name",["loc",[null,[309,97],[309,125]]]]],[],["loc",[null,[309,60],[309,126]]]],"overflowed-cell"],[],["loc",[null,[309,55],[309,146]]]]]]],["block","if",[["get","column.filter.component.name",["loc",[null,[310,22],[310,50]]]]],[],0,null,["loc",[null,[310,16],[329,23]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":307,"column":10},"end":{"line":332,"column":10}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","column.hide",["loc",[null,[308,22],[308,33]]]]],[],0,null,["loc",[null,[308,12],[331,23]]]]],locals:["column"],templates:[child0]};})();var child5=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":333,"column":10},"end":{"line":335,"column":10}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("td");dom.setAttribute(el1,"rowspan","1");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":277,"column":6},"end":{"line":337,"column":6}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");dom.setAttribute(el1,"class","object-list-view-filters");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n        ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");dom.setAttribute(el1,"class","object-list-view-filters");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element23=dom.childAt(fragment,[1]);var element24=dom.childAt(fragment,[3]);var morphs=new Array(7);morphs[0] = dom.createMorphAt(element23,1,1);morphs[1] = dom.createMorphAt(element23,2,2);morphs[2] = dom.createMorphAt(element23,3,3);morphs[3] = dom.createAttrMorph(element24,'onkeydown');morphs[4] = dom.createMorphAt(element24,1,1);morphs[5] = dom.createMorphAt(element24,2,2);morphs[6] = dom.createMorphAt(element24,3,3);return morphs;},statements:[["block","if",[["get","showHelperColumn",["loc",[null,[279,16],[279,32]]]]],[],0,null,["loc",[null,[279,10],[281,17]]]],["block","each",[["get","columns",["loc",[null,[282,18],[282,25]]]]],[],1,null,["loc",[null,[282,10],[298,19]]]],["block","if",[["get","showMenuColumn",["loc",[null,[299,16],[299,30]]]]],[],2,null,["loc",[null,[299,10],[301,17]]]],["attribute","onkeydown",["subexpr","action",["applyFiltersByEnter"],[],["loc",[null,[303,55],[303,87]]]]],["block","if",[["get","showHelperColumn",["loc",[null,[304,16],[304,32]]]]],[],3,null,["loc",[null,[304,10],[306,17]]]],["block","each",[["get","columns",["loc",[null,[307,18],[307,25]]]]],[],4,null,["loc",[null,[307,10],[332,19]]]],["block","if",[["get","showMenuColumn",["loc",[null,[333,16],[333,30]]]]],[],5,null,["loc",[null,[333,10],[335,17]]]]],locals:[],templates:[child0,child1,child2,child3,child4,child5]};})();var child13=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":338,"column":6},"end":{"line":344,"column":6}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("td");dom.setAttribute(el2,"style","text-align:center;");var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element18=dom.childAt(fragment,[1,1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element18,'colspan');morphs[1] = dom.createMorphAt(element18,1,1);return morphs;},statements:[["attribute","colspan",["concat",[["get","colspan",["loc",[null,[340,25],[340,32]]]]]]],["content","placeholder",["loc",[null,[341,14],[341,29]]]]],locals:[],templates:[]};})();var child14=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":351,"column":20},"end":{"line":355,"column":20}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","cell");var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element14=dom.childAt(fragment,[1,1]);var morphs=new Array(1);morphs[0] = dom.createAttrMorph(element14,'class');return morphs;},statements:[["attribute","class",["concat",["asterisk small red icon ",["subexpr","unless",[["get","record.data.hasDirtyAttributes",["loc",[null,[353,67],[353,97]]]],"transparent"],[],["loc",[null,[353,58],[353,113]]]]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":356,"column":20},"end":{"line":364,"column":20}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","cell");var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),1,1);return morphs;},statements:[["inline","flexberry-checkbox",[],["readonly",["subexpr","or",[["get","readonly",["loc",[null,[359,39],[359,47]]]],["subexpr","not",[["get","record.rowConfig.canBeSelected",["loc",[null,[359,53],[359,83]]]]],[],["loc",[null,[359,48],[359,84]]]],["get","allSelect",["loc",[null,[359,85],[359,94]]]]],[],["loc",[null,[359,35],[359,95]]]],"onChange",["subexpr","action",["selectRow",["get","record",["loc",[null,[360,55],[360,61]]]]],[],["loc",[null,[360,35],[360,62]]]],"value",["subexpr","@mut",[["get","record.selected",["loc",[null,[361,32],[361,47]]]]],[],[]]],["loc",[null,[358,24],[362,26]]]]],locals:[],templates:[]};})();var child2=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":367,"column":24},"end":{"line":376,"column":24}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                          ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"disabled","disabled");var el2=dom.createTextNode("\n                            ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","minus icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                          ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element13=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element13,'class');morphs[1] = dom.createAttrMorph(element13,'title');morphs[2] = dom.createElementMorph(element13);return morphs;},statements:[["attribute","class",["concat",["ui ui-delete object-list-view-row-delete-button ",["get","buttonClass",["loc",[null,[370,85],[370,96]]]]," disabled button"]]],["attribute","title",["subexpr","t",["components.object-list-view.menu-in-row.delete-menu-item-title"],[],["loc",[null,[371,34],[371,104]]]]],["element","action",["deleteRow",["get","record",["loc",[null,[373,49],[373,55]]]]],[],["loc",[null,[373,28],[373,57]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":376,"column":24},"end":{"line":384,"column":24}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                          ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");var el2=dom.createTextNode("\n                            ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","minus icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                          ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element12=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element12,'class');morphs[1] = dom.createAttrMorph(element12,'title');morphs[2] = dom.createElementMorph(element12);return morphs;},statements:[["attribute","class",["concat",["ui ui-delete object-list-view-row-delete-button ",["get","buttonClass",["loc",[null,[379,85],[379,96]]]]," button"]]],["attribute","title",["subexpr","t",["components.object-list-view.menu-in-row.delete-menu-item-title"],[],["loc",[null,[380,34],[380,104]]]]],["element","action",["deleteRow",["get","record",["loc",[null,[381,49],[381,55]]]]],[],["loc",[null,[381,28],[381,57]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":365,"column":20},"end":{"line":386,"column":20}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","cell");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),1,1);return morphs;},statements:[["block","if",[["subexpr","or",[["get","readonly",["loc",[null,[367,34],[367,42]]]],["subexpr","not",[["get","record.rowConfig.canBeDeleted",["loc",[null,[367,48],[367,77]]]]],[],["loc",[null,[367,43],[367,78]]]]],[],["loc",[null,[367,30],[367,79]]]]],[],0,1,["loc",[null,[367,24],[384,31]]]]],locals:[],templates:[child0,child1]};})();var child3=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":389,"column":24},"end":{"line":398,"column":24}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                          ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"disabled","disabled");var el2=dom.createTextNode("\n                            ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","edit icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                          ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element11=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element11,'class');morphs[1] = dom.createAttrMorph(element11,'title');morphs[2] = dom.createElementMorph(element11);return morphs;},statements:[["attribute","class",["concat",["ui ui-edit object-list-view-row-edit-button ",["get","buttonClass",["loc",[null,[392,81],[392,92]]]]," disabled button"]]],["attribute","title",["subexpr","t",["components.object-list-view.menu-in-row.edit-menu-item-title"],[],["loc",[null,[393,34],[393,102]]]]],["element","action",["objectListViewRowClick",["get","record",["loc",[null,[395,62],[395,68]]]],["subexpr","hash",[],["column",null,"columnIndex",null,"rowEdit",true],["loc",[null,[395,69],[395,117]]]]],[],["loc",[null,[395,28],[395,119]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":398,"column":24},"end":{"line":406,"column":24}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                          ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");var el2=dom.createTextNode("\n                            ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","edit icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                          ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element10=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element10,'class');morphs[1] = dom.createAttrMorph(element10,'title');morphs[2] = dom.createElementMorph(element10);return morphs;},statements:[["attribute","class",["concat",["ui ui-edit object-list-view-row-edit-button ",["get","buttonClass",["loc",[null,[401,81],[401,92]]]]," button"]]],["attribute","title",["subexpr","t",["components.object-list-view.menu-in-row.edit-menu-item-title"],[],["loc",[null,[402,34],[402,102]]]]],["element","action",["objectListViewRowClick",["get","record",["loc",[null,[403,62],[403,68]]]],["subexpr","hash",[],["column",null,"columnIndex",null,"rowEdit",true],["loc",[null,[403,69],[403,117]]]]],[],["loc",[null,[403,28],[403,119]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":387,"column":20},"end":{"line":408,"column":20}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","cell");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),1,1);return morphs;},statements:[["block","if",[["get","readonly",["loc",[null,[389,30],[389,38]]]]],[],0,1,["loc",[null,[389,24],[406,31]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":349,"column":16},"end":{"line":410,"column":16}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","object-list-view-helper-column-cell");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("                  ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element15=dom.childAt(fragment,[1]);var morphs=new Array(4);morphs[0] = dom.createMorphAt(element15,1,1);morphs[1] = dom.createMorphAt(element15,2,2);morphs[2] = dom.createMorphAt(element15,3,3);morphs[3] = dom.createMorphAt(element15,4,4);return morphs;},statements:[["block","if",[["get","showAsteriskInRow",["loc",[null,[351,26],[351,43]]]]],[],0,null,["loc",[null,[351,20],[355,27]]]],["block","if",[["get","showCheckBoxInRow",["loc",[null,[356,26],[356,43]]]]],[],1,null,["loc",[null,[356,20],[364,27]]]],["block","if",[["get","showDeleteButtonInRow",["loc",[null,[365,26],[365,47]]]]],[],2,null,["loc",[null,[365,20],[386,27]]]],["block","if",[["get","showEditButtonInRow",["loc",[null,[387,26],[387,45]]]]],[],3,null,["loc",[null,[387,20],[408,27]]]]],locals:[],templates:[child0,child1,child2,child3]};})();var child1=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":416,"column":20},"end":{"line":424,"column":20}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","component",[["get","column.cellComponent.componentName",["loc",[null,[417,34],[417,68]]]]],["dynamicProperties",["subexpr","@mut",[["get","column.cellComponent.componentProperties",["loc",[null,[418,42],[418,82]]]]],[],[]],"relatedModel",["subexpr","@mut",[["get","record.data",["loc",[null,[419,37],[419,48]]]]],[],[]],"value",["subexpr","mut",[["subexpr","get",[["get","record.data",["loc",[null,[420,40],[420,51]]]],["get","column.propName",["loc",[null,[420,52],[420,67]]]]],[],["loc",[null,[420,35],[420,68]]]]],[],["loc",[null,[420,30],[420,69]]]],"readonly",["subexpr","readonly-cell",[["get","record.rowConfig.readonlyColumns",["loc",[null,[421,48],[421,80]]]],["get","column.propName",["loc",[null,[421,81],[421,96]]]],["get","readonly",["loc",[null,[421,97],[421,105]]]],["get","column.cellComponent.componentProperties.readonly",["loc",[null,[421,106],[421,155]]]]],[],["loc",[null,[421,33],[421,156]]]],"required",["subexpr","@mut",[["get","required",["loc",[null,[422,33],[422,41]]]]],[],[]]],["loc",[null,[417,22],[423,24]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":424,"column":20},"end":{"line":431,"column":20}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","oveflow-text");var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),1,1);return morphs;},statements:[["inline","get-formatted",[["get","record.data",["loc",[null,[426,40],[426,51]]]],["get","column.propName",["loc",[null,[426,52],[426,67]]]]],["dateFormat",["subexpr","@mut",[["get","dateFormat",["loc",[null,[427,37],[427,47]]]]],[],[]],"moment",["subexpr","@mut",[["get","moment",["loc",[null,[428,33],[428,39]]]]],[],[]]],["loc",[null,[426,24],[429,26]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":413,"column":16},"end":{"line":433,"column":16}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createElement("td");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("                  ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element9=dom.childAt(fragment,[1]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element9,'class');morphs[1] = dom.createAttrMorph(element9,'style');morphs[2] = dom.createElementMorph(element9);morphs[3] = dom.createMorphAt(element9,1,1);return morphs;},statements:[["attribute","class",["concat",[["subexpr","if",[["subexpr","array-contains",[["get","overflowedComponents",["loc",[null,[414,50],[414,70]]]],["get","column.cellComponent.componentName",["loc",[null,[414,71],[414,105]]]]],[],["loc",[null,[414,34],[414,106]]]]," overflowed-cell"],[],["loc",[null,[414,29],[414,127]]]]]]],["attribute","style",["get","defaultPaddingStyle",["loc",[null,[415,92],[415,111]]]]],["element","action",["objectListViewRowClick",["get","record",["loc",[null,[415,54],[415,60]]]]],["preventDefault",false],["loc",[null,[415,20],[415,83]]]],["block","if",[["get","column.cellComponent.componentName",["loc",[null,[416,26],[416,60]]]]],[],0,1,["loc",[null,[416,20],[431,27]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":412,"column":14},"end":{"line":434,"column":14}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","column.hide",["loc",[null,[413,26],[413,37]]]]],[],0,null,["loc",[null,[413,16],[433,27]]]]],locals:["column"],templates:[child0]};})();var child2=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":440,"column":22},"end":{"line":445,"column":22}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");var el2=dom.createTextNode("\n                          ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","edit icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element6=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element6,'class');morphs[1] = dom.createElementMorph(element6);morphs[2] = dom.createMorphAt(dom.childAt(element6,[3]),0,0);return morphs;},statements:[["attribute","class",["concat",["item ",["subexpr","if",[["get","readonly",["loc",[null,[441,46],[441,54]]]],"disabled"],[],["loc",[null,[441,41],[441,67]]]]]]],["element","action",["objectListViewRowClick",["get","record",["loc",[null,[441,104],[441,110]]]],["subexpr","hash",[],["rowEdit",true],["loc",[null,[441,111],[441,130]]]]],[],["loc",[null,[441,69],[441,133]]]],["inline","t",["components.object-list-view.menu-in-row.edit-menu-item-title"],[],["loc",[null,[443,32],[443,100]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":446,"column":22},"end":{"line":451,"column":22}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");var el2=dom.createTextNode("\n                          ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","trash icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element5=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element5,'class');morphs[1] = dom.createElementMorph(element5);morphs[2] = dom.createMorphAt(dom.childAt(element5,[3]),0,0);return morphs;},statements:[["attribute","class",["concat",["item ",["subexpr","if",[["get","readonly",["loc",[null,[447,46],[447,54]]]],"disabled"],[],["loc",[null,[447,41],[447,67]]]]]]],["element","action",["deleteRow",["get","record",["loc",[null,[447,91],[447,97]]]]],[],["loc",[null,[447,69],[447,100]]]],["inline","t",["components.object-list-view.menu-in-row.delete-menu-item-title"],[],["loc",[null,[449,32],[449,102]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":435,"column":14},"end":{"line":455,"column":14}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("td");dom.setAttribute(el1,"class","object-list-view-menu");var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","right pointing ui icon dropdown button");var el3=dom.createTextNode("\n                    ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","list layout icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","left menu");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("                    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element7=dom.childAt(fragment,[1]);var element8=dom.childAt(element7,[1,3]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element7,'style');morphs[1] = dom.createMorphAt(element8,1,1);morphs[2] = dom.createMorphAt(element8,2,2);return morphs;},statements:[["attribute","style",["get","defaultPaddingStyle",["loc",[null,[436,58],[436,77]]]]],["block","if",[["subexpr","and",[["get","showEditMenuItemInRow",["loc",[null,[440,33],[440,54]]]],["get","record.rowConfig.canBeSelected",["loc",[null,[440,55],[440,85]]]]],[],["loc",[null,[440,28],[440,86]]]]],[],0,null,["loc",[null,[440,22],[445,29]]]],["block","if",[["subexpr","and",[["get","showDeleteMenuItemInRow",["loc",[null,[446,33],[446,56]]]],["get","record.rowConfig.canBeDeleted",["loc",[null,[446,57],[446,86]]]]],[],["loc",[null,[446,28],[446,87]]]]],[],1,null,["loc",[null,[446,22],[451,29]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":345,"column":8},"end":{"line":457,"column":8}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");var el2=dom.createTextNode("\n              ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createTextNode("\n                ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","hidden");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("              ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("            ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element16=dom.childAt(fragment,[1]);var element17=dom.childAt(element16,[1]);var morphs=new Array(7);morphs[0] = dom.createAttrMorph(element16,'class');morphs[1] = dom.createAttrMorph(element17,'class');morphs[2] = dom.createAttrMorph(element17,'style');morphs[3] = dom.createMorphAt(dom.childAt(element17,[1]),0,0);morphs[4] = dom.createMorphAt(element17,3,3);morphs[5] = dom.createMorphAt(element16,3,3);morphs[6] = dom.createMorphAt(element16,4,4);return morphs;},statements:[["attribute","class",["concat",[["get","record.rowConfig.customClass",["loc",[null,[346,25],[346,53]]]]]]],["attribute","class",["concat",["object-list-view-helper-column ",["subexpr","unless",[["get","showHelperColumn",["loc",[null,[347,65],[347,81]]]],"hidden"],[],["loc",[null,[347,56],[347,92]]]]]]],["attribute","style",["get","defaultPaddingStyle",["loc",[null,[347,102],[347,121]]]]],["content","record.key",["loc",[null,[348,36],[348,50]]]],["block","if",[["get","showHelperColumn",["loc",[null,[349,22],[349,38]]]]],[],0,null,["loc",[null,[349,16],[410,23]]]],["block","each",[["get","columns",["loc",[null,[412,22],[412,29]]]]],[],1,null,["loc",[null,[412,14],[434,23]]]],["block","if",[["get","showMenuColumn",["loc",[null,[435,20],[435,34]]]]],[],2,null,["loc",[null,[435,14],[455,21]]]]],locals:["record"],templates:[child0,child1,child2]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":344,"column":6},"end":{"line":458,"column":6}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","each",[["get","contentWithKeys",["loc",[null,[345,16],[345,31]]]]],["key","key"],0,null,["loc",[null,[345,8],[457,17]]]]],locals:[],templates:[child0]};})();var child15=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":464,"column":4},"end":{"line":467,"column":4}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"class","ui button prev-page-button");var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element4=dom.childAt(fragment,[1]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element4);return morphs;},statements:[["element","action",["previousPage",["get","this.attrs.previousPage",["loc",[null,[465,87],[465,110]]]]],[],["loc",[null,[465,63],[465,112]]]]],locals:[],templates:[]};})();var child16=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":467,"column":4},"end":{"line":470,"column":4}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"class","ui disabled button prev-page-button");dom.setAttribute(el1,"disabled","disabled");var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element3=dom.childAt(fragment,[1]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element3);return morphs;},statements:[["element","action",["previousPage",["get","this.attrs.previousPage",["loc",[null,[468,96],[468,119]]]]],[],["loc",[null,[468,72],[468,121]]]]],locals:[],templates:[]};})();var child17=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":472,"column":6},"end":{"line":474,"column":6}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui button");var el2=dom.createTextNode("...");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":475,"column":8},"end":{"line":477,"column":8}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui active button");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),0,0);return morphs;},statements:[["content","page.number",["loc",[null,[476,40],[476,55]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":477,"column":8},"end":{"line":479,"column":8}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"class","ui button");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element2=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element2);morphs[1] = dom.createMorphAt(element2,0,0);return morphs;},statements:[["element","action",["gotoPage",["get","this.attrs.gotoPage",["loc",[null,[478,70],[478,89]]]],["get","page.number",["loc",[null,[478,90],[478,101]]]]],[],["loc",[null,[478,50],[478,103]]]],["content","page.number",["loc",[null,[478,104],[478,119]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":474,"column":6},"end":{"line":480,"column":6}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","page.isCurrent",["loc",[null,[475,14],[475,28]]]]],[],0,1,["loc",[null,[475,8],[479,15]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":471,"column":4},"end":{"line":481,"column":4}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","page.isEllipsis",["loc",[null,[472,12],[472,27]]]]],[],0,1,["loc",[null,[472,6],[480,13]]]]],locals:["page"],templates:[child0,child1]};})();var child18=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":482,"column":4},"end":{"line":485,"column":4}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"class","ui button next-page-button");var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element1=dom.childAt(fragment,[1]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element1);return morphs;},statements:[["element","action",["nextPage",["get","this.attrs.nextPage",["loc",[null,[483,83],[483,102]]]]],[],["loc",[null,[483,63],[483,104]]]]],locals:[],templates:[]};})();var child19=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":485,"column":4},"end":{"line":488,"column":4}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"class","ui disabled button next-page-button");dom.setAttribute(el1,"disabled","disabled");var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element0=dom.childAt(fragment,[1]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element0);return morphs;},statements:[["element","action",["nextPage",["get","this.attrs.nextPage",["loc",[null,[486,92],[486,111]]]]],[],["loc",[null,[486,72],[486,113]]]]],locals:[],templates:[]};})();var child20=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":493,"column":8},"end":{"line":497,"column":8}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","concat",[["subexpr","t",["components.flexberry-objectlistview.showing-entries.showing"],[],["loc",[null,[495,12],[495,77]]]],["get","currentIntervalRecords",["loc",[null,[495,78],[495,100]]]],["subexpr","t",["components.flexberry-objectlistview.showing-entries.of"],[],["loc",[null,[495,101],[495,161]]]],["get","recordsTotalCount",["loc",[null,[495,162],[495,179]]]],["subexpr","t",["components.flexberry-objectlistview.showing-entries.entries"],[],["loc",[null,[495,180],[495,245]]]]],[],["loc",[null,[494,10],[496,12]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":491,"column":4},"end":{"line":499,"column":4}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","showing-entries");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),1,1);return morphs;},statements:[["block","if",[["subexpr","and",[["get","currentIntervalRecords",["loc",[null,[493,19],[493,41]]]],["get","recordsTotalCount",["loc",[null,[493,42],[493,59]]]]],[],["loc",[null,[493,14],[493,60]]]]],[],0,null,["loc",[null,[493,8],[497,15]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":{"name":"missing-wrapper","problems":["multiple-nodes"]},"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":1,"column":0},"end":{"line":503,"column":0}},"moduleName":"dummy/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui secondary menu no-margin ");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","olv-toolbar-info-modal-dialog ui small basic modal");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","ui icon header");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("i");dom.setAttribute(el4,"class","olvt icon");dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","center aligned ui grid");var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);var el4=dom.createElement("button");dom.setAttribute(el4,"type","button");dom.setAttribute(el4,"class","ui icon button olv-toolbar-info-modal-dialog-copy-button");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("i");dom.setAttribute(el5,"class","copy icon");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n    ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","actions");var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","olv-toolbar-info-modal-dialog-ok-button ui approve green inverted button");var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);var el6=dom.createElement("i");dom.setAttribute(el6,"class","remove icon");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n      ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n    ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","ui form");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","olv-toolbar-info-modal-dialog-content center aligned ui field");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("textarea");dom.setAttribute(el5,"cols","80");dom.setAttribute(el5,"rows","20");var el6=dom.createComment("");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n\n");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","object-list-view-container");var el2=dom.createTextNode("\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("table");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("thead");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("tr");var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("tbody");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui secondary menu no-margin nav-bar");var el2=dom.createTextNode("\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","ui basic buttons");var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","right menu");var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("    ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element53=dom.childAt(fragment,[0]);var element54=dom.childAt(element53,[11]);var element55=dom.childAt(element54,[3]);var element56=dom.childAt(element55,[1]);var element57=dom.childAt(fragment,[2,1]);var element58=dom.childAt(element57,[1,1]);var element59=dom.childAt(element57,[3]);var element60=dom.childAt(fragment,[4]);var element61=dom.childAt(element60,[1]);var element62=dom.childAt(element60,[3]);var morphs=new Array(26);morphs[0] = dom.createMorphAt(element53,1,1);morphs[1] = dom.createMorphAt(element53,2,2);morphs[2] = dom.createMorphAt(element53,3,3);morphs[3] = dom.createMorphAt(element53,4,4);morphs[4] = dom.createMorphAt(element53,5,5);morphs[5] = dom.createMorphAt(element53,6,6);morphs[6] = dom.createMorphAt(element53,7,7);morphs[7] = dom.createMorphAt(element53,8,8);morphs[8] = dom.createMorphAt(element53,9,9);morphs[9] = dom.createMorphAt(dom.childAt(element54,[1]),3,3);morphs[10] = dom.createAttrMorph(element56,'title');morphs[11] = dom.createElementMorph(element56);morphs[12] = dom.createMorphAt(element56,3,3);morphs[13] = dom.createMorphAt(dom.childAt(element55,[3,1]),3,3);morphs[14] = dom.createMorphAt(dom.childAt(element54,[5,1,1]),0,0);morphs[15] = dom.createAttrMorph(element57,'class');morphs[16] = dom.createMorphAt(element58,1,1);morphs[17] = dom.createMorphAt(element58,2,2);morphs[18] = dom.createMorphAt(element58,3,3);morphs[19] = dom.createMorphAt(element59,1,1);morphs[20] = dom.createMorphAt(element59,2,2);morphs[21] = dom.createMorphAt(element61,1,1);morphs[22] = dom.createMorphAt(element61,2,2);morphs[23] = dom.createMorphAt(element61,3,3);morphs[24] = dom.createMorphAt(element62,1,1);morphs[25] = dom.createMorphAt(element62,3,3);return morphs;},statements:[["block","if",[["get","refreshButton",["loc",[null,[2,8],[2,21]]]]],[],0,null,["loc",[null,[2,2],[11,9]]]],["block","if",[["get","createNewButton",["loc",[null,[12,8],[12,23]]]]],[],1,null,["loc",[null,[12,2],[31,9]]]],["block","if",[["get","deleteButton",["loc",[null,[32,8],[32,20]]]]],[],2,null,["loc",[null,[32,2],[53,9]]]],["block","if",[["get","availableHierarchicalMode",["loc",[null,[54,8],[54,33]]]]],[],3,null,["loc",[null,[54,2],[62,9]]]],["block","if",[["get","enableFilters",["loc",[null,[63,8],[63,21]]]]],[],4,null,["loc",[null,[63,2],[83,9]]]],["block","if",[["get","filterButton",["loc",[null,[84,8],[84,20]]]]],[],5,null,["loc",[null,[84,2],[109,9]]]],["block","if",[["get","exportExcelButton",["loc",[null,[110,8],[110,25]]]]],[],6,null,["loc",[null,[110,2],[124,9]]]],["block","if",[["get","colsConfigButton",["loc",[null,[125,8],[125,24]]]]],[],7,null,["loc",[null,[125,2],[141,9]]]],["block","each",[["get","customButtons",["loc",[null,[142,10],[142,23]]]]],[],8,null,["loc",[null,[142,2],[158,11]]]],["content","_infoModalDialogCaption",["loc",[null,[162,6],[162,33]]]],["attribute","title",["subexpr","t",["components.olv-toolbar.copy"],[],["loc",[null,[168,12],[168,47]]]]],["element","action",["copyJSONContent"],[],["loc",[null,[169,6],[169,34]]]],["inline","t",["components.olv-toolbar.copy"],[],["loc",[null,[171,8],[171,43]]]],["inline","t",["components.olv-toolbar.close"],[],["loc",[null,[176,8],[176,44]]]],["content","_infoModalDialogContent",["loc",[null,[182,38],[182,65]]]],["attribute","class",["concat",["object-list-view ui unstackable celled ",["subexpr","if",[["get","readonly",["loc",[null,[189,60],[189,68]]]],"readonly"],[],["loc",[null,[189,55],[189,81]]]]," ",["get","tableClass",["loc",[null,[189,84],[189,94]]]]," table"]]],["block","if",[["get","showHelperColumn",["loc",[null,[192,14],[192,30]]]]],[],9,null,["loc",[null,[192,8],[242,15]]]],["block","each",[["get","columns",["loc",[null,[243,16],[243,23]]]]],[],10,null,["loc",[null,[243,8],[270,17]]]],["block","if",[["get","showMenuColumn",["loc",[null,[271,14],[271,28]]]]],[],11,null,["loc",[null,[271,8],[273,15]]]],["block","if",[["get","showFilters",["loc",[null,[277,12],[277,23]]]]],[],12,null,["loc",[null,[277,6],[337,13]]]],["block","unless",[["get","content",["loc",[null,[338,16],[338,23]]]]],[],13,14,["loc",[null,[338,6],[458,17]]]],["block","if",[["get","hasPreviousPage",["loc",[null,[464,10],[464,25]]]]],[],15,16,["loc",[null,[464,4],[470,11]]]],["block","each",[["get","pages",["loc",[null,[471,12],[471,17]]]]],[],17,null,["loc",[null,[471,4],[481,13]]]],["block","if",[["get","hasNextPage",["loc",[null,[482,10],[482,21]]]]],[],18,19,["loc",[null,[482,4],[488,11]]]],["block","if",[["get","showShowingEntries",["loc",[null,[491,10],[491,28]]]]],[],20,null,["loc",[null,[491,4],[499,11]]]],["inline","flexberry-dropdown",[],["items",["subexpr","@mut",[["get","perPageValues",["loc",[null,[500,31],[500,44]]]]],[],[]],"value",["subexpr","@mut",[["get","perPageValue",["loc",[null,[500,51],[500,63]]]]],[],[]],"class","compact selection","onChange",["subexpr","action",["perPageClick"],[],["loc",[null,[500,99],[500,122]]]],"needChecksOnValue",false,"direction","upward"],["loc",[null,[500,4],[500,167]]]]],locals:[],templates:[child0,child1,child2,child3,child4,child5,child6,child7,child8,child9,child10,child11,child12,child13,child14,child15,child16,child17,child18,child19,child20]};})());});
define("dummy/templates/components/flexberry-tab-bar", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 4
              },
              "end": {
                "line": 8,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-tab-bar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", [["subexpr", "concat", [["get", "flexberryClassNames.tabIcon", ["loc", [null, [7, 25], [7, 52]]]], " ", ["get", "item.iconClass", ["loc", [null, [7, 57], [7, 71]]]]], [], ["loc", [null, [7, 16], [7, 73]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 4
              },
              "end": {
                "line": 10,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-tab-bar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "item.caption", ["loc", [null, [9, 6], [9, 22]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "modifiers",
            "modifiers": ["action"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-tab-bar.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createAttrMorph(element1, 'title');
          morphs[2] = dom.createAttrMorph(element1, 'data-tab');
          morphs[3] = dom.createElementMorph(element1);
          morphs[4] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "concat", [["get", "flexberryClassNames.tab", ["loc", [null, [2, 21], [2, 44]]]], " ", "tab", " ", "item", " ", ["get", "item.class", ["loc", [null, [2, 70], [2, 80]]]]], [], ["loc", [null, [2, 12], [2, 82]]]]]]], ["attribute", "title", ["concat", [["get", "item.caption", ["loc", [null, [3, 13], [3, 25]]]]]]], ["attribute", "data-tab", ["concat", [["get", "item.selector", ["loc", [null, [4, 16], [4, 29]]]]]]], ["element", "action", ["change", ["get", "item.selector", ["loc", [null, [5, 22], [5, 35]]]]], ["on", "click"], ["loc", [null, [5, 4], [5, 48]]]], ["block", "if", [["get", "item._hasIcon", ["loc", [null, [6, 10], [6, 23]]]]], [], 0, 1, ["loc", [null, [6, 4], [10, 11]]]]],
        locals: ["item"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-tab-bar.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "tabs", ["loc", [null, [1, 8], [1, 12]]]]], [], 0, null, ["loc", [null, [1, 0], [12, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/flexberry-text-cell", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-text-cell.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-text-cell oveflow-text");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createAttrMorph(element0, 'title');
        morphs[1] = dom.createMorphAt(element0, 0, 0);
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        return morphs;
      },
      statements: [["attribute", "title", ["get", "titleValue", ["loc", [null, [1, 54], [1, 64]]]]], ["content", "yield", ["loc", [null, [1, 67], [1, 76]]]], ["content", "displayValue", ["loc", [null, [1, 76], [1, 92]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-textarea", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-textarea.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "textarea", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "readonly", ["subexpr", "if", [["get", "readonly", ["loc", [null, [3, 15], [3, 23]]]], "readonly"], [], ["loc", [null, [3, 11], [3, 35]]]], "required", ["subexpr", "if", [["get", "required", ["loc", [null, [4, 15], [4, 23]]]], "required"], [], ["loc", [null, [4, 11], [4, 35]]]], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [5, 14], [5, 25]]]]], [], []], "rows", ["subexpr", "@mut", [["get", "rows", ["loc", [null, [6, 7], [6, 11]]]]], [], []], "cols", ["subexpr", "@mut", [["get", "cols", ["loc", [null, [7, 7], [7, 11]]]]], [], []], "disabled", ["subexpr", "if", [["get", "disabled", ["loc", [null, [8, 15], [8, 23]]]], "disabled"], [], ["loc", [null, [8, 11], [8, 35]]]], "maxlength", ["subexpr", "@mut", [["get", "maxlength", ["loc", [null, [9, 12], [9, 21]]]]], [], []], "selectionEnd", ["subexpr", "@mut", [["get", "selectionEnd", ["loc", [null, [10, 15], [10, 27]]]]], [], []], "selectionStart", ["subexpr", "@mut", [["get", "selectionStart", ["loc", [null, [11, 17], [11, 31]]]]], [], []], "selectionDirection", ["subexpr", "@mut", [["get", "selectionDirection", ["loc", [null, [12, 21], [12, 39]]]]], [], []], "wrap", ["subexpr", "@mut", [["get", "wrap", ["loc", [null, [13, 7], [13, 11]]]]], [], []], "autofocus", ["subexpr", "if", [["get", "autofocus", ["loc", [null, [14, 16], [14, 25]]]], "autofocus"], [], ["loc", [null, [14, 12], [14, 38]]]], "spellcheck", ["subexpr", "if", [["get", "spellcheck", ["loc", [null, [15, 17], [15, 27]]]], "spellcheck"], [], ["loc", [null, [15, 13], [15, 41]]]]], ["loc", [null, [1, 0], [16, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-textbox", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-textbox.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [3, 9], [3, 13]]]]], [], []], "value", ["subexpr", "get", [["get", "this", ["loc", [null, [4, 15], [4, 19]]]], "value"], [], ["loc", [null, [4, 10], [4, 28]]]], "readonly", "readonly", "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [6, 13], [6, 21]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [7, 16], [7, 27]]]]], [], []], "maxlength", ["subexpr", "@mut", [["get", "maxlength", ["loc", [null, [8, 14], [8, 23]]]]], [], []]], ["loc", [null, [2, 2], [9, 4]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-textbox.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [12, 9], [12, 13]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [13, 10], [13, 15]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [14, 13], [14, 21]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [15, 16], [15, 27]]]]], [], []], "maxlength", ["subexpr", "@mut", [["get", "maxlength", ["loc", [null, [16, 14], [16, 23]]]]], [], []]], ["loc", [null, [11, 2], [17, 4]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-textbox.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "readonly", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, 1, ["loc", [null, [1, 0], [18, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/components/flexberry-toggler", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-toggler.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("i");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "flexberry-toggler-caption");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(fragment, [2]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createAttrMorph(element1, 'class');
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [2]), 0, 0);
        morphs[3] = dom.createAttrMorph(element2, 'class');
        morphs[4] = dom.createMorphAt(element2, 0, 0);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["title ", ["subexpr", "if", [["get", "expanded", ["loc", [null, [1, 23], [1, 31]]]], "active"], [], ["loc", [null, [1, 18], [1, 42]]]]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "iconClass", ["loc", [null, [2, 17], [2, 26]]]], ["get", "iconClass", ["loc", [null, [2, 27], [2, 36]]]], "dropdown icon"], [], ["loc", [null, [2, 12], [2, 55]]]]]]], ["content", "currentCaption", ["loc", [null, [2, 101], [2, 119]]]], ["attribute", "class", ["concat", ["content flexberry-toggler-content ", ["subexpr", "if", [["get", "expanded", ["loc", [null, [4, 51], [4, 59]]]], "active"], [], ["loc", [null, [4, 46], [4, 70]]]]]]], ["content", "yield", ["loc", [null, [4, 72], [4, 81]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-tree", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-tree.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element2, 'class');
            morphs[1] = dom.createMorphAt(element2, 1, 1);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", [["get", "flexberryClassNames.header", ["loc", [null, [9, 18], [9, 44]]]]]]], ["content", "yield", ["loc", [null, [10, 6], [10, 15]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-tree.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "_hasHeader", ["loc", [null, [8, 8], [8, 18]]]]], [], 0, null, ["loc", [null, [8, 2], [12, 9]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 2
              },
              "end": {
                "line": 22,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-tree.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "flexberry-treenode", [], ["caption", ["subexpr", "@mut", [["get", "node.caption", ["loc", [null, [17, 14], [17, 26]]]]], [], []], "nodes", ["subexpr", "@mut", [["get", "node.nodes", ["loc", [null, [18, 12], [18, 22]]]]], [], []], "dynamicProperties", ["subexpr", "@mut", [["get", "node.dynamicProperties", ["loc", [null, [19, 24], [19, 46]]]]], [], []], "dynamicActions", ["subexpr", "@mut", [["get", "node.dynamicActions", ["loc", [null, [20, 21], [20, 40]]]]], [], []]], ["loc", [null, [16, 4], [21, 6]]]]],
          locals: ["node"],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 2
              },
              "end": {
                "line": 25,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-tree.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "yield", ["loc", [null, [24, 4], [24, 13]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 0
            },
            "end": {
              "line": 26,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-tree.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "nodes", ["loc", [null, [15, 10], [15, 15]]]]], [], 0, null, ["loc", [null, [15, 2], [22, 11]]]], ["block", "yield-slot", ["content"], [], 1, null, ["loc", [null, [23, 2], [25, 17]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 0
              },
              "end": {
                "line": 30,
                "column": 0
              }
            },
            "moduleName": "dummy/templates/components/flexberry-tree.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element1, 'class');
            morphs[1] = dom.createMorphAt(element1, 1, 1);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", [["get", "flexberryClassNames.placeholder", ["loc", [null, [27, 16], [27, 47]]]], " title"]]], ["content", "placeholder", ["loc", [null, [28, 4], [28, 19]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 0
            },
            "end": {
              "line": 30,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-tree.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "_isRoot", ["loc", [null, [26, 10], [26, 17]]]]], [], 0, null, ["loc", [null, [26, 0], [30, 0]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 2
              },
              "end": {
                "line": 36,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-tree.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", [["get", "flexberryClassNames.footer", ["loc", [null, [33, 18], [33, 44]]]]]]], ["content", "yield", ["loc", [null, [34, 6], [34, 15]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 31,
              "column": 0
            },
            "end": {
              "line": 37,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-tree.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "_hasFooter", ["loc", [null, [32, 8], [32, 18]]]]], [], 0, null, ["loc", [null, [32, 2], [36, 9]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 38,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-tree.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [5, 0], [5, 9]]]], ["block", "yield-slot", ["header"], [], 0, null, ["loc", [null, [7, 0], [13, 15]]]], ["block", "if", [["get", "_hasContent", ["loc", [null, [14, 6], [14, 17]]]]], [], 1, 2, ["loc", [null, [14, 0], [30, 7]]]], ["block", "yield-slot", ["footer"], [], 3, null, ["loc", [null, [31, 0], [37, 15]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("dummy/templates/components/flexberry-treenode", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 4
            },
            "end": {
              "line": 12,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components/flexberry-treenode.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "flexberryClassNames.expandCollapseIcon", ["loc", [null, [11, 18], [11, 56]]]], " dropdown icon"]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 4
            },
            "end": {
              "line": 15,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components/flexberry-treenode.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "style", "visibility: hidden;");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "flexberryClassNames.expandCollapseIcon", ["loc", [null, [14, 18], [14, 56]]]], " dropdown icon"]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 4
            },
            "end": {
              "line": 19,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components/flexberry-treenode.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [18, 6], [18, 15]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 2
            },
            "end": {
              "line": 26,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/flexberry-treenode.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-tree", [], ["nodes", ["subexpr", "@mut", [["get", "nodes", ["loc", [null, [24, 12], [24, 17]]]]], [], []]], ["loc", [null, [23, 4], [25, 6]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 27,
              "column": 2
            },
            "end": {
              "line": 29,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/flexberry-treenode.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [28, 4], [28, 13]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 31,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-treenode.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [2]);
        var element3 = dom.childAt(fragment, [4]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element2, 'class');
        morphs[2] = dom.createAttrMorph(element2, 'onclick');
        morphs[3] = dom.createMorphAt(element2, 1, 1);
        morphs[4] = dom.createMorphAt(element2, 3, 3);
        morphs[5] = dom.createMorphAt(element2, 5, 5);
        morphs[6] = dom.createAttrMorph(element3, 'class');
        morphs[7] = dom.createMorphAt(element3, 1, 1);
        morphs[8] = dom.createMorphAt(element3, 2, 2);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [5, 0], [5, 9]]]], ["attribute", "class", ["concat", [["get", "flexberryClassNames.header", ["loc", [null, [8, 11], [8, 37]]]], " title"]]], ["attribute", "onclick", ["subexpr", "action", ["onHeaderClick"], ["preventDefault", false], ["loc", [null, [9, 10], [9, 57]]]]], ["block", "if", [["get", "_hasContent", ["loc", [null, [10, 10], [10, 21]]]]], [], 0, 1, ["loc", [null, [10, 4], [15, 11]]]], ["content", "caption", ["loc", [null, [16, 4], [16, 15]]]], ["block", "yield-slot", ["header"], [], 2, null, ["loc", [null, [17, 4], [19, 19]]]], ["attribute", "class", ["concat", [["get", "flexberryClassNames.content", ["loc", [null, [21, 14], [21, 41]]]], " content"]]], ["block", "if", [["get", "_hasNodes", ["loc", [null, [22, 8], [22, 17]]]]], [], 3, null, ["loc", [null, [22, 2], [26, 9]]]], ["block", "yield-slot", ["content"], [], 4, null, ["loc", [null, [27, 2], [29, 17]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("dummy/templates/components/flexberry-validationmessage", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-validationmessage.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "error", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-validationsummary", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 5,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/flexberry-validationsummary.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "message", ["loc", [null, [4, 8], [4, 19]]]]],
        locals: ["message"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-validationsummary.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1, "class", "list");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "headerText", ["loc", [null, [1, 0], [1, 14]]]], ["block", "each", [["get", "messages", ["loc", [null, [3, 10], [3, 18]]]]], [], 0, null, ["loc", [null, [3, 2], [5, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/form-load-time-tracker", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/form-load-time-tracker.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(": ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(": ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
        morphs[4] = dom.createMorphAt(fragment, 10, 10, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "t", ["components.form-load-time-tracker.load-time"], [], ["loc", [null, [1, 0], [1, 51]]]], ["content", "loadTime", ["loc", [null, [1, 53], [1, 65]]]], ["inline", "t", ["components.form-load-time-tracker.render-time"], [], ["loc", [null, [2, 0], [2, 53]]]], ["content", "renderTime", ["loc", [null, [2, 55], [2, 69]]]], ["content", "yield", ["loc", [null, [3, 0], [3, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/groupedit-toolbar", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "modifiers",
            "modifiers": ["action"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/groupedit-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "plus icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element6 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element6, 'class');
          morphs[1] = dom.createAttrMorph(element6, 'title');
          morphs[2] = dom.createAttrMorph(element6, 'disabled');
          morphs[3] = dom.createElementMorph(element6);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ui-add ", ["get", "buttonClass", ["loc", [null, [4, 23], [4, 34]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.groupedit-toolbar.add-button-text"], [], ["loc", [null, [5, 10], [5, 62]]]]], ["attribute", "disabled", ["get", "readonly", ["loc", [null, [6, 15], [6, 23]]]]], ["element", "action", ["addRow"], [], ["loc", [null, [6, 26], [6, 45]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/groupedit-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "minus icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element5, 'class');
          morphs[1] = dom.createAttrMorph(element5, 'title');
          morphs[2] = dom.createAttrMorph(element5, 'disabled');
          morphs[3] = dom.createElementMorph(element5);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ui-delete ", ["subexpr", "unless", [["get", "_hasSelectedRows", ["loc", [null, [13, 33], [13, 49]]]], "disabled"], [], ["loc", [null, [13, 24], [13, 62]]]], " ", ["get", "buttonClass", ["loc", [null, [13, 65], [13, 76]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.groupedit-toolbar.delete-button-text"], [], ["loc", [null, [14, 10], [14, 65]]]]], ["attribute", "disabled", ["subexpr", "or", [["subexpr", "not", [["get", "_hasSelectedRows", ["loc", [null, [15, 23], [15, 39]]]]], [], ["loc", [null, [15, 18], [15, 40]]]], ["get", "readonly", ["loc", [null, [15, 41], [15, 49]]]]], [], ["loc", [null, [15, 13], [15, 51]]]]], ["element", "action", ["deleteRows"], [], ["loc", [null, [15, 52], [15, 75]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/groupedit-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "configure icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element4, 'class');
          morphs[1] = dom.createAttrMorph(element4, 'title');
          morphs[2] = dom.createElementMorph(element4);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ui-clear-settings ", ["get", "buttonClass", ["loc", [null, [22, 34], [22, 45]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.groupedit-toolbar.clear-settings-button-text"], [], ["loc", [null, [23, 10], [23, 73]]]]], ["element", "action", ["setDefaultSettings"], [], ["loc", [null, [24, 4], [24, 35]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 0
            },
            "end": {
              "line": 47,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/groupedit-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "arrow up icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "arrow down icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(fragment, [3]);
          var morphs = new Array(8);
          morphs[0] = dom.createAttrMorph(element2, 'class');
          morphs[1] = dom.createAttrMorph(element2, 'title');
          morphs[2] = dom.createAttrMorph(element2, 'disabled');
          morphs[3] = dom.createElementMorph(element2);
          morphs[4] = dom.createAttrMorph(element3, 'class');
          morphs[5] = dom.createAttrMorph(element3, 'title');
          morphs[6] = dom.createAttrMorph(element3, 'disabled');
          morphs[7] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ui-move-up ", ["get", "buttonClass", ["loc", [null, [32, 27], [32, 38]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.groupedit-toolbar.move-up-button-text"], [], ["loc", [null, [33, 10], [33, 66]]]]], ["attribute", "disabled", ["subexpr", "or", [["subexpr", "not", [["get", "_hasSelectedRows", ["loc", [null, [34, 23], [34, 39]]]]], [], ["loc", [null, [34, 18], [34, 40]]]], ["get", "_disableMoveUpButton", ["loc", [null, [34, 41], [34, 61]]]], ["get", "readonly", ["loc", [null, [34, 62], [34, 70]]]]], [], ["loc", [null, [34, 13], [34, 72]]]]], ["element", "action", ["moveRow", -1], [], ["loc", [null, [35, 4], [35, 27]]]], ["attribute", "class", ["concat", ["ui ui-move-down ", ["get", "buttonClass", ["loc", [null, [41, 29], [41, 40]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.groupedit-toolbar.move-down-button-text"], [], ["loc", [null, [42, 10], [42, 68]]]]], ["attribute", "disabled", ["subexpr", "or", [["subexpr", "not", [["get", "_hasSelectedRows", ["loc", [null, [43, 23], [43, 39]]]]], [], ["loc", [null, [43, 18], [43, 40]]]], ["get", "_disableMoveDownButton", ["loc", [null, [43, 41], [43, 63]]]], ["get", "readonly", ["loc", [null, [43, 64], [43, 72]]]]], [], ["loc", [null, [43, 13], [43, 74]]]]], ["element", "action", ["moveRow", 1], [], ["loc", [null, [44, 4], [44, 26]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 56,
                "column": 2
              },
              "end": {
                "line": 58,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/groupedit-toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("			");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", [["get", "customButton.iconClasses", ["loc", [null, [57, 15], [57, 39]]]], " icon"]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 58,
                "column": 2
              },
              "end": {
                "line": 60,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/groupedit-toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("			");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "if", [["get", "customButton.buttonName", ["loc", [null, [59, 8], [59, 31]]]], ["get", "customButton.buttonName", ["loc", [null, [59, 32], [59, 55]]]], ["subexpr", "t", ["components.groupedit-toolbar.custom-button-text"], [], ["loc", [null, [59, 56], [59, 109]]]]], [], ["loc", [null, [59, 3], [59, 111]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 49,
              "column": 0
            },
            "end": {
              "line": 62,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/groupedit-toolbar.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createAttrMorph(element1, 'title');
          morphs[2] = dom.createAttrMorph(element1, 'disabled');
          morphs[3] = dom.createElementMorph(element1);
          morphs[4] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["subexpr", "if", [["get", "customButton.buttonClasses", ["loc", [null, [52, 19], [52, 45]]]], ["get", "customButton.buttonClasses", ["loc", [null, [52, 46], [52, 72]]]]], [], ["loc", [null, [52, 14], [52, 74]]]], " ", ["subexpr", "if", [["get", "customButton.iconClasses", ["loc", [null, [52, 80], [52, 104]]]], "icon"], [], ["loc", [null, [52, 75], [52, 113]]]], " custom button"]]], ["attribute", "title", ["subexpr", "if", [["get", "customButton.buttonTitle", ["loc", [null, [53, 15], [53, 39]]]], ["get", "customButton.buttonTitle", ["loc", [null, [53, 40], [53, 64]]]]], [], ["loc", [null, [53, 10], [53, 66]]]]], ["attribute", "disabled", ["get", "customButton.disabled", ["loc", [null, [54, 15], [54, 36]]]]], ["element", "action", ["customButtonAction", ["get", "customButton.buttonAction", ["loc", [null, [55, 34], [55, 59]]]]], [], ["loc", [null, [55, 4], [55, 61]]]], ["block", "if", [["get", "customButton.iconClasses", ["loc", [null, [56, 8], [56, 32]]]]], [], 0, 1, ["loc", [null, [56, 2], [60, 9]]]]],
        locals: ["customButton"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 63,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/groupedit-toolbar.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        morphs[4] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "createNewButton", ["loc", [null, [1, 6], [1, 21]]]]], [], 0, null, ["loc", [null, [1, 0], [9, 7]]]], ["block", "if", [["get", "deleteButton", ["loc", [null, [10, 6], [10, 18]]]]], [], 1, null, ["loc", [null, [10, 0], [18, 7]]]], ["block", "if", [["subexpr", "and", [["get", "defaultSettingsButton", ["loc", [null, [19, 11], [19, 32]]]], ["subexpr", "not", [["get", "orderedProperty", ["loc", [null, [19, 38], [19, 53]]]]], [], ["loc", [null, [19, 33], [19, 54]]]]], [], ["loc", [null, [19, 6], [19, 55]]]]], [], 2, null, ["loc", [null, [19, 0], [27, 7]]]], ["block", "if", [["get", "arrowsButtons", ["loc", [null, [29, 6], [29, 19]]]]], [], 3, null, ["loc", [null, [29, 0], [47, 7]]]], ["block", "each", [["get", "customButtons", ["loc", [null, [49, 8], [49, 21]]]]], [], 4, null, ["loc", [null, [49, 0], [62, 9]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("dummy/templates/components/modal-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/modal-dialog.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ui centered image");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "yield", ["loc", [null, [9, 8], [9, 17]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 4
              },
              "end": {
                "line": 15,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/modal-dialog.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "description");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "yield", ["loc", [null, [13, 8], [13, 17]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 6
                },
                "end": {
                  "line": 23,
                  "column": 6
                }
              },
              "moduleName": "dummy/templates/components/modal-dialog.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "class", "ui cancel button");
              dom.setAttribute(el1, "data-dismiss", "modal");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element1, 'title');
              morphs[1] = dom.createMorphAt(element1, 1, 1);
              return morphs;
            },
            statements: [["attribute", "title", ["subexpr", "t", ["components.modal-dialog.close-button-text"], [], ["loc", [null, [20, 82], [20, 131]]]]], ["inline", "t", ["components.modal-dialog.close-button-text"], [], ["loc", [null, [21, 10], [21, 59]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 24,
                  "column": 6
                },
                "end": {
                  "line": 28,
                  "column": 6
                }
              },
              "moduleName": "dummy/templates/components/modal-dialog.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "class", "ui positive button");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element0, 'title');
              morphs[1] = dom.createMorphAt(element0, 1, 1);
              return morphs;
            },
            statements: [["attribute", "title", ["subexpr", "t", ["components.modal-dialog.ok-button-text"], [], ["loc", [null, [25, 63], [25, 109]]]]], ["inline", "t", ["components.modal-dialog.ok-button-text"], [], ["loc", [null, [26, 10], [26, 56]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 2
              },
              "end": {
                "line": 30,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/modal-dialog.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "actions");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element2, 1, 1);
            morphs[1] = dom.createMorphAt(element2, 2, 2);
            return morphs;
          },
          statements: [["block", "if", [["get", "useCloseButton", ["loc", [null, [19, 12], [19, 26]]]]], [], 0, null, ["loc", [null, [19, 6], [23, 13]]]], ["block", "if", [["get", "useOkButton", ["loc", [null, [24, 12], [24, 23]]]]], [], 1, null, ["loc", [null, [24, 6], [28, 13]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes", "wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 31,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/modal-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "close icon");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "header");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [5]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          morphs[1] = dom.createAttrMorph(element3, 'class');
          morphs[2] = dom.createMorphAt(element3, 1, 1);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "title", ["loc", [null, [4, 4], [4, 13]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "viewImageContent", ["loc", [null, [6, 19], [6, 35]]]], "image", ""], [], ["loc", [null, [6, 14], [6, 48]]]], " content"]]], ["block", "if", [["get", "viewImageContent", ["loc", [null, [7, 10], [7, 26]]]]], [], 0, 1, ["loc", [null, [7, 4], [15, 11]]]], ["block", "if", [["get", "toolbarVisible", ["loc", [null, [17, 8], [17, 22]]]]], [], 2, null, ["loc", [null, [17, 2], [30, 9]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/modal-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ui-modal", [], ["class", ["subexpr", "concat", ["flexberry-modal ", ["get", "sizeClass", ["loc", [null, [1, 45], [1, 54]]]]], [], ["loc", [null, [1, 18], [1, 55]]]]], 0, null, ["loc", [null, [1, 0], [31, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/number-input", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 40
          }
        },
        "moduleName": "dummy/templates/components/number-input.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", "number", "value", ["subexpr", "@mut", [["get", "inputValue", ["loc", [null, [1, 28], [1, 38]]]]], [], []]], ["loc", [null, [1, 0], [1, 40]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/object-list-view-cell", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/object-list-view-cell.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "oveflow-text");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createAttrMorph(element0, 'title');
        morphs[1] = dom.createMorphAt(element0, 0, 0);
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        return morphs;
      },
      statements: [["attribute", "title", ["get", "titleValue", ["loc", [null, [1, 34], [1, 44]]]]], ["content", "yield", ["loc", [null, [1, 47], [1, 56]]]], ["content", "displayValue", ["loc", [null, [1, 56], [1, 72]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/object-list-view-row", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 13,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element21 = dom.childAt(fragment, [1]);
            var element22 = dom.childAt(element21, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element21, 'class');
            morphs[1] = dom.createAttrMorph(element21, 'title');
            morphs[2] = dom.createElementMorph(element21);
            morphs[3] = dom.createAttrMorph(element22, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui ", ["get", "customButtonInRow.buttonClasses", ["loc", [null, [8, 24], [8, 55]]]], " button"]]], ["attribute", "title", ["subexpr", "if", [["get", "customButtonInRow.buttonTitle", ["loc", [null, [9, 23], [9, 52]]]], ["get", "customButtonInRow.buttonTitle", ["loc", [null, [9, 53], [9, 82]]]]], [], ["loc", [null, [9, 18], [9, 84]]]]], ["element", "action", ["customButtonInRowAction", ["get", "customButtonInRow.buttonAction", ["loc", [null, [10, 47], [10, 77]]]], ["get", "record.data", ["loc", [null, [10, 78], [10, 89]]]]], [], ["loc", [null, [10, 12], [10, 91]]]], ["attribute", "class", ["get", "customButtonInRow.buttonIcon", ["loc", [null, [11, 23], [11, 51]]]]]],
          locals: ["customButtonInRow"],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 10
                },
                "end": {
                  "line": 20,
                  "column": 10
                }
              },
              "moduleName": "dummy/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "cell asterisk-cell");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element19 = dom.childAt(fragment, [1, 1]);
              var morphs = new Array(1);
              morphs[0] = dom.createAttrMorph(element19, 'class');
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["asterisk small red icon ", ["subexpr", "unless", [["get", "record.data.hasDirtyAttributes", ["loc", [null, [18, 57], [18, 87]]]], "transparent"], [], ["loc", [null, [18, 48], [18, 103]]]]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "moduleName": "dummy/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "cell");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "or", [["get", "readonly", ["loc", [null, [24, 29], [24, 37]]]], ["subexpr", "not", [["get", "record.rowConfig.canBeSelected", ["loc", [null, [24, 43], [24, 73]]]]], [], ["loc", [null, [24, 38], [24, 74]]]], ["get", "allSelect", ["loc", [null, [24, 75], [24, 84]]]]], [], ["loc", [null, [24, 25], [24, 85]]]], "onChange", ["subexpr", "action", [["get", "selectRow", ["loc", [null, [25, 33], [25, 42]]]], ["get", "record", ["loc", [null, [25, 43], [25, 49]]]]], [], ["loc", [null, [25, 25], [25, 50]]]], "value", ["subexpr", "@mut", [["get", "record.selected", ["loc", [null, [26, 22], [26, 37]]]]], [], []]], ["loc", [null, [23, 14], [27, 16]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 32,
                    "column": 14
                  },
                  "end": {
                    "line": 40,
                    "column": 14
                  }
                },
                "moduleName": "dummy/templates/components/object-list-view-row.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "type", "button");
                dom.setAttribute(el1, "disabled", "disabled");
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("i");
                dom.setAttribute(el2, "class", "edit icon");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element18 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element18, 'class');
                morphs[1] = dom.createAttrMorph(element18, 'title');
                return morphs;
              },
              statements: [["attribute", "class", ["concat", ["ui ui-edit object-list-view-row-edit-button ", ["get", "buttonClass", ["loc", [null, [35, 71], [35, 82]]]], " disabled button"]]], ["attribute", "title", ["subexpr", "t", ["components.object-list-view.menu-in-row.edit-menu-item-title"], [], ["loc", [null, [36, 24], [36, 92]]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 40,
                    "column": 14
                  },
                  "end": {
                    "line": 48,
                    "column": 14
                  }
                },
                "moduleName": "dummy/templates/components/object-list-view-row.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "type", "button");
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("i");
                dom.setAttribute(el2, "class", "edit icon");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element17 = dom.childAt(fragment, [1]);
                var morphs = new Array(3);
                morphs[0] = dom.createAttrMorph(element17, 'class');
                morphs[1] = dom.createAttrMorph(element17, 'title');
                morphs[2] = dom.createElementMorph(element17);
                return morphs;
              },
              statements: [["attribute", "class", ["concat", ["ui ui-edit object-list-view-row-edit-button ", ["get", "buttonClass", ["loc", [null, [43, 71], [43, 82]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.object-list-view.menu-in-row.edit-menu-item-title"], [], ["loc", [null, [44, 24], [44, 92]]]]], ["element", "action", ["onRowClick", ["get", "record", ["loc", [null, [45, 40], [45, 46]]]], ["subexpr", "hash", [], ["column", null, "columnIndex", null, "rowEdit", true], ["loc", [null, [45, 47], [45, 95]]]]], [], ["loc", [null, [45, 18], [45, 97]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 30,
                  "column": 10
                },
                "end": {
                  "line": 50,
                  "column": 10
                }
              },
              "moduleName": "dummy/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "cell");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["block", "if", [["get", "readonly", ["loc", [null, [32, 20], [32, 28]]]]], [], 0, 1, ["loc", [null, [32, 14], [48, 21]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child3 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 53,
                    "column": 14
                  },
                  "end": {
                    "line": 61,
                    "column": 14
                  }
                },
                "moduleName": "dummy/templates/components/object-list-view-row.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "type", "button");
                dom.setAttribute(el1, "disabled", "disabled");
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("i");
                dom.setAttribute(el2, "class", "copy icon");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element16 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element16, 'class');
                morphs[1] = dom.createAttrMorph(element16, 'title');
                return morphs;
              },
              statements: [["attribute", "class", ["concat", ["ui ui-edit object-list-view-row-prototype-button ", ["get", "buttonClass", ["loc", [null, [56, 76], [56, 87]]]], " disabled button"]]], ["attribute", "title", ["subexpr", "t", ["components.object-list-view.menu-in-row.prototype-menu-item-title"], [], ["loc", [null, [57, 24], [57, 97]]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 61,
                    "column": 14
                  },
                  "end": {
                    "line": 69,
                    "column": 14
                  }
                },
                "moduleName": "dummy/templates/components/object-list-view-row.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "type", "button");
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("i");
                dom.setAttribute(el2, "class", "copy icon");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element15 = dom.childAt(fragment, [1]);
                var morphs = new Array(3);
                morphs[0] = dom.createAttrMorph(element15, 'class');
                morphs[1] = dom.createAttrMorph(element15, 'title');
                morphs[2] = dom.createElementMorph(element15);
                return morphs;
              },
              statements: [["attribute", "class", ["concat", ["ui ui-edit object-list-view-row-prototype-button ", ["get", "buttonClass", ["loc", [null, [64, 76], [64, 87]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.object-list-view.menu-in-row.prototype-menu-item-title"], [], ["loc", [null, [65, 24], [65, 97]]]]], ["element", "action", [["get", "createNewByPrototype", ["loc", [null, [66, 27], [66, 47]]]], ["subexpr", "get", [["get", "record", ["loc", [null, [66, 53], [66, 59]]]], "data.id"], [], ["loc", [null, [66, 48], [66, 70]]]]], [], ["loc", [null, [66, 18], [66, 72]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 71,
                  "column": 10
                }
              },
              "moduleName": "dummy/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "cell");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["block", "if", [["get", "readonly", ["loc", [null, [53, 20], [53, 28]]]]], [], 0, 1, ["loc", [null, [53, 14], [69, 21]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child4 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 74,
                    "column": 14
                  },
                  "end": {
                    "line": 82,
                    "column": 14
                  }
                },
                "moduleName": "dummy/templates/components/object-list-view-row.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "type", "button");
                dom.setAttribute(el1, "disabled", "disabled");
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("i");
                dom.setAttribute(el2, "class", "minus icon");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element14 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element14, 'class');
                morphs[1] = dom.createAttrMorph(element14, 'title');
                return morphs;
              },
              statements: [["attribute", "class", ["concat", ["ui ui-delete object-list-view-row-delete-button ", ["get", "buttonClass", ["loc", [null, [77, 75], [77, 86]]]], " disabled button"]]], ["attribute", "title", ["subexpr", "t", ["components.object-list-view.menu-in-row.delete-menu-item-title"], [], ["loc", [null, [78, 24], [78, 94]]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 82,
                    "column": 14
                  },
                  "end": {
                    "line": 90,
                    "column": 14
                  }
                },
                "moduleName": "dummy/templates/components/object-list-view-row.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "type", "button");
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("i");
                dom.setAttribute(el2, "class", "minus icon");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element13 = dom.childAt(fragment, [1]);
                var morphs = new Array(3);
                morphs[0] = dom.createAttrMorph(element13, 'class');
                morphs[1] = dom.createAttrMorph(element13, 'title');
                morphs[2] = dom.createElementMorph(element13);
                return morphs;
              },
              statements: [["attribute", "class", ["concat", ["ui ui-delete object-list-view-row-delete-button ", ["get", "buttonClass", ["loc", [null, [85, 75], [85, 86]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.object-list-view.menu-in-row.delete-menu-item-title"], [], ["loc", [null, [86, 24], [86, 94]]]]], ["element", "action", [["get", "deleteRow", ["loc", [null, [87, 27], [87, 36]]]], ["get", "record", ["loc", [null, [87, 37], [87, 43]]]]], [], ["loc", [null, [87, 18], [87, 45]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 72,
                  "column": 10
                },
                "end": {
                  "line": 92,
                  "column": 10
                }
              },
              "moduleName": "dummy/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "cell");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [74, 24], [74, 32]]]], ["subexpr", "not", [["get", "record.rowConfig.canBeDeleted", ["loc", [null, [74, 38], [74, 67]]]]], [], ["loc", [null, [74, 33], [74, 68]]]]], [], ["loc", [null, [74, 20], [74, 69]]]]], [], 0, 1, ["loc", [null, [74, 14], [90, 21]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 6
              },
              "end": {
                "line": 94,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "object-list-view-helper-column-cell");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element20 = dom.childAt(fragment, [1]);
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(element20, 1, 1);
            morphs[1] = dom.createMorphAt(element20, 2, 2);
            morphs[2] = dom.createMorphAt(element20, 3, 3);
            morphs[3] = dom.createMorphAt(element20, 4, 4);
            morphs[4] = dom.createMorphAt(element20, 5, 5);
            return morphs;
          },
          statements: [["block", "if", [["get", "showAsteriskInRow", ["loc", [null, [16, 16], [16, 33]]]]], [], 0, null, ["loc", [null, [16, 10], [20, 17]]]], ["block", "if", [["get", "showCheckBoxInRow", ["loc", [null, [21, 16], [21, 33]]]]], [], 1, null, ["loc", [null, [21, 10], [29, 17]]]], ["block", "if", [["get", "showEditButtonInRow", ["loc", [null, [30, 16], [30, 35]]]]], [], 2, null, ["loc", [null, [30, 10], [50, 17]]]], ["block", "if", [["get", "showPrototypeButtonInRow", ["loc", [null, [51, 16], [51, 40]]]]], [], 3, null, ["loc", [null, [51, 10], [71, 17]]]], ["block", "if", [["get", "showDeleteButtonInRow", ["loc", [null, [72, 16], [72, 37]]]]], [], 4, null, ["loc", [null, [72, 10], [92, 17]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.4.6",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 111,
                        "column": 14
                      },
                      "end": {
                        "line": 120,
                        "column": 14
                      }
                    },
                    "moduleName": "dummy/templates/components/object-list-view-row.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("button");
                    dom.setAttribute(el1, "type", "button");
                    var el2 = dom.createTextNode("\n                  ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("i");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element10 = dom.childAt(fragment, [1]);
                    var element11 = dom.childAt(element10, [1]);
                    var morphs = new Array(4);
                    morphs[0] = dom.createAttrMorph(element10, 'class');
                    morphs[1] = dom.createAttrMorph(element10, 'title');
                    morphs[2] = dom.createElementMorph(element10);
                    morphs[3] = dom.createAttrMorph(element11, 'class');
                    return morphs;
                  },
                  statements: [["attribute", "class", ["concat", ["ui button hierarchy-expand icon mini compact ", ["subexpr", "if", [["get", "_recordsIsLoading", ["loc", [null, [114, 75], [114, 92]]]], "loading"], [], ["loc", [null, [114, 70], [114, 104]]]], " ", ["get", "buttonClass", ["loc", [null, [114, 107], [114, 118]]]]]]], ["attribute", "title", ["subexpr", "t", [["subexpr", "concat", ["components.object-list-view.hierarchy-buttons.", ["subexpr", "if", [["get", "_expanded", ["loc", [null, [115, 89], [115, 98]]]], "minus", "plus"], [], ["loc", [null, [115, 85], [115, 114]]]], "-button-title"], [], ["loc", [null, [115, 28], [115, 131]]]]], [], ["loc", [null, [115, 24], [115, 133]]]]], ["element", "action", [["subexpr", "if", [["get", "recordsLoaded", ["loc", [null, [116, 31], [116, 44]]]], "expand", "loadChildRecords"], [], ["loc", [null, [116, 27], [116, 73]]]]], ["bubbles", false], ["loc", [null, [116, 18], [116, 89]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "_expanded", ["loc", [null, [118, 33], [118, 42]]]], "minus", "plus"], [], ["loc", [null, [118, 28], [118, 59]]]], " hierarchy-expand icon"]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 103,
                      "column": 12
                    },
                    "end": {
                      "line": 121,
                      "column": 12
                    }
                  },
                  "moduleName": "dummy/templates/components/object-list-view-row.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["subexpr", "and", [["subexpr", "not", [["get", "index", ["loc", [null, [111, 30], [111, 35]]]]], [], ["loc", [null, [111, 25], [111, 36]]]], ["get", "inHierarchicalMode", ["loc", [null, [111, 37], [111, 55]]]], ["subexpr", "or", [["get", "isParentRecord", ["loc", [null, [111, 60], [111, 74]]]], ["get", "hasRecords", ["loc", [null, [111, 75], [111, 85]]]]], [], ["loc", [null, [111, 56], [111, 86]]]]], [], ["loc", [null, [111, 20], [111, 87]]]]], [], 0, null, ["loc", [null, [111, 14], [120, 21]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 102,
                    "column": 10
                  },
                  "end": {
                    "line": 122,
                    "column": 10
                  }
                },
                "moduleName": "dummy/templates/components/object-list-view-row.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "component", [["get", "column.cellComponent.componentName", ["loc", [null, [103, 25], [103, 59]]]]], ["dynamicProperties", ["subexpr", "@mut", [["get", "column.cellComponent.componentProperties", ["loc", [null, [104, 32], [104, 72]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "record.data", ["loc", [null, [105, 27], [105, 38]]]]], [], []], "value", ["subexpr", "mut", [["subexpr", "get", [["get", "record.data", ["loc", [null, [106, 30], [106, 41]]]], ["get", "column.propName", ["loc", [null, [106, 42], [106, 57]]]]], [], ["loc", [null, [106, 25], [106, 58]]]]], [], ["loc", [null, [106, 20], [106, 59]]]], "readonly", ["subexpr", "readonly-cell", [["get", "record.rowConfig.readonlyColumns", ["loc", [null, [107, 38], [107, 70]]]], ["get", "column.propName", ["loc", [null, [107, 71], [107, 86]]]], ["get", "readonly", ["loc", [null, [107, 87], [107, 95]]]], ["get", "column.cellComponent.componentProperties.readonly", ["loc", [null, [107, 96], [107, 145]]]]], [], ["loc", [null, [107, 23], [107, 146]]]], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [108, 23], [108, 31]]]]], [], []], "componentName", ["subexpr", "concat", ["(", ["get", "folvComponentName", ["loc", [null, [109, 40], [109, 57]]]], "_", ["get", "column.cellComponent.componentName", ["loc", [null, [109, 62], [109, 96]]]], "_", ["get", "column.propName", ["loc", [null, [109, 101], [109, 116]]]], ")"], [], ["loc", [null, [109, 28], [109, 121]]]]], 0, null, ["loc", [null, [103, 12], [121, 26]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 131,
                      "column": 12
                    },
                    "end": {
                      "line": 136,
                      "column": 12
                    }
                  },
                  "moduleName": "dummy/templates/components/object-list-view-row.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "get", [["get", "record.data", ["loc", [null, [133, 27], [133, 38]]]], ["subexpr", "concat", ["errors.", ["get", "column.propName", ["loc", [null, [133, 57], [133, 72]]]]], [], ["loc", [null, [133, 39], [133, 73]]]]], [], ["loc", [null, [133, 22], [133, 74]]]], "pointing", "pointing"], ["loc", [null, [132, 14], [135, 16]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 122,
                    "column": 10
                  },
                  "end": {
                    "line": 137,
                    "column": 10
                  }
                },
                "moduleName": "dummy/templates/components/object-list-view-row.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "component", [["get", "column.cellComponent.componentName", ["loc", [null, [123, 24], [123, 58]]]]], ["dynamicProperties", ["subexpr", "@mut", [["get", "column.cellComponent.componentProperties", ["loc", [null, [124, 32], [124, 72]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "record.data", ["loc", [null, [125, 27], [125, 38]]]]], [], []], "value", ["subexpr", "mut", [["subexpr", "get", [["get", "record.data", ["loc", [null, [126, 30], [126, 41]]]], ["get", "column.propName", ["loc", [null, [126, 42], [126, 57]]]]], [], ["loc", [null, [126, 25], [126, 58]]]]], [], ["loc", [null, [126, 20], [126, 59]]]], "readonly", ["subexpr", "readonly-cell", [["get", "record.rowConfig.readonlyColumns", ["loc", [null, [127, 38], [127, 70]]]], ["get", "column.propName", ["loc", [null, [127, 71], [127, 86]]]], ["get", "readonly", ["loc", [null, [127, 87], [127, 95]]]], ["get", "column.cellComponent.componentProperties.readonly", ["loc", [null, [127, 96], [127, 145]]]]], [], ["loc", [null, [127, 23], [127, 146]]]], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [128, 23], [128, 31]]]]], [], []], "componentName", ["subexpr", "concat", ["(", ["get", "folvComponentName", ["loc", [null, [129, 40], [129, 57]]]], "_", ["get", "column.cellComponent.componentName", ["loc", [null, [129, 62], [129, 96]]]], "_", ["get", "column.propName", ["loc", [null, [129, 101], [129, 116]]]], ")"], [], ["loc", [null, [129, 28], [129, 121]]]]], ["loc", [null, [123, 12], [130, 14]]]], ["block", "if", [["get", "showValidationMessages", ["loc", [null, [131, 18], [131, 40]]]]], [], 0, null, ["loc", [null, [131, 12], [136, 19]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 101,
                  "column": 8
                },
                "end": {
                  "line": 138,
                  "column": 8
                }
              },
              "moduleName": "dummy/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "inHierarchicalMode", ["loc", [null, [102, 16], [102, 34]]]]], [], 0, 1, ["loc", [null, [102, 10], [137, 17]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 140,
                    "column": 12
                  },
                  "end": {
                    "line": 149,
                    "column": 12
                  }
                },
                "moduleName": "dummy/templates/components/object-list-view-row.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "type", "button");
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("i");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n              ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element7 = dom.childAt(fragment, [1]);
                var element8 = dom.childAt(element7, [1]);
                var morphs = new Array(4);
                morphs[0] = dom.createAttrMorph(element7, 'class');
                morphs[1] = dom.createAttrMorph(element7, 'title');
                morphs[2] = dom.createElementMorph(element7);
                morphs[3] = dom.createAttrMorph(element8, 'class');
                return morphs;
              },
              statements: [["attribute", "class", ["concat", ["ui button hierarchy-expand icon mini compact ", ["subexpr", "if", [["get", "_recordsIsLoading", ["loc", [null, [143, 73], [143, 90]]]], "loading"], [], ["loc", [null, [143, 68], [143, 102]]]], " ", ["get", "buttonClass", ["loc", [null, [143, 105], [143, 116]]]]]]], ["attribute", "title", ["subexpr", "t", [["subexpr", "concat", ["components.object-list-view.hierarchy-buttons.", ["subexpr", "if", [["get", "_expanded", ["loc", [null, [144, 87], [144, 96]]]], "minus", "plus"], [], ["loc", [null, [144, 83], [144, 112]]]], "-button-title"], [], ["loc", [null, [144, 26], [144, 129]]]]], [], ["loc", [null, [144, 22], [144, 131]]]]], ["element", "action", [["subexpr", "if", [["get", "recordsLoaded", ["loc", [null, [145, 29], [145, 42]]]], "expand", "loadChildRecords"], [], ["loc", [null, [145, 25], [145, 71]]]]], ["bubbles", false], ["loc", [null, [145, 16], [145, 87]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "_expanded", ["loc", [null, [147, 31], [147, 40]]]], "minus", "plus"], [], ["loc", [null, [147, 26], [147, 57]]]], " hierarchy-expand icon"]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 138,
                  "column": 8
                },
                "end": {
                  "line": 155,
                  "column": 8
                }
              },
              "moduleName": "dummy/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "oveflow-text");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element9 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(element9, 1, 1);
              morphs[1] = dom.createMorphAt(element9, 3, 3);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "and", [["subexpr", "not", [["get", "index", ["loc", [null, [140, 28], [140, 33]]]]], [], ["loc", [null, [140, 23], [140, 34]]]], ["get", "inHierarchicalMode", ["loc", [null, [140, 35], [140, 53]]]], ["subexpr", "or", [["get", "isParentRecord", ["loc", [null, [140, 58], [140, 72]]]], ["get", "hasRecords", ["loc", [null, [140, 73], [140, 83]]]]], [], ["loc", [null, [140, 54], [140, 84]]]]], [], ["loc", [null, [140, 18], [140, 85]]]]], [], 0, null, ["loc", [null, [140, 12], [149, 19]]]], ["inline", "get-formatted", [["get", "record.data", ["loc", [null, [150, 28], [150, 39]]]], ["get", "column.propName", ["loc", [null, [150, 40], [150, 55]]]]], ["dateFormat", ["subexpr", "@mut", [["get", "dateFormat", ["loc", [null, [151, 25], [151, 35]]]]], [], []], "moment", ["subexpr", "@mut", [["get", "moment", ["loc", [null, [152, 21], [152, 27]]]]], [], []]], ["loc", [null, [150, 12], [153, 14]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 96,
                "column": 4
              },
              "end": {
                "line": 157,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element12 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element12, 'class');
            morphs[1] = dom.createAttrMorph(element12, 'style');
            morphs[2] = dom.createElementMorph(element12);
            morphs[3] = dom.createMorphAt(element12, 1, 1);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["subexpr", "and", [["get", "showValidationMessages", ["loc", [null, [99, 31], [99, 53]]]], ["subexpr", "get", [["get", "record.data", ["loc", [null, [99, 59], [99, 70]]]], ["subexpr", "concat", ["errors.", ["get", "column.propName", ["loc", [null, [99, 89], [99, 104]]]], ".length"], [], ["loc", [null, [99, 71], [99, 115]]]]], [], ["loc", [null, [99, 54], [99, 116]]]]], [], ["loc", [null, [99, 26], [99, 117]]]], "error"], [], ["loc", [null, [99, 21], [99, 127]]]], " ", ["subexpr", "if", [["subexpr", "array-contains", [["get", "overflowedComponents", ["loc", [null, [99, 149], [99, 169]]]], ["get", "column.cellComponent.componentName", ["loc", [null, [99, 170], [99, 204]]]]], [], ["loc", [null, [99, 133], [99, 205]]]], " overflowed-cell"], [], ["loc", [null, [99, 128], [99, 226]]]]]]], ["attribute", "style", ["subexpr", "if", [["subexpr", "and", [["subexpr", "not", [["get", "index", ["loc", [null, [100, 29], [100, 34]]]]], [], ["loc", [null, [100, 24], [100, 35]]]], ["get", "inHierarchicalMode", ["loc", [null, [100, 36], [100, 54]]]]], [], ["loc", [null, [100, 19], [100, 55]]]], ["get", "hierarchicalIndentStyle", ["loc", [null, [100, 56], [100, 79]]]], ["get", "defaultPaddingStyle", ["loc", [null, [100, 80], [100, 99]]]]], [], ["loc", [null, [100, 14], [100, 101]]]]], ["element", "action", ["onRowClick", ["get", "record", ["loc", [null, [98, 30], [98, 36]]]], ["subexpr", "hash", [], ["column", ["get", "column", ["loc", [null, [98, 50], [98, 56]]]], "columnIndex", ["get", "index", ["loc", [null, [98, 69], [98, 74]]]]], ["loc", [null, [98, 37], [98, 75]]]]], ["preventDefault", false], ["loc", [null, [98, 8], [98, 98]]]], ["block", "if", [["get", "column.cellComponent.componentName", ["loc", [null, [101, 14], [101, 48]]]]], [], 0, 1, ["loc", [null, [101, 8], [155, 15]]]]],
          locals: ["column", "index"],
          templates: [child0, child1]
        };
      })();
      var child3 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 164,
                    "column": 14
                  },
                  "end": {
                    "line": 169,
                    "column": 14
                  }
                },
                "moduleName": "dummy/templates/components/object-list-view-row.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "item disabled edit-menu");
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("i");
                dom.setAttribute(el2, "class", "edit icon");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 0, 0);
                return morphs;
              },
              statements: [["inline", "t", ["components.object-list-view.menu-in-row.edit-menu-item-title"], [], ["loc", [null, [167, 24], [167, 92]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 169,
                    "column": 14
                  },
                  "end": {
                    "line": 174,
                    "column": 14
                  }
                },
                "moduleName": "dummy/templates/components/object-list-view-row.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "item edit-menu");
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("i");
                dom.setAttribute(el2, "class", "edit icon");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element4 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createElementMorph(element4);
                morphs[1] = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
                return morphs;
              },
              statements: [["element", "action", ["onRowClick", ["get", "record", ["loc", [null, [170, 66], [170, 72]]]], ["subexpr", "hash", [], ["column", null, "columnIndex", null, "rowEdit", true], ["loc", [null, [170, 73], [170, 121]]]]], [], ["loc", [null, [170, 44], [170, 123]]]], ["inline", "t", ["components.object-list-view.menu-in-row.edit-menu-item-title"], [], ["loc", [null, [172, 24], [172, 92]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 163,
                  "column": 12
                },
                "end": {
                  "line": 175,
                  "column": 12
                }
              },
              "moduleName": "dummy/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "readonly", ["loc", [null, [164, 20], [164, 28]]]]], [], 0, 1, ["loc", [null, [164, 14], [174, 21]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 177,
                    "column": 14
                  },
                  "end": {
                    "line": 182,
                    "column": 14
                  }
                },
                "moduleName": "dummy/templates/components/object-list-view-row.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "item disabled prototype-menu");
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("i");
                dom.setAttribute(el2, "class", "copy icon");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 0, 0);
                return morphs;
              },
              statements: [["inline", "t", ["components.object-list-view.menu-in-row.prototype-menu-item-title"], [], ["loc", [null, [180, 24], [180, 97]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 182,
                    "column": 14
                  },
                  "end": {
                    "line": 187,
                    "column": 14
                  }
                },
                "moduleName": "dummy/templates/components/object-list-view-row.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "item prototype-menu");
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("i");
                dom.setAttribute(el2, "class", "copy icon");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element3 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createElementMorph(element3);
                morphs[1] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
                return morphs;
              },
              statements: [["element", "action", [["get", "createNewByPrototype", ["loc", [null, [183, 58], [183, 78]]]], ["subexpr", "get", [["get", "record", ["loc", [null, [183, 84], [183, 90]]]], "data.id"], [], ["loc", [null, [183, 79], [183, 101]]]]], [], ["loc", [null, [183, 49], [183, 103]]]], ["inline", "t", ["components.object-list-view.menu-in-row.prototype-menu-item-title"], [], ["loc", [null, [185, 24], [185, 97]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 176,
                  "column": 12
                },
                "end": {
                  "line": 188,
                  "column": 12
                }
              },
              "moduleName": "dummy/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "readonly", ["loc", [null, [177, 20], [177, 28]]]]], [], 0, 1, ["loc", [null, [177, 14], [187, 21]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child2 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 190,
                    "column": 14
                  },
                  "end": {
                    "line": 195,
                    "column": 14
                  }
                },
                "moduleName": "dummy/templates/components/object-list-view-row.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "item disabled delete-menu");
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("i");
                dom.setAttribute(el2, "class", "trash icon");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 0, 0);
                return morphs;
              },
              statements: [["inline", "t", ["components.object-list-view.menu-in-row.delete-menu-item-title"], [], ["loc", [null, [193, 24], [193, 94]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 195,
                    "column": 14
                  },
                  "end": {
                    "line": 200,
                    "column": 14
                  }
                },
                "moduleName": "dummy/templates/components/object-list-view-row.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "item delete-menu");
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("i");
                dom.setAttribute(el2, "class", "trash icon");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createElementMorph(element2);
                morphs[1] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
                return morphs;
              },
              statements: [["element", "action", [["get", "deleteRow", ["loc", [null, [196, 55], [196, 64]]]], ["get", "record", ["loc", [null, [196, 65], [196, 71]]]]], [], ["loc", [null, [196, 46], [196, 73]]]], ["inline", "t", ["components.object-list-view.menu-in-row.delete-menu-item-title"], [], ["loc", [null, [198, 24], [198, 94]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 189,
                  "column": 12
                },
                "end": {
                  "line": 201,
                  "column": 12
                }
              },
              "moduleName": "dummy/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [190, 24], [190, 32]]]], ["subexpr", "not", [["get", "record.rowConfig.canBeDeleted", ["loc", [null, [190, 38], [190, 67]]]]], [], ["loc", [null, [190, 33], [190, 68]]]]], [], ["loc", [null, [190, 20], [190, 69]]]]], [], 0, 1, ["loc", [null, [190, 14], [200, 21]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 202,
                  "column": 12
                },
                "end": {
                  "line": 207,
                  "column": 12
                }
              },
              "moduleName": "dummy/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "item");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var element1 = dom.childAt(element0, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createElementMorph(element0);
              morphs[1] = dom.createAttrMorph(element1, 'class');
              morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
              return morphs;
            },
            statements: [["element", "action", [["get", "sendMenuItemAction", ["loc", [null, [203, 41], [203, 59]]]], ["get", "menuItem.actionName", ["loc", [null, [203, 60], [203, 79]]]], ["get", "record.data", ["loc", [null, [203, 80], [203, 91]]]]], [], ["loc", [null, [203, 32], [203, 93]]]], ["attribute", "class", ["concat", [["get", "menuItem.icon", ["loc", [null, [204, 28], [204, 41]]]]]]], ["content", "menuItem.title", ["loc", [null, [205, 22], [205, 40]]]]],
            locals: ["menuItem"],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 158,
                "column": 4
              },
              "end": {
                "line": 211,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1, "class", "object-list-view-menu");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "right pointing ui icon dropdown button");
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("i");
            dom.setAttribute(el3, "class", "list layout icon");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "left menu");
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("          ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element5 = dom.childAt(fragment, [1]);
            var element6 = dom.childAt(element5, [1, 3]);
            var morphs = new Array(5);
            morphs[0] = dom.createAttrMorph(element5, 'style');
            morphs[1] = dom.createMorphAt(element6, 1, 1);
            morphs[2] = dom.createMorphAt(element6, 2, 2);
            morphs[3] = dom.createMorphAt(element6, 3, 3);
            morphs[4] = dom.createMorphAt(element6, 4, 4);
            return morphs;
          },
          statements: [["attribute", "style", ["get", "defaultPaddingStyle", ["loc", [null, [159, 48], [159, 67]]]]], ["block", "if", [["get", "showEditMenuItemInRow", ["loc", [null, [163, 18], [163, 39]]]]], [], 0, null, ["loc", [null, [163, 12], [175, 19]]]], ["block", "if", [["get", "showPrototypeMenuItemInRow", ["loc", [null, [176, 18], [176, 44]]]]], [], 1, null, ["loc", [null, [176, 12], [188, 19]]]], ["block", "if", [["get", "showDeleteMenuItemInRow", ["loc", [null, [189, 18], [189, 41]]]]], [], 2, null, ["loc", [null, [189, 12], [201, 19]]]], ["block", "each", [["get", "menuInRowAdditionalItems", ["loc", [null, [202, 20], [202, 44]]]]], [], 3, null, ["loc", [null, [202, 12], [207, 21]]]]],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 214,
                  "column": 4
                },
                "end": {
                  "line": 248,
                  "column": 4
                }
              },
              "moduleName": "dummy/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "object-list-view-row", [], ["record", ["subexpr", "@mut", [["get", "record", ["loc", [null, [216, 15], [216, 21]]]]], [], []], "columns", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [217, 16], [217, 23]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [218, 17], [218, 25]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [219, 17], [219, 25]]]]], [], []], "showMenuColumn", ["subexpr", "@mut", [["get", "showMenuColumn", ["loc", [null, [220, 23], [220, 37]]]]], [], []], "sendMenuItemAction", ["subexpr", "@mut", [["get", "sendMenuItemAction", ["loc", [null, [221, 27], [221, 45]]]]], [], []], "menuInRowAdditionalItems", ["subexpr", "@mut", [["get", "menuInRowAdditionalItems", ["loc", [null, [222, 33], [222, 57]]]]], [], []], "showHelperColumn", ["subexpr", "@mut", [["get", "showHelperColumn", ["loc", [null, [223, 25], [223, 41]]]]], [], []], "defaultRowConfig", ["subexpr", "@mut", [["get", "defaultRowConfig", ["loc", [null, [224, 25], [224, 41]]]]], [], []], "showValidationMessages", ["subexpr", "@mut", [["get", "showValidationMessages", ["loc", [null, [225, 31], [225, 53]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [226, 26], [226, 43]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [227, 26], [227, 43]]]]], [], []], "showEditButtonInRow", ["subexpr", "@mut", [["get", "showEditButtonInRow", ["loc", [null, [228, 28], [228, 47]]]]], [], []], "showPrototypeButtonInRow", ["subexpr", "@mut", [["get", "showPrototypeButtonInRow", ["loc", [null, [229, 33], [229, 57]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [230, 30], [230, 51]]]]], [], []], "isParentRecordPropertyName", ["subexpr", "@mut", [["get", "isParentRecordPropertyName", ["loc", [null, [231, 35], [231, 61]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "inHierarchicalMode", ["loc", [null, [232, 27], [232, 45]]]]], [], []], "inExpandMode", ["subexpr", "unbound", [["get", "inExpandMode", ["loc", [null, [233, 30], [233, 42]]]]], [], ["loc", [null, [233, 21], [233, 43]]]], "loadRecords", ["subexpr", "@mut", [["get", "loadRecords", ["loc", [null, [234, 20], [234, 31]]]]], [], []], "doRenderData", ["subexpr", "@mut", [["get", "record.doRenderData", ["loc", [null, [235, 21], [235, 40]]]]], [], []], "rowClick", ["subexpr", "@mut", [["get", "rowClick", ["loc", [null, [236, 17], [236, 25]]]]], [], []], "selectRow", ["subexpr", "@mut", [["get", "selectRow", ["loc", [null, [237, 18], [237, 27]]]]], [], []], "createNewByPrototype", ["subexpr", "@mut", [["get", "createNewByPrototype", ["loc", [null, [238, 29], [238, 49]]]]], [], []], "deleteRow", ["subexpr", "@mut", [["get", "deleteRow", ["loc", [null, [239, 18], [239, 27]]]]], [], []], "_currentLevel", ["subexpr", "@mut", [["get", "_currentLevel", ["loc", [null, [240, 22], [240, 35]]]]], [], []], "hierarchicalIndent", ["subexpr", "@mut", [["get", "_hierarchicalIndent", ["loc", [null, [241, 27], [241, 46]]]]], [], []], "defaultLeftPadding", ["subexpr", "@mut", [["get", "defaultLeftPadding", ["loc", [null, [242, 27], [242, 45]]]]], [], []], "overflowedComponents", ["subexpr", "@mut", [["get", "overflowedComponents", ["loc", [null, [243, 29], [243, 49]]]]], [], []], "folvComponentName", ["subexpr", "@mut", [["get", "folvComponentName", ["loc", [null, [244, 26], [244, 43]]]]], [], []], "hierarchyLoadedLevel", ["subexpr", "@mut", [["get", "hierarchyLoadedLevel", ["loc", [null, [245, 29], [245, 49]]]]], [], []], "configurateRow", ["subexpr", "@mut", [["get", "configurateRow", ["loc", [null, [246, 23], [246, 37]]]]], [], []]], ["loc", [null, [215, 6], [247, 8]]]]],
            locals: ["record"],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 213,
                "column": 2
              },
              "end": {
                "line": 249,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "records", ["loc", [null, [214, 12], [214, 19]]]]], ["key", "key"], 0, null, ["loc", [null, [214, 4], [248, 13]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes", "wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 250,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "hidden");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element23 = dom.childAt(fragment, [1]);
          var element24 = dom.childAt(element23, [1]);
          var morphs = new Array(9);
          morphs[0] = dom.createAttrMorph(element23, 'class');
          morphs[1] = dom.createAttrMorph(element24, 'class');
          morphs[2] = dom.createAttrMorph(element24, 'style');
          morphs[3] = dom.createMorphAt(dom.childAt(element24, [1]), 0, 0);
          morphs[4] = dom.createMorphAt(element24, 3, 3);
          morphs[5] = dom.createMorphAt(element24, 4, 4);
          morphs[6] = dom.createMorphAt(element23, 3, 3);
          morphs[7] = dom.createMorphAt(element23, 4, 4);
          morphs[8] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "record.rowConfig.customClass", ["loc", [null, [2, 15], [2, 43]]]]]]], ["attribute", "class", ["concat", ["object-list-view-helper-column ", ["subexpr", "unless", [["get", "showHelperColumn", ["loc", [null, [3, 55], [3, 71]]]], "hidden"], [], ["loc", [null, [3, 46], [3, 82]]]]]]], ["attribute", "style", ["get", "defaultPaddingStyle", ["loc", [null, [3, 92], [3, 111]]]]], ["content", "record.key", ["loc", [null, [4, 26], [4, 40]]]], ["block", "each", [["get", "customButtonsInRow", ["loc", [null, [5, 14], [5, 32]]]]], [], 0, null, ["loc", [null, [5, 6], [13, 15]]]], ["block", "if", [["get", "showHelperColumn", ["loc", [null, [14, 12], [14, 28]]]]], [], 1, null, ["loc", [null, [14, 6], [94, 13]]]], ["block", "each", [["get", "columns", ["loc", [null, [96, 12], [96, 19]]]]], [], 2, null, ["loc", [null, [96, 4], [157, 13]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [158, 10], [158, 24]]]]], [], 3, null, ["loc", [null, [158, 4], [211, 11]]]], ["block", "if", [["subexpr", "and", [["get", "_expanded", ["loc", [null, [213, 13], [213, 22]]]], ["get", "inHierarchicalMode", ["loc", [null, [213, 23], [213, 41]]]]], [], ["loc", [null, [213, 8], [213, 42]]]]], [], 4, null, ["loc", [null, [213, 2], [249, 9]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 251,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/object-list-view-row.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "doRenderData", ["loc", [null, [1, 6], [1, 18]]]]], [], 0, null, ["loc", [null, [1, 0], [250, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/object-list-view-single-column-cell", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 13,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-single-column-cell.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "component", [["get", "column.cellComponent.componentName", ["loc", [null, [6, 20], [6, 54]]]]], ["dynamicProperties", ["subexpr", "@mut", [["get", "column.cellComponent.componentProperties", ["loc", [null, [7, 28], [7, 68]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [8, 23], [8, 28]]]]], [], []], "value", ["subexpr", "mut", [["subexpr", "get", [["get", "model", ["loc", [null, [9, 26], [9, 31]]]], ["get", "column.propName", ["loc", [null, [9, 32], [9, 47]]]]], [], ["loc", [null, [9, 21], [9, 48]]]]], [], ["loc", [null, [9, 16], [9, 49]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [10, 19], [10, 27]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [11, 19], [11, 27]]]]], [], []]], ["loc", [null, [6, 8], [12, 10]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 6
              },
              "end": {
                "line": 20,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-single-column-cell.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "oveflow-text");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "get-formatted", [["get", "model", ["loc", [null, [15, 26], [15, 31]]]], ["get", "column.propName", ["loc", [null, [15, 32], [15, 47]]]]], ["dateFormat", ["subexpr", "@mut", [["get", "dateFormat", ["loc", [null, [16, 23], [16, 33]]]]], [], []], "moment", ["subexpr", "@mut", [["get", "moment", ["loc", [null, [17, 19], [17, 25]]]]], [], []]], ["loc", [null, [15, 10], [18, 12]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 6
              },
              "end": {
                "line": 26,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-single-column-cell.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "get", [["get", "model", ["loc", [null, [23, 21], [23, 26]]]], ["subexpr", "concat", ["errors.", ["get", "column.propName", ["loc", [null, [23, 45], [23, 60]]]]], [], ["loc", [null, [23, 27], [23, 61]]]]], [], ["loc", [null, [23, 16], [23, 62]]]], "pointing", "left pointing"], ["loc", [null, [22, 8], [25, 10]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 29,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/object-list-view-single-column-cell.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(":");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [3]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[2] = dom.createAttrMorph(element1, 'class');
          morphs[3] = dom.createMorphAt(element1, 1, 1);
          morphs[4] = dom.createMorphAt(element1, 2, 2);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["subexpr", "and", [["get", "showValidationMessages", ["loc", [null, [2, 30], [2, 52]]]], ["subexpr", "get", [["get", "model", ["loc", [null, [2, 58], [2, 63]]]], ["subexpr", "concat", ["errors.", ["get", "column.propName", ["loc", [null, [2, 82], [2, 97]]]], ".length"], [], ["loc", [null, [2, 64], [2, 108]]]]], [], ["loc", [null, [2, 53], [2, 109]]]]], [], ["loc", [null, [2, 25], [2, 110]]]], "error"], [], ["loc", [null, [2, 20], [2, 120]]]]]]], ["content", "column.header", ["loc", [null, [3, 11], [3, 28]]]], ["attribute", "class", ["concat", ["inline fields ", ["subexpr", "if", [["subexpr", "not", [["get", "hasEditableValues", ["loc", [null, [4, 40], [4, 57]]]]], [], ["loc", [null, [4, 35], [4, 58]]]], "readonly"], [], ["loc", [null, [4, 30], [4, 71]]]]]]], ["block", "if", [["get", "column.cellComponent.componentName", ["loc", [null, [5, 12], [5, 46]]]]], [], 0, 1, ["loc", [null, [5, 6], [20, 13]]]], ["block", "if", [["get", "showValidationMessages", ["loc", [null, [21, 12], [21, 34]]]]], [], 2, null, ["loc", [null, [21, 6], [26, 13]]]]],
        locals: ["column"],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/object-list-view-single-column-cell.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "columns", ["loc", [null, [1, 8], [1, 15]]]]], [], 0, null, ["loc", [null, [1, 0], [29, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/object-list-view", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 12
                },
                "end": {
                  "line": 16,
                  "column": 12
                }
              },
              "moduleName": "dummy/templates/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "disabled", "disabled");
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "check-square-o icon");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element16 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element16, 'class');
              morphs[1] = dom.createAttrMorph(element16, 'title');
              morphs[2] = dom.createElementMorph(element16);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["ui check-all-at-page-button ", ["get", "buttonClass", ["loc", [null, [10, 53], [10, 64]]]], " disabled button"]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.check-all-at-page-button-text"], [], ["loc", [null, [11, 22], [11, 82]]]]], ["element", "action", ["checkAllAtPage"], [], ["loc", [null, [13, 16], [13, 43]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 12
                },
                "end": {
                  "line": 24,
                  "column": 12
                }
              },
              "moduleName": "dummy/templates/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "check-square-o icon");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element15 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element15, 'class');
              morphs[1] = dom.createAttrMorph(element15, 'title');
              morphs[2] = dom.createElementMorph(element15);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["ui check-all-at-page-button ", ["get", "buttonClass", ["loc", [null, [19, 53], [19, 64]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.check-all-at-page-button-text"], [], ["loc", [null, [20, 22], [20, 82]]]]], ["element", "action", ["checkAllAtPage"], [], ["loc", [null, [21, 16], [21, 43]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 26,
                    "column": 14
                  },
                  "end": {
                    "line": 35,
                    "column": 14
                  }
                },
                "moduleName": "dummy/templates/components/object-list-view.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "type", "button");
                dom.setAttribute(el1, "disabled", "disabled");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("i");
                dom.setAttribute(el2, "class", "check-all-square-o icon");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element14 = dom.childAt(fragment, [1]);
                var morphs = new Array(3);
                morphs[0] = dom.createAttrMorph(element14, 'class');
                morphs[1] = dom.createAttrMorph(element14, 'title');
                morphs[2] = dom.createElementMorph(element14);
                return morphs;
              },
              statements: [["attribute", "class", ["concat", ["ui check-all-button ", ["get", "buttonClass", ["loc", [null, [29, 47], [29, 58]]]], " ", ["subexpr", "if", [["get", "allSelect", ["loc", [null, [29, 66], [29, 75]]]], "activated"], [], ["loc", [null, [29, 61], [29, 89]]]], " disabled button"]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.check-all-button-text"], [], ["loc", [null, [30, 24], [30, 76]]]]], ["element", "action", ["checkAll"], [], ["loc", [null, [32, 18], [32, 39]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 35,
                    "column": 14
                  },
                  "end": {
                    "line": 43,
                    "column": 14
                  }
                },
                "moduleName": "dummy/templates/components/object-list-view.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "type", "button");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("i");
                dom.setAttribute(el2, "class", "check-all-square-o icon");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element13 = dom.childAt(fragment, [1]);
                var morphs = new Array(3);
                morphs[0] = dom.createAttrMorph(element13, 'class');
                morphs[1] = dom.createAttrMorph(element13, 'title');
                morphs[2] = dom.createElementMorph(element13);
                return morphs;
              },
              statements: [["attribute", "class", ["concat", ["ui check-all-button ", ["get", "buttonClass", ["loc", [null, [38, 47], [38, 58]]]], " ", ["subexpr", "if", [["get", "allSelect", ["loc", [null, [38, 66], [38, 75]]]], "activated"], [], ["loc", [null, [38, 61], [38, 89]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.check-all-button-text"], [], ["loc", [null, [39, 24], [39, 76]]]]], ["element", "action", ["checkAll"], [], ["loc", [null, [40, 18], [40, 39]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 25,
                  "column": 12
                },
                "end": {
                  "line": 44,
                  "column": 12
                }
              },
              "moduleName": "dummy/templates/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "readonly", ["loc", [null, [26, 20], [26, 28]]]]], [], 0, 1, ["loc", [null, [26, 14], [43, 21]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 45,
                  "column": 12
                },
                "end": {
                  "line": 53,
                  "column": 12
                }
              },
              "moduleName": "dummy/templates/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "sort icon");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element12 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element12, 'class');
              morphs[1] = dom.createAttrMorph(element12, 'title');
              morphs[2] = dom.createElementMorph(element12);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["ui clear-sorting-button ", ["get", "buttonClass", ["loc", [null, [48, 49], [48, 60]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.clear-sorting-button-text"], [], ["loc", [null, [49, 22], [49, 78]]]]], ["element", "action", ["clearSorting"], [], ["loc", [null, [50, 16], [50, 41]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 10
              },
              "end": {
                "line": 54,
                "column": 10
              }
            },
            "moduleName": "dummy/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [7, 22], [7, 30]]]], ["get", "allSelect", ["loc", [null, [7, 31], [7, 40]]]]], [], ["loc", [null, [7, 18], [7, 41]]]]], [], 0, 1, ["loc", [null, [7, 12], [24, 19]]]], ["block", "if", [["subexpr", "not-eq", [["get", "class", ["loc", [null, [25, 26], [25, 31]]]], "groupedit-container"], [], ["loc", [null, [25, 18], [25, 54]]]]], [], 2, null, ["loc", [null, [25, 12], [44, 19]]]], ["block", "if", [["subexpr", "and", [["get", "defaultSortingButton", ["loc", [null, [45, 23], [45, 43]]]], ["subexpr", "not", [["get", "orderedProperty", ["loc", [null, [45, 49], [45, 64]]]]], [], ["loc", [null, [45, 44], [45, 65]]]]], [], ["loc", [null, [45, 18], [45, 66]]]]], [], 3, null, ["loc", [null, [45, 12], [53, 19]]]]],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 6
            },
            "end": {
              "line": 56,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("th");
          dom.setAttribute(el1, "class", "object-list-view-operations collapsing");
          dom.setAttribute(el1, "data-olv-header-property-name", "OlvRowToolbar");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "if", [["get", "showCheckBoxInRow", ["loc", [null, [6, 16], [6, 33]]]]], [], 0, null, ["loc", [null, [6, 10], [54, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 61,
                "column": 12
              },
              "end": {
                "line": 63,
                "column": 12
              }
            },
            "moduleName": "dummy/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", [["get", "column.keyLocale", ["loc", [null, [62, 18], [62, 34]]]]], [], ["loc", [null, [62, 14], [62, 36]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 63,
                "column": 12
              },
              "end": {
                "line": 65,
                "column": 12
              }
            },
            "moduleName": "dummy/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "column.header", ["loc", [null, [64, 14], [64, 31]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 69,
                  "column": 16
                },
                "end": {
                  "line": 73,
                  "column": 16
                }
              },
              "moduleName": "dummy/templates/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n                  ▲");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element9 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element9, 'title');
              morphs[1] = dom.createMorphAt(element9, 1, 1);
              return morphs;
            },
            statements: [["attribute", "title", ["concat", [["subexpr", "t", ["components.object-list-view.sort-ascending"], [], ["loc", [null, [70, 30], [70, 80]]]]]]], ["content", "column.sortNumber", ["loc", [null, [71, 19], [71, 40]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 73,
                  "column": 16
                },
                "end": {
                  "line": 77,
                  "column": 16
                }
              },
              "moduleName": "dummy/templates/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n                  ▼");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element8 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element8, 'title');
              morphs[1] = dom.createMorphAt(element8, 1, 1);
              return morphs;
            },
            statements: [["attribute", "title", ["concat", [["subexpr", "t", ["components.object-list-view.sort-descending"], [], ["loc", [null, [74, 30], [74, 81]]]]]]], ["content", "column.sortNumber", ["loc", [null, [75, 19], [75, 40]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 67,
                "column": 12
              },
              "end": {
                "line": 79,
                "column": 12
              }
            },
            "moduleName": "dummy/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "object-list-view-order-icon");
            dom.setAttribute(el1, "style", "float:right;");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("              ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "column.sortAscending", ["loc", [null, [69, 22], [69, 42]]]]], [], 0, 1, ["loc", [null, [69, 16], [77, 23]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 57,
              "column": 6
            },
            "end": {
              "line": 82,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("th");
          dom.setAttribute(el1, "class", "dt-head-left me class");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element10 = dom.childAt(fragment, [1]);
          var element11 = dom.childAt(element10, [1]);
          var morphs = new Array(6);
          morphs[0] = dom.createAttrMorph(element10, 'onclick');
          morphs[1] = dom.createAttrMorph(element10, 'width');
          morphs[2] = dom.createAttrMorph(element11, 'data-olv-header-property-name');
          morphs[3] = dom.createAttrMorph(element11, 'title');
          morphs[4] = dom.createMorphAt(dom.childAt(element11, [1]), 1, 1);
          morphs[5] = dom.createMorphAt(element11, 3, 3);
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", ["headerCellClick", ["get", "column", ["loc", [null, [58, 77], [58, 83]]]]], [], ["loc", [null, [58, 50], [58, 86]]]]], ["attribute", "width", ["get", "column.width", ["loc", [null, [58, 95], [58, 107]]]]], ["attribute", "data-olv-header-property-name", ["get", "column.propName", ["loc", [null, [59, 47], [59, 62]]]]], ["attribute", "title", ["get", "sortTitleCompute", ["loc", [null, [59, 73], [59, 89]]]]], ["block", "if", [["get", "column.keyLocale", ["loc", [null, [61, 18], [61, 34]]]]], [], 0, 1, ["loc", [null, [61, 12], [65, 19]]]], ["block", "if", [["get", "column.sorted", ["loc", [null, [67, 18], [67, 31]]]]], [], 2, null, ["loc", [null, [67, 12], [79, 19]]]]],
        locals: ["column"],
        templates: [child0, child1, child2]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 83,
              "column": 6
            },
            "end": {
              "line": 85,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("th");
          dom.setAttribute(el1, "class", "object-list-view-menu collapsing");
          dom.setAttribute(el1, "data-olv-header-property-name", "OlvRowMenu");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 91,
                "column": 8
              },
              "end": {
                "line": 93,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1, "rowspan", "1");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 96,
                  "column": 12
                },
                "end": {
                  "line": 106,
                  "column": 12
                }
              },
              "moduleName": "dummy/templates/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "flexberry-dropdown", [], ["value", ["subexpr", "@mut", [["get", "column.filter.condition", ["loc", [null, [98, 22], [98, 45]]]]], [], []], "items", ["subexpr", "@mut", [["get", "column.filter.conditions", ["loc", [null, [99, 22], [99, 46]]]]], [], []], "displayCaptions", ["subexpr", "not", [["subexpr", "is-array", [["get", "column.filter.conditions", ["loc", [null, [100, 47], [100, 71]]]]], [], ["loc", [null, [100, 37], [100, 72]]]]], [], ["loc", [null, [100, 32], [100, 73]]]], "class", "compact fluid", "placeholder", ["subexpr", "t", ["components.object-list-view.filter-condition"], [], ["loc", [null, [102, 28], [102, 78]]]], "needChecksOnValue", false, "onChange", ["subexpr", "action", ["filterConditionChanged", ["get", "column.filter", ["loc", [null, [104, 58], [104, 71]]]]], [], ["loc", [null, [104, 25], [104, 72]]]]], ["loc", [null, [97, 14], [105, 16]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 94,
                "column": 8
              },
              "end": {
                "line": 108,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1, "class", "overflowed-cell");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element5 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element5, 'style');
            morphs[1] = dom.createMorphAt(element5, 1, 1);
            return morphs;
          },
          statements: [["attribute", "style", ["get", "defaultPaddingStyle", ["loc", [null, [95, 22], [95, 41]]]]], ["block", "if", [["get", "column.filter.conditions", ["loc", [null, [96, 18], [96, 42]]]]], [], 0, null, ["loc", [null, [96, 12], [106, 19]]]]],
          locals: ["column"],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 109,
                "column": 8
              },
              "end": {
                "line": 111,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1, "rowspan", "1");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 114,
                "column": 8
              },
              "end": {
                "line": 116,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1, "rowspan", "1");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 119,
                  "column": 12
                },
                "end": {
                  "line": 138,
                  "column": 12
                }
              },
              "moduleName": "dummy/templates/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "fluid action input ui");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("button");
              dom.setAttribute(el2, "type", "button");
              dom.setAttribute(el2, "class", "ui clear-filter button");
              var el3 = dom.createTextNode("\n                  ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("i");
              dom.setAttribute(el3, "class", "remove icon");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var element3 = dom.childAt(element2, [3]);
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(element2, 1, 1);
              morphs[1] = dom.createAttrMorph(element3, 'title');
              morphs[2] = dom.createElementMorph(element3);
              return morphs;
            },
            statements: [["inline", "component", [["get", "column.filter.component.name", ["loc", [null, [121, 28], [121, 56]]]]], ["value", ["subexpr", "@mut", [["get", "column.filter.pattern", ["loc", [null, [122, 24], [122, 45]]]]], [], []], "readonly", ["subexpr", "or", [["subexpr", "eq", [["get", "column.filter.condition", ["loc", [null, [124, 24], [124, 47]]]], "empty"], [], ["loc", [null, [124, 20], [124, 56]]]], ["subexpr", "eq", [["get", "column.filter.condition", ["loc", [null, [125, 24], [125, 47]]]], "nempty"], [], ["loc", [null, [125, 20], [125, 57]]]]], [], ["loc", [null, [123, 27], [126, 19]]]], "dynamicProperties", ["subexpr", "@mut", [["get", "column.filter.component.properties", ["loc", [null, [127, 36], [127, 70]]]]], [], []]], ["loc", [null, [121, 16], [128, 18]]]], ["attribute", "title", ["subexpr", "t", ["components.object-list-view.clear-filter-in-column"], [], ["loc", [null, [132, 24], [132, 82]]]]], ["element", "action", ["clearFilterForColumn", ["get", "column.filter", ["loc", [null, [133, 50], [133, 63]]]]], [], ["loc", [null, [133, 18], [133, 65]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 117,
                "column": 8
              },
              "end": {
                "line": 140,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element4, 'style');
            morphs[1] = dom.createAttrMorph(element4, 'class');
            morphs[2] = dom.createMorphAt(element4, 1, 1);
            return morphs;
          },
          statements: [["attribute", "style", ["get", "defaultPaddingStyle", ["loc", [null, [118, 22], [118, 41]]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["subexpr", "array-contains", [["get", "overflowedComponents", ["loc", [null, [118, 72], [118, 92]]]], ["get", "column.filter.component.name", ["loc", [null, [118, 93], [118, 121]]]]], [], ["loc", [null, [118, 56], [118, 122]]]], "overflowed-cell"], [], ["loc", [null, [118, 51], [118, 142]]]]]]], ["block", "if", [["get", "column.filter.component.name", ["loc", [null, [119, 18], [119, 46]]]]], [], 0, null, ["loc", [null, [119, 12], [138, 19]]]]],
          locals: ["column"],
          templates: [child0]
        };
      })();
      var child5 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 141,
                "column": 8
              },
              "end": {
                "line": 143,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1, "rowspan", "1");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 89,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          dom.setAttribute(el1, "class", "object-list-view-filters");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          dom.setAttribute(el1, "class", "object-list-view-filters");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element6 = dom.childAt(fragment, [1]);
          var element7 = dom.childAt(fragment, [3]);
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(element6, 1, 1);
          morphs[1] = dom.createMorphAt(element6, 2, 2);
          morphs[2] = dom.createMorphAt(element6, 3, 3);
          morphs[3] = dom.createAttrMorph(element7, 'onkeydown');
          morphs[4] = dom.createMorphAt(element7, 1, 1);
          morphs[5] = dom.createMorphAt(element7, 2, 2);
          morphs[6] = dom.createMorphAt(element7, 3, 3);
          return morphs;
        },
        statements: [["block", "if", [["get", "showHelperColumn", ["loc", [null, [91, 14], [91, 30]]]]], [], 0, null, ["loc", [null, [91, 8], [93, 15]]]], ["block", "each", [["get", "columns", ["loc", [null, [94, 16], [94, 23]]]]], [], 1, null, ["loc", [null, [94, 8], [108, 17]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [109, 14], [109, 28]]]]], [], 2, null, ["loc", [null, [109, 8], [111, 15]]]], ["attribute", "onkeydown", ["subexpr", "action", ["applyFiltersByEnter"], [], ["loc", [null, [113, 53], [113, 85]]]]], ["block", "if", [["get", "showHelperColumn", ["loc", [null, [114, 14], [114, 30]]]]], [], 3, null, ["loc", [null, [114, 8], [116, 15]]]], ["block", "each", [["get", "columns", ["loc", [null, [117, 16], [117, 23]]]]], [], 4, null, ["loc", [null, [117, 8], [140, 17]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [141, 14], [141, 28]]]]], [], 5, null, ["loc", [null, [141, 8], [143, 15]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 146,
              "column": 4
            },
            "end": {
              "line": 152,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "style", "text-align:center;");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'colspan');
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["attribute", "colspan", ["concat", [["get", "colspan", ["loc", [null, [148, 23], [148, 30]]]]]]], ["content", "placeholder", ["loc", [null, [149, 12], [149, 27]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 153,
                "column": 6
              },
              "end": {
                "line": 192,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "object-list-view-row", [], ["record", ["subexpr", "@mut", [["get", "record", ["loc", [null, [155, 17], [155, 23]]]]], [], []], "columns", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [156, 18], [156, 25]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [157, 19], [157, 27]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [158, 19], [158, 27]]]]], [], []], "showMenuColumn", ["subexpr", "@mut", [["get", "showMenuColumn", ["loc", [null, [159, 25], [159, 39]]]]], [], []], "sendMenuItemAction", ["subexpr", "@mut", [["get", "sendMenuItemAction", ["loc", [null, [160, 29], [160, 47]]]]], [], []], "menuInRowAdditionalItems", ["subexpr", "@mut", [["get", "menuInRowAdditionalItems", ["loc", [null, [161, 35], [161, 59]]]]], [], []], "showHelperColumn", ["subexpr", "@mut", [["get", "showHelperColumn", ["loc", [null, [162, 27], [162, 43]]]]], [], []], "defaultRowConfig", ["subexpr", "@mut", [["get", "defaultRowConfig", ["loc", [null, [163, 27], [163, 43]]]]], [], []], "showValidationMessages", ["subexpr", "@mut", [["get", "showValidationMessagesInRow", ["loc", [null, [164, 33], [164, 60]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [165, 28], [165, 45]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [166, 28], [166, 45]]]]], [], []], "showEditButtonInRow", ["subexpr", "@mut", [["get", "showEditButtonInRow", ["loc", [null, [167, 30], [167, 49]]]]], [], []], "showPrototypeButtonInRow", ["subexpr", "@mut", [["get", "showPrototypeButtonInRow", ["loc", [null, [168, 35], [168, 59]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [169, 32], [169, 53]]]]], [], []], "showEditMenuItemInRow", ["subexpr", "@mut", [["get", "showEditMenuItemInRow", ["loc", [null, [170, 32], [170, 53]]]]], [], []], "showPrototypeMenuItemInRow", ["subexpr", "@mut", [["get", "showPrototypeMenuItemInRow", ["loc", [null, [171, 37], [171, 63]]]]], [], []], "showDeleteMenuItemInRow", ["subexpr", "@mut", [["get", "showDeleteMenuItemInRow", ["loc", [null, [172, 34], [172, 57]]]]], [], []], "isParentRecordPropertyName", ["subexpr", "@mut", [["get", "isParentRecordPropertyName", ["loc", [null, [173, 37], [173, 63]]]]], [], []], "hierarchicalIndent", ["subexpr", "@mut", [["get", "hierarchicalIndent", ["loc", [null, [174, 29], [174, 47]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "inHierarchicalMode", ["loc", [null, [175, 29], [175, 47]]]]], [], []], "inExpandMode", ["subexpr", "unbound", [["get", "inExpandMode", ["loc", [null, [176, 32], [176, 44]]]]], [], ["loc", [null, [176, 23], [176, 45]]]], "loadRecords", ["subexpr", "@mut", [["get", "loadRecords", ["loc", [null, [177, 22], [177, 33]]]]], [], []], "doRenderData", ["subexpr", "@mut", [["get", "record.doRenderData", ["loc", [null, [178, 23], [178, 42]]]]], [], []], "rowClick", ["subexpr", "action", ["rowClick"], [], ["loc", [null, [179, 19], [179, 38]]]], "selectRow", ["subexpr", "action", ["selectRow"], [], ["loc", [null, [180, 20], [180, 40]]]], "createNewByPrototype", ["subexpr", "@mut", [["get", "createNewByPrototype", ["loc", [null, [181, 31], [181, 51]]]]], [], []], "deleteRow", ["subexpr", "action", ["deleteRow"], [], ["loc", [null, [182, 20], [182, 40]]]], "customButtonsInRow", ["subexpr", "@mut", [["get", "customButtonsInRow", ["loc", [null, [183, 29], [183, 47]]]]], [], []], "customButtonInRowAction", "customButtonInRowAction", "defaultLeftPadding", ["subexpr", "@mut", [["get", "defaultLeftPadding", ["loc", [null, [185, 29], [185, 47]]]]], [], []], "overflowedComponents", ["subexpr", "@mut", [["get", "overflowedComponents", ["loc", [null, [186, 31], [186, 51]]]]], [], []], "folvComponentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [187, 28], [187, 41]]]]], [], []], "hierarchyPaging", ["subexpr", "@mut", [["get", "hierarchyPaging", ["loc", [null, [188, 26], [188, 41]]]]], [], []], "configurateRow", ["subexpr", "@mut", [["get", "configurateRow", ["loc", [null, [189, 25], [189, 39]]]]], [], []], "allSelect", ["subexpr", "@mut", [["get", "allSelect", ["loc", [null, [190, 20], [190, 29]]]]], [], []]], ["loc", [null, [154, 8], [191, 10]]]]],
          locals: ["record"],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 193,
                "column": 6
              },
              "end": {
                "line": 200,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "style", "text-align:center;");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "ui active centered inline loader");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'colspan');
            morphs[1] = dom.createMorphAt(element0, 3, 3);
            return morphs;
          },
          statements: [["attribute", "colspan", ["concat", [["get", "colspan", ["loc", [null, [195, 25], [195, 32]]]]]]], ["inline", "t", ["components.object-list-view.loading-text"], [], ["loc", [null, [197, 12], [197, 60]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 152,
              "column": 4
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "contentWithKeys", ["loc", [null, [153, 14], [153, 29]]]]], ["key", "key"], 0, null, ["loc", [null, [153, 6], [192, 15]]]], ["block", "if", [["get", "rowByRowLoadingProgress", ["loc", [null, [193, 12], [193, 35]]]]], [], 1, null, ["loc", [null, [193, 6], [200, 13]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 204,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/object-list-view.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("table");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("thead");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tbody");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element17 = dom.childAt(fragment, [0]);
        var element18 = dom.childAt(element17, [1, 1]);
        var element19 = dom.childAt(element17, [3]);
        var morphs = new Array(6);
        morphs[0] = dom.createAttrMorph(element17, 'class');
        morphs[1] = dom.createMorphAt(element18, 1, 1);
        morphs[2] = dom.createMorphAt(element18, 2, 2);
        morphs[3] = dom.createMorphAt(element18, 3, 3);
        morphs[4] = dom.createMorphAt(element19, 1, 1);
        morphs[5] = dom.createMorphAt(element19, 2, 2);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["object-list-view ui unstackable celled ", ["subexpr", "if", [["get", "readonly", ["loc", [null, [1, 58], [1, 66]]]], "readonly"], [], ["loc", [null, [1, 53], [1, 79]]]], " ", ["get", "tableClass", ["loc", [null, [1, 82], [1, 92]]]], " table"]]], ["block", "if", [["get", "showHelperColumn", ["loc", [null, [4, 12], [4, 28]]]]], [], 0, null, ["loc", [null, [4, 6], [56, 13]]]], ["block", "each", [["get", "columns", ["loc", [null, [57, 14], [57, 21]]]]], [], 1, null, ["loc", [null, [57, 6], [82, 15]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [83, 12], [83, 26]]]]], [], 2, null, ["loc", [null, [83, 6], [85, 13]]]], ["block", "if", [["subexpr", "and", [["subexpr", "not", [["get", "showFiltersInModal", ["loc", [null, [89, 20], [89, 38]]]]], [], ["loc", [null, [89, 15], [89, 39]]]], ["get", "showFilters", ["loc", [null, [89, 40], [89, 51]]]]], [], ["loc", [null, [89, 10], [89, 52]]]]], [], 3, null, ["loc", [null, [89, 4], [145, 11]]]], ["block", "unless", [["get", "content", ["loc", [null, [146, 14], [146, 21]]]]], [], 4, 5, ["loc", [null, [146, 4], [201, 15]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define("dummy/templates/components/olv-filter-interval", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 6
          }
        },
        "moduleName": "dummy/templates/components/olv-filter-interval.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "style", "float: left; width: 45%;");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "style", "float: right; width: 45%;");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "flexberry-textbox", [], ["value", ["subexpr", "@mut", [["get", "from", ["loc", [null, [3, 10], [3, 14]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "fromPlaceholder", ["loc", [null, [4, 16], [4, 31]]]]], [], []], "dynamicProperties", ["subexpr", "@mut", [["get", "dynProps", ["loc", [null, [5, 22], [5, 30]]]]], [], []]], ["loc", [null, [2, 2], [6, 4]]]], ["inline", "flexberry-textbox", [], ["value", ["subexpr", "@mut", [["get", "to", ["loc", [null, [10, 10], [10, 12]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "toPlaceholder", ["loc", [null, [11, 16], [11, 29]]]]], [], []], "dynamicProperties", ["subexpr", "@mut", [["get", "dynProps", ["loc", [null, [12, 22], [12, 30]]]]], [], []]], ["loc", [null, [9, 2], [13, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/olv-setconfigdialogbutton", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "modifiers",
          "modifiers": ["action"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/olv-setconfigdialogbutton.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "type", "button");
        dom.setAttribute(el1, "class", "ui button");
        var el2 = dom.createElement("i");
        dom.setAttribute(el2, "class", "large setting icon");
        dom.setAttribute(el2, "title", "customize column views");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(1);
        morphs[0] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [["element", "action", ["choose", ["get", "chooseData", ["loc", [null, [1, 58], [1, 68]]]]], [], ["loc", [null, [1, 40], [1, 70]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/olv-toolbar", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "modifiers",
            "modifiers": ["action"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "refresh icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element20 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element20, 'class');
          morphs[1] = dom.createAttrMorph(element20, 'title');
          morphs[2] = dom.createElementMorph(element20);
          morphs[3] = dom.createMorphAt(element20, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui refresh-button ", ["get", "buttonClass", ["loc", [null, [4, 31], [4, 42]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.refresh-button-text"], [], ["loc", [null, [5, 10], [5, 60]]]]], ["element", "action", ["refresh"], [], ["loc", [null, [6, 4], [6, 24]]]], ["inline", "t", ["components.olv-toolbar.refresh-button-text"], [], ["loc", [null, [7, 6], [7, 56]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 21,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/olv-toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "disabled", "disabled");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element19 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element19, 'class');
            morphs[1] = dom.createAttrMorph(element19, 'title');
            morphs[2] = dom.createElementMorph(element19);
            morphs[3] = dom.createMorphAt(element19, 1, 1);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui create-button ", ["get", "buttonClass", ["loc", [null, [15, 32], [15, 43]]]], " disabled button"]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.add-button-text"], [], ["loc", [null, [16, 12], [16, 58]]]]], ["element", "action", ["createNew"], [], ["loc", [null, [18, 6], [18, 28]]]], ["inline", "t", ["components.olv-toolbar.add-button-text"], [], ["loc", [null, [19, 8], [19, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 2
              },
              "end": {
                "line": 29,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/olv-toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element18 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element18, 'class');
            morphs[1] = dom.createAttrMorph(element18, 'title');
            morphs[2] = dom.createElementMorph(element18);
            morphs[3] = dom.createMorphAt(element18, 1, 1);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui create-button ", ["get", "buttonClass", ["loc", [null, [24, 32], [24, 43]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.add-button-text"], [], ["loc", [null, [25, 12], [25, 58]]]]], ["element", "action", ["createNew"], [], ["loc", [null, [26, 6], [26, 28]]]], ["inline", "t", ["components.olv-toolbar.add-button-text"], [], ["loc", [null, [27, 8], [27, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 30,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [12, 12], [12, 20]]]], ["subexpr", "not", [["get", "enableCreateNewButton", ["loc", [null, [12, 26], [12, 47]]]]], [], ["loc", [null, [12, 21], [12, 48]]]]], [], ["loc", [null, [12, 8], [12, 49]]]]], [], 0, 1, ["loc", [null, [12, 2], [29, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 2
              },
              "end": {
                "line": 42,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/olv-toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "disabled", "disabled");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "delete icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element17 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element17, 'class');
            morphs[1] = dom.createAttrMorph(element17, 'title');
            morphs[2] = dom.createElementMorph(element17);
            morphs[3] = dom.createMorphAt(element17, 1, 1);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui delete-button ", ["get", "buttonClass", ["loc", [null, [35, 32], [35, 43]]]], " disabled button"]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.delete-button-text"], [], ["loc", [null, [36, 12], [36, 61]]]]], ["element", "action", ["delete"], [], ["loc", [null, [38, 6], [38, 25]]]], ["inline", "t", ["components.olv-toolbar.delete-button-text"], [], ["loc", [null, [39, 8], [39, 57]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 42,
                "column": 2
              },
              "end": {
                "line": 51,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/olv-toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "delete icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element16 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element16, 'class');
            morphs[1] = dom.createAttrMorph(element16, 'title');
            morphs[2] = dom.createElementMorph(element16);
            morphs[3] = dom.createMorphAt(element16, 1, 1);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui delete-button ", ["get", "buttonClass", ["loc", [null, [45, 32], [45, 43]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.delete-button-text"], [], ["loc", [null, [46, 12], [46, 61]]]]], ["element", "action", ["delete"], [], ["loc", [null, [47, 6], [47, 25]]]], ["inline", "t", ["components.olv-toolbar.delete-button-text"], [], ["loc", [null, [48, 8], [48, 57]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 31,
              "column": 0
            },
            "end": {
              "line": 52,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [32, 12], [32, 20]]]], ["subexpr", "not", [["get", "isDeleteButtonEnabled", ["loc", [null, [32, 26], [32, 47]]]]], [], ["loc", [null, [32, 21], [32, 48]]]]], [], ["loc", [null, [32, 8], [32, 49]]]]], [], 0, 1, ["loc", [null, [32, 2], [51, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 61,
                "column": 2
              },
              "end": {
                "line": 69,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/olv-toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "expand icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element14 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element14, 'class');
            morphs[1] = dom.createAttrMorph(element14, 'title');
            morphs[2] = dom.createElementMorph(element14);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui button icon hierarchical-button ", ["get", "buttonClass", ["loc", [null, [64, 50], [64, 61]]]]]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.coll-expand-button-text"], [], ["loc", [null, [65, 12], [65, 66]]]]], ["element", "action", [["get", "switchExpandMode", ["loc", [null, [66, 15], [66, 31]]]]], [], ["loc", [null, [66, 6], [66, 33]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 53,
              "column": 0
            },
            "end": {
              "line": 70,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "sitemap icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element15 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element15, 'class');
          morphs[1] = dom.createAttrMorph(element15, 'title');
          morphs[2] = dom.createElementMorph(element15);
          morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui button icon hierarchical-button ", ["get", "buttonClass", ["loc", [null, [56, 48], [56, 59]]]], " ", ["subexpr", "if", [["get", "inHierarchicalMode", ["loc", [null, [56, 67], [56, 85]]]], "active"], [], ["loc", [null, [56, 62], [56, 96]]]]]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.hierarchy-button-text"], [], ["loc", [null, [57, 10], [57, 62]]]]], ["element", "action", [["get", "switchHierarchicalMode", ["loc", [null, [58, 13], [58, 35]]]]], [], ["loc", [null, [58, 4], [58, 37]]]], ["block", "if", [["get", "availableCollExpandMode", ["loc", [null, [61, 8], [61, 31]]]]], [], 0, null, ["loc", [null, [61, 2], [69, 9]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 80,
                "column": 4
              },
              "end": {
                "line": 89,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/olv-toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "or");
            dom.setAttribute(el1, "data-text", "•");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "remove icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element11 = dom.childAt(fragment, [3]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element11, 'class');
            morphs[1] = dom.createAttrMorph(element11, 'title');
            morphs[2] = dom.createElementMorph(element11);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui button removeFilter-button ", ["get", "buttonClass", ["loc", [null, [84, 47], [84, 58]]]]]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.remove-filter-button-text"], [], ["loc", [null, [85, 14], [85, 70]]]]], ["element", "action", [["get", "resetFilters", ["loc", [null, [86, 17], [86, 29]]]]], [], ["loc", [null, [86, 8], [86, 31]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 71,
              "column": 0
            },
            "end": {
              "line": 91,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui icon buttons filter-active");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "filter icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element12 = dom.childAt(fragment, [1]);
          var element13 = dom.childAt(element12, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element13, 'class');
          morphs[1] = dom.createAttrMorph(element13, 'title');
          morphs[2] = dom.createElementMorph(element13);
          morphs[3] = dom.createMorphAt(element12, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui button ", ["get", "buttonClass", ["loc", [null, [75, 25], [75, 36]]]], " ", ["subexpr", "if", [["get", "showFilters", ["loc", [null, [75, 44], [75, 55]]]], "active"], [], ["loc", [null, [75, 39], [75, 66]]]]]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.filter-button-text"], [], ["loc", [null, [76, 12], [76, 61]]]]], ["element", "action", ["showFiltersTool"], [], ["loc", [null, [77, 6], [77, 34]]]], ["block", "if", [["get", "filters", ["loc", [null, [80, 10], [80, 17]]]]], [], 0, null, ["loc", [null, [80, 4], [89, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 92,
              "column": 0
            },
            "end": {
              "line": 114,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui action input olv-search");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "block-action-input");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "search icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "remove icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element8 = dom.childAt(fragment, [1]);
          var element9 = dom.childAt(element8, [3]);
          var element10 = dom.childAt(element8, [5]);
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
          morphs[1] = dom.createAttrMorph(element9, 'class');
          morphs[2] = dom.createAttrMorph(element9, 'title');
          morphs[3] = dom.createElementMorph(element9);
          morphs[4] = dom.createAttrMorph(element10, 'class');
          morphs[5] = dom.createAttrMorph(element10, 'title');
          morphs[6] = dom.createElementMorph(element10);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "text", "placeholder", ["subexpr", "t", ["components.olv-toolbar.filter-by-any-match-placeholder"], [], ["loc", [null, [96, 18], [96, 78]]]], "value", ["subexpr", "@mut", [["get", "filterByAnyMatchText", ["loc", [null, [97, 12], [97, 32]]]]], [], []], "key-down", "keyDownFilterAction"], ["loc", [null, [94, 36], [98, 6]]]], ["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [101, 18], [101, 29]]]], " icon button search-button"]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.search-button-text"], [], ["loc", [null, [102, 12], [102, 61]]]]], ["element", "action", ["filterByAnyMatch"], [], ["loc", [null, [103, 6], [103, 35]]]], ["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [108, 18], [108, 29]]]], " icon button clear-search-button"]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.clear-search-button-text"], [], ["loc", [null, [109, 12], [109, 67]]]]], ["element", "action", ["removeFilter"], [], ["loc", [null, [110, 6], [110, 31]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 115,
              "column": 0
            },
            "end": {
              "line": 129,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui buttons export-config");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "large file excel outline icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element6 = dom.childAt(fragment, [1]);
          var element7 = dom.childAt(element6, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element7, 'class');
          morphs[1] = dom.createAttrMorph(element7, 'title');
          morphs[2] = dom.createElementMorph(element7);
          morphs[3] = dom.createMorphAt(element6, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui button icon export-button ", ["get", "buttonClass", ["loc", [null, [119, 44], [119, 55]]]]]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.export-excel-button-text"], [], ["loc", [null, [120, 12], [120, 67]]]]], ["element", "action", ["showExportDialog"], [], ["loc", [null, [121, 6], [121, 35]]]], ["inline", "flexberry-menu", [], ["items", ["subexpr", "@mut", [["get", "exportExcelItems", ["loc", [null, [125, 12], [125, 28]]]]], [], []], "onItemClick", ["subexpr", "action", ["onExportMenuItemClick"], [], ["loc", [null, [126, 18], [126, 50]]]]], ["loc", [null, [124, 4], [127, 6]]]]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 139,
                "column": 4
              },
              "end": {
                "line": 144,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/olv-toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "flexberry-menu", [], ["items", ["subexpr", "@mut", [["get", "colsSettingsItems", ["loc", [null, [141, 14], [141, 31]]]]], [], []], "onItemClick", ["subexpr", "action", ["onMenuItemClick"], [], ["loc", [null, [142, 20], [142, 46]]]]], ["loc", [null, [140, 6], [143, 8]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 130,
              "column": 0
            },
            "end": {
              "line": 146,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui buttons cols-config");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          dom.setAttribute(el2, "class", "ui icon button config-button");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "large table icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var element5 = dom.childAt(element4, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element5, 'title');
          morphs[1] = dom.createElementMorph(element5);
          morphs[2] = dom.createMorphAt(element4, 3, 3);
          return morphs;
        },
        statements: [["attribute", "title", ["subexpr", "t", ["components.colsconfig-dialog-content.title"], [], ["loc", [null, [135, 12], [135, 62]]]]], ["element", "action", ["showConfigDialog"], [], ["loc", [null, [136, 6], [136, 35]]]], ["block", "if", [["get", "colsSettingsItems", ["loc", [null, [139, 10], [139, 27]]]]], [], 0, null, ["loc", [null, [139, 4], [144, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child8 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 156,
                "column": 4
              },
              "end": {
                "line": 161,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/olv-toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "flexberry-menu", [], ["items", ["subexpr", "@mut", [["get", "advLimitItems", ["loc", [null, [158, 14], [158, 27]]]]], [], []], "onItemClick", ["subexpr", "action", ["onLimitMenuItemClick"], [], ["loc", [null, [159, 20], [159, 51]]]]], ["loc", [null, [157, 6], [160, 8]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 147,
              "column": 0
            },
            "end": {
              "line": 163,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui buttons adv-limit-config");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          dom.setAttribute(el2, "class", "ui icon button adv-limit-button");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "large flask icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element3, 'title');
          morphs[1] = dom.createElementMorph(element3);
          morphs[2] = dom.createMorphAt(element2, 3, 3);
          return morphs;
        },
        statements: [["attribute", "title", ["subexpr", "t", ["components.advlimit-dialog-content.title"], [], ["loc", [null, [152, 12], [152, 60]]]]], ["element", "action", ["showAdvLimitDialog"], [], ["loc", [null, [153, 6], [153, 37]]]], ["block", "if", [["get", "advLimitItems", ["loc", [null, [156, 10], [156, 23]]]]], [], 0, null, ["loc", [null, [156, 4], [161, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child9 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 171,
                "column": 6
              },
              "end": {
                "line": 174,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components/olv-toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["attribute", "class", ["get", "customButton.iconClasses", ["loc", [null, [172, 19], [172, 43]]]]], ["content", "customButton.buttonName", ["loc", [null, [173, 8], [173, 35]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 174,
                  "column": 6
                },
                "end": {
                  "line": 176,
                  "column": 6
                }
              },
              "moduleName": "dummy/templates/components/olv-toolbar.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "customButton.buttonName", ["loc", [null, [175, 8], [175, 35]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 176,
                  "column": 6
                },
                "end": {
                  "line": 178,
                  "column": 6
                }
              },
              "moduleName": "dummy/templates/components/olv-toolbar.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "t", ["components.olv-toolbar.custom-button-text"], [], ["loc", [null, [177, 8], [177, 57]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 174,
                "column": 6
              },
              "end": {
                "line": 178,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components/olv-toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "customButton.buttonName", ["loc", [null, [174, 16], [174, 39]]]]], [], 0, 1, ["loc", [null, [174, 6], [178, 6]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 164,
              "column": 0
            },
            "end": {
              "line": 180,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createAttrMorph(element1, 'title');
          morphs[2] = dom.createAttrMorph(element1, 'disabled');
          morphs[3] = dom.createElementMorph(element1);
          morphs[4] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["subexpr", "if", [["get", "customButton.buttonClasses", ["loc", [null, [167, 19], [167, 45]]]], ["get", "customButton.buttonClasses", ["loc", [null, [167, 46], [167, 72]]]]], [], ["loc", [null, [167, 14], [167, 74]]]], " button"]]], ["attribute", "title", ["subexpr", "if", [["get", "customButton.buttonTitle", ["loc", [null, [168, 15], [168, 39]]]], ["get", "customButton.buttonTitle", ["loc", [null, [168, 40], [168, 64]]]]], [], ["loc", [null, [168, 10], [168, 66]]]]], ["attribute", "disabled", ["get", "customButton.disabled", ["loc", [null, [169, 15], [169, 36]]]]], ["element", "action", ["customButtonAction", ["get", "customButton.buttonAction", ["loc", [null, [170, 34], [170, 59]]]]], [], ["loc", [null, [170, 4], [170, 61]]]], ["block", "if", [["get", "customButton.iconClasses", ["loc", [null, [171, 12], [171, 36]]]]], [], 0, 1, ["loc", [null, [171, 6], [178, 13]]]]],
        locals: ["customButton"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 206,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/olv-toolbar.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "olv-toolbar-info-modal-dialog ui small basic modal");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui icon header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("i");
        dom.setAttribute(el3, "class", "olvt icon");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "center aligned ui grid");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "type", "button");
        dom.setAttribute(el3, "class", "ui button icon olv-toolbar-info-modal-dialog-copy-button");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "actions");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ui button approve olv-toolbar-info-modal-dialog-ok-button");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui form");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui field olv-toolbar-info-modal-dialog-content center aligned ");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("textarea");
        dom.setAttribute(el4, "cols", "80");
        dom.setAttribute(el4, "rows", "20");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element21 = dom.childAt(fragment, [10]);
        var element22 = dom.childAt(element21, [3]);
        var element23 = dom.childAt(element22, [1]);
        var morphs = new Array(16);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        morphs[4] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        morphs[5] = dom.createMorphAt(fragment, 5, 5, contextualElement);
        morphs[6] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        morphs[7] = dom.createMorphAt(fragment, 7, 7, contextualElement);
        morphs[8] = dom.createMorphAt(fragment, 8, 8, contextualElement);
        morphs[9] = dom.createMorphAt(fragment, 9, 9, contextualElement);
        morphs[10] = dom.createMorphAt(dom.childAt(element21, [1]), 3, 3);
        morphs[11] = dom.createAttrMorph(element23, 'title');
        morphs[12] = dom.createElementMorph(element23);
        morphs[13] = dom.createMorphAt(element23, 1, 1);
        morphs[14] = dom.createMorphAt(dom.childAt(element22, [3, 1]), 1, 1);
        morphs[15] = dom.createMorphAt(dom.childAt(element21, [5, 1, 1]), 0, 0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "refreshButton", ["loc", [null, [1, 6], [1, 19]]]]], [], 0, null, ["loc", [null, [1, 0], [10, 7]]]], ["block", "if", [["get", "createNewButton", ["loc", [null, [11, 6], [11, 21]]]]], [], 1, null, ["loc", [null, [11, 0], [30, 7]]]], ["block", "if", [["get", "deleteButton", ["loc", [null, [31, 6], [31, 18]]]]], [], 2, null, ["loc", [null, [31, 0], [52, 7]]]], ["block", "if", [["get", "availableHierarchicalMode", ["loc", [null, [53, 6], [53, 31]]]]], [], 3, null, ["loc", [null, [53, 0], [70, 7]]]], ["block", "if", [["get", "enableFilters", ["loc", [null, [71, 6], [71, 19]]]]], [], 4, null, ["loc", [null, [71, 0], [91, 7]]]], ["block", "if", [["get", "filterButton", ["loc", [null, [92, 6], [92, 18]]]]], [], 5, null, ["loc", [null, [92, 0], [114, 7]]]], ["block", "if", [["get", "exportExcelButton", ["loc", [null, [115, 6], [115, 23]]]]], [], 6, null, ["loc", [null, [115, 0], [129, 7]]]], ["block", "if", [["get", "colsConfigButton", ["loc", [null, [130, 6], [130, 22]]]]], [], 7, null, ["loc", [null, [130, 0], [146, 7]]]], ["block", "if", [["get", "advLimitButton", ["loc", [null, [147, 6], [147, 20]]]]], [], 8, null, ["loc", [null, [147, 0], [163, 7]]]], ["block", "each", [["get", "customButtons", ["loc", [null, [164, 8], [164, 21]]]]], [], 9, null, ["loc", [null, [164, 0], [180, 9]]]], ["content", "_infoModalDialogCaption", ["loc", [null, [184, 4], [184, 31]]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.copy"], [], ["loc", [null, [190, 10], [190, 45]]]]], ["element", "action", ["copyJSONContent"], [], ["loc", [null, [191, 4], [191, 32]]]], ["inline", "t", ["components.olv-toolbar.copy"], [], ["loc", [null, [192, 6], [192, 41]]]], ["inline", "t", ["components.olv-toolbar.close"], [], ["loc", [null, [196, 6], [196, 42]]]], ["content", "_infoModalDialogContent", ["loc", [null, [202, 36], [202, 63]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9]
    };
  })());
});
define("dummy/templates/components/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 9,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui segment");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ui segment");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h4");
          dom.setAttribute(el3, "class", "ui header");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("pre");
          var el4 = dom.createElement("code");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element4, [3, 0]), 0, 0);
          return morphs;
        },
        statements: [["inline", "t", ["components.settings-example.component-template-caption"], [], ["loc", [null, [5, 28], [5, 90]]]], ["content", "componentTemplateText", ["loc", [null, [6, 17], [6, 42]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 23,
                  "column": 16
                },
                "end": {
                  "line": 25,
                  "column": 16
                }
              },
              "moduleName": "dummy/templates/components/settings-example.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("=\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "settingMetadata.bindedControllerPropertieDisplayName", ["loc", [null, [24, 18], [24, 74]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 25,
                  "column": 16
                },
                "end": {
                  "line": 27,
                  "column": 16
                }
              },
              "moduleName": "dummy/templates/components/settings-example.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("=\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [26, 18], [26, 67]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 30,
                  "column": 16
                },
                "end": {
                  "line": 33,
                  "column": 16
                }
              },
              "moduleName": "dummy/templates/components/settings-example.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "to-string", [["get", "settingMetadata.settingValue", ["loc", [null, [32, 30], [32, 58]]]]], [], ["loc", [null, [32, 18], [32, 60]]]]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 35,
                    "column": 18
                  },
                  "end": {
                    "line": 40,
                    "column": 18
                  }
                },
                "moduleName": "dummy/templates/components/settings-example.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "mut", [["subexpr", "get", [["get", "controllerProperties", ["loc", [null, [38, 40], [38, 60]]]], ["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [38, 61], [38, 106]]]]], [], ["loc", [null, [38, 35], [38, 107]]]]], [], ["loc", [null, [38, 30], [38, 108]]]]], ["loc", [null, [36, 20], [39, 22]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 42,
                    "column": 18
                  },
                  "end": {
                    "line": 47,
                    "column": 18
                  }
                },
                "moduleName": "dummy/templates/components/settings-example.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "input", [], ["type", "text", "value", ["subexpr", "mut", [["subexpr", "get", [["get", "controllerProperties", ["loc", [null, [45, 38], [45, 58]]]], ["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [45, 59], [45, 104]]]]], [], ["loc", [null, [45, 33], [45, 105]]]]], [], ["loc", [null, [45, 28], [45, 106]]]]], ["loc", [null, [43, 20], [46, 22]]]]],
              locals: [],
              templates: []
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 49,
                    "column": 18
                  },
                  "end": {
                    "line": 53,
                    "column": 18
                  }
                },
                "moduleName": "dummy/templates/components/settings-example.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "number-input", [], ["value", ["subexpr", "mut", [["subexpr", "get", [["get", "controllerProperties", ["loc", [null, [51, 38], [51, 58]]]], ["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [51, 59], [51, 104]]]]], [], ["loc", [null, [51, 33], [51, 105]]]]], [], ["loc", [null, [51, 28], [51, 106]]]]], ["loc", [null, [50, 20], [52, 22]]]]],
              locals: [],
              templates: []
            };
          })();
          var child3 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 55,
                    "column": 18
                  },
                  "end": {
                    "line": 60,
                    "column": 18
                  }
                },
                "moduleName": "dummy/templates/components/settings-example.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "flexberry-simpledatetime", [], ["type", "datetime-local", "value", ["subexpr", "mut", [["subexpr", "get", [["get", "controllerProperties", ["loc", [null, [58, 38], [58, 58]]]], ["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [58, 59], [58, 104]]]]], [], ["loc", [null, [58, 33], [58, 105]]]]], [], ["loc", [null, [58, 28], [58, 106]]]]], ["loc", [null, [56, 20], [59, 22]]]]],
              locals: [],
              templates: []
            };
          })();
          var child4 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 65,
                      "column": 22
                    },
                    "end": {
                      "line": 69,
                      "column": 22
                    }
                  },
                  "moduleName": "dummy/templates/components/settings-example.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("option");
                  var el2 = dom.createTextNode("\n                          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                        ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var morphs = new Array(3);
                  morphs[0] = dom.createAttrMorph(element0, 'value');
                  morphs[1] = dom.createAttrMorph(element0, 'selected');
                  morphs[2] = dom.createMorphAt(element0, 1, 1);
                  return morphs;
                },
                statements: [["attribute", "value", ["get", "item", ["loc", [null, [66, 40], [66, 44]]]]], ["attribute", "selected", ["subexpr", "eq", [["subexpr", "get", [["get", "controllerProperties", ["loc", [null, [66, 66], [66, 86]]]], ["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [66, 87], [66, 132]]]]], [], ["loc", [null, [66, 61], [66, 133]]]], ["get", "item", ["loc", [null, [66, 134], [66, 138]]]]], [], ["loc", [null, [66, 56], [66, 140]]]]], ["inline", "to-string", [["get", "item", ["loc", [null, [67, 38], [67, 42]]]]], [], ["loc", [null, [67, 26], [67, 44]]]]],
                locals: ["item"],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 62,
                    "column": 18
                  },
                  "end": {
                    "line": 71,
                    "column": 18
                  }
                },
                "moduleName": "dummy/templates/components/settings-example.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("select");
                var el2 = dom.createTextNode("\n                      ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("option");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("                    ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element1, 'onchange');
                morphs[1] = dom.createMorphAt(element1, 3, 3);
                return morphs;
              },
              statements: [["attribute", "onchange", ["subexpr", "action", [["subexpr", "mut", [["subexpr", "get", [["get", "controllerProperties", ["loc", [null, [63, 56], [63, 76]]]], ["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [63, 77], [63, 122]]]]], [], ["loc", [null, [63, 51], [63, 123]]]]], [], ["loc", [null, [63, 46], [63, 124]]]]], ["value", "target.value"], ["loc", [null, [63, 37], [63, 147]]]]], ["block", "each", [["get", "settingMetadata.settingAvailableItems", ["loc", [null, [65, 30], [65, 67]]]]], [], 0, null, ["loc", [null, [65, 22], [69, 31]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child5 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 73,
                    "column": 18
                  },
                  "end": {
                    "line": 78,
                    "column": 18
                  }
                },
                "moduleName": "dummy/templates/components/settings-example.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "css-picker", [], ["value", ["subexpr", "mut", [["subexpr", "get", [["get", "controllerProperties", ["loc", [null, [75, 38], [75, 58]]]], ["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [75, 59], [75, 104]]]]], [], ["loc", [null, [75, 33], [75, 105]]]]], [], ["loc", [null, [75, 28], [75, 106]]]], "items", ["subexpr", "@mut", [["get", "settingMetadata.settingAvailableItems", ["loc", [null, [76, 28], [76, 65]]]]], [], []]], ["loc", [null, [74, 20], [77, 22]]]]],
              locals: [],
              templates: []
            };
          })();
          var child6 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 80,
                    "column": 18
                  },
                  "end": {
                    "line": 82,
                    "column": 18
                  }
                },
                "moduleName": "dummy/templates/components/settings-example.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "to-string", [["subexpr", "get", [["get", "controllerProperties", ["loc", [null, [81, 37], [81, 57]]]], ["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [81, 58], [81, 103]]]]], [], ["loc", [null, [81, 32], [81, 104]]]]], [], ["loc", [null, [81, 20], [81, 106]]]]],
              locals: [],
              templates: []
            };
          })();
          var child7 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 84,
                    "column": 18
                  },
                  "end": {
                    "line": 86,
                    "column": 18
                  }
                },
                "moduleName": "dummy/templates/components/settings-example.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "to-string", [["subexpr", "get", [["get", "controllerProperties", ["loc", [null, [85, 37], [85, 57]]]], ["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [85, 58], [85, 103]]]]], [], ["loc", [null, [85, 32], [85, 104]]]]], [], ["loc", [null, [85, 20], [85, 106]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 33,
                  "column": 16
                },
                "end": {
                  "line": 87,
                  "column": 16
                }
              },
              "moduleName": "dummy/templates/components/settings-example.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(8);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
              morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
              morphs[4] = dom.createMorphAt(fragment, 8, 8, contextualElement);
              morphs[5] = dom.createMorphAt(fragment, 10, 10, contextualElement);
              morphs[6] = dom.createMorphAt(fragment, 12, 12, contextualElement);
              morphs[7] = dom.createMorphAt(fragment, 14, 14, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "settingMetadata.settingType", ["loc", [null, [35, 28], [35, 55]]]], "boolean"], [], ["loc", [null, [35, 24], [35, 66]]]]], [], 0, null, ["loc", [null, [35, 18], [40, 25]]]], ["block", "if", [["subexpr", "eq", [["get", "settingMetadata.settingType", ["loc", [null, [42, 28], [42, 55]]]], "string"], [], ["loc", [null, [42, 24], [42, 65]]]]], [], 1, null, ["loc", [null, [42, 18], [47, 25]]]], ["block", "if", [["subexpr", "eq", [["get", "settingMetadata.settingType", ["loc", [null, [49, 28], [49, 55]]]], "number"], [], ["loc", [null, [49, 24], [49, 65]]]]], [], 2, null, ["loc", [null, [49, 18], [53, 25]]]], ["block", "if", [["subexpr", "or", [["subexpr", "eq", [["get", "settingMetadata.settingType", ["loc", [null, [55, 32], [55, 59]]]], "date"], [], ["loc", [null, [55, 28], [55, 67]]]], ["subexpr", "eq", [["get", "settingMetadata.settingType", ["loc", [null, [55, 72], [55, 99]]]], "datetime"], [], ["loc", [null, [55, 68], [55, 111]]]]], [], ["loc", [null, [55, 24], [55, 112]]]]], [], 3, null, ["loc", [null, [55, 18], [60, 25]]]], ["block", "if", [["subexpr", "eq", [["get", "settingMetadata.settingType", ["loc", [null, [62, 28], [62, 55]]]], "enumeration"], [], ["loc", [null, [62, 24], [62, 70]]]]], [], 4, null, ["loc", [null, [62, 18], [71, 25]]]], ["block", "if", [["subexpr", "eq", [["get", "settingMetadata.settingType", ["loc", [null, [73, 28], [73, 55]]]], "css"], [], ["loc", [null, [73, 24], [73, 62]]]]], [], 5, null, ["loc", [null, [73, 18], [78, 25]]]], ["block", "if", [["subexpr", "eq", [["get", "settingMetadata.settingType", ["loc", [null, [80, 28], [80, 55]]]], "hasManyArray"], [], ["loc", [null, [80, 24], [80, 71]]]]], [], 6, null, ["loc", [null, [80, 18], [82, 25]]]], ["block", "if", [["subexpr", "eq", [["get", "settingMetadata.settingType", ["loc", [null, [84, 28], [84, 55]]]], "model"], [], ["loc", [null, [84, 24], [84, 64]]]]], [], 7, null, ["loc", [null, [84, 18], [86, 25]]]]],
            locals: [],
            templates: [child0, child1, child2, child3, child4, child5, child6, child7]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 12
              },
              "end": {
                "line": 88,
                "column": 14
              }
            },
            "moduleName": "dummy/templates/components/settings-example.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "settingMetadata.bindedControllerPropertieDisplayName", ["loc", [null, [23, 22], [23, 74]]]]], [], 0, 1, ["loc", [null, [23, 16], [27, 23]]]], ["block", "if", [["get", "settingMetadata.settingIsWithoutUI", ["loc", [null, [30, 22], [30, 56]]]]], [], 2, 3, ["loc", [null, [30, 16], [87, 23]]]]],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 91,
                "column": 14
              },
              "end": {
                "line": 93,
                "column": 14
              }
            },
            "moduleName": "dummy/templates/components/settings-example.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("=");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["content", "settingMetadata.settingName", ["loc", [null, [92, 16], [92, 47]]]], ["inline", "to-string", [["get", "settingMetadata.settingValue", ["loc", [null, [92, 60], [92, 88]]]]], [], ["loc", [null, [92, 48], [92, 90]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 93,
                "column": 14
              },
              "end": {
                "line": 95,
                "column": 14
              }
            },
            "moduleName": "dummy/templates/components/settings-example.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("=");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "to-string", [["get", "settingMetadata.settingName", ["loc", [null, [94, 28], [94, 55]]]]], [], ["loc", [null, [94, 16], [94, 57]]]], ["inline", "to-string", [["subexpr", "get", [["get", "controllerProperties", ["loc", [null, [94, 75], [94, 95]]]], ["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [94, 96], [94, 141]]]]], [], ["loc", [null, [94, 70], [94, 142]]]]], [], ["loc", [null, [94, 58], [94, 144]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 8
            },
            "end": {
              "line": 101,
              "column": 8
            }
          },
          "moduleName": "dummy/templates/components/settings-example.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n              ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("=");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [5]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
          morphs[2] = dom.createMorphAt(element3, 1, 1);
          morphs[3] = dom.createMorphAt(element3, 3, 3);
          return morphs;
        },
        statements: [["block", "if", [["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [21, 18], [21, 63]]]]], [], 0, null, ["loc", [null, [21, 12], [88, 21]]]], ["block", "if", [["subexpr", "or", [["get", "settingMetadata.settingIsWithoutUI", ["loc", [null, [91, 24], [91, 58]]]], ["subexpr", "not", [["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [91, 64], [91, 109]]]]], [], ["loc", [null, [91, 59], [91, 110]]]]], [], ["loc", [null, [91, 20], [91, 111]]]]], [], 1, 2, ["loc", [null, [91, 14], [95, 21]]]], ["inline", "to-string", [["get", "settingMetadata.settingName", ["loc", [null, [98, 26], [98, 53]]]]], [], ["loc", [null, [98, 14], [98, 55]]]], ["inline", "to-string", [["get", "settingMetadata.settingDefaultValue", ["loc", [null, [98, 68], [98, 103]]]]], [], ["loc", [null, [98, 56], [98, 105]]]]],
        locals: ["settingMetadata"],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 112,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ui segments");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui segment");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3, "class", "ui celled table flexberry-word-break");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("thead");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tr");
        var el6 = dom.createElement("th");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n      ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui segment");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui segment");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h4");
        dom.setAttribute(el4, "class", "ui header");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element5 = dom.childAt(fragment, [0]);
        var element6 = dom.childAt(element5, [3, 1]);
        var element7 = dom.childAt(element6, [1, 1]);
        var element8 = dom.childAt(element5, [5, 1]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(element5, 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element7, [0]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element7, [2]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element7, [4]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element6, [3]), 1, 1);
        morphs[5] = dom.createAttrMorph(element8, 'style');
        morphs[6] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[7] = dom.createMorphAt(element8, 3, 3);
        return morphs;
      },
      statements: [["block", "if", [["get", "componentTemplateText", ["loc", [null, [2, 8], [2, 29]]]]], [], 0, null, ["loc", [null, [2, 2], [9, 9]]]], ["inline", "t", ["components.settings-example.controller-properties-caption"], [], ["loc", [null, [13, 16], [13, 81]]]], ["inline", "t", ["components.settings-example.component-current-settings-caption"], [], ["loc", [null, [14, 12], [14, 82]]]], ["inline", "t", ["components.settings-example.component-default-settings-caption"], [], ["loc", [null, [15, 12], [15, 82]]]], ["block", "each", [["get", "componentSettingsMetadata", ["loc", [null, [18, 16], [18, 41]]]]], [], 1, null, ["loc", [null, [18, 8], [101, 17]]]], ["attribute", "style", ["concat", ["overflow: ", ["get", "componentBlockOverflow", ["loc", [null, [106, 47], [106, 69]]]]]]], ["inline", "t", ["components.settings-example.component-with-applied-settings-caption"], [], ["loc", [null, [107, 28], [107, 103]]]], ["content", "yield", ["loc", [null, [108, 6], [108, 15]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/components/ui-checkbox", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/ui-checkbox.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("input");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("label");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        if (this.cachedFragment) {
          dom.repairClonedNode(element0, [], true);
        }
        var morphs = new Array(6);
        morphs[0] = dom.createAttrMorph(element0, 'type');
        morphs[1] = dom.createAttrMorph(element0, 'name');
        morphs[2] = dom.createAttrMorph(element0, 'checked');
        morphs[3] = dom.createAttrMorph(element0, 'disabled');
        morphs[4] = dom.createAttrMorph(element0, 'data-id');
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "type", ["get", "type", ["loc", [null, [1, 14], [1, 18]]]]], ["attribute", "name", ["get", "name", ["loc", [null, [1, 28], [1, 32]]]]], ["attribute", "checked", ["get", "checked", ["loc", [null, [1, 45], [1, 52]]]]], ["attribute", "disabled", ["get", "readonly", ["loc", [null, [1, 66], [1, 74]]]]], ["attribute", "data-id", ["get", "data-id", ["loc", [null, [1, 87], [1, 94]]]]], ["content", "label", ["loc", [null, [2, 7], [2, 16]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/ui-dropdown", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/ui-dropdown.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/ui-message-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/ui-message-content.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "header");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "caption", ["loc", [null, [2, 22], [2, 33]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/ui-message-content.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "message", ["loc", [null, [5, 5], [5, 16]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/ui-message-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "caption", ["loc", [null, [1, 6], [1, 13]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["block", "if", [["get", "message", ["loc", [null, [4, 6], [4, 13]]]]], [], 1, null, ["loc", [null, [4, 0], [6, 7]]]], ["content", "yield", ["loc", [null, [7, 0], [7, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/components/ui-message", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/ui-message.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "icon", ["loc", [null, [2, 14], [2, 18]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/ui-message.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "close icon");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/ui-message.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "content");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "partial", ["components/ui-message-content"], [], ["loc", [null, [9, 4], [9, 47]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/ui-message.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["components/ui-message-content"], [], ["loc", [null, [12, 2], [12, 45]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/ui-message.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "icon", ["loc", [null, [1, 6], [1, 10]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["block", "if", [["get", "closeable", ["loc", [null, [4, 6], [4, 15]]]]], [], 1, null, ["loc", [null, [4, 0], [6, 7]]]], ["block", "if", [["get", "icon", ["loc", [null, [7, 6], [7, 10]]]]], [], 2, 3, ["loc", [null, [7, 0], [13, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("dummy/templates/components/ui-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/ui-modal.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/ui-radio", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/ui-radio.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("input");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("label");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        if (this.cachedFragment) {
          dom.repairClonedNode(element0, [], true);
        }
        var morphs = new Array(6);
        morphs[0] = dom.createAttrMorph(element0, 'type');
        morphs[1] = dom.createAttrMorph(element0, 'name');
        morphs[2] = dom.createAttrMorph(element0, 'checked');
        morphs[3] = dom.createAttrMorph(element0, 'disabled');
        morphs[4] = dom.createAttrMorph(element0, 'data-id');
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "type", ["get", "type", ["loc", [null, [1, 14], [1, 18]]]]], ["attribute", "name", ["get", "name", ["loc", [null, [1, 28], [1, 32]]]]], ["attribute", "checked", ["get", "checked", ["loc", [null, [1, 45], [1, 52]]]]], ["attribute", "disabled", ["get", "readonly", ["loc", [null, [1, 66], [1, 74]]]]], ["attribute", "data-id", ["get", "data-id", ["loc", [null, [1, 87], [1, 94]]]]], ["content", "label", ["loc", [null, [2, 7], [2, 16]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/delete-rows-modal-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/delete-rows-modal-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "actions");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ui primary approve large button");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ui cancel large button");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["forms.application.delete-rows-modal-dialog.confirm-button-caption"], [], ["loc", [null, [14, 6], [14, 79]]]], ["inline", "t", ["forms.application.delete-rows-modal-dialog.cancel-button-caption"], [], ["loc", [null, [17, 6], [17, 78]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 17
          }
        },
        "moduleName": "dummy/templates/delete-rows-modal-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "useOkButton", false, "useCloseButton", false, "close", ["subexpr", "action", ["closeModalDialog"], [], ["loc", [null, [5, 8], [5, 35]]]], "settings", ["subexpr", "hash", [], ["closable", false, "onApprove", ["subexpr", "action", [["get", "approveDeleting", ["loc", [null, [8, 22], [8, 37]]]]], [], ["loc", [null, [8, 14], [8, 38]]]], "onDeny", ["subexpr", "action", [["get", "denyDeleting", ["loc", [null, [9, 19], [9, 31]]]]], [], ["loc", [null, [9, 11], [9, 32]]]]], ["loc", [null, [6, 11], [10, 3]]]]], 0, null, ["loc", [null, [1, 0], [20, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-application-user-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 8
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [31, 62], [31, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [31, 80], [31, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 8
              },
              "end": {
                "line": 35,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [34, 68], [34, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [34, 94], [34, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 8
              },
              "end": {
                "line": 38,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [37, 66], [37, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [37, 86], [37, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [30, 23], [30, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [30, 43], [30, 63]]]]], [], ["loc", [null, [30, 38], [30, 64]]]]], [], ["loc", [null, [30, 18], [30, 65]]]]], [], 0, null, ["loc", [null, [30, 8], [32, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [33, 23], [33, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [33, 43], [33, 63]]]]], [], ["loc", [null, [33, 38], [33, 64]]]]], [], ["loc", [null, [33, 18], [33, 65]]]]], [], 1, null, ["loc", [null, [33, 8], [35, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [36, 23], [36, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [36, 44], [36, 58]]]]], [], ["loc", [null, [36, 39], [36, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [36, 65], [36, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [36, 80], [36, 100]]]]], [], ["loc", [null, [36, 60], [36, 101]]]]], [], ["loc", [null, [36, 35], [36, 102]]]]], [], ["loc", [null, [36, 18], [36, 103]]]]], [], 2, null, ["loc", [null, [36, 8], [38, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 157,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("-->");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [9, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [11]);
        var element7 = dom.childAt(element3, [13]);
        var element8 = dom.childAt(element3, [15]);
        var element9 = dom.childAt(element3, [17]);
        var element10 = dom.childAt(element3, [19]);
        var element11 = dom.childAt(element3, [21]);
        var element12 = dom.childAt(element3, [23]);
        var element13 = dom.childAt(element3, [25]);
        var element14 = dom.childAt(element3, [27]);
        var element15 = dom.childAt(element3, [29]);
        var element16 = dom.childAt(element3, [31]);
        var element17 = dom.childAt(element3, [33]);
        var element18 = dom.childAt(element3, [35]);
        var element19 = dom.childAt(element3, [37]);
        var morphs = new Array(53);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element3, 1, 1);
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createMorphAt(element3, 5, 5);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [7, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 0, 0);
        morphs[8] = dom.createAttrMorph(element6, 'class');
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createAttrMorph(element7, 'class');
        morphs[12] = dom.createMorphAt(element7, 1, 1);
        morphs[13] = dom.createMorphAt(element7, 3, 3);
        morphs[14] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[15] = dom.createMorphAt(element8, 3, 3);
        morphs[16] = dom.createAttrMorph(element9, 'class');
        morphs[17] = dom.createMorphAt(element9, 1, 1);
        morphs[18] = dom.createMorphAt(element9, 3, 3);
        morphs[19] = dom.createAttrMorph(element10, 'class');
        morphs[20] = dom.createMorphAt(element10, 1, 1);
        morphs[21] = dom.createMorphAt(element10, 3, 3);
        morphs[22] = dom.createAttrMorph(element11, 'class');
        morphs[23] = dom.createMorphAt(element11, 1, 1);
        morphs[24] = dom.createMorphAt(element11, 3, 3);
        morphs[25] = dom.createAttrMorph(element12, 'class');
        morphs[26] = dom.createMorphAt(dom.childAt(element12, [1]), 0, 0);
        morphs[27] = dom.createMorphAt(element12, 3, 3);
        morphs[28] = dom.createMorphAt(element12, 5, 5);
        morphs[29] = dom.createAttrMorph(element13, 'class');
        morphs[30] = dom.createMorphAt(element13, 1, 1);
        morphs[31] = dom.createMorphAt(element13, 3, 3);
        morphs[32] = dom.createAttrMorph(element14, 'class');
        morphs[33] = dom.createMorphAt(element14, 1, 1);
        morphs[34] = dom.createMorphAt(element14, 3, 3);
        morphs[35] = dom.createAttrMorph(element15, 'class');
        morphs[36] = dom.createMorphAt(element15, 1, 1);
        morphs[37] = dom.createMorphAt(element15, 3, 3);
        morphs[38] = dom.createAttrMorph(element16, 'class');
        morphs[39] = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
        morphs[40] = dom.createMorphAt(element16, 3, 3);
        morphs[41] = dom.createMorphAt(element16, 5, 5);
        morphs[42] = dom.createAttrMorph(element17, 'class');
        morphs[43] = dom.createMorphAt(dom.childAt(element17, [1]), 0, 0);
        morphs[44] = dom.createMorphAt(element17, 3, 3);
        morphs[45] = dom.createMorphAt(element17, 5, 5);
        morphs[46] = dom.createAttrMorph(element18, 'class');
        morphs[47] = dom.createMorphAt(dom.childAt(element18, [1]), 0, 0);
        morphs[48] = dom.createMorphAt(element18, 3, 3);
        morphs[49] = dom.createMorphAt(element18, 5, 5);
        morphs[50] = dom.createAttrMorph(element19, 'class');
        morphs[51] = dom.createMorphAt(element19, 1, 1);
        morphs[52] = dom.createMorphAt(element19, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.caption"], [], ["loc", [null, [1, 22], [1, 87]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [21, 26], [21, 31]]]]], [], []]], ["loc", [null, [21, 2], [21, 33]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [24, 43], [24, 55]]]]], [], []]], ["loc", [null, [24, 6], [24, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [29, 16], [29, 24]]]]], [], 0, null, ["loc", [null, [29, 6], [39, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [40, 59], [40, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [40, 78], [40, 119]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [43, 25], [43, 42]]]], "error", ""], [], ["loc", [null, [43, 20], [43, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [45, 12], [45, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.name-caption"], [], ["loc", [null, [46, 12], [46, 80]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [47, 15], [47, 23]]]]], [], []]], ["loc", [null, [44, 4], [48, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [49, 40], [49, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [49, 4], [49, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.eMail", ["loc", [null, [51, 25], [51, 43]]]], "error", ""], [], ["loc", [null, [51, 20], [51, 56]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.eMail", ["loc", [null, [53, 12], [53, 23]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.eMail-caption"], [], ["loc", [null, [54, 12], [54, 81]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [55, 15], [55, 23]]]]], [], []]], ["loc", [null, [52, 4], [56, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.eMail", ["loc", [null, [57, 40], [57, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [57, 4], [57, 80]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone1-required-caption"], [], ["loc", [null, [60, 11], [60, 92]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.phone1IsRequired", ["loc", [null, [62, 12], [62, 34]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [63, 15], [63, 23]]]]], [], []]], ["loc", [null, [61, 4], [64, 6]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.phone1", ["loc", [null, [66, 25], [66, 44]]]], "error", ""], [], ["loc", [null, [66, 20], [66, 57]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.phone1", ["loc", [null, [68, 12], [68, 24]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone1-caption"], [], ["loc", [null, [69, 12], [69, 82]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [70, 15], [70, 23]]]]], [], []]], ["loc", [null, [67, 4], [71, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.phone1", ["loc", [null, [72, 40], [72, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [72, 4], [72, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.phone2", ["loc", [null, [74, 25], [74, 44]]]], "error", ""], [], ["loc", [null, [74, 20], [74, 57]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.phone2", ["loc", [null, [76, 12], [76, 24]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone2-caption"], [], ["loc", [null, [77, 12], [77, 82]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [78, 15], [78, 23]]]]], [], []]], ["loc", [null, [75, 4], [79, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.phone2", ["loc", [null, [80, 40], [80, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [80, 4], [80, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.phone3", ["loc", [null, [82, 25], [82, 44]]]], "error", ""], [], ["loc", [null, [82, 20], [82, 57]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.phone3", ["loc", [null, [84, 12], [84, 24]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone3-caption"], [], ["loc", [null, [85, 12], [85, 82]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [86, 15], [86, 23]]]]], [], []]], ["loc", [null, [83, 4], [87, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.phone3", ["loc", [null, [88, 40], [88, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [88, 4], [88, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.activated", ["loc", [null, [90, 25], [90, 47]]]], "error", ""], [], ["loc", [null, [90, 20], [90, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.activated-caption"], [], ["loc", [null, [91, 11], [91, 86]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.activated", ["loc", [null, [93, 12], [93, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [94, 15], [94, 23]]]]], [], []]], ["loc", [null, [92, 4], [95, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.activated", ["loc", [null, [96, 40], [96, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [96, 4], [96, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.vK", ["loc", [null, [98, 25], [98, 40]]]], "error", ""], [], ["loc", [null, [98, 20], [98, 53]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.vK", ["loc", [null, [100, 12], [100, 20]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.vK-caption"], [], ["loc", [null, [101, 12], [101, 78]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [102, 15], [102, 23]]]]], [], []]], ["loc", [null, [99, 4], [103, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.vK", ["loc", [null, [104, 40], [104, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [104, 4], [104, 77]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.facebook", ["loc", [null, [106, 25], [106, 46]]]], "error", ""], [], ["loc", [null, [106, 20], [106, 59]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.facebook", ["loc", [null, [108, 12], [108, 26]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.facebook-caption"], [], ["loc", [null, [109, 12], [109, 84]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [110, 15], [110, 23]]]]], [], []]], ["loc", [null, [107, 4], [111, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.facebook", ["loc", [null, [112, 40], [112, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [112, 4], [112, 83]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.twitter", ["loc", [null, [114, 25], [114, 45]]]], "error", ""], [], ["loc", [null, [114, 20], [114, 58]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.twitter", ["loc", [null, [116, 12], [116, 25]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.twitter-caption"], [], ["loc", [null, [117, 12], [117, 83]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [118, 15], [118, 23]]]]], [], []]], ["loc", [null, [115, 4], [119, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.twitter", ["loc", [null, [120, 40], [120, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [120, 4], [120, 82]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.birthday", ["loc", [null, [122, 25], [122, 46]]]], "error", ""], [], ["loc", [null, [122, 20], [122, 59]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.birthday-caption"], [], ["loc", [null, [123, 11], [123, 85]]]], ["inline", "flexberry-datepicker", [], ["value", ["subexpr", "@mut", [["get", "model.birthday", ["loc", [null, [125, 12], [125, 26]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [126, 15], [126, 23]]]]], [], []]], ["loc", [null, [124, 4], [127, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.birthday", ["loc", [null, [128, 40], [128, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [128, 4], [128, 83]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.gender", ["loc", [null, [130, 25], [130, 44]]]], "error", ""], [], ["loc", [null, [130, 20], [130, 57]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.gender-caption"], [], ["loc", [null, [131, 11], [131, 83]]]], ["inline", "flexberry-dropdown", [], ["value", ["subexpr", "@mut", [["get", "model.gender", ["loc", [null, [133, 12], [133, 24]]]]], [], []], "items", ["subexpr", "flexberry-enum", ["ember-flexberry-dummy-gender"], [], ["loc", [null, [134, 12], [134, 59]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [135, 15], [135, 23]]]]], [], []], "direction", "upward"], ["loc", [null, [132, 4], [137, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.gender", ["loc", [null, [138, 40], [138, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [138, 4], [138, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.vip", ["loc", [null, [140, 25], [140, 41]]]], "error", ""], [], ["loc", [null, [140, 20], [140, 54]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.vip-caption"], [], ["loc", [null, [141, 11], [141, 80]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.vip", ["loc", [null, [143, 12], [143, 21]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [144, 15], [144, 23]]]]], [], []]], ["loc", [null, [142, 4], [145, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.vip", ["loc", [null, [146, 40], [146, 56]]]]], [], []], "pointing", "pointing"], ["loc", [null, [146, 4], [146, 78]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.karma", ["loc", [null, [148, 25], [148, 43]]]], "error", ""], [], ["loc", [null, [148, 20], [148, 56]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.karma", ["loc", [null, [150, 12], [150, 23]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.karma-caption"], [], ["loc", [null, [151, 12], [151, 81]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [152, 15], [152, 23]]]]], [], []]], ["loc", [null, [149, 4], [153, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.karma", ["loc", [null, [154, 40], [154, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [154, 4], [154, 80]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-application-user-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 54,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(element0, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [5]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "useCloseButton", false, "useOkButton", true], ["loc", [null, [1, 0], [5, 2]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-list.caption"], [], ["loc", [null, [6, 4], [6, 69]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [11, 12], [11, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [12, 12], [12, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [13, 12], [13, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [14, 11], [14, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [15, 11], [15, 42]]]]], ["loc", [null, [8, 2], [16, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [20, 12], [20, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [21, 12], [21, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [22, 12], [22, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [23, 11], [23, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [24, 11], [24, 40]]]]], ["loc", [null, [17, 2], [25, 4]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [28, 12], [28, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-application-user", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [30, 20], [30, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [31, 18], [31, 31]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [34, 12], [34, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [36, 10], [36, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [37, 17], [37, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [38, 18], [38, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [39, 22], [39, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [40, 20], [40, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [41, 16], [41, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [42, 17], [42, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [43, 23], [43, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [44, 27], [44, 60]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [45, 17], [45, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [46, 13], [46, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [47, 13], [47, 32]]]], "componentName", "applicationUserObjectListView", "deleteButton", true, "showCheckBoxInRow", true], ["loc", [null, [27, 2], [51, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-comment-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 8
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-comment-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [31, 62], [31, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [31, 80], [31, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 8
              },
              "end": {
                "line": 35,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-comment-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [34, 68], [34, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [34, 94], [34, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 8
              },
              "end": {
                "line": 38,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-comment-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [37, 66], [37, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [37, 86], [37, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-comment-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [30, 23], [30, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [30, 43], [30, 63]]]]], [], ["loc", [null, [30, 38], [30, 64]]]]], [], ["loc", [null, [30, 18], [30, 65]]]]], [], 0, null, ["loc", [null, [30, 8], [32, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [33, 23], [33, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [33, 43], [33, 63]]]]], [], ["loc", [null, [33, 38], [33, 64]]]]], [], ["loc", [null, [33, 18], [33, 65]]]]], [], 1, null, ["loc", [null, [33, 8], [35, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [36, 23], [36, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [36, 44], [36, 58]]]]], [], ["loc", [null, [36, 39], [36, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [36, 65], [36, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [36, 80], [36, 100]]]]], [], ["loc", [null, [36, 60], [36, 101]]]]], [], ["loc", [null, [36, 35], [36, 102]]]]], [], ["loc", [null, [36, 18], [36, 103]]]]], [], 2, null, ["loc", [null, [36, 8], [38, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 100,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-comment-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [9, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [11]);
        var element7 = dom.childAt(element3, [13]);
        var element8 = dom.childAt(element3, [15]);
        var element9 = dom.childAt(element3, [17]);
        var element10 = dom.childAt(element3, [19]);
        var morphs = new Array(25);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element3, 1, 1);
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createMorphAt(element3, 5, 5);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [7, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 0, 0);
        morphs[8] = dom.createAttrMorph(element6, 'class');
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createAttrMorph(element7, 'class');
        morphs[12] = dom.createMorphAt(element7, 1, 1);
        morphs[13] = dom.createMorphAt(element7, 3, 3);
        morphs[14] = dom.createAttrMorph(element8, 'class');
        morphs[15] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[16] = dom.createMorphAt(element8, 3, 3);
        morphs[17] = dom.createMorphAt(element8, 5, 5);
        morphs[18] = dom.createAttrMorph(element9, 'class');
        morphs[19] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        morphs[20] = dom.createMorphAt(element9, 3, 3);
        morphs[21] = dom.createMorphAt(element9, 5, 5);
        morphs[22] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        morphs[23] = dom.createMorphAt(element10, 3, 3);
        morphs[24] = dom.createMorphAt(element10, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-comment-edit.caption"], [], ["loc", [null, [1, 22], [1, 78]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [21, 26], [21, 31]]]]], [], []]], ["loc", [null, [21, 2], [21, 33]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [24, 43], [24, 55]]]]], [], []]], ["loc", [null, [24, 6], [24, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [29, 16], [29, 24]]]]], [], 0, null, ["loc", [null, [29, 6], [39, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [40, 59], [40, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [40, 78], [40, 119]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.text", ["loc", [null, [43, 25], [43, 42]]]], "error", ""], [], ["loc", [null, [43, 20], [43, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [45, 12], [45, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-comment-edit.text-caption"], [], ["loc", [null, [46, 12], [46, 71]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [47, 15], [47, 23]]]]], [], []]], ["loc", [null, [44, 4], [48, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.text", ["loc", [null, [49, 40], [49, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [49, 4], [49, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.votes", ["loc", [null, [51, 25], [51, 43]]]], "error", ""], [], ["loc", [null, [51, 20], [51, 56]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.votes", ["loc", [null, [53, 12], [53, 23]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-comment-edit.votes-caption"], [], ["loc", [null, [54, 12], [54, 72]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [55, 15], [55, 23]]]]], [], []]], ["loc", [null, [52, 4], [56, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.votes", ["loc", [null, [57, 40], [57, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [57, 4], [57, 80]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.moderated", ["loc", [null, [59, 25], [59, 47]]]], "error", ""], [], ["loc", [null, [59, 20], [59, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-comment-edit.moderated-caption"], [], ["loc", [null, [60, 11], [60, 77]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.moderated", ["loc", [null, [62, 12], [62, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [63, 15], [63, 23]]]]], [], []]], ["loc", [null, [61, 4], [64, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.moderated", ["loc", [null, [65, 40], [65, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [65, 4], [65, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.author", ["loc", [null, [67, 25], [67, 44]]]], "error", ""], [], ["loc", [null, [67, 20], [67, 57]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-comment-edit.author-caption"], [], ["loc", [null, [68, 11], [68, 74]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.author", ["loc", [null, [70, 12], [70, 24]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [71, 19], [71, 24]]]]], [], []], "relationName", "author", "projection", "ApplicationUserL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-comment-edit.author-caption"], [], ["loc", [null, [75, 12], [75, 73]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [76, 13], [76, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [77, 13], [77, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [78, 15], [78, 23]]]]], [], []]], ["loc", [null, [69, 4], [79, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.author", ["loc", [null, [80, 40], [80, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [80, 4], [80, 81]]]], ["inline", "t", ["forms.ember-flexberry-dummy-comment-edit.userVotes-caption"], [], ["loc", [null, [83, 11], [83, 77]]]], ["inline", "flexberry-groupedit", [], ["componentName", "commentUserVotesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.userVotes", ["loc", [null, [86, 14], [86, 29]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.userVotes", ["loc", [null, [87, 22], [87, 58]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [88, 26], [88, 41]]]]], [], []], "rowClickable", true, "rowClick", "rowClick", "editOnSeparateRoute", true, "editFormRoute", ["subexpr", "@mut", [["get", "commentsVoteEditRoute", ["loc", [null, [92, 20], [92, 41]]]]], [], []], "saveBeforeRouteLeave", true, "orderable", false, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [95, 15], [95, 23]]]]], [], []]], ["loc", [null, [84, 4], [96, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.userVotes", ["loc", [null, [97, 40], [97, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [97, 4], [97, 84]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-comment-vote-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 8
              },
              "end": {
                "line": 37,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-comment-vote-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [34, 66], [34, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [35, 12], [35, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 38,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-comment-vote-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui button save-button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [30, 60], [30, 77]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [31, 10], [31, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [33, 18], [33, 29]]]]], [], 0, null, ["loc", [null, [33, 8], [37, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 72,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-comment-vote-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [2]);
        var element3 = dom.childAt(element2, [9, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element2, [11]);
        var element6 = dom.childAt(element2, [13]);
        var morphs = new Array(14);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element2, 1, 1);
        morphs[2] = dom.createMorphAt(element2, 3, 3);
        morphs[3] = dom.createMorphAt(element2, 5, 5);
        morphs[4] = dom.createMorphAt(dom.childAt(element2, [7, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element3, 1, 1);
        morphs[6] = dom.createElementMorph(element4);
        morphs[7] = dom.createMorphAt(element4, 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
        morphs[9] = dom.createMorphAt(element5, 3, 3);
        morphs[10] = dom.createMorphAt(element5, 5, 5);
        morphs[11] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
        morphs[12] = dom.createMorphAt(element6, 3, 3);
        morphs[13] = dom.createMorphAt(element6, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-comment-vote-edit.caption"], [], ["loc", [null, [1, 22], [1, 83]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [21, 26], [21, 31]]]]], [], []]], ["loc", [null, [21, 2], [21, 33]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [24, 43], [24, 55]]]]], [], []]], ["loc", [null, [24, 6], [24, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [29, 16], [29, 24]]]]], [], 0, null, ["loc", [null, [29, 6], [38, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [39, 59], [39, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [40, 8], [40, 49]]]], ["inline", "t", ["forms.ember-flexberry-dummy-comment-vote-edit.voteType-caption"], [], ["loc", [null, [45, 9], [45, 79]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "flexberry-enum", ["ember-flexberry-dummy-vote-type"], [], ["loc", [null, [48, 10], [48, 60]]]], "value", ["subexpr", "@mut", [["get", "model.voteType", ["loc", [null, [49, 10], [49, 24]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [50, 13], [50, 21]]]]], [], []]], ["loc", [null, [46, 2], [51, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.voteType", ["loc", [null, [52, 38], [52, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [52, 2], [52, 81]]]], ["inline", "t", ["forms.ember-flexberry-dummy-comment-vote-edit.applicationUser-caption"], [], ["loc", [null, [56, 9], [56, 86]]]], ["inline", "flexberry-lookup", [], ["choose", "showLookupDialog", "remove", "removeLookupValue", "value", ["subexpr", "@mut", [["get", "model.applicationUser", ["loc", [null, [61, 10], [61, 31]]]]], [], []], "displayAttributeName", "name", "relationName", "applicationUser", "projection", "ApplicationUserL", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-comment-vote-edit.applicationUser-caption"], [], ["loc", [null, [65, 10], [65, 85]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [66, 13], [66, 21]]]]], [], []]], ["loc", [null, [57, 2], [67, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.applicationUser", ["loc", [null, [68, 38], [68, 66]]]]], [], []], "pointing", "pointing"], ["loc", [null, [68, 2], [68, 88]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-localization-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 8
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-localization-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [31, 62], [31, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [31, 80], [31, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 8
              },
              "end": {
                "line": 35,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-localization-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [34, 68], [34, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [34, 94], [34, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 8
              },
              "end": {
                "line": 38,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-localization-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [37, 66], [37, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [37, 86], [37, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-localization-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [30, 23], [30, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [30, 43], [30, 63]]]]], [], ["loc", [null, [30, 38], [30, 64]]]]], [], ["loc", [null, [30, 18], [30, 65]]]]], [], 0, null, ["loc", [null, [30, 8], [32, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [33, 23], [33, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [33, 43], [33, 63]]]]], [], ["loc", [null, [33, 38], [33, 64]]]]], [], ["loc", [null, [33, 18], [33, 65]]]]], [], 1, null, ["loc", [null, [33, 8], [35, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [36, 23], [36, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [36, 44], [36, 58]]]]], [], ["loc", [null, [36, 39], [36, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [36, 65], [36, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [36, 80], [36, 100]]]]], [], ["loc", [null, [36, 60], [36, 101]]]]], [], ["loc", [null, [36, 35], [36, 102]]]]], [], ["loc", [null, [36, 18], [36, 103]]]]], [], 2, null, ["loc", [null, [36, 8], [38, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 52,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-localization-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [9, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [11]);
        var morphs = new Array(11);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element3, 1, 1);
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createMorphAt(element3, 5, 5);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [7, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 0, 0);
        morphs[8] = dom.createAttrMorph(element6, 'class');
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-localization-edit.caption"], [], ["loc", [null, [1, 22], [1, 83]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [21, 26], [21, 31]]]]], [], []]], ["loc", [null, [21, 2], [21, 33]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [24, 43], [24, 55]]]]], [], []]], ["loc", [null, [24, 6], [24, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [29, 16], [29, 24]]]]], [], 0, null, ["loc", [null, [29, 6], [39, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [40, 59], [40, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [40, 78], [40, 119]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [43, 25], [43, 42]]]], "error", ""], [], ["loc", [null, [43, 20], [43, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [45, 12], [45, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-localization-edit.name-caption"], [], ["loc", [null, [46, 12], [46, 76]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [47, 15], [47, 23]]]]], [], []]], ["loc", [null, [44, 4], [48, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [49, 40], [49, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [49, 4], [49, 79]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-localization-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 48,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-localization-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(element0, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [5]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.ember-flexberry-dummy-localization-list.caption"], [], ["loc", [null, [2, 4], [2, 65]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [7, 12], [7, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [8, 12], [8, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [9, 12], [9, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [10, 11], [10, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [11, 11], [11, 42]]]]], ["loc", [null, [4, 2], [12, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [16, 12], [16, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [17, 12], [17, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [18, 12], [18, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [19, 11], [19, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [20, 11], [20, 40]]]]], ["loc", [null, [13, 2], [21, 4]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [24, 12], [24, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-localization", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [26, 20], [26, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [27, 18], [27, 31]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [30, 12], [30, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [32, 10], [32, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [33, 17], [33, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [34, 18], [34, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [35, 22], [35, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [36, 20], [36, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [37, 16], [37, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [38, 17], [38, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [39, 23], [39, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [40, 27], [40, 60]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [41, 17], [41, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [42, 13], [42, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [43, 13], [43, 32]]]], "componentName", "localizationObjectListView"], ["loc", [null, [23, 2], [45, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-multi-list-user-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 8
              },
              "end": {
                "line": 27,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [26, 62], [26, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [26, 80], [26, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [29, 68], [29, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [29, 94], [29, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 8
              },
              "end": {
                "line": 33,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [32, 66], [32, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [32, 86], [32, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 6
            },
            "end": {
              "line": 34,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [25, 23], [25, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [25, 43], [25, 63]]]]], [], ["loc", [null, [25, 38], [25, 64]]]]], [], ["loc", [null, [25, 18], [25, 65]]]]], [], 0, null, ["loc", [null, [25, 8], [27, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [28, 23], [28, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [28, 43], [28, 63]]]]], [], ["loc", [null, [28, 38], [28, 64]]]]], [], ["loc", [null, [28, 18], [28, 65]]]]], [], 1, null, ["loc", [null, [28, 8], [30, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [31, 23], [31, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [31, 44], [31, 58]]]]], [], ["loc", [null, [31, 39], [31, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [31, 65], [31, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [31, 80], [31, 100]]]]], [], ["loc", [null, [31, 60], [31, 101]]]]], [], ["loc", [null, [31, 35], [31, 102]]]]], [], ["loc", [null, [31, 18], [31, 103]]]]], [], 2, null, ["loc", [null, [31, 8], [33, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.name", ["loc", [null, [40, 31], [40, 52]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 51,
              "column": 4
            },
            "end": {
              "line": 53,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.eMail", ["loc", [null, [52, 31], [52, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 63,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.phone1", ["loc", [null, [64, 31], [64, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.phone2", ["loc", [null, [76, 31], [76, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.phone3", ["loc", [null, [88, 31], [88, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 100,
              "column": 4
            },
            "end": {
              "line": 102,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.activated", ["loc", [null, [101, 30], [101, 56]]]]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 108,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.vK", ["loc", [null, [107, 31], [107, 50]]]]],
        locals: [],
        templates: []
      };
    })();
    var child8 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 120,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.facebook", ["loc", [null, [119, 31], [119, 56]]]]],
        locals: [],
        templates: []
      };
    })();
    var child9 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 130,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.twitter", ["loc", [null, [131, 31], [131, 55]]]]],
        locals: [],
        templates: []
      };
    })();
    var child10 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.birthday", ["loc", [null, [144, 30], [144, 55]]]]],
        locals: [],
        templates: []
      };
    })();
    var child11 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 154,
              "column": 4
            },
            "end": {
              "line": 156,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.gender", ["loc", [null, [155, 30], [155, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    var child12 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 161,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.vip", ["loc", [null, [162, 30], [162, 50]]]]],
        locals: [],
        templates: []
      };
    })();
    var child13 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 167,
              "column": 4
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.karma", ["loc", [null, [168, 31], [168, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    var child14 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 181,
              "column": 6
            },
            "end": {
              "line": 205,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-objectlistview", [], ["modelName", ["subexpr", "@mut", [["get", "settings.modelName", ["loc", [null, [183, 20], [183, 38]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "settings.modelProjection", ["loc", [null, [184, 26], [184, 50]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "settings.editFormRoute", ["loc", [null, [185, 24], [185, 46]]]]], [], []], "content", ["subexpr", "@mut", [["get", "settings.model", ["loc", [null, [186, 18], [186, 32]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "settings.computedSorting", ["loc", [null, [189, 18], [189, 42]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [191, 23], [191, 46]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [192, 29], [192, 58]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [193, 33], [193, 66]]]], "pages", ["subexpr", "@mut", [["get", "settings.pages", ["loc", [null, [194, 16], [194, 30]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "settings.perPageValue", ["loc", [null, [195, 23], [195, 44]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "settings.perPageValues", ["loc", [null, [196, 24], [196, 46]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "settings.recordsTotalCount", ["loc", [null, [197, 28], [197, 54]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "settings.hasPreviousPage", ["loc", [null, [198, 26], [198, 50]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "settings.hasNextPage", ["loc", [null, [199, 22], [199, 42]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [200, 23], [200, 46]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [201, 19], [201, 38]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [202, 19], [202, 38]]]], "componentName", ["subexpr", "@mut", [["get", "settings.componentName", ["loc", [null, [203, 24], [203, 46]]]]], [], []]], ["loc", [null, [182, 8], [204, 10]]]]],
        locals: ["settings"],
        templates: []
      };
    })();
    var child15 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 207,
              "column": 6
            },
            "end": {
              "line": 231,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-objectlistview", [], ["modelName", ["subexpr", "@mut", [["get", "settings.modelName", ["loc", [null, [209, 20], [209, 38]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "settings.modelProjection", ["loc", [null, [210, 26], [210, 50]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "settings.editFormRoute", ["loc", [null, [211, 24], [211, 46]]]]], [], []], "content", ["subexpr", "@mut", [["get", "settings.model", ["loc", [null, [212, 18], [212, 32]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "settings.computedSorting", ["loc", [null, [215, 18], [215, 42]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [217, 23], [217, 46]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [218, 29], [218, 58]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [219, 33], [219, 66]]]], "pages", ["subexpr", "@mut", [["get", "settings.pages", ["loc", [null, [220, 16], [220, 30]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "settings.perPageValue", ["loc", [null, [221, 23], [221, 44]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "settings.perPageValues", ["loc", [null, [222, 24], [222, 46]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "settings.recordsTotalCount", ["loc", [null, [223, 28], [223, 54]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "settings.hasPreviousPage", ["loc", [null, [224, 26], [224, 50]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "settings.hasNextPage", ["loc", [null, [225, 22], [225, 42]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [226, 23], [226, 46]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [227, 19], [227, 38]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [228, 19], [228, 38]]]], "componentName", ["subexpr", "@mut", [["get", "settings.componentName", ["loc", [null, [229, 24], [229, 46]]]]], [], []]], ["loc", [null, [208, 8], [230, 10]]]]],
        locals: ["settings"],
        templates: []
      };
    })();
    var child16 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 233,
              "column": 6
            },
            "end": {
              "line": 268,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-objectlistview", [], ["editFormRoute", ["subexpr", "@mut", [["get", "settings.editFormRoute", ["loc", [null, [235, 24], [235, 46]]]]], [], []], "showCheckBoxInRow", true, "modelName", ["subexpr", "@mut", [["get", "settings.modelName", ["loc", [null, [237, 20], [237, 38]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "settings.modelProjection", ["loc", [null, [238, 26], [238, 50]]]]], [], []], "content", ["subexpr", "@mut", [["get", "settings.model", ["loc", [null, [239, 18], [239, 32]]]]], [], []], "createNewButton", true, "enableFilters", true, "filters", ["subexpr", "@mut", [["get", "settings.filters", ["loc", [null, [242, 18], [242, 34]]]]], [], []], "filterButton", true, "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [244, 27], [244, 54]]]], "filterText", ["subexpr", "@mut", [["get", "settings.filter", ["loc", [null, [245, 21], [245, 36]]]]], [], []], "refreshButton", true, "exportExcelButton", true, "sorting", ["subexpr", "@mut", [["get", "settings.computedSorting", ["loc", [null, [248, 18], [248, 42]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [250, 23], [250, 46]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [251, 29], [251, 58]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [252, 33], [252, 66]]]], "applyFilters", ["subexpr", "action", ["applyFilters"], [], ["loc", [null, [253, 23], [253, 46]]]], "resetFilters", ["subexpr", "action", ["resetFilters"], [], ["loc", [null, [254, 23], [254, 46]]]], "pages", ["subexpr", "@mut", [["get", "settings.pages", ["loc", [null, [255, 16], [255, 30]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "settings.perPageValue", ["loc", [null, [256, 23], [256, 44]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "settings.perPageValues", ["loc", [null, [257, 24], [257, 46]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "settings.recordsTotalCount", ["loc", [null, [258, 28], [258, 54]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "settings.hasPreviousPage", ["loc", [null, [259, 26], [259, 50]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "settings.hasNextPage", ["loc", [null, [260, 22], [260, 42]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [261, 23], [261, 46]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [262, 19], [262, 38]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [263, 19], [263, 38]]]], "componentName", ["subexpr", "@mut", [["get", "settings.componentName", ["loc", [null, [264, 24], [264, 46]]]]], [], []], "showDeleteMenuItemInRow", true, "deleteButton", true], ["loc", [null, [234, 8], [267, 10]]]]],
        locals: ["settings"],
        templates: []
      };
    })();
    var child17 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 270,
              "column": 6
            },
            "end": {
              "line": 296,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "settings.model", ["loc", [null, [272, 18], [272, 32]]]]], [], []], "modelName", ["subexpr", "@mut", [["get", "settings.modelName", ["loc", [null, [273, 20], [273, 38]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "settings.modelProjection", ["loc", [null, [274, 26], [274, 50]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "settings.editFormRoute", ["loc", [null, [275, 24], [275, 46]]]]], [], []], "orderable", false, "componentName", ["subexpr", "@mut", [["get", "settings.componentName", ["loc", [null, [277, 24], [277, 46]]]]], [], []], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [278, 33], [278, 66]]]], "colsConfigButton", false, "disableHierarchicalMode", false, "showCheckBoxInRow", true, "pages", ["subexpr", "@mut", [["get", "settings.pages", ["loc", [null, [282, 16], [282, 30]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "settings.perPageValue", ["loc", [null, [283, 23], [283, 44]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "settings.perPageValues", ["loc", [null, [284, 24], [284, 46]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "settings.recordsTotalCount", ["loc", [null, [285, 28], [285, 54]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "settings.hasPreviousPage", ["loc", [null, [286, 26], [286, 50]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "settings.hasNextPage", ["loc", [null, [287, 22], [287, 42]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [288, 23], [288, 46]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [289, 19], [289, 38]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [290, 19], [290, 38]]]], "availableCollExpandMode", true, "inHierarchicalMode", ["subexpr", "@mut", [["get", "settings.inHierarchicalMode", ["loc", [null, [292, 29], [292, 56]]]]], [], []], "hierarchicalAttribute", ["subexpr", "@mut", [["get", "settings.hierarchicalAttribute", ["loc", [null, [293, 32], [293, 62]]]]], [], []], "inExpandMode", ["subexpr", "@mut", [["get", "settings.inExpandMode", ["loc", [null, [294, 23], [294, 44]]]]], [], []]], ["loc", [null, [271, 8], [295, 10]]]]],
        locals: ["settings"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 299,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list-user-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("hr");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h3");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "row");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h3");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h3");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h3");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [4]);
        var element4 = dom.childAt(element3, [5, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [7]);
        var element7 = dom.childAt(element3, [9]);
        var element8 = dom.childAt(element3, [11]);
        var element9 = dom.childAt(element3, [13]);
        var element10 = dom.childAt(element3, [15]);
        var element11 = dom.childAt(element3, [17]);
        var element12 = dom.childAt(element3, [19]);
        var element13 = dom.childAt(element3, [21]);
        var element14 = dom.childAt(element3, [23]);
        var element15 = dom.childAt(element3, [25]);
        var element16 = dom.childAt(element3, [27]);
        var element17 = dom.childAt(element3, [29]);
        var element18 = dom.childAt(element3, [31]);
        var element19 = dom.childAt(element3, [37]);
        var morphs = new Array(45);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(element3, 1, 1);
        morphs[3] = dom.createMorphAt(element3, 3, 3);
        morphs[4] = dom.createMorphAt(element4, 1, 1);
        morphs[5] = dom.createElementMorph(element5);
        morphs[6] = dom.createMorphAt(element5, 0, 0);
        morphs[7] = dom.createMorphAt(element6, 1, 1);
        morphs[8] = dom.createMorphAt(element6, 3, 3);
        morphs[9] = dom.createMorphAt(element7, 1, 1);
        morphs[10] = dom.createMorphAt(element7, 3, 3);
        morphs[11] = dom.createMorphAt(element8, 1, 1);
        morphs[12] = dom.createMorphAt(element8, 3, 3);
        morphs[13] = dom.createMorphAt(element9, 1, 1);
        morphs[14] = dom.createMorphAt(element9, 3, 3);
        morphs[15] = dom.createMorphAt(element10, 1, 1);
        morphs[16] = dom.createMorphAt(element10, 3, 3);
        morphs[17] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[18] = dom.createMorphAt(element11, 3, 3);
        morphs[19] = dom.createMorphAt(element11, 5, 5);
        morphs[20] = dom.createMorphAt(element12, 1, 1);
        morphs[21] = dom.createMorphAt(element12, 3, 3);
        morphs[22] = dom.createMorphAt(element13, 1, 1);
        morphs[23] = dom.createMorphAt(element13, 3, 3);
        morphs[24] = dom.createMorphAt(element14, 1, 1);
        morphs[25] = dom.createMorphAt(element14, 3, 3);
        morphs[26] = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
        morphs[27] = dom.createMorphAt(element15, 3, 3);
        morphs[28] = dom.createMorphAt(element15, 5, 5);
        morphs[29] = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
        morphs[30] = dom.createMorphAt(element16, 3, 3);
        morphs[31] = dom.createMorphAt(element16, 5, 5);
        morphs[32] = dom.createMorphAt(dom.childAt(element17, [1]), 0, 0);
        morphs[33] = dom.createMorphAt(element17, 3, 3);
        morphs[34] = dom.createMorphAt(element17, 5, 5);
        morphs[35] = dom.createMorphAt(element18, 1, 1);
        morphs[36] = dom.createMorphAt(element18, 3, 3);
        morphs[37] = dom.createMorphAt(dom.childAt(element3, [35]), 0, 0);
        morphs[38] = dom.createMorphAt(element19, 1, 1);
        morphs[39] = dom.createMorphAt(dom.childAt(element19, [3]), 0, 0);
        morphs[40] = dom.createMorphAt(element19, 5, 5);
        morphs[41] = dom.createMorphAt(dom.childAt(element19, [7]), 0, 0);
        morphs[42] = dom.createMorphAt(element19, 9, 9);
        morphs[43] = dom.createMorphAt(dom.childAt(element19, [11]), 0, 0);
        morphs[44] = dom.createMorphAt(element19, 13, 13);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.caption"], [], ["loc", [null, [2, 22], [2, 87]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [7, 12], [7, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [8, 12], [8, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [9, 12], [9, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [10, 11], [10, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [11, 11], [11, 42]]]]], ["loc", [null, [4, 2], [12, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [16, 12], [16, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [17, 12], [17, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [18, 12], [18, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [19, 11], [19, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [20, 11], [20, 40]]]]], ["loc", [null, [13, 2], [21, 4]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [24, 16], [24, 24]]]]], [], 0, null, ["loc", [null, [24, 6], [34, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [35, 59], [35, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [35, 78], [35, 119]]]], ["block", "if", [["get", "model.errors.name", ["loc", [null, [39, 10], [39, 27]]]]], [], 1, null, ["loc", [null, [39, 4], [41, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [43, 15], [43, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [45, 12], [45, 22]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [46, 16], [46, 33]]]], "error", ""], [], ["loc", [null, [46, 12], [46, 45]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.name-caption"], [], ["loc", [null, [47, 12], [47, 80]]]]], ["loc", [null, [42, 4], [48, 6]]]], ["block", "if", [["get", "model.errors.eMail", ["loc", [null, [51, 10], [51, 28]]]]], [], 2, null, ["loc", [null, [51, 4], [53, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [55, 15], [55, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.eMail", ["loc", [null, [57, 12], [57, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.eMail", ["loc", [null, [58, 16], [58, 34]]]], "error", ""], [], ["loc", [null, [58, 12], [58, 46]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.eMail-caption"], [], ["loc", [null, [59, 12], [59, 81]]]]], ["loc", [null, [54, 4], [60, 6]]]], ["block", "if", [["get", "model.errors.phone1", ["loc", [null, [63, 10], [63, 29]]]]], [], 3, null, ["loc", [null, [63, 4], [65, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [67, 15], [67, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.phone1", ["loc", [null, [69, 12], [69, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.phone1", ["loc", [null, [70, 16], [70, 35]]]], "error", ""], [], ["loc", [null, [70, 12], [70, 47]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone1-caption"], [], ["loc", [null, [71, 12], [71, 82]]]]], ["loc", [null, [66, 4], [72, 6]]]], ["block", "if", [["get", "model.errors.phone2", ["loc", [null, [75, 10], [75, 29]]]]], [], 4, null, ["loc", [null, [75, 4], [77, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [79, 15], [79, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.phone2", ["loc", [null, [81, 12], [81, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.phone2", ["loc", [null, [82, 16], [82, 35]]]], "error", ""], [], ["loc", [null, [82, 12], [82, 47]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone2-caption"], [], ["loc", [null, [83, 12], [83, 82]]]]], ["loc", [null, [78, 4], [84, 6]]]], ["block", "if", [["get", "model.errors.phone3", ["loc", [null, [87, 10], [87, 29]]]]], [], 5, null, ["loc", [null, [87, 4], [89, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [91, 15], [91, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.phone3", ["loc", [null, [93, 12], [93, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.phone3", ["loc", [null, [94, 16], [94, 35]]]], "error", ""], [], ["loc", [null, [94, 12], [94, 47]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone3-caption"], [], ["loc", [null, [95, 12], [95, 82]]]]], ["loc", [null, [90, 4], [96, 6]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.activated-caption"], [], ["loc", [null, [99, 11], [99, 86]]]], ["block", "if", [["get", "model.errors.activated", ["loc", [null, [100, 10], [100, 32]]]]], [], 6, null, ["loc", [null, [100, 4], [102, 11]]]], ["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [103, 34], [103, 42]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.activated", ["loc", [null, [103, 49], [103, 64]]]]], [], []]], ["loc", [null, [103, 4], [103, 66]]]], ["block", "if", [["get", "model.errors.vK", ["loc", [null, [106, 10], [106, 25]]]]], [], 7, null, ["loc", [null, [106, 4], [108, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [110, 15], [110, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.vK", ["loc", [null, [112, 12], [112, 20]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.vK", ["loc", [null, [113, 16], [113, 31]]]], "error", ""], [], ["loc", [null, [113, 12], [113, 43]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.vK-caption"], [], ["loc", [null, [114, 12], [114, 78]]]]], ["loc", [null, [109, 4], [115, 6]]]], ["block", "if", [["get", "model.errors.facebook", ["loc", [null, [118, 10], [118, 31]]]]], [], 8, null, ["loc", [null, [118, 4], [120, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [122, 15], [122, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.facebook", ["loc", [null, [124, 12], [124, 26]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.facebook", ["loc", [null, [125, 16], [125, 37]]]], "error", ""], [], ["loc", [null, [125, 12], [125, 49]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.facebook-caption"], [], ["loc", [null, [126, 12], [126, 84]]]]], ["loc", [null, [121, 4], [127, 6]]]], ["block", "if", [["get", "model.errors.twitter", ["loc", [null, [130, 10], [130, 30]]]]], [], 9, null, ["loc", [null, [130, 4], [132, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [134, 15], [134, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.twitter", ["loc", [null, [136, 12], [136, 25]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.twitter", ["loc", [null, [137, 16], [137, 36]]]], "error", ""], [], ["loc", [null, [137, 12], [137, 48]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.twitter-caption"], [], ["loc", [null, [138, 12], [138, 83]]]]], ["loc", [null, [133, 4], [139, 6]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.birthday-caption"], [], ["loc", [null, [142, 11], [142, 85]]]], ["block", "if", [["get", "model.errors.birthday", ["loc", [null, [143, 10], [143, 31]]]]], [], 10, null, ["loc", [null, [143, 4], [145, 11]]]], ["inline", "flexberry-datepicker", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [147, 15], [147, 23]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.birthday", ["loc", [null, [148, 12], [148, 26]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.birthday", ["loc", [null, [149, 16], [149, 37]]]], "error", ""], [], ["loc", [null, [149, 12], [149, 49]]]]], ["loc", [null, [146, 4], [150, 6]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.gender-caption"], [], ["loc", [null, [153, 11], [153, 83]]]], ["block", "if", [["get", "model.errors.gender", ["loc", [null, [154, 10], [154, 29]]]]], [], 11, null, ["loc", [null, [154, 4], [156, 11]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "flexberry-enum", ["ember-flexberry-dummy-gender"], [], ["loc", [null, [157, 31], [157, 78]]]], "value", ["subexpr", "@mut", [["get", "model.gender", ["loc", [null, [157, 85], [157, 97]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [157, 107], [157, 115]]]]], [], []]], ["loc", [null, [157, 4], [157, 117]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.vip-caption"], [], ["loc", [null, [160, 11], [160, 80]]]], ["block", "if", [["get", "model.errors.vip", ["loc", [null, [161, 10], [161, 26]]]]], [], 12, null, ["loc", [null, [161, 4], [163, 11]]]], ["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [164, 34], [164, 42]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.vip", ["loc", [null, [164, 49], [164, 58]]]]], [], []]], ["loc", [null, [164, 4], [164, 60]]]], ["block", "if", [["get", "model.errors.karma", ["loc", [null, [167, 10], [167, 28]]]]], [], 13, null, ["loc", [null, [167, 4], [169, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [171, 15], [171, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.karma", ["loc", [null, [173, 12], [173, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.karma", ["loc", [null, [174, 16], [174, 34]]]], "error", ""], [], ["loc", [null, [174, 12], [174, 46]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.karma-caption"], [], ["loc", [null, [175, 12], [175, 81]]]]], ["loc", [null, [170, 4], [176, 6]]]], ["inline", "t", ["forms.ember-flexberry-dummy-multi-list.caption"], [], ["loc", [null, [179, 8], [179, 62]]]], ["block", "with", [["get", "multiListSettings.MultiUserListOnEdit", ["loc", [null, [181, 14], [181, 51]]]]], [], 14, null, ["loc", [null, [181, 6], [205, 15]]]], ["inline", "t", ["forms.ember-flexberry-dummy-multi-list.multi-edit-form"], [], ["loc", [null, [206, 10], [206, 72]]]], ["block", "with", [["get", "multiListSettings.MultiUserList2OnEdit", ["loc", [null, [207, 14], [207, 52]]]]], [], 15, null, ["loc", [null, [207, 6], [231, 15]]]], ["inline", "t", ["forms.ember-flexberry-dummy-multi-list.multi-edit-form"], [], ["loc", [null, [232, 10], [232, 72]]]], ["block", "with", [["get", "multiListSettings.MultiSuggestionListOnEdit", ["loc", [null, [233, 14], [233, 57]]]]], [], 16, null, ["loc", [null, [233, 6], [268, 15]]]], ["inline", "t", ["forms.ember-flexberry-dummy-multi-list.multi-edit-form"], [], ["loc", [null, [269, 10], [269, 72]]]], ["block", "with", [["get", "multiListSettings.MultiHierarchyListOnEdit", ["loc", [null, [270, 14], [270, 56]]]]], [], 17, null, ["loc", [null, [270, 6], [296, 15]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13, child14, child15, child16, child17]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-multi-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 2
            },
            "end": {
              "line": 30,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-objectlistview", [], ["modelName", ["subexpr", "@mut", [["get", "settings.modelName", ["loc", [null, [6, 16], [6, 34]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "settings.modelProjection", ["loc", [null, [7, 22], [7, 46]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "settings.editFormRoute", ["loc", [null, [8, 20], [8, 42]]]]], [], []], "content", ["subexpr", "@mut", [["get", "settings.model", ["loc", [null, [9, 14], [9, 28]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "settings.computedSorting", ["loc", [null, [12, 14], [12, 38]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [14, 19], [14, 42]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [15, 25], [15, 54]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [16, 29], [16, 62]]]], "pages", ["subexpr", "@mut", [["get", "settings.pages", ["loc", [null, [17, 12], [17, 26]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "settings.perPageValue", ["loc", [null, [18, 19], [18, 40]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "settings.perPageValues", ["loc", [null, [19, 20], [19, 42]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "settings.recordsTotalCount", ["loc", [null, [20, 24], [20, 50]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "settings.hasPreviousPage", ["loc", [null, [21, 22], [21, 46]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "settings.hasNextPage", ["loc", [null, [22, 18], [22, 38]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [23, 19], [23, 42]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [24, 15], [24, 34]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [25, 15], [25, 34]]]], "componentName", ["subexpr", "@mut", [["get", "settings.componentName", ["loc", [null, [26, 20], [26, 42]]]]], [], []], "advLimitButton", true, "advLimitButton", ["subexpr", "@mut", [["get", "settings.advLimitButton", ["loc", [null, [28, 21], [28, 44]]]]], [], []]], ["loc", [null, [5, 4], [29, 6]]]]],
        locals: ["settings"],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 32,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-objectlistview", [], ["modelName", ["subexpr", "@mut", [["get", "settings.modelName", ["loc", [null, [34, 16], [34, 34]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "settings.modelProjection", ["loc", [null, [35, 22], [35, 46]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "settings.editFormRoute", ["loc", [null, [36, 20], [36, 42]]]]], [], []], "content", ["subexpr", "@mut", [["get", "settings.model", ["loc", [null, [37, 14], [37, 28]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "settings.computedSorting", ["loc", [null, [40, 14], [40, 38]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [42, 19], [42, 42]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [43, 25], [43, 54]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [44, 29], [44, 62]]]], "pages", ["subexpr", "@mut", [["get", "settings.pages", ["loc", [null, [45, 12], [45, 26]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "settings.perPageValue", ["loc", [null, [46, 19], [46, 40]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "settings.perPageValues", ["loc", [null, [47, 20], [47, 42]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "settings.recordsTotalCount", ["loc", [null, [48, 24], [48, 50]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "settings.hasPreviousPage", ["loc", [null, [49, 22], [49, 46]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "settings.hasNextPage", ["loc", [null, [50, 18], [50, 38]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [51, 19], [51, 42]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [52, 15], [52, 34]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [53, 15], [53, 34]]]], "componentName", ["subexpr", "@mut", [["get", "settings.componentName", ["loc", [null, [54, 20], [54, 42]]]]], [], []], "advLimitButton", ["subexpr", "@mut", [["get", "settings.advLimitButton", ["loc", [null, [55, 21], [55, 44]]]]], [], []]], ["loc", [null, [33, 4], [56, 6]]]]],
        locals: ["settings"],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 59,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-objectlistview", [], ["editFormRoute", ["subexpr", "@mut", [["get", "settings.editFormRoute", ["loc", [null, [61, 20], [61, 42]]]]], [], []], "showCheckBoxInRow", true, "modelName", ["subexpr", "@mut", [["get", "settings.modelName", ["loc", [null, [63, 16], [63, 34]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "settings.modelProjection", ["loc", [null, [64, 22], [64, 46]]]]], [], []], "content", ["subexpr", "@mut", [["get", "settings.model", ["loc", [null, [65, 14], [65, 28]]]]], [], []], "createNewButton", true, "enableFilters", true, "filters", ["subexpr", "@mut", [["get", "settings.filters", ["loc", [null, [68, 14], [68, 30]]]]], [], []], "filterButton", true, "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [70, 23], [70, 50]]]], "filterText", ["subexpr", "@mut", [["get", "settings.filter", ["loc", [null, [71, 17], [71, 32]]]]], [], []], "refreshButton", true, "exportExcelButton", true, "sorting", ["subexpr", "@mut", [["get", "settings.computedSorting", ["loc", [null, [74, 14], [74, 38]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [76, 19], [76, 42]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [77, 25], [77, 54]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [78, 29], [78, 62]]]], "applyFilters", ["subexpr", "action", ["applyFilters"], [], ["loc", [null, [79, 19], [79, 42]]]], "resetFilters", ["subexpr", "action", ["resetFilters"], [], ["loc", [null, [80, 19], [80, 42]]]], "pages", ["subexpr", "@mut", [["get", "settings.pages", ["loc", [null, [81, 12], [81, 26]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "settings.perPageValue", ["loc", [null, [82, 19], [82, 40]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "settings.perPageValues", ["loc", [null, [83, 20], [83, 42]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "settings.recordsTotalCount", ["loc", [null, [84, 24], [84, 50]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "settings.hasPreviousPage", ["loc", [null, [85, 22], [85, 46]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "settings.hasNextPage", ["loc", [null, [86, 18], [86, 38]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [87, 19], [87, 42]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [88, 15], [88, 34]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [89, 15], [89, 34]]]], "componentName", ["subexpr", "@mut", [["get", "settings.componentName", ["loc", [null, [90, 20], [90, 42]]]]], [], []], "showDeleteMenuItemInRow", true, "deleteButton", true], ["loc", [null, [60, 4], [93, 6]]]]],
        locals: ["settings"],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 96,
              "column": 2
            },
            "end": {
              "line": 123,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "settings.model", ["loc", [null, [98, 14], [98, 28]]]]], [], []], "modelName", ["subexpr", "@mut", [["get", "settings.modelName", ["loc", [null, [99, 16], [99, 34]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "settings.modelProjection", ["loc", [null, [100, 22], [100, 46]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "settings.editFormRoute", ["loc", [null, [101, 20], [101, 42]]]]], [], []], "orderable", false, "componentName", ["subexpr", "@mut", [["get", "settings.componentName", ["loc", [null, [103, 20], [103, 42]]]]], [], []], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [104, 29], [104, 62]]]], "colsConfigButton", false, "disableHierarchicalMode", false, "showCheckBoxInRow", true, "pages", ["subexpr", "@mut", [["get", "settings.pages", ["loc", [null, [108, 12], [108, 26]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "settings.perPageValue", ["loc", [null, [109, 19], [109, 40]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "settings.perPageValues", ["loc", [null, [110, 20], [110, 42]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "settings.recordsTotalCount", ["loc", [null, [111, 24], [111, 50]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "settings.hasPreviousPage", ["loc", [null, [112, 22], [112, 46]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "settings.hasNextPage", ["loc", [null, [113, 18], [113, 38]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [114, 19], [114, 42]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [115, 15], [115, 34]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [116, 15], [116, 34]]]], "availableCollExpandMode", true, "inHierarchicalMode", ["subexpr", "@mut", [["get", "settings.inHierarchicalMode", ["loc", [null, [118, 25], [118, 52]]]]], [], []], "hierarchicalAttribute", ["subexpr", "@mut", [["get", "settings.hierarchicalAttribute", ["loc", [null, [119, 28], [119, 58]]]]], [], []], "inExpandMode", ["subexpr", "@mut", [["get", "settings.inExpandMode", ["loc", [null, [120, 19], [120, 40]]]]], [], []], "hierarchyPaging", ["subexpr", "@mut", [["get", "settings.hierarchyPaging", ["loc", [null, [121, 22], [121, 46]]]]], [], []]], ["loc", [null, [97, 4], [122, 6]]]]],
        locals: ["settings"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 125,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-multi-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h3");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h3");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h3");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
        morphs[4] = dom.createMorphAt(element0, 5, 5);
        morphs[5] = dom.createMorphAt(dom.childAt(element0, [7]), 0, 0);
        morphs[6] = dom.createMorphAt(element0, 9, 9);
        morphs[7] = dom.createMorphAt(dom.childAt(element0, [11]), 0, 0);
        morphs[8] = dom.createMorphAt(element0, 13, 13);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.ember-flexberry-dummy-multi-list.caption"], [], ["loc", [null, [2, 4], [2, 58]]]], ["block", "with", [["get", "multiListSettings.MultiUserList", ["loc", [null, [4, 10], [4, 41]]]]], [], 0, null, ["loc", [null, [4, 2], [30, 11]]]], ["inline", "t", ["forms.ember-flexberry-dummy-multi-list.multi-edit-form"], [], ["loc", [null, [31, 6], [31, 68]]]], ["block", "with", [["get", "multiListSettings.MultiUserList2", ["loc", [null, [32, 10], [32, 42]]]]], [], 1, null, ["loc", [null, [32, 2], [57, 11]]]], ["inline", "t", ["forms.ember-flexberry-dummy-multi-list.multi-edit-form"], [], ["loc", [null, [58, 6], [58, 68]]]], ["block", "with", [["get", "multiListSettings.MultiSuggestionList", ["loc", [null, [59, 10], [59, 47]]]]], [], 2, null, ["loc", [null, [59, 2], [94, 11]]]], ["inline", "t", ["forms.ember-flexberry-dummy-multi-list.multi-edit-form"], [], ["loc", [null, [95, 6], [95, 68]]]], ["block", "with", [["get", "multiListSettings.MultiHierarchyList", ["loc", [null, [96, 10], [96, 46]]]]], [], 3, null, ["loc", [null, [96, 2], [123, 11]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-suggestion-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 8
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [31, 62], [31, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [31, 80], [31, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 8
              },
              "end": {
                "line": 35,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [34, 68], [34, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [34, 94], [34, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 8
              },
              "end": {
                "line": 38,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [37, 66], [37, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [37, 86], [37, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [30, 23], [30, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [30, 43], [30, 63]]]]], [], ["loc", [null, [30, 38], [30, 64]]]]], [], ["loc", [null, [30, 18], [30, 65]]]]], [], 0, null, ["loc", [null, [30, 8], [32, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [33, 23], [33, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [33, 43], [33, 63]]]]], [], ["loc", [null, [33, 38], [33, 64]]]]], [], ["loc", [null, [33, 18], [33, 65]]]]], [], 1, null, ["loc", [null, [33, 8], [35, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [36, 23], [36, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [36, 44], [36, 58]]]]], [], ["loc", [null, [36, 39], [36, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [36, 65], [36, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [36, 80], [36, 100]]]]], [], ["loc", [null, [36, 60], [36, 101]]]]], [], ["loc", [null, [36, 35], [36, 102]]]]], [], ["loc", [null, [36, 18], [36, 103]]]]], [], 2, null, ["loc", [null, [36, 8], [38, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 184,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [9, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [11]);
        var element7 = dom.childAt(element3, [13]);
        var element8 = dom.childAt(element3, [15]);
        var element9 = dom.childAt(element3, [17]);
        var element10 = dom.childAt(element3, [19]);
        var element11 = dom.childAt(element3, [21]);
        var element12 = dom.childAt(element3, [23]);
        var element13 = dom.childAt(element3, [25]);
        var element14 = dom.childAt(element3, [27]);
        var element15 = dom.childAt(element3, [29]);
        var element16 = dom.childAt(element3, [31]);
        var morphs = new Array(46);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element3, 1, 1);
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createMorphAt(element3, 5, 5);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [7, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 0, 0);
        morphs[8] = dom.createAttrMorph(element6, 'class');
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createAttrMorph(element7, 'class');
        morphs[12] = dom.createMorphAt(element7, 1, 1);
        morphs[13] = dom.createMorphAt(element7, 3, 3);
        morphs[14] = dom.createAttrMorph(element8, 'class');
        morphs[15] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[16] = dom.createMorphAt(element8, 3, 3);
        morphs[17] = dom.createMorphAt(element8, 5, 5);
        morphs[18] = dom.createAttrMorph(element9, 'class');
        morphs[19] = dom.createMorphAt(element9, 1, 1);
        morphs[20] = dom.createMorphAt(element9, 3, 3);
        morphs[21] = dom.createAttrMorph(element10, 'class');
        morphs[22] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        morphs[23] = dom.createMorphAt(element10, 3, 3);
        morphs[24] = dom.createMorphAt(element10, 5, 5);
        morphs[25] = dom.createAttrMorph(element11, 'class');
        morphs[26] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[27] = dom.createMorphAt(element11, 3, 3);
        morphs[28] = dom.createMorphAt(element11, 5, 5);
        morphs[29] = dom.createAttrMorph(element12, 'class');
        morphs[30] = dom.createMorphAt(dom.childAt(element12, [1]), 0, 0);
        morphs[31] = dom.createMorphAt(element12, 3, 3);
        morphs[32] = dom.createMorphAt(element12, 5, 5);
        morphs[33] = dom.createAttrMorph(element13, 'class');
        morphs[34] = dom.createMorphAt(dom.childAt(element13, [1]), 0, 0);
        morphs[35] = dom.createMorphAt(element13, 3, 3);
        morphs[36] = dom.createMorphAt(element13, 5, 5);
        morphs[37] = dom.createMorphAt(dom.childAt(element14, [1]), 0, 0);
        morphs[38] = dom.createMorphAt(element14, 3, 3);
        morphs[39] = dom.createMorphAt(element14, 5, 5);
        morphs[40] = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
        morphs[41] = dom.createMorphAt(element15, 3, 3);
        morphs[42] = dom.createMorphAt(element15, 5, 5);
        morphs[43] = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
        morphs[44] = dom.createMorphAt(element16, 3, 3);
        morphs[45] = dom.createMorphAt(element16, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.caption"], [], ["loc", [null, [1, 22], [1, 81]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [21, 26], [21, 31]]]]], [], []]], ["loc", [null, [21, 2], [21, 33]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [24, 43], [24, 55]]]]], [], []]], ["loc", [null, [24, 6], [24, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [29, 16], [29, 24]]]]], [], 0, null, ["loc", [null, [29, 6], [39, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [40, 59], [40, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [40, 78], [40, 119]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.address", ["loc", [null, [43, 25], [43, 45]]]], "error", ""], [], ["loc", [null, [43, 20], [43, 58]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.address", ["loc", [null, [45, 12], [45, 25]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.address-caption"], [], ["loc", [null, [46, 12], [46, 77]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [47, 15], [47, 23]]]]], [], []]], ["loc", [null, [44, 4], [48, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.address", ["loc", [null, [49, 40], [49, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [49, 4], [49, 82]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.text", ["loc", [null, [51, 25], [51, 42]]]], "error", ""], [], ["loc", [null, [51, 20], [51, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [53, 12], [53, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.text-caption"], [], ["loc", [null, [54, 12], [54, 74]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [55, 15], [55, 23]]]]], [], []]], ["loc", [null, [52, 4], [56, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.text", ["loc", [null, [57, 40], [57, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [57, 4], [57, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.date", ["loc", [null, [59, 25], [59, 42]]]], "error", ""], [], ["loc", [null, [59, 20], [59, 55]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.date-caption"], [], ["loc", [null, [60, 11], [60, 75]]]], ["inline", "flexberry-simpledatetime", [], ["type", "date", "value", ["subexpr", "@mut", [["get", "model.date", ["loc", [null, [63, 12], [63, 22]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [64, 15], [64, 23]]]]], [], []]], ["loc", [null, [61, 4], [65, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.date", ["loc", [null, [66, 40], [66, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [66, 4], [66, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.votes", ["loc", [null, [68, 25], [68, 43]]]], "error", ""], [], ["loc", [null, [68, 20], [68, 56]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.votes", ["loc", [null, [70, 12], [70, 23]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.votes-caption"], [], ["loc", [null, [71, 12], [71, 75]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [72, 15], [72, 23]]]]], [], []]], ["loc", [null, [69, 4], [73, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.votes", ["loc", [null, [74, 40], [74, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [74, 4], [74, 80]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.moderated", ["loc", [null, [76, 25], [76, 47]]]], "error", ""], [], ["loc", [null, [76, 20], [76, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.moderated-caption"], [], ["loc", [null, [77, 11], [77, 80]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.moderated", ["loc", [null, [79, 12], [79, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [80, 15], [80, 23]]]]], [], []]], ["loc", [null, [78, 4], [81, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.moderated", ["loc", [null, [82, 40], [82, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [82, 4], [82, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.type", ["loc", [null, [84, 25], [84, 42]]]], "error", ""], [], ["loc", [null, [84, 20], [84, 55]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.type-caption"], [], ["loc", [null, [85, 11], [85, 75]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [87, 12], [87, 22]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [88, 19], [88, 24]]]]], [], []], "relationName", "type", "projection", "SuggestionTypeL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.type-caption"], [], ["loc", [null, [92, 12], [92, 74]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [93, 13], [93, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [94, 13], [94, 41]]]], "dropdown", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [96, 15], [96, 23]]]]], [], []], "direction", "upward", "componentName", "SuggestionEditType"], ["loc", [null, [86, 4], [99, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.type", ["loc", [null, [100, 40], [100, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [100, 4], [100, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.author", ["loc", [null, [102, 25], [102, 44]]]], "error", ""], [], ["loc", [null, [102, 20], [102, 57]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [103, 11], [103, 77]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.author", ["loc", [null, [105, 12], [105, 24]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [106, 19], [106, 24]]]]], [], []], "relationName", "author", "projection", "ApplicationUserL", "displayAttributeName", "name", "showPreviewButton", true, "previewOnSeparateRoute", true, "previewFormRoute", "ember-flexberry-dummy-application-user-edit", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [113, 12], [113, 76]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [114, 13], [114, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [115, 13], [115, 41]]]], "preview", ["subexpr", "action", ["previewLookupValue"], [], ["loc", [null, [116, 14], [116, 43]]]], "lookupWindowCustomProperties", ["subexpr", "action", ["getLookupFolvProperties"], [], ["loc", [null, [117, 35], [117, 69]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [118, 15], [118, 23]]]]], [], []], "componentName", "SuggestionEditAuthor"], ["loc", [null, [104, 4], [120, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.author", ["loc", [null, [121, 40], [121, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [121, 4], [121, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.editor1", ["loc", [null, [123, 25], [123, 45]]]], "error", ""], [], ["loc", [null, [123, 20], [123, 58]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [124, 11], [124, 78]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.editor1", ["loc", [null, [126, 12], [126, 25]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [127, 19], [127, 24]]]]], [], []], "relationName", "editor1", "projection", "ApplicationUserL", "displayAttributeName", "name", "showPreviewButton", true, "previewFormRoute", "ember-flexberry-dummy-application-user-edit", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [133, 12], [133, 77]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [134, 13], [134, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [135, 13], [135, 41]]]], "preview", ["subexpr", "action", ["previewLookupValue"], [], ["loc", [null, [136, 14], [136, 43]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [137, 15], [137, 23]]]]], [], []], "componentName", "SuggestionEditEditor1"], ["loc", [null, [125, 4], [139, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.editor1", ["loc", [null, [140, 40], [140, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [140, 4], [140, 82]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.files-caption"], [], ["loc", [null, [143, 11], [143, 76]]]], ["inline", "flexberry-groupedit", [], ["componentName", "filesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.files", ["loc", [null, [146, 14], [146, 25]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [147, 26], [147, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.files", ["loc", [null, [148, 22], [148, 54]]]]], [], []], "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [150, 15], [150, 23]]]]], [], []]], ["loc", [null, [144, 4], [151, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.files", ["loc", [null, [152, 40], [152, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [152, 4], [152, 80]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.userVotes-caption"], [], ["loc", [null, [155, 11], [155, 80]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionUserVotesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.userVotes", ["loc", [null, [158, 14], [158, 29]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [159, 26], [159, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.userVotes", ["loc", [null, [160, 22], [160, 58]]]]], [], []], "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [162, 15], [162, 23]]]]], [], []]], ["loc", [null, [156, 4], [163, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.userVotes", ["loc", [null, [164, 40], [164, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [164, 4], [164, 84]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.comments-caption"], [], ["loc", [null, [167, 11], [167, 79]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionCommentsGroupEdit", "content", ["subexpr", "@mut", [["get", "model.comments", ["loc", [null, [170, 14], [170, 28]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [171, 26], [171, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.comments", ["loc", [null, [172, 22], [172, 57]]]]], [], []], "rowClickable", true, "rowClick", "rowClick", "editOnSeparateRoute", true, "editFormRoute", ["subexpr", "@mut", [["get", "commentsEditRoute", ["loc", [null, [176, 20], [176, 37]]]]], [], []], "saveBeforeRouteLeave", true, "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [179, 15], [179, 23]]]]], [], []]], ["loc", [null, [168, 4], [180, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.comments", ["loc", [null, [181, 40], [181, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [181, 4], [181, 83]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-suggestion-file-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 8
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-file-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [31, 62], [31, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [31, 80], [31, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 8
              },
              "end": {
                "line": 35,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-file-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [34, 68], [34, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [34, 94], [34, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 8
              },
              "end": {
                "line": 38,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-file-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [37, 66], [37, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [37, 86], [37, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-file-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [30, 23], [30, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [30, 43], [30, 63]]]]], [], ["loc", [null, [30, 38], [30, 64]]]]], [], ["loc", [null, [30, 18], [30, 65]]]]], [], 0, null, ["loc", [null, [30, 8], [32, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [33, 23], [33, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [33, 43], [33, 63]]]]], [], ["loc", [null, [33, 38], [33, 64]]]]], [], ["loc", [null, [33, 18], [33, 65]]]]], [], 1, null, ["loc", [null, [33, 8], [35, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [36, 23], [36, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [36, 44], [36, 58]]]]], [], ["loc", [null, [36, 39], [36, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [36, 65], [36, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [36, 80], [36, 100]]]]], [], ["loc", [null, [36, 60], [36, 101]]]]], [], ["loc", [null, [36, 35], [36, 102]]]]], [], ["loc", [null, [36, 18], [36, 103]]]]], [], 2, null, ["loc", [null, [36, 8], [38, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 75,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-file-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [9, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [11]);
        var morphs = new Array(15);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element3, 1, 1);
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createMorphAt(element3, 5, 5);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [7, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 0, 0);
        morphs[8] = dom.createAttrMorph(element6, 'class');
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createMorphAt(dom.childAt(element6, [5]), 0, 0);
        morphs[12] = dom.createMorphAt(element6, 7, 7);
        morphs[13] = dom.createMorphAt(dom.childAt(element6, [9]), 0, 0);
        morphs[14] = dom.createMorphAt(element6, 11, 11);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-suggestion-file-edit.header"], [], ["loc", [null, [1, 22], [1, 85]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [21, 26], [21, 31]]]]], [], []]], ["loc", [null, [21, 2], [21, 33]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [24, 43], [24, 55]]]]], [], []]], ["loc", [null, [24, 6], [24, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [29, 16], [29, 24]]]]], [], 0, null, ["loc", [null, [29, 6], [39, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [40, 59], [40, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [40, 78], [40, 119]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [43, 25], [43, 42]]]], "error", ""], [], ["loc", [null, [43, 20], [43, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.order", ["loc", [null, [45, 12], [45, 23]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-file-edit.order"], [], ["loc", [null, [46, 12], [46, 72]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [47, 15], [47, 23]]]]], [], []]], ["loc", [null, [44, 4], [48, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [49, 40], [49, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [49, 4], [49, 79]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-file-edit.file"], [], ["loc", [null, [51, 11], [51, 72]]]], ["inline", "flexberry-file", [], ["value", ["subexpr", "@mut", [["get", "model.file", ["loc", [null, [53, 12], [53, 22]]]]], [], []], "showPreview", true, "showUploadButton", true, "showDownloadButton", true], ["loc", [null, [52, 4], [57, 6]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-file-edit.suggestion"], [], ["loc", [null, [59, 11], [59, 78]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.suggestion", ["loc", [null, [61, 12], [61, 28]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [62, 19], [62, 24]]]]], [], []], "relationName", "suggestion", "projection", "SuggestionL", "displayAttributeName", "address", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-file-edit.suggestion"], [], ["loc", [null, [66, 12], [66, 77]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [67, 13], [67, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [68, 13], [68, 41]]]], "preview", ["subexpr", "action", ["previewLookupValue"], [], ["loc", [null, [69, 14], [69, 43]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [70, 15], [70, 23]]]]], [], []], "componentName", "Suggestion"], ["loc", [null, [60, 4], [72, 6]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-suggestion-file-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 50,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-file-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(element0, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [5]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-file-edit.header"], [], ["loc", [null, [2, 4], [2, 67]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [7, 12], [7, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [8, 12], [8, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [9, 12], [9, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [10, 11], [10, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [11, 11], [11, 42]]]]], ["loc", [null, [4, 2], [12, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [16, 12], [16, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [17, 12], [17, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [18, 12], [18, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [19, 11], [19, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [20, 11], [20, 40]]]]], ["loc", [null, [13, 2], [21, 4]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [24, 12], [24, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion-file", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [26, 20], [26, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [27, 18], [27, 31]]]]], [], []], "createNewButton", true, "refreshButton", true, "deleteButton", true, "showCheckBoxInRow", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [32, 12], [32, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [34, 10], [34, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [35, 17], [35, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [36, 18], [36, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [37, 22], [37, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [38, 20], [38, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [39, 16], [39, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [40, 17], [40, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [41, 23], [41, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [42, 27], [42, 60]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [43, 17], [43, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [44, 13], [44, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [45, 13], [45, 32]]]], "componentName", "fileObjectListView"], ["loc", [null, [23, 2], [47, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-suggestion-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 58,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(element0, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [5]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-list.caption"], [], ["loc", [null, [2, 4], [2, 63]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [7, 12], [7, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [8, 12], [8, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [9, 12], [9, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [10, 11], [10, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [11, 11], [11, 42]]]]], ["loc", [null, [4, 2], [12, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [16, 12], [16, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [17, 12], [17, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [18, 12], [18, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [19, 11], [19, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [20, 11], [20, 40]]]]], ["loc", [null, [13, 2], [21, 4]]]], ["inline", "flexberry-objectlistview", [], ["editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [24, 18], [24, 31]]]]], [], []], "showCheckBoxInRow", true, "modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [27, 20], [27, 35]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [28, 12], [28, 17]]]]], [], []], "createNewButton", true, "enableFilters", true, "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [31, 12], [31, 19]]]]], [], []], "refreshButton", true, "exportExcelButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [34, 12], [34, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [36, 17], [36, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [37, 23], [37, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [38, 27], [38, 60]]]], "applyFilters", ["subexpr", "action", ["applyFilters"], [], ["loc", [null, [39, 17], [39, 40]]]], "resetFilters", ["subexpr", "action", ["resetFilters"], [], ["loc", [null, [40, 17], [40, 40]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [41, 10], [41, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [42, 17], [42, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [43, 18], [43, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [44, 22], [44, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [45, 20], [45, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [46, 16], [46, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [47, 17], [47, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [48, 13], [48, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [49, 13], [49, 32]]]], "componentName", "SuggestionObjectListView", "showPrototypeButtonInRow", true, "showDeleteMenuItemInRow", true, "deleteButton", true, "advLimitButton", true], ["loc", [null, [23, 2], [55, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-suggestion-type-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 8
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [31, 62], [31, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [31, 80], [31, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 8
              },
              "end": {
                "line": 35,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [34, 68], [34, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [34, 94], [34, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 8
              },
              "end": {
                "line": 38,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [37, 66], [37, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [37, 86], [37, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [30, 23], [30, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [30, 43], [30, 63]]]]], [], ["loc", [null, [30, 38], [30, 64]]]]], [], ["loc", [null, [30, 18], [30, 65]]]]], [], 0, null, ["loc", [null, [30, 8], [32, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [33, 23], [33, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [33, 43], [33, 63]]]]], [], ["loc", [null, [33, 38], [33, 64]]]]], [], ["loc", [null, [33, 18], [33, 65]]]]], [], 1, null, ["loc", [null, [33, 8], [35, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [36, 23], [36, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [36, 44], [36, 58]]]]], [], ["loc", [null, [36, 39], [36, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [36, 65], [36, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [36, 80], [36, 100]]]]], [], ["loc", [null, [36, 60], [36, 101]]]]], [], ["loc", [null, [36, 35], [36, 102]]]]], [], ["loc", [null, [36, 18], [36, 103]]]]], [], 2, null, ["loc", [null, [36, 8], [38, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 87,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [9, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [11]);
        var element7 = dom.childAt(element3, [13]);
        var element8 = dom.childAt(element3, [15]);
        var element9 = dom.childAt(element3, [17]);
        var morphs = new Array(22);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element3, 1, 1);
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createMorphAt(element3, 5, 5);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [7, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 0, 0);
        morphs[8] = dom.createAttrMorph(element6, 'class');
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createAttrMorph(element7, 'class');
        morphs[12] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
        morphs[13] = dom.createMorphAt(element7, 3, 3);
        morphs[14] = dom.createMorphAt(element7, 5, 5);
        morphs[15] = dom.createAttrMorph(element8, 'class');
        morphs[16] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[17] = dom.createMorphAt(element8, 3, 3);
        morphs[18] = dom.createMorphAt(element8, 5, 5);
        morphs[19] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        morphs[20] = dom.createMorphAt(element9, 3, 3);
        morphs[21] = dom.createMorphAt(element9, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.caption"], [], ["loc", [null, [1, 22], [1, 86]]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [21, 26], [21, 31]]]]], [], []]], ["loc", [null, [21, 2], [21, 33]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [24, 43], [24, 55]]]]], [], []]], ["loc", [null, [24, 6], [24, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [29, 16], [29, 24]]]]], [], 0, null, ["loc", [null, [29, 6], [39, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [40, 59], [40, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [40, 78], [40, 119]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [43, 25], [43, 42]]]], "error", ""], [], ["loc", [null, [43, 20], [43, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [45, 12], [45, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.name-caption"], [], ["loc", [null, [46, 12], [46, 79]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [47, 15], [47, 23]]]]], [], []]], ["loc", [null, [44, 4], [48, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [49, 40], [49, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [49, 4], [49, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.moderated", ["loc", [null, [51, 25], [51, 47]]]], "error", ""], [], ["loc", [null, [51, 20], [51, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.moderated-caption"], [], ["loc", [null, [52, 11], [52, 85]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.moderated", ["loc", [null, [54, 12], [54, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [55, 15], [55, 23]]]]], [], []]], ["loc", [null, [53, 4], [56, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.moderated", ["loc", [null, [57, 40], [57, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [57, 4], [57, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.parent", ["loc", [null, [59, 25], [59, 44]]]], "error", ""], [], ["loc", [null, [59, 20], [59, 57]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.parent-caption"], [], ["loc", [null, [60, 11], [60, 82]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.parent", ["loc", [null, [62, 12], [62, 24]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [63, 19], [63, 24]]]]], [], []], "relationName", "parent", "projection", "SuggestionTypeL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.parent-caption"], [], ["loc", [null, [67, 12], [67, 81]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [68, 13], [68, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [69, 13], [69, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [70, 15], [70, 23]]]]], [], []]], ["loc", [null, [61, 4], [71, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.parent", ["loc", [null, [72, 40], [72, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [72, 4], [72, 81]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.localized-types-caption"], [], ["loc", [null, [75, 11], [75, 91]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionTypeLocalizedTypesGroupEdit", "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [78, 26], [78, 41]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model.localizedTypes", ["loc", [null, [79, 14], [79, 34]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.localizedTypes", ["loc", [null, [80, 22], [80, 63]]]]], [], []], "orderable", false, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [82, 15], [82, 23]]]]], [], []]], ["loc", [null, [76, 4], [83, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.localizedTypes", ["loc", [null, [84, 40], [84, 67]]]]], [], []], "pointing", "pointing"], ["loc", [null, [84, 4], [84, 89]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-suggestion-type-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-list.caption"], [], ["loc", [null, [2, 4], [2, 68]]]], ["inline", "flexberry-simpleolv", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [5, 12], [5, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion-type", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [7, 20], [7, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [8, 18], [8, 31]]]]], [], []], "createNewButton", true, "deleteButton", true, "refreshButton", true, "exportExcelButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [13, 12], [13, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [15, 10], [15, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [16, 17], [16, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [17, 18], [17, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [18, 22], [18, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [19, 20], [19, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [20, 16], [20, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [21, 17], [21, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [22, 23], [22, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [23, 27], [23, 60]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [24, 17], [24, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [25, 13], [25, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [26, 13], [26, 32]]]], "componentName", "SOLVSuggestionTypeObjectListView", "showCheckBoxInRow", true, "showEditMenuItemInRow", true, "showDeleteMenuItemInRow", true, "showDeleteButtonInRow", true], ["loc", [null, [4, 2], [32, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-toggler-example-master-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 8
              },
              "end": {
                "line": 20,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-toggler-example-master-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [17, 66], [17, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [18, 12], [18, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-toggler-example-master-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui button save-button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(element2, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [13, 60], [13, 77]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [14, 10], [14, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [16, 18], [16, 29]]]]], [], 0, null, ["loc", [null, [16, 8], [20, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 38,
              "column": 0
            },
            "end": {
              "line": 50,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-toggler-example-master-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "field");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["inline", "t", ["forms.ember-flexberry-dummy-toggler-example-master-e.toggler-example-deteil-property-caption"], [], ["loc", [null, [40, 11], [40, 111]]]], ["inline", "flexberry-groupedit", [], ["componentName", "togglerExampleDetailGroupEdit", "content", ["subexpr", "@mut", [["get", "model.togglerExampleDetail", ["loc", [null, [43, 14], [43, 40]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [44, 26], [44, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.togglerExampleDetail", ["loc", [null, [45, 22], [45, 69]]]]], [], []], "orderable", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [47, 15], [47, 23]]]]], [], []]], ["loc", [null, [41, 4], [48, 6]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 52,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-toggler-example-master-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [5, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [7]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element3, 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element3, [3, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element4, 1, 1);
        morphs[4] = dom.createElementMorph(element5);
        morphs[5] = dom.createMorphAt(element5, 1, 1);
        morphs[6] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
        morphs[7] = dom.createMorphAt(element6, 3, 3);
        morphs[8] = dom.createMorphAt(element6, 5, 5);
        morphs[9] = dom.createMorphAt(element3, 9, 9);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-toggler-example-master-e.caption"], [], ["loc", [null, [1, 22], [1, 90]]]], ["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [4, 26], [4, 31]]]]], [], []]], ["loc", [null, [4, 2], [4, 33]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [7, 43], [7, 55]]]]], [], []]], ["loc", [null, [7, 6], [7, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [12, 16], [12, 24]]]]], [], 0, null, ["loc", [null, [12, 6], [21, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [22, 59], [22, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [23, 8], [23, 49]]]], ["inline", "t", ["forms.ember-flexberry-dummy-toggler-example-master-e.toggler-example-master-property-caption"], [], ["loc", [null, [28, 9], [28, 109]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [31, 16], [31, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [32, 13], [32, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.togglerExampleMasterProperty", ["loc", [null, [34, 10], [34, 44]]]]], [], []]], ["loc", [null, [29, 2], [35, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.togglerExampleMasterProperty", ["loc", [null, [36, 38], [36, 79]]]]], [], []], "pointing", "pointing"], ["loc", [null, [36, 2], [36, 101]]]], ["block", "flexberry-toggler", [], [], 1, null, ["loc", [null, [38, 0], [50, 22]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/error", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 5,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/error.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(":\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", [["get", "model.nameLocaleKey", ["loc", [null, [4, 8], [4, 27]]]]], [], ["loc", [null, [4, 4], [4, 29]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 7,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/error.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(":\n  ");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "model.name", ["loc", [null, [6, 4], [6, 18]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 2
            },
            "end": {
              "line": 7,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/error.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "model.name", ["loc", [null, [5, 12], [5, 22]]]]], [], 0, null, ["loc", [null, [5, 2], [7, 2]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 10,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/error.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", [["get", "model.messageLocaleKey", ["loc", [null, [9, 8], [9, 30]]]]], [], ["loc", [null, [9, 4], [9, 32]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/error.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n  ");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "model.message", ["loc", [null, [11, 4], [11, 21]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 2
            },
            "end": {
              "line": 12,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/error.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "model.message", ["loc", [null, [10, 12], [10, 25]]]]], [], 0, null, ["loc", [null, [10, 2], [12, 2]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 2
              },
              "end": {
                "line": 19,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/error.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("pre");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "model.stack", ["loc", [null, [18, 9], [18, 24]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/error.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "flexberry-toggler", [], ["caption", ["subexpr", "t", ["forms.error-form.show-more"], [], ["loc", [null, [16, 12], [16, 44]]]]], 0, null, ["loc", [null, [15, 2], [19, 24]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child5 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 2
              },
              "end": {
                "line": 28,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/error.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "link-to", [["subexpr", "t", ["forms.error-form.retry"], [], ["loc", [null, [23, 14], [23, 42]]]], ["get", "model.retryRoute", ["loc", [null, [23, 43], [23, 59]]]], ["get", "model.id", ["loc", [null, [23, 60], [23, 68]]]]], ["tagName", "button", "activeClass", "", "class", "ui button"], ["loc", [null, [23, 4], [27, 6]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 2
              },
              "end": {
                "line": 34,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/error.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "link-to", [["subexpr", "t", ["forms.error-form.retry"], [], ["loc", [null, [29, 14], [29, 42]]]], ["get", "model.retryRoute", ["loc", [null, [29, 43], [29, 59]]]]], ["tagName", "button", "activeClass", "", "class", "ui button"], ["loc", [null, [29, 4], [33, 6]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 0
            },
            "end": {
              "line": 35,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/error.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "model.id", ["loc", [null, [22, 8], [22, 16]]]]], [], 0, 1, ["loc", [null, [22, 2], [34, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 35,
            "column": 7
          }
        },
        "moduleName": "dummy/templates/error.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h1");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        morphs[2] = dom.createMorphAt(element0, 2, 2);
        morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        morphs[4] = dom.createMorphAt(fragment, 5, 5, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["forms.error-form.caption"], [], ["loc", [null, [1, 22], [1, 54]]]], ["block", "if", [["get", "model.nameLocaleKey", ["loc", [null, [3, 8], [3, 27]]]]], [], 0, 1, ["loc", [null, [3, 2], [7, 9]]]], ["block", "if", [["get", "model.messageLocaleKey", ["loc", [null, [8, 8], [8, 30]]]]], [], 2, 3, ["loc", [null, [8, 2], [12, 9]]]], ["block", "if", [["get", "model.stack", ["loc", [null, [14, 6], [14, 17]]]]], [], 4, null, ["loc", [null, [14, 0], [20, 7]]]], ["block", "if", [["get", "model.retryRoute", ["loc", [null, [21, 6], [21, 22]]]]], [], 5, null, ["loc", [null, [21, 0], [35, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define("dummy/templates/filters-dialog-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/filters-dialog-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "filters-dialog-content", [], ["componentName", ["subexpr", "@mut", [["get", "model.componentName", ["loc", [null, [2, 16], [2, 35]]]]], [], []], "filterColumns", ["subexpr", "@mut", [["get", "model.filterColumns", ["loc", [null, [3, 16], [3, 35]]]]], [], []], "close", ["subexpr", "action", ["closeModalDialog"], [], ["loc", [null, [4, 8], [4, 35]]]], "message", ["subexpr", "@mut", [["get", "message", ["loc", [null, [5, 10], [5, 17]]]]], [], []]], ["loc", [null, [1, 0], [6, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/filters-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/filters-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "outlet", ["modal-content"], [], ["loc", [null, [9, 2], [9, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/filters-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "sizeClass", "small", "close", "removeModalDialog", "created", "createdModalDialog", "useOkButton", false, "useCloseButton", false], 0, null, ["loc", [null, [1, 0], [10, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/flexberry-file-view-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/flexberry-file-view-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("img");
          dom.setAttribute(el1, "class", "flexberry-file-view-dialog");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'src');
          morphs[1] = dom.createAttrMorph(element0, 'alt');
          return morphs;
        },
        statements: [["attribute", "src", ["concat", [["get", "imageSrc", ["loc", [null, [9, 49], [9, 57]]]]]]], ["attribute", "alt", ["subexpr", "t", ["components.flexberry-file.preview-image-alternative-text"], [], ["loc", [null, [9, 65], [9, 129]]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/flexberry-file-view-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "useOkButton", false, "close", "removeModalDialog", "created", "createdModalDialog", "viewImageContent", true, "sizeClass", ["subexpr", "@mut", [["get", "sizeClass", ["loc", [null, [7, 12], [7, 21]]]]], [], []], "settings", ["subexpr", "@mut", [["get", "settings", ["loc", [null, [8, 11], [8, 19]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [10, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/i-i-s-caseberry-logging-objects-application-log-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 10,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [8, 14], [8, 26]]]]], [], []]], ["loc", [null, [4, 4], [9, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [3, 10], [3, 23]]]]], [], 0, null, ["loc", [null, [3, 2], [10, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 8
              },
              "end": {
                "line": 19,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [18, 62], [18, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [18, 80], [18, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 8
              },
              "end": {
                "line": 22,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [21, 68], [21, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [21, 94], [21, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 8
              },
              "end": {
                "line": 25,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [24, 66], [24, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [24, 86], [24, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 6
            },
            "end": {
              "line": 26,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [17, 23], [17, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [17, 43], [17, 63]]]]], [], ["loc", [null, [17, 38], [17, 64]]]]], [], ["loc", [null, [17, 18], [17, 65]]]]], [], 0, null, ["loc", [null, [17, 8], [19, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [20, 23], [20, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [20, 43], [20, 63]]]]], [], ["loc", [null, [20, 38], [20, 64]]]]], [], ["loc", [null, [20, 18], [20, 65]]]]], [], 1, null, ["loc", [null, [20, 8], [22, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [23, 23], [23, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [23, 44], [23, 58]]]]], [], ["loc", [null, [23, 39], [23, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [23, 65], [23, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [23, 80], [23, 100]]]]], [], ["loc", [null, [23, 60], [23, 101]]]]], [], ["loc", [null, [23, 35], [23, 102]]]]], [], ["loc", [null, [23, 18], [23, 103]]]]], [], 2, null, ["loc", [null, [23, 8], [25, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 32,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.category", ["loc", [null, [34, 6], [34, 31]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 2
            },
            "end": {
              "line": 51,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.eventId", ["loc", [null, [49, 6], [49, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 62,
              "column": 2
            },
            "end": {
              "line": 66,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.priority", ["loc", [null, [64, 6], [64, 31]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 77,
              "column": 2
            },
            "end": {
              "line": 81,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.severity", ["loc", [null, [79, 6], [79, 31]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 92,
              "column": 2
            },
            "end": {
              "line": 96,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.title", ["loc", [null, [94, 6], [94, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 108,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.timestamp", ["loc", [null, [109, 28], [109, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child8 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 119,
              "column": 2
            },
            "end": {
              "line": 123,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.machineName", ["loc", [null, [121, 6], [121, 34]]]]],
        locals: [],
        templates: []
      };
    })();
    var child9 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 134,
              "column": 2
            },
            "end": {
              "line": 138,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.appDomainName", ["loc", [null, [136, 6], [136, 36]]]]],
        locals: [],
        templates: []
      };
    })();
    var child10 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 149,
              "column": 2
            },
            "end": {
              "line": 153,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.processId", ["loc", [null, [151, 6], [151, 32]]]]],
        locals: [],
        templates: []
      };
    })();
    var child11 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 164,
              "column": 2
            },
            "end": {
              "line": 168,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.processName", ["loc", [null, [166, 6], [166, 34]]]]],
        locals: [],
        templates: []
      };
    })();
    var child12 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 179,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.threadName", ["loc", [null, [181, 6], [181, 33]]]]],
        locals: [],
        templates: []
      };
    })();
    var child13 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 194,
              "column": 2
            },
            "end": {
              "line": 198,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.win32ThreadId", ["loc", [null, [196, 6], [196, 36]]]]],
        locals: [],
        templates: []
      };
    })();
    var child14 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 213,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.message", ["loc", [null, [211, 6], [211, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    var child15 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 224,
              "column": 2
            },
            "end": {
              "line": 228,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.formattedMessage", ["loc", [null, [226, 6], [226, 39]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 239,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "field");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "flexberry-edit-panel");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5, "type", "submit");
        dom.setAttribute(el5, "class", "ui button close-button");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("Timestamp");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [3]);
        var element4 = dom.childAt(element3, [1, 1, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [3]);
        var element7 = dom.childAt(element3, [5]);
        var element8 = dom.childAt(element3, [7]);
        var element9 = dom.childAt(element3, [9]);
        var element10 = dom.childAt(element3, [11]);
        var element11 = dom.childAt(element3, [13]);
        var element12 = dom.childAt(element3, [15]);
        var element13 = dom.childAt(element3, [17]);
        var element14 = dom.childAt(element3, [19]);
        var element15 = dom.childAt(element3, [21]);
        var element16 = dom.childAt(element3, [23]);
        var element17 = dom.childAt(element3, [25]);
        var element18 = dom.childAt(element3, [27]);
        var element19 = dom.childAt(element3, [29]);
        var morphs = new Array(32);
        morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[1] = dom.createMorphAt(element4, 1, 1);
        morphs[2] = dom.createElementMorph(element5);
        morphs[3] = dom.createMorphAt(element5, 0, 0);
        morphs[4] = dom.createMorphAt(element6, 1, 1);
        morphs[5] = dom.createMorphAt(element6, 3, 3);
        morphs[6] = dom.createMorphAt(element7, 1, 1);
        morphs[7] = dom.createMorphAt(element7, 3, 3);
        morphs[8] = dom.createMorphAt(element8, 1, 1);
        morphs[9] = dom.createMorphAt(element8, 3, 3);
        morphs[10] = dom.createMorphAt(element9, 1, 1);
        morphs[11] = dom.createMorphAt(element9, 3, 3);
        morphs[12] = dom.createMorphAt(element10, 1, 1);
        morphs[13] = dom.createMorphAt(element10, 3, 3);
        morphs[14] = dom.createMorphAt(element11, 3, 3);
        morphs[15] = dom.createMorphAt(element11, 5, 5);
        morphs[16] = dom.createMorphAt(element12, 1, 1);
        morphs[17] = dom.createMorphAt(element12, 3, 3);
        morphs[18] = dom.createMorphAt(element13, 1, 1);
        morphs[19] = dom.createMorphAt(element13, 3, 3);
        morphs[20] = dom.createMorphAt(element14, 1, 1);
        morphs[21] = dom.createMorphAt(element14, 3, 3);
        morphs[22] = dom.createMorphAt(element15, 1, 1);
        morphs[23] = dom.createMorphAt(element15, 3, 3);
        morphs[24] = dom.createMorphAt(element16, 1, 1);
        morphs[25] = dom.createMorphAt(element16, 3, 3);
        morphs[26] = dom.createMorphAt(element17, 1, 1);
        morphs[27] = dom.createMorphAt(element17, 3, 3);
        morphs[28] = dom.createMorphAt(element18, 1, 1);
        morphs[29] = dom.createMorphAt(element18, 3, 3);
        morphs[30] = dom.createMorphAt(element19, 1, 1);
        morphs[31] = dom.createMorphAt(element19, 3, 3);
        return morphs;
      },
      statements: [["block", "if", [["get", "errorMessages", ["loc", [null, [2, 6], [2, 19]]]]], [], 0, null, ["loc", [null, [2, 0], [11, 7]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [16, 16], [16, 24]]]]], [], 1, null, ["loc", [null, [16, 6], [26, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [27, 59], [27, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [27, 78], [27, 119]]]], ["block", "if", [["get", "model.errors.category", ["loc", [null, [32, 8], [32, 29]]]]], [], 2, null, ["loc", [null, [32, 2], [36, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [38, 13], [38, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.category", ["loc", [null, [40, 10], [40, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.category", ["loc", [null, [41, 14], [41, 35]]]], "error", ""], [], ["loc", [null, [41, 10], [41, 47]]]], "label", "Category"], ["loc", [null, [37, 2], [43, 4]]]], ["block", "if", [["get", "model.errors.eventId", ["loc", [null, [47, 8], [47, 28]]]]], [], 3, null, ["loc", [null, [47, 2], [51, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [53, 13], [53, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.eventId", ["loc", [null, [55, 10], [55, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.eventId", ["loc", [null, [56, 14], [56, 34]]]], "error", ""], [], ["loc", [null, [56, 10], [56, 46]]]], "label", "Event id"], ["loc", [null, [52, 2], [58, 4]]]], ["block", "if", [["get", "model.errors.priority", ["loc", [null, [62, 8], [62, 29]]]]], [], 4, null, ["loc", [null, [62, 2], [66, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [68, 13], [68, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.priority", ["loc", [null, [70, 10], [70, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.priority", ["loc", [null, [71, 14], [71, 35]]]], "error", ""], [], ["loc", [null, [71, 10], [71, 47]]]], "label", "Priority"], ["loc", [null, [67, 2], [73, 4]]]], ["block", "if", [["get", "model.errors.severity", ["loc", [null, [77, 8], [77, 29]]]]], [], 5, null, ["loc", [null, [77, 2], [81, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [83, 13], [83, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.severity", ["loc", [null, [85, 10], [85, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.severity", ["loc", [null, [86, 14], [86, 35]]]], "error", ""], [], ["loc", [null, [86, 10], [86, 47]]]], "label", "Severity"], ["loc", [null, [82, 2], [88, 4]]]], ["block", "if", [["get", "model.errors.title", ["loc", [null, [92, 8], [92, 26]]]]], [], 6, null, ["loc", [null, [92, 2], [96, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [98, 13], [98, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.title", ["loc", [null, [100, 10], [100, 21]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.title", ["loc", [null, [101, 14], [101, 32]]]], "error", ""], [], ["loc", [null, [101, 10], [101, 44]]]], "label", "Title"], ["loc", [null, [97, 2], [103, 4]]]], ["block", "if", [["get", "model.errors.timestamp", ["loc", [null, [108, 8], [108, 30]]]]], [], 7, null, ["loc", [null, [108, 2], [110, 9]]]], ["inline", "flexberry-datepicker", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [112, 13], [112, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.timestamp", ["loc", [null, [113, 10], [113, 25]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.timestamp", ["loc", [null, [114, 14], [114, 36]]]], "error", ""], [], ["loc", [null, [114, 10], [114, 48]]]]], ["loc", [null, [111, 2], [115, 4]]]], ["block", "if", [["get", "model.errors.machineName", ["loc", [null, [119, 8], [119, 32]]]]], [], 8, null, ["loc", [null, [119, 2], [123, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [125, 13], [125, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.machineName", ["loc", [null, [127, 10], [127, 27]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.machineName", ["loc", [null, [128, 14], [128, 38]]]], "error", ""], [], ["loc", [null, [128, 10], [128, 50]]]], "label", "Machine name"], ["loc", [null, [124, 2], [130, 4]]]], ["block", "if", [["get", "model.errors.appDomainName", ["loc", [null, [134, 8], [134, 34]]]]], [], 9, null, ["loc", [null, [134, 2], [138, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [140, 13], [140, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.appDomainName", ["loc", [null, [142, 10], [142, 29]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.appDomainName", ["loc", [null, [143, 14], [143, 40]]]], "error", ""], [], ["loc", [null, [143, 10], [143, 52]]]], "label", "App domain name"], ["loc", [null, [139, 2], [145, 4]]]], ["block", "if", [["get", "model.errors.processId", ["loc", [null, [149, 8], [149, 30]]]]], [], 10, null, ["loc", [null, [149, 2], [153, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [155, 13], [155, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.processId", ["loc", [null, [157, 10], [157, 25]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.processId", ["loc", [null, [158, 14], [158, 36]]]], "error", ""], [], ["loc", [null, [158, 10], [158, 48]]]], "label", "Process id"], ["loc", [null, [154, 2], [160, 4]]]], ["block", "if", [["get", "model.errors.processName", ["loc", [null, [164, 8], [164, 32]]]]], [], 11, null, ["loc", [null, [164, 2], [168, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [170, 13], [170, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.processName", ["loc", [null, [172, 10], [172, 27]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.processName", ["loc", [null, [173, 14], [173, 38]]]], "error", ""], [], ["loc", [null, [173, 10], [173, 50]]]], "label", "Process name"], ["loc", [null, [169, 2], [175, 4]]]], ["block", "if", [["get", "model.errors.threadName", ["loc", [null, [179, 8], [179, 31]]]]], [], 12, null, ["loc", [null, [179, 2], [183, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [185, 13], [185, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.threadName", ["loc", [null, [187, 10], [187, 26]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.threadName", ["loc", [null, [188, 14], [188, 37]]]], "error", ""], [], ["loc", [null, [188, 10], [188, 49]]]], "label", "Thread name"], ["loc", [null, [184, 2], [190, 4]]]], ["block", "if", [["get", "model.errors.win32ThreadId", ["loc", [null, [194, 8], [194, 34]]]]], [], 13, null, ["loc", [null, [194, 2], [198, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [200, 13], [200, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.win32ThreadId", ["loc", [null, [202, 10], [202, 29]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.win32ThreadId", ["loc", [null, [203, 14], [203, 40]]]], "error", ""], [], ["loc", [null, [203, 10], [203, 52]]]], "label", "Win32 thread id"], ["loc", [null, [199, 2], [205, 4]]]], ["block", "if", [["get", "model.errors.message", ["loc", [null, [209, 8], [209, 28]]]]], [], 14, null, ["loc", [null, [209, 2], [213, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [215, 13], [215, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.message", ["loc", [null, [217, 10], [217, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.message", ["loc", [null, [218, 14], [218, 34]]]], "error", ""], [], ["loc", [null, [218, 10], [218, 46]]]], "label", "Message"], ["loc", [null, [214, 2], [220, 4]]]], ["block", "if", [["get", "model.errors.formattedMessage", ["loc", [null, [224, 8], [224, 37]]]]], [], 15, null, ["loc", [null, [224, 2], [228, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [230, 13], [230, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.formattedMessage", ["loc", [null, [232, 10], [232, 32]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.formattedMessage", ["loc", [null, [233, 14], [233, 43]]]], "error", ""], [], ["loc", [null, [233, 10], [233, 55]]]], "label", "Formatted message"], ["loc", [null, [229, 2], [235, 4]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13, child14, child15]
    };
  })());
});
define("dummy/templates/i-i-s-caseberry-logging-objects-application-log-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.i-i-s-caseberry-logging-objects-application-log-l.caption"], [], ["loc", [null, [2, 4], [2, 75]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [5, 12], [5, 17]]]]], [], []], "modelName", "i-i-s-caseberry-logging-objects-application-log", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [7, 20], [7, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [8, 18], [8, 31]]]]], [], []], "createNewButton", false, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [11, 12], [11, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [13, 10], [13, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [14, 17], [14, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [15, 18], [15, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [16, 22], [16, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [19, 17], [19, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [20, 23], [20, 52]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [21, 17], [21, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [22, 13], [22, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [23, 13], [23, 32]]]], "componentName", "IISLoggingObjectListView", "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [25, 27], [25, 60]]]]], ["loc", [null, [4, 2], [26, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ui message");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.index.greeting"], [], ["loc", [null, [3, 4], [3, 32]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/integration-examples/edit-form/readonly-mode", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 117,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/integration-examples/edit-form/readonly-mode.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ui horizontal segments");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui segment");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        dom.setAttribute(el3, "class", "ui header");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui segment");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        dom.setAttribute(el3, "class", "ui header");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      readonly=");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "two fields");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "field");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "field");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3]);
        var element3 = dom.childAt(fragment, [4]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element3, [3]);
        var element6 = dom.childAt(element3, [5]);
        var element7 = dom.childAt(element3, [7]);
        var element8 = dom.childAt(element3, [9]);
        var element9 = dom.childAt(element8, [1]);
        var element10 = dom.childAt(element8, [3]);
        var element11 = dom.childAt(element3, [11]);
        var element12 = dom.childAt(element3, [13]);
        var element13 = dom.childAt(element3, [15]);
        var element14 = dom.childAt(element3, [17]);
        var morphs = new Array(27);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
        morphs[3] = dom.createMorphAt(element1, 5, 5);
        morphs[4] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
        morphs[5] = dom.createMorphAt(element2, 3, 3);
        morphs[6] = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
        morphs[7] = dom.createMorphAt(element4, 3, 3);
        morphs[8] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
        morphs[9] = dom.createMorphAt(element5, 3, 3);
        morphs[10] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
        morphs[11] = dom.createMorphAt(element6, 3, 3);
        morphs[12] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
        morphs[13] = dom.createMorphAt(element7, 3, 3);
        morphs[14] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        morphs[15] = dom.createMorphAt(element9, 3, 3);
        morphs[16] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        morphs[17] = dom.createMorphAt(element10, 3, 3);
        morphs[18] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[19] = dom.createMorphAt(element11, 3, 3);
        morphs[20] = dom.createMorphAt(dom.childAt(element12, [1]), 0, 0);
        morphs[21] = dom.createMorphAt(element12, 3, 3);
        morphs[22] = dom.createMorphAt(dom.childAt(element13, [1]), 0, 0);
        morphs[23] = dom.createMorphAt(element13, 3, 3);
        morphs[24] = dom.createMorphAt(dom.childAt(element14, [1]), 0, 0);
        morphs[25] = dom.createMorphAt(element14, 3, 3);
        morphs[26] = dom.createMorphAt(dom.childAt(element3, [19]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.caption"], [], ["loc", [null, [1, 22], [1, 88]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.readonly-flag-management-segment-caption"], [], ["loc", [null, [5, 8], [5, 107]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.readonly-flag-caption"], [], ["loc", [null, [7, 13], [7, 93]]]], ["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "mut", [["get", "readonly", ["loc", [null, [8, 43], [8, 51]]]]], [], ["loc", [null, [8, 38], [8, 52]]]]], ["loc", [null, [8, 6], [8, 54]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.readonly-flag-value-segment-caption"], [], ["loc", [null, [12, 8], [12, 102]]]], ["inline", "to-string", [["get", "readonly", ["loc", [null, [14, 27], [14, 35]]]]], [], ["loc", [null, [14, 15], [14, 37]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.flag-caption"], [], ["loc", [null, [19, 11], [19, 82]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.flag", ["loc", [null, [21, 12], [21, 22]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [22, 15], [22, 23]]]]], [], []]], ["loc", [null, [20, 4], [23, 6]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.number-caption"], [], ["loc", [null, [26, 11], [26, 84]]]], ["inline", "flexberry-textbox", [], ["value", ["subexpr", "@mut", [["get", "model.number", ["loc", [null, [28, 12], [28, 24]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [29, 15], [29, 23]]]]], [], []]], ["loc", [null, [27, 4], [30, 6]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.text-caption"], [], ["loc", [null, [33, 11], [33, 82]]]], ["inline", "flexberry-textbox", [], ["value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [35, 12], [35, 22]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [36, 15], [36, 23]]]]], [], []]], ["loc", [null, [34, 4], [37, 6]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.long-text-caption"], [], ["loc", [null, [40, 9], [40, 85]]]], ["inline", "flexberry-textarea", [], ["value", ["subexpr", "@mut", [["get", "model.longText", ["loc", [null, [42, 12], [42, 26]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [43, 15], [43, 23]]]]], [], []]], ["loc", [null, [41, 4], [44, 6]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.date-caption"], [], ["loc", [null, [48, 13], [48, 84]]]], ["inline", "flexberry-datepicker", [], ["value", ["subexpr", "@mut", [["get", "model.date", ["loc", [null, [50, 14], [50, 24]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [51, 17], [51, 25]]]]], [], []]], ["loc", [null, [49, 6], [52, 8]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.time-caption"], [], ["loc", [null, [55, 13], [55, 84]]]], ["inline", "flexberry-simpledatetime", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [57, 17], [57, 25]]]]], [], []], "type", "datetime", "value", ["subexpr", "@mut", [["get", "model.time", ["loc", [null, [59, 14], [59, 24]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [60, 17], [60, 25]]]]], [], []]], ["loc", [null, [56, 6], [61, 8]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.enumeration-caption"], [], ["loc", [null, [65, 11], [65, 89]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "flexberry-enum", ["integration-examples/edit-form/readonly-mode/enumeration"], [], ["loc", [null, [67, 12], [67, 87]]]], "value", ["subexpr", "@mut", [["get", "model.enumeration", ["loc", [null, [68, 12], [68, 29]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [69, 15], [69, 23]]]]], [], []]], ["loc", [null, [66, 4], [70, 6]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.file-caption"], [], ["loc", [null, [73, 11], [73, 82]]]], ["inline", "flexberry-file", [], ["value", ["subexpr", "@mut", [["get", "model.file", ["loc", [null, [75, 12], [75, 22]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [76, 15], [76, 23]]]]], [], []]], ["loc", [null, [74, 4], [77, 6]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.master-caption"], [], ["loc", [null, [80, 11], [80, 84]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.master", ["loc", [null, [82, 12], [82, 24]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [83, 19], [83, 24]]]]], [], []], "relationName", "master", "projection", "MasterL", "displayAttributeName", "text", "title", ["subexpr", "t", ["forms.integration-examples.edit-form.readonly-mode.master-caption"], [], ["loc", [null, [87, 12], [87, 83]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [88, 13], [88, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [89, 13], [89, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [90, 15], [90, 23]]]]], [], []]], ["loc", [null, [81, 4], [91, 6]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.master-dropdown-caption"], [], ["loc", [null, [94, 11], [94, 93]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.masterDropdown", ["loc", [null, [96, 12], [96, 32]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [97, 19], [97, 24]]]]], [], []], "relationName", "masterDropdown", "projection", "MasterDropdownL", "displayAttributeName", "text", "title", ["subexpr", "t", ["forms.integration-examples.edit-form.readonly-mode.master-dropdown-caption"], [], ["loc", [null, [101, 12], [101, 92]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [102, 13], [102, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [103, 13], [103, 41]]]], "dropdown", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [105, 15], [105, 23]]]]], [], []]], ["loc", [null, [95, 4], [106, 6]]]], ["inline", "flexberry-groupedit", [], ["componentName", "aggregatorDetailsGroupedit", "content", ["subexpr", "@mut", [["get", "model.details", ["loc", [null, [111, 14], [111, 27]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.details", ["loc", [null, [112, 22], [112, 56]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [113, 15], [113, 23]]]]], [], []]], ["loc", [null, [109, 4], [114, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/integration-examples/edit-form/validation", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 92,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/integration-examples/edit-form/validation.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[2] = dom.createMorphAt(element0, 3, 3);
          morphs[3] = dom.createMorphAt(element0, 5, 5);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.details", ["loc", [null, [93, 29], [93, 49]]]], "error", ""], [], ["loc", [null, [93, 24], [93, 62]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.details-caption"], [], ["loc", [null, [94, 15], [94, 86]]]], ["inline", "flexberry-groupedit", [], ["componentName", "IntegrationExamplesEditFormValidationsDetails", "content", ["subexpr", "@mut", [["get", "model.details", ["loc", [null, [97, 18], [97, 31]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [98, 30], [98, 45]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.details", ["loc", [null, [99, 26], [99, 60]]]]], [], []], "orderable", false, "showValidationMessagesInRow", false], ["loc", [null, [95, 8], [102, 10]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.details", ["loc", [null, [103, 44], [103, 64]]]]], [], []], "pointing", "pointing"], ["loc", [null, [103, 8], [103, 86]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 108,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/integration-examples/edit-form/validation.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "inline fields");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui segment");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [2]);
        var element2 = dom.childAt(element1, [3]);
        var element3 = dom.childAt(element1, [5]);
        var element4 = dom.childAt(element1, [7]);
        var element5 = dom.childAt(element1, [9]);
        var element6 = dom.childAt(element1, [11]);
        var element7 = dom.childAt(element6, [3]);
        var element8 = dom.childAt(element1, [13]);
        var element9 = dom.childAt(element1, [15]);
        var element10 = dom.childAt(element1, [17]);
        var element11 = dom.childAt(element1, [19]);
        var morphs = new Array(38);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1, 1]), 1, 1);
        morphs[2] = dom.createAttrMorph(element2, 'class');
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
        morphs[4] = dom.createMorphAt(element2, 3, 3);
        morphs[5] = dom.createMorphAt(element2, 5, 5);
        morphs[6] = dom.createAttrMorph(element3, 'class');
        morphs[7] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
        morphs[8] = dom.createMorphAt(element3, 3, 3);
        morphs[9] = dom.createMorphAt(element3, 5, 5);
        morphs[10] = dom.createAttrMorph(element4, 'class');
        morphs[11] = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
        morphs[12] = dom.createMorphAt(element4, 3, 3);
        morphs[13] = dom.createMorphAt(element4, 5, 5);
        morphs[14] = dom.createAttrMorph(element5, 'class');
        morphs[15] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
        morphs[16] = dom.createMorphAt(element5, 3, 3);
        morphs[17] = dom.createMorphAt(element5, 5, 5);
        morphs[18] = dom.createAttrMorph(element6, 'class');
        morphs[19] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
        morphs[20] = dom.createMorphAt(element7, 1, 1);
        morphs[21] = dom.createMorphAt(element7, 3, 3);
        morphs[22] = dom.createAttrMorph(element8, 'class');
        morphs[23] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[24] = dom.createMorphAt(element8, 3, 3);
        morphs[25] = dom.createMorphAt(element8, 5, 5);
        morphs[26] = dom.createAttrMorph(element9, 'class');
        morphs[27] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        morphs[28] = dom.createMorphAt(element9, 3, 3);
        morphs[29] = dom.createMorphAt(element9, 5, 5);
        morphs[30] = dom.createAttrMorph(element10, 'class');
        morphs[31] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        morphs[32] = dom.createMorphAt(element10, 3, 3);
        morphs[33] = dom.createMorphAt(element10, 5, 5);
        morphs[34] = dom.createAttrMorph(element11, 'class');
        morphs[35] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[36] = dom.createMorphAt(element11, 3, 3);
        morphs[37] = dom.createMorphAt(dom.childAt(element1, [21]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.integration-examples.edit-form.validation.caption"], [], ["loc", [null, [1, 22], [1, 85]]]], ["inline", "flexberry-validationsummary", [], ["headerText", ["subexpr", "t", ["forms.integration-examples.edit-form.validation.summary-caption"], [], ["loc", [null, [6, 19], [6, 88]]]], "errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [7, 15], [7, 27]]]]], [], []]], ["loc", [null, [5, 6], [8, 8]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.flag", ["loc", [null, [11, 25], [11, 42]]]], "error", ""], [], ["loc", [null, [11, 20], [11, 55]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.flag-caption"], [], ["loc", [null, [12, 11], [12, 79]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.flag", ["loc", [null, [14, 12], [14, 22]]]]], [], []]], ["loc", [null, [13, 4], [15, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.flag", ["loc", [null, [16, 40], [16, 57]]]]], [], []], "pointing", "left pointing"], ["loc", [null, [16, 4], [16, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.number", ["loc", [null, [18, 25], [18, 44]]]], "error", ""], [], ["loc", [null, [18, 20], [18, 57]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.number-caption"], [], ["loc", [null, [19, 11], [19, 81]]]], ["inline", "flexberry-textbox", [], ["value", ["subexpr", "@mut", [["get", "model.number", ["loc", [null, [21, 12], [21, 24]]]]], [], []]], ["loc", [null, [20, 4], [22, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.number", ["loc", [null, [23, 40], [23, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [23, 4], [23, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.text", ["loc", [null, [25, 25], [25, 42]]]], "error", ""], [], ["loc", [null, [25, 20], [25, 55]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.text-caption"], [], ["loc", [null, [26, 11], [26, 79]]]], ["inline", "flexberry-textbox", [], ["value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [28, 12], [28, 22]]]]], [], []]], ["loc", [null, [27, 4], [29, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.text", ["loc", [null, [30, 40], [30, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [30, 4], [30, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.longText", ["loc", [null, [32, 25], [32, 46]]]], "error", ""], [], ["loc", [null, [32, 20], [32, 59]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.long-text-caption"], [], ["loc", [null, [33, 9], [33, 82]]]], ["inline", "flexberry-textarea", [], ["value", ["subexpr", "@mut", [["get", "model.longText", ["loc", [null, [35, 12], [35, 26]]]]], [], []]], ["loc", [null, [34, 4], [36, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.longText", ["loc", [null, [37, 40], [37, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [37, 4], [37, 83]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.date", ["loc", [null, [39, 25], [39, 42]]]], "error", ""], [], ["loc", [null, [39, 20], [39, 55]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.date-caption"], [], ["loc", [null, [40, 11], [40, 79]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.date", ["loc", [null, [42, 40], [42, 57]]]]], [], []], "pointing", "right pointing"], ["loc", [null, [42, 4], [42, 85]]]], ["inline", "flexberry-simpledatetime", [], ["type", "date", "value", ["subexpr", "@mut", [["get", "model.date", ["loc", [null, [45, 12], [45, 22]]]]], [], []]], ["loc", [null, [43, 4], [46, 6]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.enumeration", ["loc", [null, [49, 25], [49, 49]]]], "error", ""], [], ["loc", [null, [49, 20], [49, 62]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.enumeration-caption"], [], ["loc", [null, [50, 11], [50, 86]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "flexberry-enum", ["integration-examples/edit-form/validation/enumeration"], [], ["loc", [null, [52, 12], [52, 84]]]], "value", ["subexpr", "@mut", [["get", "model.enumeration", ["loc", [null, [53, 12], [53, 29]]]]], [], []]], ["loc", [null, [51, 4], [54, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.enumeration", ["loc", [null, [55, 40], [55, 64]]]]], [], []], "pointing", "pointing"], ["loc", [null, [55, 4], [55, 86]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.file", ["loc", [null, [57, 25], [57, 42]]]], "error", ""], [], ["loc", [null, [57, 20], [57, 55]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.file-caption"], [], ["loc", [null, [58, 11], [58, 79]]]], ["inline", "flexberry-file", [], ["value", ["subexpr", "@mut", [["get", "model.file", ["loc", [null, [60, 12], [60, 22]]]]], [], []], "showUploadButton", false, "showDownloadButton", false], ["loc", [null, [59, 4], [63, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.file", ["loc", [null, [64, 40], [64, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [64, 4], [64, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.master", ["loc", [null, [66, 25], [66, 44]]]], "error", ""], [], ["loc", [null, [66, 20], [66, 57]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.master-caption"], [], ["loc", [null, [67, 11], [67, 81]]]], ["inline", "flexberry-lookup", [], ["componentName", "IntegrationExamplesValidationsMaster", "value", ["subexpr", "@mut", [["get", "model.master", ["loc", [null, [70, 12], [70, 24]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [71, 19], [71, 24]]]]], [], []], "relationName", "master", "projection", "MasterL", "displayAttributeName", "text", "title", ["subexpr", "t", ["forms.integration-examples.edit-form.validation.master-caption"], [], ["loc", [null, [75, 12], [75, 80]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [76, 13], [76, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [77, 13], [77, 41]]]]], ["loc", [null, [68, 4], [78, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.master", ["loc", [null, [79, 40], [79, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [79, 4], [79, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.details", ["loc", [null, [81, 25], [81, 45]]]], "error", ""], [], ["loc", [null, [81, 20], [81, 58]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.details-caption"], [], ["loc", [null, [82, 11], [82, 82]]]], ["inline", "flexberry-groupedit", [], ["componentName", "IntegrationExamplesEditFormValidationsDetails", "content", ["subexpr", "@mut", [["get", "model.details", ["loc", [null, [85, 14], [85, 27]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [86, 26], [86, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.details", ["loc", [null, [87, 22], [87, 56]]]]], [], []], "orderable", false], ["loc", [null, [83, 4], [89, 6]]]], ["block", "flexberry-toggler", [], ["expanded", true], 0, null, ["loc", [null, [92, 4], [105, 26]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 8
              },
              "end": {
                "line": 20,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [17, 66], [17, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [18, 12], [18, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui button save-button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [13, 60], [13, 77]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [14, 10], [14, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [16, 18], [16, 29]]]]], [], 0, null, ["loc", [null, [16, 8], [20, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 60,
            "column": 7
          }
        },
        "moduleName": "dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [2]);
        var element3 = dom.childAt(element2, [5, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element2, [7]);
        var element6 = dom.childAt(element2, [9]);
        var morphs = new Array(11);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element2, 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [3, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element3, 1, 1);
        morphs[4] = dom.createElementMorph(element4);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createMorphAt(element5, 1, 1);
        morphs[7] = dom.createMorphAt(element5, 3, 3);
        morphs[8] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
        morphs[9] = dom.createMorphAt(element6, 3, 3);
        morphs[10] = dom.createMorphAt(element6, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.integration-examples.odata-examples.get-masters.ember-flexberry-dummy-departament-e.caption"], [], ["loc", [null, [1, 22], [1, 127]]]], ["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [4, 26], [4, 31]]]]], [], []]], ["loc", [null, [4, 2], [4, 33]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [7, 43], [7, 55]]]]], [], []]], ["loc", [null, [7, 6], [7, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [12, 16], [12, 24]]]]], [], 0, null, ["loc", [null, [12, 6], [21, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [22, 59], [22, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [23, 8], [23, 49]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [30, 18], [30, 62]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [31, 15], [31, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [33, 12], [33, 22]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [34, 16], [34, 33]]]], "error", ""], [], ["loc", [null, [34, 12], [34, 45]]]], "label", ["subexpr", "t", ["forms.integration-examples.odata-examples.get-masters.ember-flexberry-dummy-departament-e.name-caption"], [], ["loc", [null, [35, 12], [35, 120]]]], "data-test-ember-flexberry-dummy-departament-e-name", true], ["loc", [null, [28, 4], [37, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [38, 40], [38, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [38, 4], [38, 79]]]], ["inline", "t", ["forms.integration-examples.odata-examples.get-masters.ember-flexberry-dummy-departament-e.vid-caption"], [], ["loc", [null, [42, 11], [42, 120]]]], ["inline", "flexberry-lookup", [], ["choose", "showLookupDialog", "remove", "removeLookupValue", "value", ["subexpr", "@mut", [["get", "model.vid", ["loc", [null, [47, 12], [47, 21]]]]], [], []], "displayAttributeName", "name", "autocomplete", true, "relationName", "vid", "projection", "VidDepartamentaL", "title", ["subexpr", "t", ["forms.integration-examples.odata-examples.get-masters.ember-flexberry-dummy-departament-e.vid-caption"], [], ["loc", [null, [52, 12], [52, 119]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [53, 15], [53, 23]]]]], [], []], "componentName", "vidLookup", "data-test-ember-flexberry-dummy-departament-e-vid", true], ["loc", [null, [43, 4], [56, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.vid", ["loc", [null, [57, 40], [57, 56]]]]], [], []], "pointing", "pointing"], ["loc", [null, [57, 4], [57, 78]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 6
          }
        },
        "moduleName": "dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-departament-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.integration-examples.odata-examples.get-masters.ember-flexberry-dummy-departament-l.caption"], [], ["loc", [null, [2, 4], [2, 109]]]], ["inline", "flexberry-objectlistview", [], ["modelName", ["subexpr", "@mut", [["get", "modelName", ["loc", [null, [5, 14], [5, 23]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 20], [6, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [7, 18], [7, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [8, 12], [8, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [11, 12], [11, 27]]]]], [], []], "orderable", true, "showCheckBoxInRow", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [14, 17], [14, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [15, 23], [15, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [16, 27], [16, 60]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [17, 10], [17, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [18, 17], [18, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [19, 18], [19, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [20, 22], [20, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [21, 20], [21, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [22, 16], [22, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [23, 17], [23, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [24, 13], [24, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [25, 13], [25, 32]]]], "componentName", "EmberFlexberryDummyDepartamentL"], ["loc", [null, [4, 2], [27, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 8
              },
              "end": {
                "line": 20,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [17, 66], [17, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [18, 12], [18, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui button save-button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [13, 60], [13, 77]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [14, 10], [14, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [16, 18], [16, 29]]]]], [], 0, null, ["loc", [null, [16, 8], [20, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 87,
            "column": 7
          }
        },
        "moduleName": "dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [2]);
        var element3 = dom.childAt(element2, [5, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element2, [7]);
        var element6 = dom.childAt(element2, [9]);
        var element7 = dom.childAt(element2, [11]);
        var element8 = dom.childAt(element2, [13]);
        var morphs = new Array(16);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element2, 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [3, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element3, 1, 1);
        morphs[4] = dom.createElementMorph(element4);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createMorphAt(element5, 1, 1);
        morphs[7] = dom.createMorphAt(element5, 3, 3);
        morphs[8] = dom.createMorphAt(element6, 1, 1);
        morphs[9] = dom.createMorphAt(element6, 3, 3);
        morphs[10] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
        morphs[11] = dom.createMorphAt(element7, 3, 3);
        morphs[12] = dom.createMorphAt(element7, 5, 5);
        morphs[13] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[14] = dom.createMorphAt(element8, 3, 3);
        morphs[15] = dom.createMorphAt(element8, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.integration-examples.odata-examples.get-masters.ember-flexberry-dummy-sotrudnik-e.caption"], [], ["loc", [null, [1, 22], [1, 125]]]], ["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [4, 26], [4, 31]]]]], [], []]], ["loc", [null, [4, 2], [4, 33]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [7, 43], [7, 55]]]]], [], []]], ["loc", [null, [7, 6], [7, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [12, 16], [12, 24]]]]], [], 0, null, ["loc", [null, [12, 6], [21, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [22, 59], [22, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [23, 8], [23, 49]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [30, 18], [30, 62]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [31, 15], [31, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.familiia", ["loc", [null, [33, 12], [33, 26]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.familiia", ["loc", [null, [34, 16], [34, 37]]]], "error", ""], [], ["loc", [null, [34, 12], [34, 49]]]], "label", ["subexpr", "t", ["forms.integration-examples.odata-examples.get-masters.ember-flexberry-dummy-sotrudnik-e.familiia-caption"], [], ["loc", [null, [35, 12], [35, 122]]]], "data-test-ember-flexberry-dummy-sotrudnik-e-familiia", true], ["loc", [null, [28, 4], [37, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.familiia", ["loc", [null, [38, 40], [38, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [38, 4], [38, 83]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [44, 18], [44, 62]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [45, 15], [45, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [47, 12], [47, 22]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [48, 16], [48, 33]]]], "error", ""], [], ["loc", [null, [48, 12], [48, 45]]]], "label", ["subexpr", "t", ["forms.integration-examples.odata-examples.get-masters.ember-flexberry-dummy-sotrudnik-e.name-caption"], [], ["loc", [null, [49, 12], [49, 118]]]], "data-test-ember-flexberry-dummy-sotrudnik-e-name", true], ["loc", [null, [42, 4], [51, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [52, 40], [52, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [52, 4], [52, 79]]]], ["inline", "t", ["forms.integration-examples.odata-examples.get-masters.ember-flexberry-dummy-sotrudnik-e.dataRozhdeniia-caption"], [], ["loc", [null, [56, 11], [56, 129]]]], ["inline", "flexberry-simpledatetime", [], ["placeholder", ["subexpr", "t", ["components.flexberry-datepicker.placeholder"], [], ["loc", [null, [59, 18], [59, 67]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [60, 15], [60, 23]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.dataRozhdeniia", ["loc", [null, [61, 12], [61, 32]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.dataRozhdeniia", ["loc", [null, [62, 16], [62, 43]]]], "error", ""], [], ["loc", [null, [62, 12], [62, 55]]]], "data-test-ember-flexberry-dummy-sotrudnik-e-dataRozhdeniia", true], ["loc", [null, [57, 4], [64, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.dataRozhdeniia", ["loc", [null, [65, 40], [65, 67]]]]], [], []], "pointing", "pointing"], ["loc", [null, [65, 4], [65, 89]]]], ["inline", "t", ["forms.integration-examples.odata-examples.get-masters.ember-flexberry-dummy-sotrudnik-e.departament-caption"], [], ["loc", [null, [69, 11], [69, 126]]]], ["inline", "flexberry-lookup", [], ["choose", "showLookupDialog", "remove", "removeLookupValue", "value", ["subexpr", "@mut", [["get", "model.departament", ["loc", [null, [74, 12], [74, 29]]]]], [], []], "displayAttributeName", "name", "autocomplete", true, "relationName", "departament", "projection", "DepartamentL", "title", ["subexpr", "t", ["forms.integration-examples.odata-examples.get-masters.ember-flexberry-dummy-sotrudnik-e.departament-caption"], [], ["loc", [null, [79, 12], [79, 125]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [80, 15], [80, 23]]]]], [], []], "componentName", "departamentLookup", "data-test-ember-flexberry-dummy-sotrudnik-e-departament", true], ["loc", [null, [70, 4], [83, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.departament", ["loc", [null, [84, 40], [84, 64]]]]], [], []], "pointing", "pointing"], ["loc", [null, [84, 4], [84, 86]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 43,
                  "column": 4
                },
                "end": {
                  "line": 47,
                  "column": 4
                }
              },
              "moduleName": "dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-l.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "field");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["inline", "t", ["forms.integration-examples.odata-examples.get-masters.ember-flexberry-dummy-sotrudnik-l.receivedMasterMasters"], [], ["loc", [null, [45, 8], [45, 125]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 51,
                  "column": 4
                }
              },
              "moduleName": "dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-l.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "field");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["inline", "t", ["forms.integration-examples.odata-examples.get-masters.ember-flexberry-dummy-sotrudnik-l.receivedMasterMastersError"], [], ["loc", [null, [49, 8], [49, 130]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 39,
                "column": 2
              },
              "end": {
                "line": 52,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-l.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "field");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["forms.integration-examples.odata-examples.get-masters.ember-flexberry-dummy-sotrudnik-l.receivedMasters"], [], ["loc", [null, [41, 6], [41, 117]]]], ["block", "if", [["get", "receivedMasterMasters", ["loc", [null, [43, 10], [43, 31]]]]], [], 0, 1, ["loc", [null, [43, 4], [51, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 52,
                "column": 2
              },
              "end": {
                "line": 56,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-l.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "field");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "t", ["forms.integration-examples.odata-examples.get-masters.ember-flexberry-dummy-sotrudnik-l.receivedMastersError"], [], ["loc", [null, [54, 6], [54, 122]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 34,
              "column": 0
            },
            "end": {
              "line": 57,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-l.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "field");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "t", ["forms.integration-examples.odata-examples.get-masters.ember-flexberry-dummy-sotrudnik-l.dataReceived"], [], ["loc", [null, [36, 4], [36, 112]]]], ["block", "if", [["get", "receivedMasters", ["loc", [null, [39, 8], [39, 23]]]]], [], 0, 1, ["loc", [null, [39, 2], [56, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 57,
            "column": 7
          }
        },
        "moduleName": "dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-sotrudnik-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "type", "button");
        dom.setAttribute(el1, "class", "ui button");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [8]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[3] = dom.createElementMorph(element0);
        morphs[4] = dom.createMorphAt(element0, 1, 1);
        morphs[5] = dom.createMorphAt(fragment, 10, 10, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.integration-examples.odata-examples.get-masters.ember-flexberry-dummy-sotrudnik-l.caption"], [], ["loc", [null, [2, 4], [2, 107]]]], ["inline", "flexberry-objectlistview", [], ["modelName", ["subexpr", "@mut", [["get", "modelName", ["loc", [null, [5, 14], [5, 23]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 20], [6, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [7, 18], [7, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [8, 12], [8, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [11, 12], [11, 27]]]]], [], []], "orderable", true, "showCheckBoxInRow", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [14, 17], [14, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [15, 23], [15, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [16, 27], [16, 60]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [17, 10], [17, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [18, 17], [18, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [19, 18], [19, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [20, 22], [20, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [21, 20], [21, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [22, 16], [22, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [23, 17], [23, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [24, 13], [24, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [25, 13], [25, 32]]]], "componentName", "EmberFlexberryDummySotrudnikL"], ["loc", [null, [4, 2], [27, 4]]]], ["element", "action", ["doOdataFunction"], ["on", "click"], ["loc", [null, [30, 40], [30, 79]]]], ["inline", "t", ["forms.integration-examples.odata-examples.get-masters.ember-flexberry-dummy-sotrudnik-l.doOdataFunction"], [], ["loc", [null, [31, 2], [31, 113]]]], ["block", "if", [["get", "dataReceived", ["loc", [null, [34, 6], [34, 18]]]]], [], 0, null, ["loc", [null, [34, 0], [57, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 8
              },
              "end": {
                "line": 20,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [17, 66], [17, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [18, 12], [18, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui button save-button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [13, 60], [13, 77]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [14, 10], [14, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [16, 18], [16, 29]]]]], [], 0, null, ["loc", [null, [16, 8], [20, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 41,
            "column": 7
          }
        },
        "moduleName": "dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button close-button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [2]);
        var element3 = dom.childAt(element2, [5, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element2, [7]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element2, 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [3, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element3, 1, 1);
        morphs[4] = dom.createElementMorph(element4);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createMorphAt(element5, 1, 1);
        morphs[7] = dom.createMorphAt(element5, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["forms.integration-examples.odata-examples.get-masters.ember-flexberry-dummy-vid-departamenta-e.caption"], [], ["loc", [null, [1, 22], [1, 132]]]], ["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [4, 26], [4, 31]]]]], [], []]], ["loc", [null, [4, 2], [4, 33]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [7, 43], [7, 55]]]]], [], []]], ["loc", [null, [7, 6], [7, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [12, 16], [12, 24]]]]], [], 0, null, ["loc", [null, [12, 6], [21, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [22, 59], [22, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [23, 8], [23, 49]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [30, 18], [30, 62]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [31, 15], [31, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [33, 12], [33, 22]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [34, 16], [34, 33]]]], "error", ""], [], ["loc", [null, [34, 12], [34, 45]]]], "label", ["subexpr", "t", ["forms.integration-examples.odata-examples.get-masters.ember-flexberry-dummy-vid-departamenta-e.name-caption"], [], ["loc", [null, [35, 12], [35, 125]]]], "data-test-ember-flexberry-dummy-vid-departamenta-e-name", true], ["loc", [null, [28, 4], [37, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [38, 40], [38, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [38, 4], [38, 79]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 6
          }
        },
        "moduleName": "dummy/templates/integration-examples/odata-examples/get-masters/ember-flexberry-dummy-vid-departamenta-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.integration-examples.odata-examples.get-masters.ember-flexberry-dummy-vid-departamenta-l.caption"], [], ["loc", [null, [2, 4], [2, 114]]]], ["inline", "flexberry-objectlistview", [], ["modelName", ["subexpr", "@mut", [["get", "modelName", ["loc", [null, [5, 14], [5, 23]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 20], [6, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [7, 18], [7, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [8, 12], [8, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [11, 12], [11, 27]]]]], [], []], "orderable", true, "showCheckBoxInRow", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [14, 17], [14, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [15, 23], [15, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [16, 27], [16, 60]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [17, 10], [17, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [18, 17], [18, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [19, 18], [19, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [20, 22], [20, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [21, 20], [21, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [22, 16], [22, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [23, 17], [23, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [24, 13], [24, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [25, 13], [25, 32]]]], "componentName", "EmberFlexberryDummyVidDepartamentaL"], ["loc", [null, [4, 2], [27, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.loading.spinner-caption"], [], ["loc", [null, [3, 4], [3, 41]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/log-service-examples/clear-log-form", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/log-service-examples/clear-log-form.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n  Log records older this date count: ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
          return morphs;
        },
        statements: [["content", "logRecordsOlderDateCount", ["loc", [null, [16, 37], [16, 65]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 2
            },
            "end": {
              "line": 22,
              "column": 59
            }
          },
          "moduleName": "dummy/templates/log-service-examples/clear-log-form.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "logRecordsOlderDateCount", ["loc", [null, [22, 30], [22, 58]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 59
            },
            "end": {
              "line": 22,
              "column": 72
            }
          },
          "moduleName": "dummy/templates/log-service-examples/clear-log-form.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(" all ");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 0
            },
            "end": {
              "line": 28,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/log-service-examples/clear-log-form.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n  Executing query...\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/log-service-examples/clear-log-form.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Batch clear log records");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("\n  Log records total count: ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("\n  Clear log records older:\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "type", "submit");
        dom.setAttribute(el2, "class", "ui refresh-counts button");
        var el3 = dom.createTextNode("Refresh counts");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "type", "submit");
        dom.setAttribute(el2, "class", "ui clear-all-log button");
        var el3 = dom.createTextNode("Clear\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" log records");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [7]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[2] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        morphs[3] = dom.createElementMorph(element1);
        morphs[4] = dom.createElementMorph(element2);
        morphs[5] = dom.createMorphAt(element2, 1, 1);
        morphs[6] = dom.createMorphAt(fragment, 9, 9, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "logRecordsTotalCount", ["loc", [null, [3, 27], [3, 51]]]], ["inline", "flexberry-simpledatetime", [], ["type", "date", "value", ["subexpr", "@mut", [["get", "logRecordsOlderDate", ["loc", [null, [9, 10], [9, 29]]]]], [], []], "readonly", false, "class", "example-simpledatetime"], ["loc", [null, [7, 2], [12, 4]]]], ["block", "if", [["get", "logRecordsOlderDate", ["loc", [null, [14, 6], [14, 25]]]]], [], 0, null, ["loc", [null, [14, 0], [18, 7]]]], ["element", "action", ["getCounts"], [], ["loc", [null, [20, 55], [20, 77]]]], ["element", "action", ["clearLogRecords"], [], ["loc", [null, [21, 54], [21, 82]]]], ["block", "if", [["get", "logRecordsOlderDate", ["loc", [null, [22, 8], [22, 27]]]]], [], 1, 2, ["loc", [null, [22, 2], [22, 79]]]], ["block", "if", [["get", "queryInExecutingState", ["loc", [null, [24, 6], [24, 27]]]]], [], 3, null, ["loc", [null, [24, 0], [28, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("dummy/templates/log-service-examples/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 91,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/log-service-examples/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("table");
        dom.setAttribute(el1, "class", "ui celled table flexberry-word-break");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("thead");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tbody");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.enabled=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.enabled=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        dom.setAttribute(el3, "style", "background-color:#db2828");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeErrorMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeErrorMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        dom.setAttribute(el3, "style", "background-color: #f2711c;");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeWarnMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeWarnMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        dom.setAttribute(el3, "style", "background-color: #fbbd08;");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeDeprecationMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeDeprecationMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        dom.setAttribute(el3, "style", "background-color: #21ba45;");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeLogMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeLogMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        dom.setAttribute(el3, "style", "background-color: #00b5ad;");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeInfoMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeInfoMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        dom.setAttribute(el3, "style", "background-color: #2185d0;");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeDebugMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeDebugMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        dom.setAttribute(el3, "style", "background-color:#db2828");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storePromiseErrors=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storePromiseErrors=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        dom.setAttribute(el3, "style", "background-color:#db2828");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.showPromiseErrors=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.showPromiseErrors=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        dom.setAttribute(el3, "style", "background-color:#db2828");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.errorMessageFilterActive=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.errorMessageFilterActive=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4]);
        var element1 = dom.childAt(element0, [1, 1]);
        var element2 = dom.childAt(element0, [3]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element2, [3]);
        var element5 = dom.childAt(element2, [5]);
        var element6 = dom.childAt(element2, [7]);
        var element7 = dom.childAt(element2, [9]);
        var element8 = dom.childAt(element2, [11]);
        var element9 = dom.childAt(element2, [13]);
        var element10 = dom.childAt(element2, [15]);
        var element11 = dom.childAt(element2, [17]);
        var element12 = dom.childAt(element2, [19]);
        var morphs = new Array(25);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
        morphs[5] = dom.createMorphAt(dom.childAt(element3, [3]), 1, 1);
        morphs[6] = dom.createMorphAt(dom.childAt(element4, [1]), 1, 1);
        morphs[7] = dom.createMorphAt(dom.childAt(element4, [3]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(element5, [1]), 1, 1);
        morphs[9] = dom.createMorphAt(dom.childAt(element5, [3]), 1, 1);
        morphs[10] = dom.createMorphAt(dom.childAt(element6, [1]), 1, 1);
        morphs[11] = dom.createMorphAt(dom.childAt(element6, [3]), 1, 1);
        morphs[12] = dom.createMorphAt(dom.childAt(element7, [1]), 1, 1);
        morphs[13] = dom.createMorphAt(dom.childAt(element7, [3]), 1, 1);
        morphs[14] = dom.createMorphAt(dom.childAt(element8, [1]), 1, 1);
        morphs[15] = dom.createMorphAt(dom.childAt(element8, [3]), 1, 1);
        morphs[16] = dom.createMorphAt(dom.childAt(element9, [1]), 1, 1);
        morphs[17] = dom.createMorphAt(dom.childAt(element9, [3]), 1, 1);
        morphs[18] = dom.createMorphAt(dom.childAt(element10, [1]), 1, 1);
        morphs[19] = dom.createMorphAt(dom.childAt(element10, [3]), 1, 1);
        morphs[20] = dom.createMorphAt(dom.childAt(element11, [1]), 1, 1);
        morphs[21] = dom.createMorphAt(dom.childAt(element11, [3]), 1, 1);
        morphs[22] = dom.createMorphAt(dom.childAt(element12, [1]), 1, 1);
        morphs[23] = dom.createMorphAt(dom.childAt(element12, [3]), 1, 1);
        morphs[24] = dom.createMorphAt(dom.childAt(fragment, [6]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.log-service-examples.settings-example.caption"], [], ["loc", [null, [2, 4], [2, 63]]]], ["inline", "t", ["forms.log-service-examples.settings-example.setting-column-header-caption"], [], ["loc", [null, [6, 10], [6, 91]]]], ["inline", "t", ["forms.log-service-examples.settings-example.settings-value-column-header-caption"], [], ["loc", [null, [7, 10], [7, 98]]]], ["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "logService.enabled", ["loc", [null, [12, 61], [12, 79]]]]], [], []]], ["loc", [null, [12, 29], [12, 81]]]], ["inline", "to-string", [["get", "logService.enabled", ["loc", [null, [13, 41], [13, 59]]]]], [], ["loc", [null, [13, 29], [13, 61]]]], ["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "logService.storeErrorMessages", ["loc", [null, [16, 70], [16, 99]]]]], [], []]], ["loc", [null, [16, 38], [16, 101]]]], ["inline", "to-string", [["get", "logService.storeErrorMessages", ["loc", [null, [17, 52], [17, 81]]]]], [], ["loc", [null, [17, 40], [17, 83]]]], ["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "logService.storeWarnMessages", ["loc", [null, [20, 71], [20, 99]]]]], [], []]], ["loc", [null, [20, 39], [20, 101]]]], ["inline", "to-string", [["get", "logService.storeWarnMessages", ["loc", [null, [21, 51], [21, 79]]]]], [], ["loc", [null, [21, 39], [21, 81]]]], ["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "logService.storeDeprecationMessages", ["loc", [null, [24, 76], [24, 111]]]]], [], []]], ["loc", [null, [24, 44], [24, 113]]]], ["inline", "to-string", [["get", "logService.storeDeprecationMessages", ["loc", [null, [25, 56], [25, 91]]]]], [], ["loc", [null, [25, 44], [25, 93]]]], ["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "logService.storeLogMessages", ["loc", [null, [28, 70], [28, 97]]]]], [], []]], ["loc", [null, [28, 38], [28, 99]]]], ["inline", "to-string", [["get", "logService.storeLogMessages", ["loc", [null, [29, 50], [29, 77]]]]], [], ["loc", [null, [29, 38], [29, 79]]]], ["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "logService.storeInfoMessages", ["loc", [null, [32, 71], [32, 99]]]]], [], []]], ["loc", [null, [32, 39], [32, 101]]]], ["inline", "to-string", [["get", "logService.storeInfoMessages", ["loc", [null, [33, 51], [33, 79]]]]], [], ["loc", [null, [33, 39], [33, 81]]]], ["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "logService.storeDebugMessages", ["loc", [null, [36, 72], [36, 101]]]]], [], []]], ["loc", [null, [36, 40], [36, 103]]]], ["inline", "to-string", [["get", "logService.storeDebugMessages", ["loc", [null, [37, 52], [37, 81]]]]], [], ["loc", [null, [37, 40], [37, 83]]]], ["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "logService.storePromiseErrors", ["loc", [null, [40, 70], [40, 99]]]]], [], []]], ["loc", [null, [40, 38], [40, 101]]]], ["inline", "to-string", [["get", "logService.storePromiseErrors", ["loc", [null, [41, 52], [41, 81]]]]], [], ["loc", [null, [41, 40], [41, 83]]]], ["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "logService.showPromiseErrors", ["loc", [null, [44, 69], [44, 97]]]]], [], []]], ["loc", [null, [44, 37], [44, 99]]]], ["inline", "to-string", [["get", "logService.showPromiseErrors", ["loc", [null, [45, 51], [45, 79]]]]], [], ["loc", [null, [45, 39], [45, 81]]]], ["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "logService.errorMessageFilterActive", ["loc", [null, [48, 76], [48, 111]]]]], [], []]], ["loc", [null, [48, 44], [48, 113]]]], ["inline", "to-string", [["get", "logService.errorMessageFilterActive", ["loc", [null, [49, 58], [49, 93]]]]], [], ["loc", [null, [49, 46], [49, 95]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [55, 12], [55, 17]]]]], [], []], "modelName", "i-i-s-caseberry-logging-objects-application-log", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [57, 20], [57, 35]]]]], [], []], "class", "flexberry-word-break crimean-theme", "createNewButton", false, "refreshButton", true, "colsConfigButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [62, 12], [62, 27]]]]], [], []], "orderable", true, "rowClickable", false, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [65, 10], [65, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [66, 17], [66, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [67, 18], [67, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [68, 22], [68, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [69, 20], [69, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [70, 16], [70, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [71, 17], [71, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [72, 23], [72, 52]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [73, 27], [73, 60]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [74, 17], [74, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [75, 13], [75, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [76, 13], [76, 32]]]], "customButtons", ["subexpr", "@mut", [["get", "objectListViewCustomButtons", ["loc", [null, [77, 18], [77, 45]]]]], [], []], "onThrowExceptionButtonClick", "onThrowExceptionButtonClick", "onRejectRsvpPromiseButtonClick", "onRejectRsvpPromiseButtonClick", "onEmberAssertButtonClick", "onEmberAssertButtonClick", "onEmberLoggerErrorButtonClick", "onEmberLoggerErrorButtonClick", "onEmberLoggerWarnButtonClick", "onEmberLoggerWarnButtonClick", "onEmberDeprecateButtonClick", "onEmberDeprecateButtonClick", "onEmberLoggerLogButtonClick", "onEmberLoggerLogButtonClick", "onEmberLoggerInfoButtonClick", "onEmberLoggerInfoButtonClick", "onEmberLoggerDebugButtonClick", "onEmberLoggerDebugButtonClick", "componentName", "FOLVSettingExample", "colsConfigButton", false], ["loc", [null, [54, 2], [89, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/lookup-dialog-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 40,
            "column": 6
          }
        },
        "moduleName": "dummy/templates/lookup-dialog-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "lookup-list");
        dom.setAttribute(el1, "class", "list-group");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["inline", "flexberry-objectlistview", [], ["class", "ui bottom attached", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [4, 20], [4, 35]]]]], [], []], "modelName", ["subexpr", "@mut", [["get", "modelName", ["loc", [null, [5, 14], [5, 23]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [6, 12], [6, 17]]]]], [], []], "selectedRecord", ["subexpr", "@mut", [["get", "currentLookupRow", ["loc", [null, [7, 19], [7, 35]]]]], [], []], "componentMode", "lookupform", "componentName", ["subexpr", "@mut", [["get", "folvComponentName", ["loc", [null, [9, 18], [9, 35]]]]], [], []], "lookupComponentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [10, 24], [10, 37]]]]], [], []], "showEditMenuItemInRow", false, "createNewButton", false, "showCheckBoxInRow", false, "colsConfigButton", false, "columnsWidthAutoresize", true, "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [16, 21], [16, 48]]]], "filterText", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [17, 15], [17, 21]]]]], [], []], "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [18, 12], [18, 19]]]]], [], []], "applyFilters", ["subexpr", "action", ["applyFilters"], [], ["loc", [null, [19, 17], [19, 40]]]], "resetFilters", ["subexpr", "action", ["resetFilters"], [], ["loc", [null, [20, 17], [20, 40]]]], "customProperties", ["subexpr", "@mut", [["get", "customPropertiesData", ["loc", [null, [21, 21], [21, 41]]]]], [], []], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [22, 10], [22, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [23, 17], [23, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [24, 18], [24, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [25, 22], [25, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [26, 20], [26, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [27, 16], [27, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [28, 17], [28, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [29, 13], [29, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [30, 13], [30, 32]]]], "disableHierarchicalMode", ["subexpr", "@mut", [["get", "disableHierarchicalMode", ["loc", [null, [31, 28], [31, 51]]]]], [], []], "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [32, 12], [32, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [34, 17], [34, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [35, 23], [35, 52]]]], "notUseUserSettings", ["subexpr", "@mut", [["get", "notUseUserSettings", ["loc", [null, [36, 23], [36, 41]]]]], [], []], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [37, 27], [37, 60]]]], "data-test-lookup-olv", true], ["loc", [null, [2, 2], [39, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/lookup-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/lookup-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "outlet", ["modal-content"], [], ["loc", [null, [12, 2], [12, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/lookup-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "sizeClass", ["subexpr", "@mut", [["get", "modalDialogSettings.sizeClass", ["loc", [null, [3, 12], [3, 41]]]]], [], []], "close", "removeModalDialog", "created", "createdModalDialog", "useOkButton", ["subexpr", "@mut", [["get", "modalDialogSettings.useOkButton", ["loc", [null, [6, 14], [6, 45]]]]], [], []], "useCloseButton", ["subexpr", "@mut", [["get", "modalDialogSettings.useCloseButton", ["loc", [null, [7, 17], [7, 51]]]]], [], []], "componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [8, 16], [8, 29]]]]], [], []], "settings", ["subexpr", "@mut", [["get", "modalDialogSettings.settings", ["loc", [null, [9, 11], [9, 39]]]]], [], []], "data-test-lookup-dialog", true], 0, null, ["loc", [null, [1, 0], [13, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/mobile/application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/mobile/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["content", "outlet", ["loc", [null, [2, 2], [2, 12]]]], ["inline", "outlet", ["modal"], [], ["loc", [null, [3, 2], [3, 20]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 0
              },
              "end": {
                "line": 18,
                "column": 0
              }
            },
            "moduleName": "dummy/templates/mobile/application.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "class", "item");
            dom.setAttribute(el1, "target", "_blank");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element0, 'href');
            morphs[1] = dom.createAttrMorph(element0, 'title');
            morphs[2] = dom.createMorphAt(element0, 1, 1);
            morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["attribute", "href", ["get", "addonVersionHref", ["loc", [null, [12, 11], [12, 27]]]]], ["attribute", "title", ["subexpr", "t", ["forms.application.sitemap.application-version.title"], [], ["loc", [null, [14, 10], [14, 69]]]]], ["inline", "t", ["forms.application.sitemap.application-version.caption"], ["version", ["subexpr", "@mut", [["get", "addonVersion", ["loc", [null, [15, 72], [15, 84]]]]], [], []]], ["loc", [null, [15, 4], [15, 86]]]], ["inline", "render", ["sitemap", ["get", "sitemap", ["loc", [null, [17, 21], [17, 28]]]]], [], ["loc", [null, [17, 2], [17, 30]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 85,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/mobile/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "bgw-fix mobile");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "background-logo mobile");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "ui attached menu mobile");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "ui container flex-container");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("a");
          dom.setAttribute(el5, "class", "launch icon item mobile");
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("i");
          dom.setAttribute(el6, "class", "sidebar icon text-menu-show");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n        ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "right item");
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("label");
          dom.setAttribute(el6, "style", "margin-right: 5px;");
          var el7 = dom.createTextNode("\n            ");
          dom.appendChild(el6, el7);
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n          ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n        ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "right item lang");
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("label");
          dom.setAttribute(el6, "style", "margin-right: 5px;");
          var el7 = dom.createTextNode("\n            ");
          dom.appendChild(el6, el7);
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n          ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n        ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "id", "example-mobile");
          dom.setAttribute(el1, "class", "pusher mobile");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "full height");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "flexberry-content ui attached segment");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "ui main container");
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("div");
          dom.setAttribute(el6, "class", "stackable grid container");
          var el7 = dom.createTextNode("\n            ");
          dom.appendChild(el6, el7);
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n          ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n        ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui main container");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui vertical footer segment");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ui container flex-container mobile-footer");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "ui text menu");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          dom.setAttribute(el4, "class", "brand item");
          dom.setAttribute(el4, "href", "#");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "right menu");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("a");
          dom.setAttribute(el5, "class", "item");
          dom.setAttribute(el5, "target", "_blank");
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n        ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1, 1, 1, 1]);
          var element2 = dom.childAt(element1, [1]);
          var element3 = dom.childAt(element1, [3]);
          var element4 = dom.childAt(element1, [5]);
          var element5 = dom.childAt(fragment, [3, 1]);
          var element6 = dom.childAt(fragment, [7, 1, 1]);
          var element7 = dom.childAt(element6, [3, 1]);
          var morphs = new Array(14);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createAttrMorph(element2, 'title');
          morphs[2] = dom.createElementMorph(element2);
          morphs[3] = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
          morphs[4] = dom.createMorphAt(element3, 3, 3);
          morphs[5] = dom.createMorphAt(dom.childAt(element4, [1]), 1, 1);
          morphs[6] = dom.createMorphAt(element4, 3, 3);
          morphs[7] = dom.createAttrMorph(element5, 'class');
          morphs[8] = dom.createMorphAt(dom.childAt(element5, [1, 1, 1, 1]), 1, 1);
          morphs[9] = dom.createMorphAt(dom.childAt(fragment, [5]), 1, 1);
          morphs[10] = dom.createMorphAt(dom.childAt(element6, [1]), 1, 1);
          morphs[11] = dom.createAttrMorph(element7, 'href');
          morphs[12] = dom.createAttrMorph(element7, 'title');
          morphs[13] = dom.createMorphAt(element7, 1, 1);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "ui-sidebar", [], ["class", "mobile inverted vertical main menu", "ui_context", ".ember-application > .ember-view", "onShow", ["subexpr", "action", ["updateWidth"], [], ["loc", [null, [8, 9], [8, 31]]]], "onHidden", ["subexpr", "action", ["updateWidth"], [], ["loc", [null, [9, 11], [9, 33]]]]], 0, null, ["loc", [null, [5, 0], [18, 15]]]], ["attribute", "title", ["subexpr", "t", ["forms.application.header.menu.sitemap-button.title"], [], ["loc", [null, [25, 16], [25, 74]]]]], ["element", "action", ["toggleSidebarMobile"], [], ["loc", [null, [23, 11], [23, 43]]]], ["inline", "t", ["forms.application.header.menu.user-settings-service-checkbox.caption"], [], ["loc", [null, [30, 12], [30, 88]]]], ["inline", "flexberry-checkbox", [], ["class", "toggle", "value", ["subexpr", "@mut", [["get", "userSettingsService.isUserSettingsServiceEnabled", ["loc", [null, [34, 18], [34, 66]]]]], [], []]], ["loc", [null, [32, 10], [35, 12]]]], ["inline", "t", ["forms.application.header.menu.language-dropdown.caption"], [], ["loc", [null, [39, 12], [39, 75]]]], ["inline", "flexberry-dropdown", [], ["class", "compact", "items", ["subexpr", "@mut", [["get", "locales", ["loc", [null, [43, 18], [43, 25]]]]], [], []], "value", ["subexpr", "@mut", [["get", "i18n.locale", ["loc", [null, [44, 18], [44, 29]]]]], [], []], "placeholder", ["subexpr", "t", ["forms.application.header.menu.language-dropdown.placeholder"], [], ["loc", [null, [45, 24], [45, 89]]]]], ["loc", [null, [41, 10], [46, 12]]]], ["attribute", "class", ["concat", ["ui form ", ["get", "appState.state", ["loc", [null, [53, 24], [53, 38]]]]]]], ["content", "outlet", ["loc", [null, [58, 12], [58, 22]]]], ["inline", "outlet", ["modal"], [], ["loc", [null, [66, 2], [66, 20]]]], ["inline", "t", ["forms.application.footer.application-name"], [], ["loc", [null, [72, 8], [72, 57]]]], ["attribute", "href", ["get", "addonVersionHref", ["loc", [null, [76, 17], [76, 33]]]]], ["attribute", "title", ["subexpr", "t", ["forms.application.footer.application-version.title"], [], ["loc", [null, [78, 16], [78, 74]]]]], ["inline", "t", ["forms.application.footer.application-version.caption"], ["version", ["subexpr", "@mut", [["get", "addonVersion", ["loc", [null, [79, 79], [79, 91]]]]], [], []]], ["loc", [null, [79, 12], [79, 93]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 86,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/mobile/application.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isInAcceptanceTestMode", ["loc", [null, [1, 6], [1, 28]]]]], [], 0, 1, ["loc", [null, [1, 0], [85, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/mobile/components-examples/flexberry-lookup/lookup-in-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/mobile/components-examples/flexberry-lookup/lookup-in-modal.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "header");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "content");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ui form flexberry-vertical-form");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "field");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "ui button");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [3, 1]);
          var element3 = dom.childAt(element2, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
          morphs[2] = dom.createElementMorph(element3);
          morphs[3] = dom.createMorphAt(element3, 0, 0);
          return morphs;
        },
        statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.captionModal"], [], ["loc", [null, [9, 22], [9, 101]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.editor1", ["loc", [null, [14, 16], [14, 29]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [15, 23], [15, 28]]]]], [], []], "relationName", "editor1", "projection", "ApplicationUserL", "displayAttributeName", "name", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [19, 19], [19, 27]]]]], [], []], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [20, 17], [20, 44]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [21, 17], [21, 45]]]]], ["loc", [null, [13, 8], [22, 10]]]], ["element", "action", ["logOut"], [], ["loc", [null, [24, 32], [24, 51]]]], ["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.buttonClose"], [], ["loc", [null, [24, 52], [24, 130]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 0
            },
            "end": {
              "line": 48,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/mobile/components-examples/flexberry-lookup/lookup-in-modal.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "header");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "content");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ui form flexberry-vertical-form");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "field");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "ui button");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [3, 1]);
          var element1 = dom.childAt(element0, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
          morphs[2] = dom.createElementMorph(element1);
          morphs[3] = dom.createMorphAt(element1, 0, 0);
          return morphs;
        },
        statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.captionModalDouble"], [], ["loc", [null, [30, 22], [30, 107]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [35, 16], [35, 26]]]]], [], []], "projection", "SuggestionTypeL", "displayAttributeName", "name", "title", "Master", "relationName", "type", "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [40, 17], [40, 44]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [41, 17], [41, 45]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [42, 19], [42, 27]]]]], [], []]], ["loc", [null, [34, 8], [43, 10]]]], ["element", "action", ["logOutDouble"], [], ["loc", [null, [45, 32], [45, 57]]]], ["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.buttonClose"], [], ["loc", [null, [45, 58], [45, 136]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 49,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/mobile/components-examples/flexberry-lookup/lookup-in-modal.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "class", "ui button");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "class", "ui button");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [2]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element4, [3]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createElementMorph(element5);
        morphs[2] = dom.createMorphAt(element5, 0, 0);
        morphs[3] = dom.createElementMorph(element6);
        morphs[4] = dom.createMorphAt(element6, 0, 0);
        morphs[5] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        morphs[6] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.caption"], [], ["loc", [null, [1, 22], [1, 96]]]], ["element", "action", ["modalWindow", "#example-mobile"], [], ["loc", [null, [4, 28], [4, 70]]]], ["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.buttonModal"], [], ["loc", [null, [4, 71], [4, 149]]]], ["element", "action", ["modalWindowDouble", "#example-mobile"], [], ["loc", [null, [5, 28], [5, 76]]]], ["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.buttonModalDouble"], [], ["loc", [null, [5, 77], [5, 161]]]], ["block", "ui-modal", [], ["id", "repeat-window"], 0, null, ["loc", [null, [8, 0], [27, 13]]]], ["block", "ui-modal", [], ["id", "repeat-window-double"], 1, null, ["loc", [null, [29, 0], [48, 13]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/mobile/components/colsconfig-dialog-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/colsconfig-dialog-content.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "field");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "field");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["inline", "flexberry-checkbox", [], ["label", ["subexpr", "t", ["components.colsconfig-dialog-content.det-separate-cols"], [], ["loc", [null, [31, 16], [31, 76]]]], "value", ["subexpr", "@mut", [["get", "model.exportParams.detSeparateCols", ["loc", [null, [32, 16], [32, 50]]]]], [], []]], ["loc", [null, [30, 8], [33, 10]]]], ["inline", "flexberry-checkbox", [], ["label", ["subexpr", "t", ["components.colsconfig-dialog-content.det-separate-rows"], [], ["loc", [null, [37, 16], [37, 76]]]], "value", ["subexpr", "@mut", [["get", "model.exportParams.detSeparateRows", ["loc", [null, [38, 16], [38, 50]]]]], [], []]], ["loc", [null, [36, 8], [39, 10]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 41,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/colsconfig-dialog-content.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "two fields unstackable");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "field");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "field");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element14 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element14, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element14, [3]), 3, 3);
          return morphs;
        },
        statements: [["inline", "flexberry-field", [], ["class", "per-page-input", "value", ["subexpr", "@mut", [["get", "model.perPageValue", ["loc", [null, [46, 18], [46, 36]]]]], [], []], "label", ["subexpr", "t", ["components.colsconfig-dialog-content.per-page"], [], ["loc", [null, [47, 18], [47, 69]]]]], ["loc", [null, [44, 10], [48, 12]]]], ["inline", "flexberry-checkbox", [], ["class", "toggle", "value", ["subexpr", "@mut", [["get", "model.saveColWidthState", ["loc", [null, [54, 18], [54, 41]]]]], [], []], "label", ["subexpr", "t", ["components.colsconfig-dialog-content.col-width-on"], [], ["loc", [null, [55, 18], [55, 73]]]]], ["loc", [null, [52, 10], [56, 12]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 64,
                "column": 10
              },
              "end": {
                "line": 67,
                "column": 10
              }
            },
            "moduleName": "dummy/templates/mobile/components/colsconfig-dialog-content.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["components.colsconfig-dialog-content.column-name"], [], ["loc", [null, [65, 19], [65, 75]]]], ["inline", "input", [], ["class", ["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [66, 30], [66, 42]]]], "disabled"], [], ["loc", [null, [66, 26], [66, 54]]]], "value", ["subexpr", "@mut", [["get", "colDesc.name", ["loc", [null, [66, 61], [66, 73]]]]], [], []]], ["loc", [null, [66, 12], [66, 75]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 67,
                "column": 10
              },
              "end": {
                "line": 69,
                "column": 10
              }
            },
            "moduleName": "dummy/templates/mobile/components/colsconfig-dialog-content.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "colDesc.name", ["loc", [null, [68, 18], [68, 34]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 77,
                  "column": 14
                },
                "end": {
                  "line": 85,
                  "column": 14
                }
              },
              "moduleName": "dummy/templates/mobile/components/colsconfig-dialog-content.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "dropdown icon");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "default text");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "menu");
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "item");
              dom.setAttribute(el2, "data-value", "0");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "item");
              dom.setAttribute(el2, "data-value", "1");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "item");
              dom.setAttribute(el2, "data-value", "-1");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [5]);
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
              morphs[2] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
              morphs[3] = dom.createMorphAt(dom.childAt(element2, [5]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["components.colsconfig-dialog-content.sort-direction-none"], [], ["loc", [null, [79, 42], [79, 106]]]], ["inline", "t", ["components.colsconfig-dialog-content.sort-direction-none"], [], ["loc", [null, [81, 51], [81, 115]]]], ["inline", "t", ["components.colsconfig-dialog-content.sort-direction-asc"], [], ["loc", [null, [82, 51], [82, 114]]]], ["inline", "t", ["components.colsconfig-dialog-content.sort-direction-desc"], [], ["loc", [null, [83, 52], [83, 116]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 74,
                "column": 10
              },
              "end": {
                "line": 87,
                "column": 10
              }
            },
            "moduleName": "dummy/templates/mobile/components/colsconfig-dialog-content.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "sort-direction-cell field");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(element3, 3, 3);
            return morphs;
          },
          statements: [["inline", "t", ["components.colsconfig-dialog-content.sort-direction-caption"], [], ["loc", [null, [76, 21], [76, 88]]]], ["block", "ui-dropdown", [], ["class", ["subexpr", "concat", ["ui compact selection dropdown sort-direction-dropdown", ["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [77, 103], [77, 115]]]], " disabled"], [], ["loc", [null, [77, 99], [77, 128]]]], ["subexpr", "if", [["get", "colDesc.isHasMany", ["loc", [null, [77, 133], [77, 150]]]], " hidden"], [], ["loc", [null, [77, 129], [77, 161]]]]], [], ["loc", [null, [77, 35], [77, 162]]]], "onChange", ["subexpr", "action", ["setSortOrder", ["get", "colDesc", ["loc", [null, [77, 195], [77, 202]]]]], [], ["loc", [null, [77, 172], [77, 203]]]]], 0, null, ["loc", [null, [77, 14], [85, 30]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 89,
                "column": 10
              },
              "end": {
                "line": 99,
                "column": 10
              }
            },
            "moduleName": "dummy/templates/mobile/components/colsconfig-dialog-content.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "field");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [3]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
            morphs[1] = dom.createAttrMorph(element1, 'class');
            morphs[2] = dom.createMorphAt(element1, 1, 1);
            return morphs;
          },
          statements: [["inline", "t", ["components.colsconfig-dialog-content.sort-priority-caption"], [], ["loc", [null, [91, 21], [91, 87]]]], ["attribute", "class", ["concat", ["ui input ", ["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [92, 40], [92, 52]]]], "disabled"], [], ["loc", [null, [92, 35], [92, 65]]]]]]], ["inline", "input", [], ["class", "sort-priority-input", "value", ["subexpr", "@mut", [["get", "colDesc.sortPriority", ["loc", [null, [95, 24], [95, 44]]]]], [], []]], ["loc", [null, [93, 16], [96, 18]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 61,
              "column": 4
            },
            "end": {
              "line": 119,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/colsconfig-dialog-content.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "colsconfig-prop");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "two fields unstackable");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "field");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "colsconfig-actions");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "type", "button");
          dom.setAttribute(el3, "class", "ui icon button");
          var el4 = dom.createElement("i");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "type", "button");
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "chevron up icon");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "type", "button");
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "chevron down icon");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var element5 = dom.childAt(element4, [1]);
          var element6 = dom.childAt(element4, [4]);
          var element7 = dom.childAt(element4, [7]);
          var element8 = dom.childAt(element7, [3]);
          var element9 = dom.childAt(element4, [9]);
          var element10 = dom.childAt(element9, [1]);
          var element11 = dom.childAt(element10, [0]);
          var element12 = dom.childAt(element9, [3]);
          var element13 = dom.childAt(element9, [5]);
          var morphs = new Array(14);
          morphs[0] = dom.createAttrMorph(element4, 'propName');
          morphs[1] = dom.createAttrMorph(element5, 'class');
          morphs[2] = dom.createMorphAt(element5, 1, 1);
          morphs[3] = dom.createMorphAt(element6, 1, 1);
          morphs[4] = dom.createMorphAt(element6, 2, 2);
          morphs[5] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
          morphs[6] = dom.createAttrMorph(element8, 'class');
          morphs[7] = dom.createMorphAt(element8, 1, 1);
          morphs[8] = dom.createElementMorph(element10);
          morphs[9] = dom.createAttrMorph(element11, 'class');
          morphs[10] = dom.createAttrMorph(element12, 'class');
          morphs[11] = dom.createElementMorph(element12);
          morphs[12] = dom.createAttrMorph(element13, 'class');
          morphs[13] = dom.createElementMorph(element13);
          return morphs;
        },
        statements: [["attribute", "propName", ["concat", [["get", "colDesc.propName", ["loc", [null, [62, 23], [62, 39]]]]]]], ["attribute", "class", ["concat", ["field colsconfig-prop-name ", ["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [63, 52], [63, 64]]]], "disabled"], [], ["loc", [null, [63, 47], [63, 77]]]]]]], ["block", "if", [["get", "model.exportParams.isExportExcel", ["loc", [null, [64, 16], [64, 48]]]]], [], 0, 1, ["loc", [null, [64, 10], [69, 17]]]], ["block", "unless", [["get", "colDesc.isHasMany", ["loc", [null, [74, 20], [74, 37]]]]], [], 2, null, ["loc", [null, [74, 10], [87, 21]]]], ["block", "if", [["get", "colDesc.sortOrder", ["loc", [null, [89, 16], [89, 33]]]]], [], 3, null, ["loc", [null, [89, 10], [99, 17]]]], ["inline", "t", ["components.colsconfig-dialog-content.column-width-caption"], [], ["loc", [null, [104, 17], [104, 82]]]], ["attribute", "class", ["concat", ["ui input ", ["subexpr", "if", [["subexpr", "or", [["get", "colDesc.hide", ["loc", [null, [105, 40], [105, 52]]]], ["subexpr", "or", [["get", "model.exportParams.isExportExcel", ["loc", [null, [105, 57], [105, 89]]]], ["subexpr", "or", [["get", "colDesc.fixed", ["loc", [null, [105, 94], [105, 107]]]], ["subexpr", "not", [["get", "model.saveColWidthState", ["loc", [null, [105, 113], [105, 136]]]]], [], ["loc", [null, [105, 108], [105, 137]]]]], [], ["loc", [null, [105, 90], [105, 138]]]]], [], ["loc", [null, [105, 53], [105, 139]]]]], [], ["loc", [null, [105, 36], [105, 140]]]], "disabled"], [], ["loc", [null, [105, 31], [105, 153]]]]]]], ["inline", "input", [], ["class", "column-width-input", "value", ["subexpr", "@mut", [["get", "colDesc.columnWidth", ["loc", [null, [108, 20], [108, 39]]]]], [], []]], ["loc", [null, [106, 12], [109, 14]]]], ["element", "action", ["invertVisibility", ["get", "n", ["loc", [null, [114, 60], [114, 61]]]]], [], ["loc", [null, [114, 32], [114, 63]]]], ["attribute", "class", ["concat", ["large ", ["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [114, 108], [114, 120]]]], "hide", "unhide"], [], ["loc", [null, [114, 103], [114, 138]]]], " icon"]]], ["attribute", "class", ["concat", ["ui icon button", ["subexpr", "if", [["subexpr", "eq", [["get", "n", ["loc", [null, [115, 83], [115, 84]]]], 0], [], ["loc", [null, [115, 79], [115, 87]]]], " disabled"], [], ["loc", [null, [115, 74], [115, 101]]]]]]], ["element", "action", ["rowUp", ["get", "n", ["loc", [null, [115, 49], [115, 50]]]]], [], ["loc", [null, [115, 32], [115, 52]]]], ["attribute", "class", ["concat", ["ui icon button row-down-button no-margin", ["subexpr", "if", [["subexpr", "eq", [["get", "colDesc", ["loc", [null, [116, 111], [116, 118]]]], ["get", "model.colDescs.lastObject", ["loc", [null, [116, 119], [116, 144]]]]], [], ["loc", [null, [116, 107], [116, 145]]]], " disabled"], [], ["loc", [null, [116, 102], [116, 159]]]]]]], ["element", "action", ["rowDown", ["get", "n", ["loc", [null, [116, 51], [116, 52]]]]], [], ["loc", [null, [116, 32], [116, 54]]]]],
        locals: ["colDesc", "n"],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 123,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/mobile/components/colsconfig-dialog-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "flexberry-colsconfig content");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "field");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "button");
        dom.setAttribute(el4, "class", "ui button cols-config-apply");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui segment");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "field");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "field");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5, "type", "button");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3, "class", "hidden download-anchor");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element15 = dom.childAt(fragment, [0]);
        var element16 = dom.childAt(element15, [1]);
        var element17 = dom.childAt(element16, [1, 1]);
        var element18 = dom.childAt(element16, [3]);
        var element19 = dom.childAt(element18, [3, 1]);
        var morphs = new Array(10);
        morphs[0] = dom.createAttrMorph(element15, 'class');
        morphs[1] = dom.createElementMorph(element17);
        morphs[2] = dom.createMorphAt(element17, 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element18, [1]), 1, 1);
        morphs[4] = dom.createAttrMorph(element19, 'class');
        morphs[5] = dom.createElementMorph(element19);
        morphs[6] = dom.createMorphAt(element19, 1, 1);
        morphs[7] = dom.createMorphAt(element18, 5, 5);
        morphs[8] = dom.createMorphAt(element16, 5, 5);
        morphs[9] = dom.createMorphAt(element16, 7, 7);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["ui form ", ["get", "appState.state", ["loc", [null, [1, 22], [1, 36]]]]]]], ["element", "action", ["apply"], [], ["loc", [null, [4, 64], [4, 82]]]], ["inline", "if", [["get", "model.exportParams.isExportExcel", ["loc", [null, [4, 88], [4, 120]]]], ["subexpr", "t", ["components.colsconfig-dialog-content.export"], [], ["loc", [null, [4, 121], [4, 170]]]], ["subexpr", "t", ["components.colsconfig-dialog-content.use"], [], ["loc", [null, [4, 171], [4, 217]]]]], [], ["loc", [null, [4, 83], [4, 219]]]], ["inline", "flexberry-field", [], ["class", "setting-name-input fluid", "value", ["subexpr", "@mut", [["get", "model.settingName", ["loc", [null, [10, 16], [10, 33]]]]], [], []], "label", ["subexpr", "t", ["components.colsconfig-dialog-content.enter-setting-name"], [], ["loc", [null, [11, 16], [11, 77]]]]], ["loc", [null, [8, 8], [12, 10]]]], ["attribute", "class", ["concat", ["ui button positive cols-config-save", ["subexpr", "unless", [["get", "model.settingName", ["loc", [null, [15, 81], [15, 98]]]], " disabled"], [], ["loc", [null, [15, 72], [15, 112]]]]]]], ["element", "action", ["saveColsSetting"], [], ["loc", [null, [15, 114], [15, 142]]]], ["inline", "t", ["components.colsconfig-dialog-content.save"], [], ["loc", [null, [16, 10], [16, 59]]]], ["inline", "ui-message", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [20, 13], [20, 17]]]]], [], []], "closeable", ["subexpr", "@mut", [["get", "closeable", ["loc", [null, [21, 18], [21, 27]]]]], [], []], "visible", ["subexpr", "@mut", [["get", "visible", ["loc", [null, [22, 16], [22, 23]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "caption", ["loc", [null, [23, 16], [23, 23]]]]], [], []], "message", ["subexpr", "@mut", [["get", "message", ["loc", [null, [24, 16], [24, 23]]]]], [], []]], ["loc", [null, [19, 6], [25, 8]]]], ["block", "if", [["get", "model.exportParams.isExportExcel", ["loc", [null, [28, 10], [28, 42]]]]], [], 0, 1, ["loc", [null, [28, 4], [59, 11]]]], ["block", "each", [["get", "model.colDescs", ["loc", [null, [61, 12], [61, 26]]]]], [], 2, null, ["loc", [null, [61, 4], [119, 13]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("dummy/templates/mobile/components/flexberry-file", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 25,
                    "column": 12
                  },
                  "end": {
                    "line": 30,
                    "column": 12
                  }
                },
                "moduleName": "dummy/templates/mobile/components/flexberry-file.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("img");
                dom.setAttribute(el1, "class", "flexberry-file-image-preview");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element0, 'src');
                morphs[1] = dom.createAttrMorph(element0, 'alt');
                return morphs;
              },
              statements: [["attribute", "src", ["get", "_previewImageAsBase64String", ["loc", [null, [28, 22], [28, 49]]]]], ["attribute", "alt", ["subexpr", "t", ["components.flexberry-file.preview-image-alternative-text"], [], ["loc", [null, [29, 20], [29, 84]]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 23,
                  "column": 8
                },
                "end": {
                  "line": 33,
                  "column": 8
                }
              },
              "moduleName": "dummy/templates/mobile/components/flexberry-file.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "flexberry-file-image-preview-wrapper ui small image");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var element2 = dom.childAt(element1, [3]);
              var morphs = new Array(3);
              morphs[0] = dom.createElementMorph(element1);
              morphs[1] = dom.createMorphAt(element1, 1, 1);
              morphs[2] = dom.createAttrMorph(element2, 'class');
              return morphs;
            },
            statements: [["element", "action", ["viewLoadedImage"], [], ["loc", [null, [24, 75], [24, 103]]]], ["block", "unless", [["get", "_previewDownloadIsInProgress", ["loc", [null, [25, 22], [25, 50]]]]], [], 0, null, ["loc", [null, [25, 12], [30, 23]]]], ["attribute", "class", ["concat", ["ui ", ["subexpr", "if", [["get", "_previewDownloadIsInProgress", ["loc", [null, [31, 32], [31, 60]]]], "active", "disabled"], [], ["loc", [null, [31, 27], [31, 82]]]], " loader"]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 33,
                  "column": 8
                },
                "end": {
                  "line": 35,
                  "column": 8
                }
              },
              "moduleName": "dummy/templates/mobile/components/flexberry-file.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "style", "color:red");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
              return morphs;
            },
            statements: [["content", "_fileName", ["loc", [null, [34, 16], [34, 29]]]], ["content", "_errorPreviewCaption", ["loc", [null, [34, 67], [34, 91]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 6
              },
              "end": {
                "line": 36,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/mobile/components/flexberry-file.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "_canLoadPreview", ["loc", [null, [23, 14], [23, 29]]]]], [], 0, 1, ["loc", [null, [23, 8], [35, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 4
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/flexberry-file.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "flexberry-file-menu");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "flexberry-menu", [], ["class", ["subexpr", "concat", ["flexberry-file-mobile-menu top right pointing", ["subexpr", "if", [["subexpr", "and", [["get", "readonly", ["loc", [null, [14, 81], [14, 89]]]], ["subexpr", "not", [["get", "showPreview", ["loc", [null, [14, 95], [14, 106]]]]], [], ["loc", [null, [14, 90], [14, 107]]]]], [], ["loc", [null, [14, 76], [14, 108]]]], " disabled", ""], [], ["loc", [null, [14, 72], [14, 124]]]]], [], ["loc", [null, [14, 16], [14, 125]]]], "items", ["subexpr", "@mut", [["get", "_menuItems", ["loc", [null, [15, 16], [15, 26]]]]], [], []], "callItemsOnClickCallbacks", false, "onItemClick", ["subexpr", "action", ["onMenuItemClick"], [], ["loc", [null, [17, 22], [17, 48]]]], "collapseMenuOnItemClick", true, "onlyClickHandler", true], ["loc", [null, [13, 8], [20, 10]]]], ["block", "if", [["get", "showPreview", ["loc", [null, [22, 12], [22, 23]]]]], [], 0, null, ["loc", [null, [22, 6], [36, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 61,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/mobile/components/flexberry-file.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-file-grid ui grid");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("input");
        dom.setAttribute(el2, "type", "file");
        dom.setAttribute(el2, "name", "files[]");
        dom.setAttribute(el2, "class", "flexberry-file-file-input");
        dom.setAttribute(el2, "style", "display:none");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-file-download-iframes-container");
        dom.setAttribute(el1, "style", "display: none;");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-file-error-modal-dialog ui small basic modal");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui icon header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "content");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-file-error-modal-dialog-content center aligned ui grid");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "flexberry-file-error-modal-dialog-button center aligned ui grid");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "actions");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "flexberry-file-error-modal-dialog-ok-button ui approve green inverted button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "checkmark icon");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [0]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element3, [3]);
        var element6 = dom.childAt(element5, [1]);
        var element7 = dom.childAt(fragment, [4]);
        var morphs = new Array(10);
        morphs[0] = dom.createAttrMorph(element4, 'id');
        morphs[1] = dom.createAttrMorph(element6, 'class');
        morphs[2] = dom.createAttrMorph(element6, 'title');
        morphs[3] = dom.createAttrMorph(element6, 'for');
        morphs[4] = dom.createElementMorph(element6);
        morphs[5] = dom.createMorphAt(element6, 1, 1);
        morphs[6] = dom.createMorphAt(element5, 3, 3);
        morphs[7] = dom.createMorphAt(dom.childAt(element7, [1]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(element7, [3, 1]), 1, 1);
        morphs[9] = dom.createMorphAt(dom.childAt(element7, [5, 1, 1]), 3, 3);
        return morphs;
      },
      statements: [["attribute", "id", ["get", "_fileInputId", ["loc", [null, [2, 41], [2, 53]]]]], ["attribute", "class", ["concat", ["flexberry-file-add-button ui ", ["get", "buttonClass", ["loc", [null, [5, 44], [5, 55]]]], " ", ["subexpr", "if", [["get", "readonly", ["loc", [null, [5, 63], [5, 71]]]], "disabled", ["subexpr", "unless", [["get", "_addButtonIsEnabled", ["loc", [null, [5, 91], [5, 110]]]], "disabled"], [], ["loc", [null, [5, 83], [5, 122]]]]], [], ["loc", [null, [5, 58], [5, 124]]]], " ", ["subexpr", "if", [["get", "_hasFile", ["loc", [null, [5, 130], [5, 138]]]], "hidden"], [], ["loc", [null, [5, 125], [5, 149]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-file.add-button-title"], [], ["loc", [null, [6, 12], [6, 62]]]]], ["attribute", "for", ["get", "_fileInputId", ["loc", [null, [7, 12], [7, 24]]]]], ["element", "action", ["addButtonClick"], ["on", "click", "preventDefault", false], ["loc", [null, [8, 6], [8, 65]]]], ["inline", "t", ["components.flexberry-file.add-button-caption"], [], ["loc", [null, [9, 4], [9, 56]]]], ["block", "if", [["get", "_hasFile", ["loc", [null, [11, 10], [11, 18]]]]], [], 0, null, ["loc", [null, [11, 4], [37, 11]]]], ["content", "_errorModalDialogCaption", ["loc", [null, [45, 4], [45, 32]]]], ["content", "_errorModalDialogContent", ["loc", [null, [49, 6], [49, 34]]]], ["inline", "t", ["components.flexberry-file.error-dialog-ok-button-caption"], [], ["loc", [null, [56, 8], [56, 72]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/mobile/components/flexberry-objectlistview", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 53,
                    "column": 12
                  },
                  "end": {
                    "line": 55,
                    "column": 12
                  }
                },
                "moduleName": "dummy/templates/mobile/components/flexberry-objectlistview.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "type", "button");
                dom.setAttribute(el1, "class", "ui disabled active button");
                dom.setAttribute(el1, "disabled", "");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["content", "page.number", ["loc", [null, [54, 79], [54, 94]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 55,
                    "column": 12
                  },
                  "end": {
                    "line": 57,
                    "column": 12
                  }
                },
                "moduleName": "dummy/templates/mobile/components/flexberry-objectlistview.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "type", "button");
                dom.setAttribute(el1, "class", "ui button");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createElementMorph(element1);
                morphs[1] = dom.createMorphAt(element1, 0, 0);
                return morphs;
              },
              statements: [["element", "action", ["gotoPage", ["get", "this.attrs.gotoPage", ["loc", [null, [56, 74], [56, 93]]]], ["get", "page.number", ["loc", [null, [56, 94], [56, 105]]]]], [], ["loc", [null, [56, 54], [56, 107]]]], ["content", "page.number", ["loc", [null, [56, 108], [56, 123]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 52,
                  "column": 10
                },
                "end": {
                  "line": 58,
                  "column": 10
                }
              },
              "moduleName": "dummy/templates/mobile/components/flexberry-objectlistview.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "page.isCurrent", ["loc", [null, [53, 18], [53, 32]]]]], [], 0, 1, ["loc", [null, [53, 12], [57, 19]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 51,
                "column": 8
              },
              "end": {
                "line": 59,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/mobile/components/flexberry-objectlistview.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "not", [["get", "page.isEllipsis", ["loc", [null, [52, 21], [52, 36]]]]], [], ["loc", [null, [52, 16], [52, 37]]]]], [], 0, null, ["loc", [null, [52, 10], [58, 17]]]]],
          locals: ["page"],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 61,
                "column": 6
              },
              "end": {
                "line": 74,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/mobile/components/flexberry-objectlistview.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            morphs[2] = dom.createMorphAt(element0, 4, 4);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui input nav-bar-search-page ", ["subexpr", "if", [["subexpr", "and", [["get", "searchPageValue", ["loc", [null, [62, 59], [62, 74]]]], ["get", "searchPageButtonReadonly", ["loc", [null, [62, 75], [62, 99]]]]], [], ["loc", [null, [62, 54], [62, 100]]]], "error"], [], ["loc", [null, [62, 49], [62, 111]]]]]]], ["inline", "input", [], ["type", "number", "min", ["subexpr", "@mut", [["get", "_pages.firstObject.number", ["loc", [null, [65, 16], [65, 41]]]]], [], []], "max", ["subexpr", "@mut", [["get", "_pages.lastObject.number", ["loc", [null, [66, 16], [66, 40]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "_mobilePages.lastObject.number", ["loc", [null, [67, 24], [67, 54]]]]], [], []], "enter", ["subexpr", "action", ["searchPageButtonAction", ["get", "this.attrs.gotoPage", ["loc", [null, [68, 51], [68, 70]]]]], [], ["loc", [null, [68, 18], [68, 71]]]], "value", ["subexpr", "@mut", [["get", "searchPageValue", ["loc", [null, [69, 18], [69, 33]]]]], [], []]], ["loc", [null, [63, 10], [70, 12]]]], ["inline", "input", [], ["classNames", ["subexpr", "array", ["hidden"], [], ["loc", [null, [72, 29], [72, 45]]]]], ["loc", [null, [72, 10], [72, 47]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 38,
              "column": 0
            },
            "end": {
              "line": 77,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/mobile/components/flexberry-objectlistview.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui secondary menu no-margin nav-bar");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "right menu");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "ui basic buttons");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [1]);
          var element4 = dom.childAt(element3, [1]);
          var element5 = dom.childAt(element2, [3]);
          var morphs = new Array(8);
          morphs[0] = dom.createAttrMorph(element3, 'class');
          morphs[1] = dom.createAttrMorph(element3, 'title');
          morphs[2] = dom.createAttrMorph(element3, 'disabled');
          morphs[3] = dom.createElementMorph(element3);
          morphs[4] = dom.createAttrMorph(element4, 'class');
          morphs[5] = dom.createMorphAt(element3, 3, 3);
          morphs[6] = dom.createMorphAt(dom.childAt(element5, [1]), 1, 1);
          morphs[7] = dom.createMorphAt(element5, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["subexpr", "unless", [["get", "colsConfigButton", ["loc", [null, [42, 25], [42, 41]]]], "disabled"], [], ["loc", [null, [42, 16], [42, 54]]]], " button mobile-sorting-setting-button"]]], ["attribute", "title", ["get", "_mobileSortingSettingsCaption", ["loc", [null, [43, 14], [43, 43]]]]], ["attribute", "disabled", ["subexpr", "not", [["get", "colsConfigButton", ["loc", [null, [44, 21], [44, 37]]]]], [], ["loc", [null, [44, 15], [44, 39]]]]], ["element", "action", ["showConfigDialog"], [], ["loc", [null, [45, 6], [45, 35]]]], ["attribute", "class", ["get", "_mobileSortingSettingsIcon", ["loc", [null, [46, 19], [46, 45]]]]], ["content", "_mobileSortingSettingsCaption", ["loc", [null, [47, 8], [47, 41]]]], ["block", "each", [["get", "_mobilePages", ["loc", [null, [51, 16], [51, 28]]]]], [], 0, null, ["loc", [null, [51, 8], [59, 17]]]], ["block", "if", [["subexpr", "gt", [["get", "_mobilePages.length", ["loc", [null, [61, 16], [61, 35]]]], 4], [], ["loc", [null, [61, 12], [61, 38]]]]], [], 1, null, ["loc", [null, [61, 6], [74, 13]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 150,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/mobile/components/flexberry-objectlistview.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "olv-toolbar", [], ["class", "ui secondary menu no-margin", "createNewButton", ["subexpr", "@mut", [["get", "createNewButton", ["loc", [null, [3, 18], [3, 33]]]]], [], []], "enableCreateNewButton", ["subexpr", "not", [["get", "readonly", ["loc", [null, [4, 29], [4, 37]]]]], [], ["loc", [null, [4, 24], [4, 38]]]], "refreshButton", ["subexpr", "@mut", [["get", "refreshButton", ["loc", [null, [5, 16], [5, 29]]]]], [], []], "deleteButton", ["subexpr", "@mut", [["get", "deleteButton", ["loc", [null, [6, 15], [6, 27]]]]], [], []], "colsConfigButton", ["subexpr", "@mut", [["get", "colsConfigButton", ["loc", [null, [7, 19], [7, 35]]]]], [], []], "advLimitButton", ["subexpr", "@mut", [["get", "advLimitButton", ["loc", [null, [8, 17], [8, 31]]]]], [], []], "enableFilters", ["subexpr", "@mut", [["get", "enableFilters", ["loc", [null, [9, 16], [9, 29]]]]], [], []], "exportExcelButton", ["subexpr", "@mut", [["get", "exportExcelButton", ["loc", [null, [10, 20], [10, 37]]]]], [], []], "showFilters", ["subexpr", "@mut", [["get", "_showFilters", ["loc", [null, [11, 14], [11, 26]]]]], [], []], "showFiltersInModal", ["subexpr", "@mut", [["get", "showFiltersInModal", ["loc", [null, [12, 21], [12, 39]]]]], [], []], "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [13, 10], [13, 17]]]]], [], []], "toggleStateFilters", ["subexpr", "action", ["toggleStateFilters"], [], ["loc", [null, [14, 21], [14, 50]]]], "resetFilters", ["subexpr", "action", ["resetFilters", ["get", "this.attrs.resetFilters", ["loc", [null, [15, 38], [15, 61]]]]], [], ["loc", [null, [15, 15], [15, 62]]]], "filterButton", ["subexpr", "@mut", [["get", "filterButton", ["loc", [null, [16, 15], [16, 27]]]]], [], []], "filterText", ["subexpr", "@mut", [["get", "filterText", ["loc", [null, [17, 13], [17, 23]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [18, 14], [18, 25]]]]], [], []], "enableDeleteButton", ["subexpr", "not", [["get", "readonly", ["loc", [null, [19, 26], [19, 34]]]]], [], ["loc", [null, [19, 21], [19, 35]]]], "inLookup", ["subexpr", "eq", [["get", "componentMode", ["loc", [null, [20, 15], [20, 28]]]], "lookupform"], [], ["loc", [null, [20, 11], [20, 42]]]], "componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [21, 16], [21, 29]]]]], [], []], "lookupComponentName", ["subexpr", "@mut", [["get", "lookupComponentName", ["loc", [null, [22, 22], [22, 41]]]]], [], []], "modelController", ["subexpr", "@mut", [["get", "currentController", ["loc", [null, [23, 18], [23, 35]]]]], [], []], "customButtonAction", "customButtonAction", "customButtons", ["subexpr", "@mut", [["get", "customButtons", ["loc", [null, [25, 16], [25, 29]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [26, 16], [26, 29]]]]], [], []], "showConfigDialog", "showConfigDialog", "showAdvLimitDialog", "showConfigDialog", "confirmDeleteRows", ["subexpr", "@mut", [["get", "confirmDeleteRows", ["loc", [null, [29, 20], [29, 37]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "inHierarchicalMode", ["loc", [null, [30, 21], [30, 39]]]]], [], []], "inExpandMode", ["subexpr", "@mut", [["get", "inExpandMode", ["loc", [null, [31, 15], [31, 27]]]]], [], []], "availableHierarchicalMode", ["subexpr", "@mut", [["get", "_availableHierarchicalMode", ["loc", [null, [32, 28], [32, 54]]]]], [], []], "availableCollExpandMode", ["subexpr", "@mut", [["get", "availableCollExpandMode", ["loc", [null, [33, 26], [33, 49]]]]], [], []], "switchHierarchicalMode", ["subexpr", "action", ["switchHierarchicalMode"], [], ["loc", [null, [34, 25], [34, 58]]]], "switchExpandMode", ["subexpr", "action", ["switchExpandMode"], [], ["loc", [null, [35, 19], [35, 46]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [36, 11], [36, 19]]]]], [], []]], ["loc", [null, [1, 0], [37, 2]]]], ["block", "if", [["subexpr", "or", [["subexpr", "not", [["get", "inHierarchicalMode", ["loc", [null, [38, 15], [38, 33]]]]], [], ["loc", [null, [38, 10], [38, 34]]]], ["get", "hierarchyPaging", ["loc", [null, [38, 35], [38, 50]]]]], [], ["loc", [null, [38, 6], [38, 51]]]]], [], 0, null, ["loc", [null, [38, 0], [77, 7]]]], ["inline", "object-list-view", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [79, 14], [79, 25]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [80, 11], [80, 19]]]]], [], []], "columnsWidthAutoresize", ["subexpr", "@mut", [["get", "columnsWidthAutoresize", ["loc", [null, [81, 25], [81, 47]]]]], [], []], "minAutoColumnWidth", ["subexpr", "@mut", [["get", "minAutoColumnWidth", ["loc", [null, [82, 21], [82, 39]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [83, 14], [83, 25]]]]], [], []], "tableStriped", ["subexpr", "@mut", [["get", "tableStriped", ["loc", [null, [84, 15], [84, 27]]]]], [], []], "customTableClass", ["subexpr", "@mut", [["get", "customTableClass", ["loc", [null, [85, 19], [85, 35]]]]], [], []], "cellComponent", ["subexpr", "@mut", [["get", "cellComponent", ["loc", [null, [86, 16], [86, 29]]]]], [], []], "singleColumnCellComponent", ["subexpr", "@mut", [["get", "singleColumnCellComponent", ["loc", [null, [87, 28], [87, 53]]]]], [], []], "singleColumnHeaderTitle", ["subexpr", "@mut", [["get", "singleColumnHeaderTitle", ["loc", [null, [88, 26], [88, 49]]]]], [], []], "createNewByPrototype", ["subexpr", "action", ["createNewByPrototype"], [], ["loc", [null, [89, 23], [89, 54]]]], "showValidationMessagesInRow", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [90, 40], [90, 48]]]]], [], ["loc", [null, [90, 35], [90, 49]]]], ["get", "showValidationMessagesInRow", ["loc", [null, [90, 50], [90, 77]]]]], [], ["loc", [null, [90, 30], [90, 78]]]], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [91, 20], [91, 37]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [92, 20], [92, 37]]]]], [], []], "showEditButtonInRow", ["subexpr", "@mut", [["get", "showEditButtonInRow", ["loc", [null, [93, 22], [93, 41]]]]], [], []], "showPrototypeButtonInRow", ["subexpr", "@mut", [["get", "showPrototypeButtonInRow", ["loc", [null, [94, 27], [94, 51]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [95, 24], [95, 45]]]]], [], []], "showEditMenuItemInRow", ["subexpr", "@mut", [["get", "showEditMenuItemInRow", ["loc", [null, [96, 24], [96, 45]]]]], [], []], "showPrototypeMenuItemInRow", ["subexpr", "@mut", [["get", "showPrototypeMenuItemInRow", ["loc", [null, [97, 29], [97, 55]]]]], [], []], "showDeleteMenuItemInRow", ["subexpr", "@mut", [["get", "showDeleteMenuItemInRow", ["loc", [null, [98, 26], [98, 49]]]]], [], []], "sendMenuItemAction", ["subexpr", "action", ["sendMenuItemAction"], [], ["loc", [null, [99, 21], [99, 50]]]], "menuInRowAdditionalItems", ["subexpr", "@mut", [["get", "menuInRowAdditionalItems", ["loc", [null, [100, 27], [100, 51]]]]], [], []], "rowClickable", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [101, 25], [101, 33]]]]], [], ["loc", [null, [101, 20], [101, 34]]]], ["get", "rowClickable", ["loc", [null, [101, 35], [101, 47]]]]], [], ["loc", [null, [101, 15], [101, 48]]]], "orderable", ["subexpr", "@mut", [["get", "orderable", ["loc", [null, [102, 12], [102, 21]]]]], [], []], "sorting", ["subexpr", "@mut", [["get", "sorting", ["loc", [null, [103, 10], [103, 17]]]]], [], []], "immediateDelete", true, "modelName", ["subexpr", "@mut", [["get", "modelName", ["loc", [null, [105, 12], [105, 21]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [106, 18], [106, 33]]]]], [], []], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [107, 10], [107, 17]]]]], [], []], "sortByColumn", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.sortByColumn", ["loc", [null, [108, 27], [108, 50]]]], ["get", "this.attrs.sortByColumn", ["loc", [null, [108, 51], [108, 74]]]], "sortByColumn"], [], ["loc", [null, [108, 23], [108, 90]]]]], [], ["loc", [null, [108, 15], [108, 91]]]], "addColumnToSorting", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.addColumnToSorting", ["loc", [null, [109, 33], [109, 62]]]], ["get", "this.attrs.addColumnToSorting", ["loc", [null, [109, 63], [109, 92]]]], "addColumnToSorting"], [], ["loc", [null, [109, 29], [109, 114]]]]], [], ["loc", [null, [109, 21], [109, 115]]]], "enableFilters", ["subexpr", "@mut", [["get", "enableFilters", ["loc", [null, [110, 16], [110, 29]]]]], [], []], "showFilters", ["subexpr", "@mut", [["get", "_showFilters", ["loc", [null, [111, 14], [111, 26]]]]], [], []], "showFiltersInModal", ["subexpr", "@mut", [["get", "showFiltersInModal", ["loc", [null, [112, 21], [112, 39]]]]], [], []], "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [113, 10], [113, 17]]]]], [], []], "applyFilters", ["subexpr", "action", [["subexpr", "if", [["get", "applyFilters", ["loc", [null, [114, 27], [114, 39]]]], ["get", "applyFilters", ["loc", [null, [114, 40], [114, 52]]]], "applyFilters"], [], ["loc", [null, [114, 23], [114, 68]]]]], [], ["loc", [null, [114, 15], [114, 69]]]], "componentForFilter", ["subexpr", "@mut", [["get", "componentForFilter", ["loc", [null, [115, 21], [115, 39]]]]], [], []], "componentForFilterByCondition", ["subexpr", "@mut", [["get", "componentForFilterByCondition", ["loc", [null, [116, 32], [116, 61]]]]], [], []], "conditionsByType", ["subexpr", "@mut", [["get", "conditionsByType", ["loc", [null, [117, 19], [117, 35]]]]], [], []], "filterByAnyMatch", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.filterByAnyMatch", ["loc", [null, [118, 31], [118, 58]]]], ["get", "this.attrs.filterByAnyMatch", ["loc", [null, [118, 59], [118, 86]]]], "filterByAnyMatch"], [], ["loc", [null, [118, 27], [118, 106]]]]], [], ["loc", [null, [118, 19], [118, 107]]]], "filterByAnyWord", ["subexpr", "@mut", [["get", "filterByAnyWord", ["loc", [null, [119, 18], [119, 33]]]]], [], []], "filterByAllWords", ["subexpr", "@mut", [["get", "filterByAllWords", ["loc", [null, [120, 19], [120, 35]]]]], [], []], "configurateRow", ["subexpr", "@mut", [["get", "this.attrs.configurateRow", ["loc", [null, [121, 17], [121, 42]]]]], [], []], "configurateSelectedRows", ["subexpr", "@mut", [["get", "this.attrs.configurateSelectedRows", ["loc", [null, [122, 26], [122, 60]]]]], [], []], "confirmDeleteRow", ["subexpr", "@mut", [["get", "confirmDeleteRow", ["loc", [null, [123, 19], [123, 35]]]]], [], []], "beforeDeleteRecord", ["subexpr", "@mut", [["get", "beforeDeleteRecord", ["loc", [null, [124, 21], [124, 39]]]]], [], []], "beforeDeleteAllRecords", ["subexpr", "@mut", [["get", "beforeDeleteAllRecords", ["loc", [null, [125, 25], [125, 47]]]]], [], []], "action", "objectListViewRowClick", "componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [127, 16], [127, 29]]]]], [], []], "allowColumnResize", ["subexpr", "@mut", [["get", "allowColumnResize", ["loc", [null, [128, 20], [128, 37]]]]], [], []], "selectedRecord", ["subexpr", "@mut", [["get", "selectedRecord", ["loc", [null, [129, 17], [129, 31]]]]], [], []], "notUseUserSettings", ["subexpr", "@mut", [["get", "notUseUserSettings", ["loc", [null, [130, 21], [130, 39]]]]], [], []], "hierarchicalIndent", ["subexpr", "@mut", [["get", "hierarchicalIndent", ["loc", [null, [131, 21], [131, 39]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "inHierarchicalMode", ["loc", [null, [132, 21], [132, 39]]]]], [], []], "inExpandMode", ["subexpr", "@mut", [["get", "inExpandMode", ["loc", [null, [133, 15], [133, 27]]]]], [], []], "disableHierarchicalMode", ["subexpr", "if", [["get", "hierarchyByAttribute", ["loc", [null, [134, 30], [134, 50]]]], true, ["get", "disableHierarchicalMode", ["loc", [null, [134, 56], [134, 79]]]]], [], ["loc", [null, [134, 26], [134, 80]]]], "loadRecords", ["subexpr", "action", ["loadRecords"], [], ["loc", [null, [135, 14], [135, 36]]]], "availableHierarchicalMode", ["subexpr", "action", ["availableHierarchicalMode"], [], ["loc", [null, [136, 28], [136, 64]]]], "hierarchyAttribute", ["subexpr", "@mut", [["get", "hierarchyAttribute", ["loc", [null, [137, 21], [137, 39]]]]], [], []], "useRowByRowLoading", ["subexpr", "@mut", [["get", "useRowByRowLoading", ["loc", [null, [138, 21], [138, 39]]]]], [], []], "useRowByRowLoadingProgress", ["subexpr", "@mut", [["get", "useRowByRowLoadingProgress", ["loc", [null, [139, 29], [139, 55]]]]], [], []], "eventsBus", ["subexpr", "@mut", [["get", "eventsBus", ["loc", [null, [140, 12], [140, 21]]]]], [], []], "onEditForm", ["subexpr", "@mut", [["get", "onEditForm", ["loc", [null, [141, 13], [141, 23]]]]], [], []], "customButtonInRowAction", "customButtonInRowAction", "customButtonsInRow", ["subexpr", "@mut", [["get", "customButtonsInRow", ["loc", [null, [143, 21], [143, 39]]]]], [], []], "defaultSortingButton", ["subexpr", "@mut", [["get", "defaultSortingButton", ["loc", [null, [144, 23], [144, 43]]]]], [], []], "defaultLeftPadding", ["subexpr", "@mut", [["get", "defaultLeftPadding", ["loc", [null, [145, 21], [145, 39]]]]], [], []], "overflowedComponents", ["subexpr", "@mut", [["get", "overflowedComponents", ["loc", [null, [146, 23], [146, 43]]]]], [], []], "fixedHeader", ["subexpr", "@mut", [["get", "fixedHeader", ["loc", [null, [147, 14], [147, 25]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [148, 20], [148, 37]]]]], [], []]], ["loc", [null, [78, 0], [149, 2]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/mobile/components/flexberry-simpleolv",["exports"],function(exports){exports["default"] = Ember.HTMLBars.template((function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":2,"column":2},"end":{"line":11,"column":2}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","refresh icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element42=dom.childAt(fragment,[1]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element42,'class');morphs[1] = dom.createAttrMorph(element42,'title');morphs[2] = dom.createElementMorph(element42);morphs[3] = dom.createMorphAt(element42,1,1);return morphs;},statements:[["attribute","class",["concat",["ui refresh-button ",["get","buttonClass",["loc",[null,[5,33],[5,44]]]]," button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.refresh-button-text"],[],["loc",[null,[6,12],[6,62]]]]],["element","action",["refresh"],[],["loc",[null,[7,6],[7,26]]]],["inline","t",["components.olv-toolbar.refresh-button-text"],[],["loc",[null,[8,8],[8,58]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":12,"column":2},"end":{"line":20,"column":2}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element41=dom.childAt(fragment,[1]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element41,'class');morphs[1] = dom.createAttrMorph(element41,'title');morphs[2] = dom.createElementMorph(element41);morphs[3] = dom.createMorphAt(element41,1,1);return morphs;},statements:[["attribute","class",["concat",["ui create-button ",["get","buttonClass",["loc",[null,[15,32],[15,43]]]]," ",["subexpr","if",[["get","readonly",["loc",[null,[15,51],[15,59]]]],"disabled",["subexpr","if",[["get","enableCreateNewButton",["loc",[null,[15,75],[15,96]]]],"","disabled"],[],["loc",[null,[15,71],[15,111]]]]],[],["loc",[null,[15,46],[15,113]]]]," button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.add-button-text"],[],["loc",[null,[16,12],[16,58]]]]],["element","action",["createNew"],[],["loc",[null,[17,6],[17,28]]]],["inline","t",["components.olv-toolbar.add-button-text"],[],["loc",[null,[18,8],[18,54]]]]],locals:[],templates:[]};})();var child2=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":21,"column":2},"end":{"line":29,"column":2}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element40=dom.childAt(fragment,[1]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element40,'class');morphs[1] = dom.createAttrMorph(element40,'title');morphs[2] = dom.createElementMorph(element40);morphs[3] = dom.createMorphAt(element40,1,1);return morphs;},statements:[["attribute","class",["concat",["ui delete-button ",["get","buttonClass",["loc",[null,[24,32],[24,43]]]]," ",["subexpr","if",[["get","readonly",["loc",[null,[24,51],[24,59]]]],"disabled",["subexpr","if",[["get","isDeleteButtonEnabled",["loc",[null,[24,75],[24,96]]]],"","disabled"],[],["loc",[null,[24,71],[24,111]]]]],[],["loc",[null,[24,46],[24,113]]]]," button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.delete-button-text"],[],["loc",[null,[25,12],[25,61]]]]],["element","action",["delete"],[],["loc",[null,[26,7],[26,26]]]],["inline","t",["components.olv-toolbar.delete-button-text"],[],["loc",[null,[27,8],[27,57]]]]],locals:[],templates:[]};})();var child3=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":30,"column":2},"end":{"line":38,"column":2}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","sitemap icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element39=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element39,'class');morphs[1] = dom.createAttrMorph(element39,'title');morphs[2] = dom.createElementMorph(element39);return morphs;},statements:[["attribute","class",["concat",["ui button icon hierarchical-button ",["get","buttonClass",["loc",[null,[33,50],[33,61]]]]," ",["subexpr","if",[["get","inHierarchicalMode",["loc",[null,[33,69],[33,87]]]],"active"],[],["loc",[null,[33,64],[33,98]]]]]]],["attribute","title",["subexpr","t",["components.olv-toolbar.hierarchy-button-text"],[],["loc",[null,[34,12],[34,64]]]]],["element","action",["switchHierarchicalMode"],[],["loc",[null,[35,6],[35,41]]]]],locals:[],templates:[]};})();var child4=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":48,"column":6},"end":{"line":57,"column":6}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","or");dom.setAttribute(el1,"data-text","•");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n        ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","remove icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element36=dom.childAt(fragment,[3]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element36,'class');morphs[1] = dom.createAttrMorph(element36,'title');morphs[2] = dom.createElementMorph(element36);return morphs;},statements:[["attribute","class",["concat",["ui button removeFilter-button ",["get","buttonClass",["loc",[null,[52,49],[52,60]]]]]]],["attribute","title",["subexpr","t",["components.olv-toolbar.remove-filter-button-text"],[],["loc",[null,[53,16],[53,72]]]]],["element","action",["resetFilters",["get","this.attrs.resetFilters",["loc",[null,[54,34],[54,57]]]]],[],["loc",[null,[54,10],[54,59]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":39,"column":2},"end":{"line":59,"column":2}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui icon buttons filter-active");var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","filter icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element37=dom.childAt(fragment,[1]);var element38=dom.childAt(element37,[1]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element38,'class');morphs[1] = dom.createAttrMorph(element38,'title');morphs[2] = dom.createElementMorph(element38);morphs[3] = dom.createMorphAt(element37,3,3);return morphs;},statements:[["attribute","class",["concat",["ui button ",["get","buttonClass",["loc",[null,[43,27],[43,38]]]]," ",["subexpr","if",[["get","showFilters",["loc",[null,[43,46],[43,57]]]],"active"],[],["loc",[null,[43,41],[43,68]]]]]]],["attribute","title",["subexpr","t",["components.olv-toolbar.filter-button-text"],[],["loc",[null,[44,14],[44,63]]]]],["element","action",["toggleStateFilters"],[],["loc",[null,[45,8],[45,39]]]],["block","if",[["get","filters",["loc",[null,[48,12],[48,19]]]]],[],0,null,["loc",[null,[48,6],[57,13]]]]],locals:[],templates:[child0]};})();var child5=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":60,"column":2},"end":{"line":85,"column":2}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui action input");var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","block-action-input");var el3=dom.createTextNode("\n        ");dom.appendChild(el2,el3);var el3=dom.createElement("input");dom.setAttribute(el3,"type","text");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","search icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","remove icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element32=dom.childAt(fragment,[1]);var element33=dom.childAt(element32,[1,1]);var element34=dom.childAt(element32,[3]);var element35=dom.childAt(element32,[5]);var morphs=new Array(9);morphs[0] = dom.createAttrMorph(element33,'value');morphs[1] = dom.createAttrMorph(element33,'placeholder');morphs[2] = dom.createAttrMorph(element33,'onkeyup');morphs[3] = dom.createAttrMorph(element34,'class');morphs[4] = dom.createAttrMorph(element34,'title');morphs[5] = dom.createElementMorph(element34);morphs[6] = dom.createAttrMorph(element35,'class');morphs[7] = dom.createAttrMorph(element35,'title');morphs[8] = dom.createElementMorph(element35);return morphs;},statements:[["attribute","value",["get","filterByAnyMatchText",["loc",[null,[65,18],[65,38]]]]],["attribute","placeholder",["subexpr","t",["components.olv-toolbar.filter-by-any-match-placeholder"],[],["loc",[null,[66,22],[66,84]]]]],["attribute","onkeyup",["subexpr","action",["filterByAnyMatch"],[],["loc",[null,[67,18],[67,47]]]]],["attribute","class",["concat",["ui ",["get","buttonClass",["loc",[null,[72,20],[72,31]]]]," icon button search-button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.search-button-text"],[],["loc",[null,[73,14],[73,63]]]]],["element","action",["filterByAnyMatch"],[],["loc",[null,[74,8],[74,37]]]],["attribute","class",["concat",["ui ",["get","buttonClass",["loc",[null,[79,20],[79,31]]]]," icon button clear-search-button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.clear-search-button-text"],[],["loc",[null,[80,14],[80,69]]]]],["element","action",["removeFilter"],[],["loc",[null,[81,8],[81,33]]]]],locals:[],templates:[]};})();var child6=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":86,"column":2},"end":{"line":100,"column":2}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui buttons export-config");var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","large file excel outline icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element30=dom.childAt(fragment,[1]);var element31=dom.childAt(element30,[1]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element31,'class');morphs[1] = dom.createAttrMorph(element31,'title');morphs[2] = dom.createElementMorph(element31);morphs[3] = dom.createMorphAt(element30,3,3);return morphs;},statements:[["attribute","class",["concat",["ui button icon export-button ",["get","buttonClass",["loc",[null,[90,46],[90,57]]]]]]],["attribute","title",["subexpr","t",["components.olv-toolbar.export-excel-button-text"],[],["loc",[null,[91,14],[91,69]]]]],["element","action",["showExportDialog"],[],["loc",[null,[92,8],[92,37]]]],["inline","flexberry-menu",[],["items",["subexpr","@mut",[["get","exportExcelItems",["loc",[null,[96,14],[96,30]]]]],[],[]],"onItemClick",["subexpr","action",["onExportMenuItemClick"],[],["loc",[null,[97,20],[97,52]]]]],["loc",[null,[95,6],[98,8]]]]],locals:[],templates:[]};})();var child7=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":110,"column":6},"end":{"line":115,"column":6}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","flexberry-menu",[],["items",["subexpr","@mut",[["get","colsSettingsItems",["loc",[null,[112,16],[112,33]]]]],[],[]],"onItemClick",["subexpr","action",["onMenuItemClick"],[],["loc",[null,[113,22],[113,48]]]]],["loc",[null,[111,8],[114,10]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":101,"column":2},"end":{"line":117,"column":2}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui buttons cols-config");var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");dom.setAttribute(el2,"class","ui icon button config-button");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","large table icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element28=dom.childAt(fragment,[1]);var element29=dom.childAt(element28,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element29,'title');morphs[1] = dom.createElementMorph(element29);morphs[2] = dom.createMorphAt(element28,3,3);return morphs;},statements:[["attribute","title",["subexpr","t",["components.colsconfig-dialog-content.title"],[],["loc",[null,[106,14],[106,64]]]]],["element","action",["showConfigDialog"],[],["loc",[null,[107,8],[107,37]]]],["block","if",[["get","colsSettingsItems",["loc",[null,[110,12],[110,29]]]]],[],0,null,["loc",[null,[110,6],[115,13]]]]],locals:[],templates:[child0]};})();var child8=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":125,"column":6},"end":{"line":128,"column":6}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("i");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n        ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element26=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element26,'class');morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);return morphs;},statements:[["attribute","class",["get","customButton.iconClasses",["loc",[null,[126,19],[126,43]]]]],["content","customButton.buttonName",["loc",[null,[127,8],[127,35]]]]],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":128,"column":6},"end":{"line":130,"column":6}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["content","customButton.buttonName",["loc",[null,[129,8],[129,35]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":130,"column":6},"end":{"line":132,"column":6}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n      ");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","t",["components.olv-toolbar.custom-button-text"],[],["loc",[null,[131,8],[131,57]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":128,"column":6},"end":{"line":132,"column":6}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","customButton.buttonName",["loc",[null,[128,16],[128,39]]]]],[],0,1,["loc",[null,[128,6],[132,6]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":118,"column":2},"end":{"line":134,"column":2}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element27=dom.childAt(fragment,[1]);var morphs=new Array(5);morphs[0] = dom.createAttrMorph(element27,'class');morphs[1] = dom.createAttrMorph(element27,'title');morphs[2] = dom.createAttrMorph(element27,'disabled');morphs[3] = dom.createElementMorph(element27);morphs[4] = dom.createMorphAt(element27,1,1);return morphs;},statements:[["attribute","class",["concat",["ui ",["subexpr","if",[["get","customButton.buttonClasses",["loc",[null,[121,21],[121,47]]]],["get","customButton.buttonClasses",["loc",[null,[121,48],[121,74]]]]],[],["loc",[null,[121,16],[121,76]]]]," button"]]],["attribute","title",["subexpr","if",[["get","customButton.buttonTitle",["loc",[null,[122,17],[122,41]]]],["get","customButton.buttonTitle",["loc",[null,[122,42],[122,66]]]]],[],["loc",[null,[122,12],[122,68]]]]],["attribute","disabled",["get","customButton.disabled",["loc",[null,[123,17],[123,38]]]]],["element","action",["customButtonAction",["get","customButton.buttonAction",["loc",[null,[124,36],[124,61]]]]],[],["loc",[null,[124,6],[124,63]]]],["block","if",[["get","customButton.iconClasses",["loc",[null,[125,12],[125,36]]]]],[],0,1,["loc",[null,[125,6],[132,13]]]]],locals:["customButton"],templates:[child0,child1]};})();var child9=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":186,"column":14},"end":{"line":194,"column":14}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","sort icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element23=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element23,'class');morphs[1] = dom.createAttrMorph(element23,'title');morphs[2] = dom.createElementMorph(element23);return morphs;},statements:[["attribute","class",["concat",["ui clear-sorting-button-mobile ",["get","buttonClass",["loc",[null,[189,58],[189,69]]]]," button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.clear-sorting-button-text"],[],["loc",[null,[190,24],[190,80]]]]],["element","action",["clearSorting"],["on","touchEnd"],["loc",[null,[191,18],[191,57]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":171,"column":12},"end":{"line":195,"column":12}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("              ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","check-square-o icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n              ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n              ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","check-all-square-o icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n              ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element24=dom.childAt(fragment,[1]);var element25=dom.childAt(fragment,[3]);var morphs=new Array(7);morphs[0] = dom.createAttrMorph(element24,'class');morphs[1] = dom.createAttrMorph(element24,'title');morphs[2] = dom.createElementMorph(element24);morphs[3] = dom.createAttrMorph(element25,'class');morphs[4] = dom.createAttrMorph(element25,'title');morphs[5] = dom.createElementMorph(element25);morphs[6] = dom.createMorphAt(fragment,5,5,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["attribute","class",["concat",["ui check-all-at-page-button-mobile ",["get","buttonClass",["loc",[null,[174,60],[174,71]]]]," ",["subexpr","if",[["subexpr","or",[["get","readonly",["loc",[null,[174,83],[174,91]]]],["get","allSelect",["loc",[null,[174,92],[174,101]]]]],[],["loc",[null,[174,79],[174,102]]]],"disabled"],[],["loc",[null,[174,74],[174,115]]]]," button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.check-all-at-page-button-text"],[],["loc",[null,[175,22],[175,82]]]]],["element","action",["checkAllAtPage"],["on","touchEnd"],["loc",[null,[176,16],[176,57]]]],["attribute","class",["concat",["ui check-all-button-mobile ",["get","buttonClass",["loc",[null,[181,52],[181,63]]]]," ",["subexpr","if",[["get","allSelect",["loc",[null,[181,71],[181,80]]]],"activated"],[],["loc",[null,[181,66],[181,94]]]]," ",["subexpr","if",[["get","readonly",["loc",[null,[181,100],[181,108]]]],"disabled"],[],["loc",[null,[181,95],[181,121]]]]," button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.check-all-button-text"],[],["loc",[null,[182,22],[182,74]]]]],["element","action",["checkAll"],["on","touchEnd"],["loc",[null,[183,16],[183,51]]]],["block","if",[["get","defaultSortingButton",["loc",[null,[186,20],[186,40]]]]],[],0,null,["loc",[null,[186,14],[194,21]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":169,"column":8},"end":{"line":197,"column":8}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("th");dom.setAttribute(el1,"class","object-list-view-operations collapsing");dom.setAttribute(el1,"data-olv-header-property-name","OlvRowToolbar");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("          ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),1,1);return morphs;},statements:[["block","if",[["get","showCheckBoxInRow",["loc",[null,[171,18],[171,35]]]]],[],0,null,["loc",[null,[171,12],[195,19]]]]],locals:[],templates:[child0]};})();var child10=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":203,"column":16},"end":{"line":205,"column":16}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","t",[["get","column.keyLocale",["loc",[null,[204,22],[204,38]]]]],[],["loc",[null,[204,18],[204,40]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":205,"column":16},"end":{"line":207,"column":16}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["content","column.header",["loc",[null,[206,18],[206,35]]]]],locals:[],templates:[]};})();var child2=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":211,"column":20},"end":{"line":215,"column":20}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");var el2=dom.createTextNode("\n                      ▲");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element20=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element20,'title');morphs[1] = dom.createMorphAt(element20,1,1);return morphs;},statements:[["attribute","title",["concat",[["subexpr","t",["components.object-list-view.sort-ascending"],[],["loc",[null,[212,34],[212,84]]]]]]],["content","column.sortNumber",["loc",[null,[213,23],[213,44]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":215,"column":20},"end":{"line":219,"column":20}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");var el2=dom.createTextNode("\n                      ▼");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element19=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element19,'title');morphs[1] = dom.createMorphAt(element19,1,1);return morphs;},statements:[["attribute","title",["concat",[["subexpr","t",["components.object-list-view.sort-descending"],[],["loc",[null,[216,34],[216,85]]]]]]],["content","column.sortNumber",["loc",[null,[217,23],[217,44]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":209,"column":16},"end":{"line":221,"column":16}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"style","float:right;");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("                  ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),1,1);return morphs;},statements:[["block","if",[["get","column.sortAscending",["loc",[null,[211,26],[211,46]]]]],[],0,1,["loc",[null,[211,20],[219,27]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":199,"column":10},"end":{"line":224,"column":10}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("th");dom.setAttribute(el1,"class","dt-head-left me class");var el2=dom.createTextNode("\n              ");dom.appendChild(el1,el2);var el2=dom.createElement("div");var el3=dom.createTextNode("\n                ");dom.appendChild(el2,el3);var el3=dom.createElement("span");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("                ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("              ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element21=dom.childAt(fragment,[1]);var element22=dom.childAt(element21,[1]);var morphs=new Array(5);morphs[0] = dom.createAttrMorph(element21,'onclick');morphs[1] = dom.createAttrMorph(element22,'data-olv-header-property-name');morphs[2] = dom.createAttrMorph(element22,'title');morphs[3] = dom.createMorphAt(dom.childAt(element22,[1]),1,1);morphs[4] = dom.createMorphAt(element22,3,3);return morphs;},statements:[["attribute","onclick",["subexpr","action",["headerCellClick",["get","column",["loc",[null,[200,82],[200,88]]]]],[],["loc",[null,[200,54],[200,91]]]]],["attribute","data-olv-header-property-name",["get","column.propName",["loc",[null,[201,51],[201,66]]]]],["attribute","title",["get","sortTitleCompute",["loc",[null,[201,77],[201,93]]]]],["block","if",[["get","column.keyLocale",["loc",[null,[203,22],[203,38]]]]],[],0,1,["loc",[null,[203,16],[207,23]]]],["block","if",[["get","column.sorted",["loc",[null,[209,22],[209,35]]]]],[],2,null,["loc",[null,[209,16],[221,23]]]]],locals:[],templates:[child0,child1,child2]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":198,"column":8},"end":{"line":225,"column":8}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","column.hide",["loc",[null,[199,20],[199,31]]]]],[],0,null,["loc",[null,[199,10],[224,21]]]]],locals:["column"],templates:[child0]};})();var child11=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":226,"column":8},"end":{"line":228,"column":8}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("th");dom.setAttribute(el1,"class","object-list-view-menu collapsing");dom.setAttribute(el1,"data-olv-header-property-name","OlvRowMenu");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child12=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":234,"column":10},"end":{"line":236,"column":10}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("td");dom.setAttribute(el1,"rowspan","1");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":240,"column":16},"end":{"line":248,"column":16}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","component",["flexberry-dropdown"],["value",["subexpr","@mut",[["get","column.filter.condition",["loc",[null,[242,26],[242,49]]]]],[],[]],"items",["subexpr","@mut",[["get","column.filter.conditions",["loc",[null,[243,26],[243,50]]]]],[],[]],"class","compact fluid","placeholder","","needChecksOnValue",false],["loc",[null,[241,18],[247,20]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":238,"column":12},"end":{"line":250,"column":12}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("              ");dom.appendChild(el0,el1);var el1=dom.createElement("td");dom.setAttribute(el1,"class","overflowed-cell");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("              ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element16=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element16,'style');morphs[1] = dom.createMorphAt(element16,1,1);return morphs;},statements:[["attribute","style",["get","defaultPaddingStyle",["loc",[null,[239,26],[239,45]]]]],["block","if",[["get","column.filter.conditions",["loc",[null,[240,22],[240,46]]]]],[],0,null,["loc",[null,[240,16],[248,23]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":237,"column":10},"end":{"line":251,"column":10}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","column.hide",["loc",[null,[238,22],[238,33]]]]],[],0,null,["loc",[null,[238,12],[250,23]]]]],locals:["column"],templates:[child0]};})();var child2=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":252,"column":10},"end":{"line":254,"column":10}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("td");dom.setAttribute(el1,"rowspan","1");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child3=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":257,"column":10},"end":{"line":259,"column":10}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("td");dom.setAttribute(el1,"rowspan","1");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child4=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":263,"column":16},"end":{"line":282,"column":16}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","fluid action input ui");var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");dom.setAttribute(el2,"class","ui button");var el3=dom.createTextNode("\n                      ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","remove icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                    ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element13=dom.childAt(fragment,[1]);var element14=dom.childAt(element13,[3]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(element13,1,1);morphs[1] = dom.createAttrMorph(element14,'title');morphs[2] = dom.createElementMorph(element14);return morphs;},statements:[["inline","component",[["get","column.filter.component.name",["loc",[null,[265,32],[265,60]]]]],["value",["subexpr","@mut",[["get","column.filter.pattern",["loc",[null,[266,28],[266,49]]]]],[],[]],"readonly",["subexpr","or",[["subexpr","eq",[["get","column.filter.condition",["loc",[null,[268,28],[268,51]]]],"empty"],[],["loc",[null,[268,24],[268,60]]]],["subexpr","eq",[["get","column.filter.condition",["loc",[null,[269,28],[269,51]]]],"nempty"],[],["loc",[null,[269,24],[269,61]]]]],[],["loc",[null,[267,31],[270,23]]]],"dynamicProperties",["subexpr","@mut",[["get","column.filter.component.properties",["loc",[null,[271,40],[271,74]]]]],[],[]]],["loc",[null,[265,20],[272,22]]]],["attribute","title",["subexpr","t",["components.object-list-view.clear-filter-in-column"],[],["loc",[null,[276,28],[276,86]]]]],["element","action",["clearFilterForColumn",["get","column.filter",["loc",[null,[277,54],[277,67]]]]],[],["loc",[null,[277,22],[277,69]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":261,"column":12},"end":{"line":284,"column":12}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("              ");dom.appendChild(el0,el1);var el1=dom.createElement("td");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("              ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element15=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element15,'style');morphs[1] = dom.createAttrMorph(element15,'class');morphs[2] = dom.createMorphAt(element15,1,1);return morphs;},statements:[["attribute","style",["get","defaultPaddingStyle",["loc",[null,[262,26],[262,45]]]]],["attribute","class",["concat",[["subexpr","if",[["subexpr","array-contains",[["get","overflowedComponents",["loc",[null,[262,76],[262,96]]]],["get","column.filter.component.name",["loc",[null,[262,97],[262,125]]]]],[],["loc",[null,[262,60],[262,126]]]],"overflowed-cell"],[],["loc",[null,[262,55],[262,146]]]]]]],["block","if",[["get","column.filter.component.name",["loc",[null,[263,22],[263,50]]]]],[],0,null,["loc",[null,[263,16],[282,23]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":260,"column":10},"end":{"line":285,"column":10}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","column.hide",["loc",[null,[261,22],[261,33]]]]],[],0,null,["loc",[null,[261,12],[284,23]]]]],locals:["column"],templates:[child0]};})();var child5=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":286,"column":10},"end":{"line":288,"column":10}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("td");dom.setAttribute(el1,"rowspan","1");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":232,"column":6},"end":{"line":290,"column":6}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n        ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");dom.setAttribute(el1,"class","object-list-view-filters");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element17=dom.childAt(fragment,[1]);var element18=dom.childAt(fragment,[3]);var morphs=new Array(6);morphs[0] = dom.createMorphAt(element17,1,1);morphs[1] = dom.createMorphAt(element17,2,2);morphs[2] = dom.createMorphAt(element17,3,3);morphs[3] = dom.createMorphAt(element18,1,1);morphs[4] = dom.createMorphAt(element18,2,2);morphs[5] = dom.createMorphAt(element18,3,3);return morphs;},statements:[["block","if",[["get","showHelperColumn",["loc",[null,[234,16],[234,32]]]]],[],0,null,["loc",[null,[234,10],[236,17]]]],["block","each",[["get","columns",["loc",[null,[237,18],[237,25]]]]],[],1,null,["loc",[null,[237,10],[251,19]]]],["block","if",[["get","showMenuColumn",["loc",[null,[252,16],[252,30]]]]],[],2,null,["loc",[null,[252,10],[254,17]]]],["block","if",[["get","showHelperColumn",["loc",[null,[257,16],[257,32]]]]],[],3,null,["loc",[null,[257,10],[259,17]]]],["block","each",[["get","columns",["loc",[null,[260,18],[260,25]]]]],[],4,null,["loc",[null,[260,10],[285,19]]]],["block","if",[["get","showMenuColumn",["loc",[null,[286,16],[286,30]]]]],[],5,null,["loc",[null,[286,10],[288,17]]]]],locals:[],templates:[child0,child1,child2,child3,child4,child5]};})();var child13=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":291,"column":6},"end":{"line":297,"column":6}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("td");dom.setAttribute(el2,"style","text-align:center;");var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element12=dom.childAt(fragment,[1,1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element12,'colspan');morphs[1] = dom.createMorphAt(element12,1,1);return morphs;},statements:[["attribute","colspan",["concat",[["get","colspan",["loc",[null,[293,25],[293,32]]]]]]],["content","placeholder",["loc",[null,[294,14],[294,29]]]]],locals:[],templates:[]};})();var child14=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":304,"column":20},"end":{"line":308,"column":20}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","cell");var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element8=dom.childAt(fragment,[1,1]);var morphs=new Array(1);morphs[0] = dom.createAttrMorph(element8,'class');return morphs;},statements:[["attribute","class",["concat",["asterisk small red icon ",["subexpr","unless",[["get","record.data.hasDirtyAttributes",["loc",[null,[306,67],[306,97]]]],"transparent"],[],["loc",[null,[306,58],[306,113]]]]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":309,"column":20},"end":{"line":317,"column":20}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","cell");var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),1,1);return morphs;},statements:[["inline","flexberry-checkbox",[],["readonly",["subexpr","or",[["get","readonly",["loc",[null,[312,39],[312,47]]]],["subexpr","not",[["get","record.rowConfig.canBeSelected",["loc",[null,[312,53],[312,83]]]]],[],["loc",[null,[312,48],[312,84]]]],["get","allSelect",["loc",[null,[312,85],[312,94]]]]],[],["loc",[null,[312,35],[312,95]]]],"onChange",["subexpr","action",["selectRow",["get","record",["loc",[null,[313,55],[313,61]]]]],[],["loc",[null,[313,35],[313,62]]]],"value",["subexpr","@mut",[["get","record.selected",["loc",[null,[314,32],[314,47]]]]],[],[]]],["loc",[null,[311,24],[315,26]]]]],locals:[],templates:[]};})();var child2=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":318,"column":20},"end":{"line":324,"column":20}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","cell");var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");var el3=dom.createTextNode("\n                          ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","minus icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                        ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element7=dom.childAt(fragment,[1,1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element7,'class');morphs[1] = dom.createElementMorph(element7);return morphs;},statements:[["attribute","class",["concat",["ui ui-delete ",["get","buttonClass",["loc",[null,[320,68],[320,79]]]]," ",["subexpr","if",[["subexpr","or",[["get","readonly",["loc",[null,[320,91],[320,99]]]],["subexpr","not",[["get","record.rowConfig.canBeDeleted",["loc",[null,[320,105],[320,134]]]]],[],["loc",[null,[320,100],[320,135]]]]],[],["loc",[null,[320,87],[320,136]]]],"disabled"],[],["loc",[null,[320,82],[320,149]]]]," button"]]],["element","action",["deleteRow",["get","record",["loc",[null,[320,179],[320,185]]]]],[],["loc",[null,[320,158],[320,187]]]]],locals:[],templates:[]};})();var child3=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":325,"column":20},"end":{"line":331,"column":20}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","cell");var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");var el3=dom.createTextNode("\n                          ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","edit icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                        ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element6=dom.childAt(fragment,[1,1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element6,'class');morphs[1] = dom.createElementMorph(element6);return morphs;},statements:[["attribute","class",["concat",["ui ui-edit ",["get","buttonClass",["loc",[null,[327,66],[327,77]]]]," ",["subexpr","if",[["get","readonly",["loc",[null,[327,85],[327,93]]]],"disabled"],[],["loc",[null,[327,80],[327,106]]]]," button"]]],["element","action",["objectListViewRowClick",["get","record",["loc",[null,[327,150],[327,156]]]],["subexpr","hash",[],["rowEdit",true],["loc",[null,[327,157],[327,176]]]]],[],["loc",[null,[327,115],[327,179]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":302,"column":16},"end":{"line":333,"column":16}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","object-list-view-helper-column-cell");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("                  ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element9=dom.childAt(fragment,[1]);var morphs=new Array(4);morphs[0] = dom.createMorphAt(element9,1,1);morphs[1] = dom.createMorphAt(element9,2,2);morphs[2] = dom.createMorphAt(element9,3,3);morphs[3] = dom.createMorphAt(element9,4,4);return morphs;},statements:[["block","if",[["get","showAsteriskInRow",["loc",[null,[304,26],[304,43]]]]],[],0,null,["loc",[null,[304,20],[308,27]]]],["block","if",[["get","showCheckBoxInRow",["loc",[null,[309,26],[309,43]]]]],[],1,null,["loc",[null,[309,20],[317,27]]]],["block","if",[["get","showDeleteButtonInRow",["loc",[null,[318,26],[318,47]]]]],[],2,null,["loc",[null,[318,20],[324,27]]]],["block","if",[["get","showEditButtonInRow",["loc",[null,[325,26],[325,45]]]]],[],3,null,["loc",[null,[325,20],[331,27]]]]],locals:[],templates:[child0,child1,child2,child3]};})();var child1=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":339,"column":20},"end":{"line":347,"column":20}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","component",[["get","column.cellComponent.componentName",["loc",[null,[340,34],[340,68]]]]],["dynamicProperties",["subexpr","@mut",[["get","column.cellComponent.componentProperties",["loc",[null,[341,42],[341,82]]]]],[],[]],"relatedModel",["subexpr","@mut",[["get","record.data",["loc",[null,[342,37],[342,48]]]]],[],[]],"value",["subexpr","mut",[["subexpr","get",[["get","record.data",["loc",[null,[343,40],[343,51]]]],["get","column.propName",["loc",[null,[343,52],[343,67]]]]],[],["loc",[null,[343,35],[343,68]]]]],[],["loc",[null,[343,30],[343,69]]]],"readonly",["subexpr","readonly-cell",[["get","record.rowConfig.readonlyColumns",["loc",[null,[344,48],[344,80]]]],["get","column.propName",["loc",[null,[344,81],[344,96]]]],["get","readonly",["loc",[null,[344,97],[344,105]]]],["get","column.cellComponent.componentProperties.readonly",["loc",[null,[344,106],[344,155]]]]],[],["loc",[null,[344,33],[344,156]]]],"required",["subexpr","@mut",[["get","required",["loc",[null,[345,33],[345,41]]]]],[],[]]],["loc",[null,[340,22],[346,24]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":347,"column":20},"end":{"line":354,"column":20}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","oveflow-text");var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),1,1);return morphs;},statements:[["inline","get-formatted",[["get","record.data",["loc",[null,[349,40],[349,51]]]],["get","column.propName",["loc",[null,[349,52],[349,67]]]]],["dateFormat",["subexpr","@mut",[["get","dateFormat",["loc",[null,[350,37],[350,47]]]]],[],[]],"moment",["subexpr","@mut",[["get","moment",["loc",[null,[351,33],[351,39]]]]],[],[]]],["loc",[null,[349,24],[352,26]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":336,"column":16},"end":{"line":356,"column":16}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createElement("td");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("                  ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element5=dom.childAt(fragment,[1]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element5,'class');morphs[1] = dom.createAttrMorph(element5,'style');morphs[2] = dom.createElementMorph(element5);morphs[3] = dom.createMorphAt(element5,1,1);return morphs;},statements:[["attribute","class",["concat",[["subexpr","if",[["subexpr","array-contains",[["get","overflowedComponents",["loc",[null,[337,50],[337,70]]]],["get","column.cellComponent.componentName",["loc",[null,[337,71],[337,105]]]]],[],["loc",[null,[337,34],[337,106]]]]," overflowed-cell"],[],["loc",[null,[337,29],[337,127]]]]]]],["attribute","style",["get","defaultPaddingStyle",["loc",[null,[338,92],[338,111]]]]],["element","action",["objectListViewRowClick",["get","record",["loc",[null,[338,54],[338,60]]]]],["preventDefault",false],["loc",[null,[338,20],[338,83]]]],["block","if",[["get","column.cellComponent.componentName",["loc",[null,[339,26],[339,60]]]]],[],0,1,["loc",[null,[339,20],[354,27]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":335,"column":14},"end":{"line":357,"column":14}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","column.hide",["loc",[null,[336,26],[336,37]]]]],[],0,null,["loc",[null,[336,16],[356,27]]]]],locals:["column"],templates:[child0]};})();var child2=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":363,"column":22},"end":{"line":368,"column":22}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");var el2=dom.createTextNode("\n                          ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","edit icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element2=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element2,'class');morphs[1] = dom.createElementMorph(element2);morphs[2] = dom.createMorphAt(dom.childAt(element2,[3]),0,0);return morphs;},statements:[["attribute","class",["concat",["item ",["subexpr","if",[["get","readonly",["loc",[null,[364,46],[364,54]]]],"disabled"],[],["loc",[null,[364,41],[364,67]]]]]]],["element","action",["objectListViewRowClick",["get","record",["loc",[null,[364,104],[364,110]]]],["subexpr","hash",[],["rowEdit",true],["loc",[null,[364,111],[364,130]]]]],[],["loc",[null,[364,69],[364,133]]]],["inline","t",["components.object-list-view.menu-in-row.edit-menu-item-title"],[],["loc",[null,[366,32],[366,100]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":369,"column":22},"end":{"line":374,"column":22}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");var el2=dom.createTextNode("\n                          ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","trash icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element1=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element1,'class');morphs[1] = dom.createElementMorph(element1);morphs[2] = dom.createMorphAt(dom.childAt(element1,[3]),0,0);return morphs;},statements:[["attribute","class",["concat",["item ",["subexpr","if",[["get","readonly",["loc",[null,[370,46],[370,54]]]],"disabled"],[],["loc",[null,[370,41],[370,67]]]]]]],["element","action",["deleteRow",["get","record",["loc",[null,[370,91],[370,97]]]]],[],["loc",[null,[370,69],[370,100]]]],["inline","t",["components.object-list-view.menu-in-row.delete-menu-item-title"],[],["loc",[null,[372,32],[372,102]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":358,"column":14},"end":{"line":378,"column":14}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("td");dom.setAttribute(el1,"class","object-list-view-menu");var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","right pointing ui icon dropdown button");var el3=dom.createTextNode("\n                    ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","list layout icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","left menu");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("                    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element3=dom.childAt(fragment,[1]);var element4=dom.childAt(element3,[1,3]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element3,'style');morphs[1] = dom.createMorphAt(element4,1,1);morphs[2] = dom.createMorphAt(element4,2,2);return morphs;},statements:[["attribute","style",["get","defaultPaddingStyle",["loc",[null,[359,58],[359,77]]]]],["block","if",[["subexpr","and",[["get","showEditMenuItemInRow",["loc",[null,[363,33],[363,54]]]],["get","record.rowConfig.canBeSelected",["loc",[null,[363,55],[363,85]]]]],[],["loc",[null,[363,28],[363,86]]]]],[],0,null,["loc",[null,[363,22],[368,29]]]],["block","if",[["subexpr","and",[["get","showDeleteMenuItemInRow",["loc",[null,[369,33],[369,56]]]],["get","record.rowConfig.canBeDeleted",["loc",[null,[369,57],[369,86]]]]],[],["loc",[null,[369,28],[369,87]]]]],[],1,null,["loc",[null,[369,22],[374,29]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":298,"column":8},"end":{"line":380,"column":8}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");var el2=dom.createTextNode("\n              ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createTextNode("\n                ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","hidden");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("              ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("            ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element10=dom.childAt(fragment,[1]);var element11=dom.childAt(element10,[1]);var morphs=new Array(7);morphs[0] = dom.createAttrMorph(element10,'class');morphs[1] = dom.createAttrMorph(element11,'class');morphs[2] = dom.createAttrMorph(element11,'style');morphs[3] = dom.createMorphAt(dom.childAt(element11,[1]),0,0);morphs[4] = dom.createMorphAt(element11,3,3);morphs[5] = dom.createMorphAt(element10,3,3);morphs[6] = dom.createMorphAt(element10,4,4);return morphs;},statements:[["attribute","class",["concat",[["get","record.rowConfig.customClass",["loc",[null,[299,25],[299,53]]]]]]],["attribute","class",["concat",["object-list-view-helper-column ",["subexpr","unless",[["get","showHelperColumn",["loc",[null,[300,65],[300,81]]]],"hidden"],[],["loc",[null,[300,56],[300,92]]]]]]],["attribute","style",["get","defaultPaddingStyle",["loc",[null,[300,102],[300,121]]]]],["content","record.key",["loc",[null,[301,36],[301,50]]]],["block","if",[["get","showHelperColumn",["loc",[null,[302,22],[302,38]]]]],[],0,null,["loc",[null,[302,16],[333,23]]]],["block","each",[["get","columns",["loc",[null,[335,22],[335,29]]]]],[],1,null,["loc",[null,[335,14],[357,23]]]],["block","if",[["get","showMenuColumn",["loc",[null,[358,20],[358,34]]]]],[],2,null,["loc",[null,[358,14],[378,21]]]]],locals:["record"],templates:[child0,child1,child2]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":297,"column":6},"end":{"line":381,"column":6}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","each",[["get","contentWithKeys",["loc",[null,[298,16],[298,31]]]]],["key","key"],0,null,["loc",[null,[298,8],[380,17]]]]],locals:[],templates:[child0]};})();var child15=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":389,"column":6},"end":{"line":391,"column":6}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui button");var el2=dom.createTextNode("...");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":392,"column":8},"end":{"line":394,"column":8}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui active button");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),0,0);return morphs;},statements:[["content","page.number",["loc",[null,[393,40],[393,55]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":394,"column":8},"end":{"line":396,"column":8}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"class","ui button");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element0=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element0);morphs[1] = dom.createMorphAt(element0,0,0);return morphs;},statements:[["element","action",["gotoPage",["get","this.attrs.gotoPage",["loc",[null,[395,70],[395,89]]]],["get","page.number",["loc",[null,[395,90],[395,101]]]]],[],["loc",[null,[395,50],[395,103]]]],["content","page.number",["loc",[null,[395,104],[395,119]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":391,"column":6},"end":{"line":397,"column":6}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","page.isCurrent",["loc",[null,[392,14],[392,28]]]]],[],0,1,["loc",[null,[392,8],[396,15]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":388,"column":4},"end":{"line":398,"column":4}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","page.isEllipsis",["loc",[null,[389,12],[389,27]]]]],[],0,1,["loc",[null,[389,6],[397,13]]]]],locals:["page"],templates:[child0,child1]};})();var child16=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":404,"column":8},"end":{"line":408,"column":8}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","concat",[["subexpr","t",["components.flexberry-objectlistview.showing-entries.showing"],[],["loc",[null,[406,12],[406,77]]]],["get","currentIntervalRecords",["loc",[null,[406,78],[406,100]]]],["subexpr","t",["components.flexberry-objectlistview.showing-entries.of"],[],["loc",[null,[406,101],[406,161]]]],["get","recordsTotalCount",["loc",[null,[406,162],[406,179]]]],["subexpr","t",["components.flexberry-objectlistview.showing-entries.entries"],[],["loc",[null,[406,180],[406,245]]]]],[],["loc",[null,[405,10],[407,12]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":402,"column":4},"end":{"line":410,"column":4}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","showing-entries");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),1,1);return morphs;},statements:[["block","if",[["subexpr","and",[["get","currentIntervalRecords",["loc",[null,[404,19],[404,41]]]],["get","recordsTotalCount",["loc",[null,[404,42],[404,59]]]]],[],["loc",[null,[404,14],[404,60]]]]],[],0,null,["loc",[null,[404,8],[408,15]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":{"name":"missing-wrapper","problems":["multiple-nodes"]},"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":1,"column":0},"end":{"line":414,"column":0}},"moduleName":"dummy/templates/mobile/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui secondary menu no-margin ");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","olv-toolbar-info-modal-dialog ui small basic modal");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","ui icon header");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("i");dom.setAttribute(el4,"class","olvt icon");dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","center aligned ui grid");var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);var el4=dom.createElement("button");dom.setAttribute(el4,"type","button");dom.setAttribute(el4,"class","ui icon button");dom.setAttribute(el4,"id","OLVToolbarInfoCopyButton");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("i");dom.setAttribute(el5,"class","copy icon");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n    ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","actions");var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","olv-toolbar-info-modal-dialog-ok-button ui approve green inverted button");var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);var el6=dom.createElement("i");dom.setAttribute(el6,"class","remove icon");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n      ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n    ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","ui form");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","olv-toolbar-info-modal-dialog-content center aligned ui field");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("textarea");dom.setAttribute(el5,"id","OLVToolbarInfoContent");dom.setAttribute(el5,"cols","80");dom.setAttribute(el5,"rows","20");var el6=dom.createComment("");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n\n");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","object-list-view-container");var el2=dom.createTextNode("\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("table");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("thead");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("tr");var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("tbody");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui secondary menu no-margin nav-bar");var el2=dom.createTextNode("\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","ui basic buttons");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("button");dom.setAttribute(el3,"type","button");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("    ");dom.appendChild(el2,el3);var el3=dom.createElement("button");dom.setAttribute(el3,"type","button");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","right menu");var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("    ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element43=dom.childAt(fragment,[0]);var element44=dom.childAt(element43,[11]);var element45=dom.childAt(element44,[3]);var element46=dom.childAt(element45,[1]);var element47=dom.childAt(fragment,[2,1]);var element48=dom.childAt(element47,[1,1]);var element49=dom.childAt(element47,[3]);var element50=dom.childAt(fragment,[4]);var element51=dom.childAt(element50,[1]);var element52=dom.childAt(element51,[1]);var element53=dom.childAt(element51,[5]);var element54=dom.childAt(element50,[3]);var morphs=new Array(28);morphs[0] = dom.createMorphAt(element43,1,1);morphs[1] = dom.createMorphAt(element43,2,2);morphs[2] = dom.createMorphAt(element43,3,3);morphs[3] = dom.createMorphAt(element43,4,4);morphs[4] = dom.createMorphAt(element43,5,5);morphs[5] = dom.createMorphAt(element43,6,6);morphs[6] = dom.createMorphAt(element43,7,7);morphs[7] = dom.createMorphAt(element43,8,8);morphs[8] = dom.createMorphAt(element43,9,9);morphs[9] = dom.createMorphAt(dom.childAt(element44,[1]),3,3);morphs[10] = dom.createAttrMorph(element46,'title');morphs[11] = dom.createElementMorph(element46);morphs[12] = dom.createMorphAt(element46,3,3);morphs[13] = dom.createMorphAt(dom.childAt(element45,[3,1]),3,3);morphs[14] = dom.createMorphAt(dom.childAt(element44,[5,1,1]),0,0);morphs[15] = dom.createAttrMorph(element47,'class');morphs[16] = dom.createMorphAt(element48,1,1);morphs[17] = dom.createMorphAt(element48,2,2);morphs[18] = dom.createMorphAt(element48,3,3);morphs[19] = dom.createMorphAt(element49,1,1);morphs[20] = dom.createMorphAt(element49,2,2);morphs[21] = dom.createAttrMorph(element52,'class');morphs[22] = dom.createElementMorph(element52);morphs[23] = dom.createMorphAt(element51,3,3);morphs[24] = dom.createAttrMorph(element53,'class');morphs[25] = dom.createElementMorph(element53);morphs[26] = dom.createMorphAt(element54,1,1);morphs[27] = dom.createMorphAt(element54,3,3);return morphs;},statements:[["block","if",[["get","refreshButton",["loc",[null,[2,8],[2,21]]]]],[],0,null,["loc",[null,[2,2],[11,9]]]],["block","if",[["get","createNewButton",["loc",[null,[12,8],[12,23]]]]],[],1,null,["loc",[null,[12,2],[20,9]]]],["block","if",[["get","deleteButton",["loc",[null,[21,8],[21,20]]]]],[],2,null,["loc",[null,[21,2],[29,9]]]],["block","if",[["get","availableHierarchicalMode",["loc",[null,[30,8],[30,33]]]]],[],3,null,["loc",[null,[30,2],[38,9]]]],["block","if",[["get","enableFilters",["loc",[null,[39,8],[39,21]]]]],[],4,null,["loc",[null,[39,2],[59,9]]]],["block","if",[["get","filterButton",["loc",[null,[60,8],[60,20]]]]],[],5,null,["loc",[null,[60,2],[85,9]]]],["block","if",[["get","exportExcelButton",["loc",[null,[86,8],[86,25]]]]],[],6,null,["loc",[null,[86,2],[100,9]]]],["block","if",[["get","colsConfigButton",["loc",[null,[101,8],[101,24]]]]],[],7,null,["loc",[null,[101,2],[117,9]]]],["block","each",[["get","customButtons",["loc",[null,[118,10],[118,23]]]]],[],8,null,["loc",[null,[118,2],[134,11]]]],["content","_infoModalDialogCaption",["loc",[null,[138,6],[138,33]]]],["attribute","title",["subexpr","t",["components.olv-toolbar.copy"],[],["loc",[null,[144,12],[144,47]]]]],["element","action",["copyJSONContent"],[],["loc",[null,[145,6],[145,34]]]],["inline","t",["components.olv-toolbar.copy"],[],["loc",[null,[148,8],[148,43]]]],["inline","t",["components.olv-toolbar.close"],[],["loc",[null,[153,8],[153,44]]]],["content","_infoModalDialogContent",["loc",[null,[159,65],[159,92]]]],["attribute","class",["concat",["object-list-view ui unstackable celled ",["subexpr","if",[["get","readonly",["loc",[null,[166,60],[166,68]]]],"readonly"],[],["loc",[null,[166,55],[166,81]]]]," ",["get","tableClass",["loc",[null,[166,84],[166,94]]]]," table"]]],["block","if",[["get","showHelperColumn",["loc",[null,[169,14],[169,30]]]]],[],9,null,["loc",[null,[169,8],[197,15]]]],["block","each",[["get","columns",["loc",[null,[198,16],[198,23]]]]],[],10,null,["loc",[null,[198,8],[225,17]]]],["block","if",[["get","showMenuColumn",["loc",[null,[226,14],[226,28]]]]],[],11,null,["loc",[null,[226,8],[228,15]]]],["block","if",[["get","showFilters",["loc",[null,[232,12],[232,23]]]]],[],12,null,["loc",[null,[232,6],[290,13]]]],["block","unless",[["get","content",["loc",[null,[291,16],[291,23]]]]],[],13,14,["loc",[null,[291,6],[381,17]]]],["attribute","class",["concat",["ui ",["subexpr","unless",[["get","hasPreviousPage",["loc",[null,[387,45],[387,60]]]],"disabled"],[],["loc",[null,[387,36],[387,73]]]]," button prev-page-button"]]],["element","action",["previousPage",["get","this.attrs.previousPage",["loc",[null,[387,123],[387,146]]]]],[],["loc",[null,[387,99],[387,148]]]],["block","each",[["get","pages",["loc",[null,[388,12],[388,17]]]]],[],15,null,["loc",[null,[388,4],[398,13]]]],["attribute","class",["concat",["ui ",["subexpr","unless",[["get","hasNextPage",["loc",[null,[399,45],[399,56]]]],"disabled"],[],["loc",[null,[399,36],[399,69]]]]," button next-page-button"]]],["element","action",["nextPage",["get","this.attrs.nextPage",["loc",[null,[399,115],[399,134]]]]],[],["loc",[null,[399,95],[399,136]]]],["block","if",[["get","showShowingEntries",["loc",[null,[402,10],[402,28]]]]],[],16,null,["loc",[null,[402,4],[410,11]]]],["inline","flexberry-dropdown",[],["items",["subexpr","@mut",[["get","perPageValues",["loc",[null,[411,31],[411,44]]]]],[],[]],"value",["subexpr","@mut",[["get","perPageValue",["loc",[null,[411,51],[411,63]]]]],[],[]],"class","compact selection","onChange",["subexpr","action",["perPageClick"],[],["loc",[null,[411,99],[411,122]]]],"needChecksOnValue",false,"direction","upward"],["loc",[null,[411,4],[411,167]]]]],locals:[],templates:[child0,child1,child2,child3,child4,child5,child6,child7,child8,child9,child10,child11,child12,child13,child14,child15,child16]};})());});
define("dummy/templates/mobile/components/object-list-view-row", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 8
              },
              "end": {
                "line": 10,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cell");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element8 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element8, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["asterisk small red icon ", ["subexpr", "unless", [["get", "record.data.hasDirtyAttributes", ["loc", [null, [8, 55], [8, 85]]]], "transparent"], [], ["loc", [null, [8, 46], [8, 101]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 8
              },
              "end": {
                "line": 19,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cell");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "or", [["get", "readonly", ["loc", [null, [14, 27], [14, 35]]]], ["subexpr", "not", [["get", "record.rowConfig.canBeSelected", ["loc", [null, [14, 41], [14, 71]]]]], [], ["loc", [null, [14, 36], [14, 72]]]], ["get", "allSelect", ["loc", [null, [14, 73], [14, 82]]]]], [], ["loc", [null, [14, 23], [14, 83]]]], "onChange", ["subexpr", "action", [["get", "selectRow", ["loc", [null, [15, 31], [15, 40]]]], ["get", "record", ["loc", [null, [15, 41], [15, 47]]]]], [], ["loc", [null, [15, 23], [15, 48]]]], "value", ["subexpr", "@mut", [["get", "record.selected", ["loc", [null, [16, 20], [16, 35]]]]], [], []]], ["loc", [null, [13, 12], [17, 14]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 21,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "object-list-view-helper-column-cell");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element9 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element9, 1, 1);
          morphs[1] = dom.createMorphAt(element9, 2, 2);
          return morphs;
        },
        statements: [["block", "if", [["get", "showAsteriskInRow", ["loc", [null, [6, 14], [6, 31]]]]], [], 0, null, ["loc", [null, [6, 8], [10, 15]]]], ["block", "if", [["get", "showCheckBoxInRow", ["loc", [null, [11, 14], [11, 31]]]]], [], 1, null, ["loc", [null, [11, 8], [19, 15]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 34,
              "column": 4
            },
            "end": {
              "line": 38,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element6 = dom.childAt(fragment, [1]);
          var element7 = dom.childAt(element6, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element6, 'class');
          morphs[1] = dom.createElementMorph(element6);
          morphs[2] = dom.createAttrMorph(element7, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui button icon mini ", ["get", "buttonClass", ["loc", [null, [35, 57], [35, 68]]]]]]], ["element", "action", ["expand"], ["bubbles", false], ["loc", [null, [35, 72], [35, 105]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "_expanded", ["loc", [null, [36, 23], [36, 32]]]], "minus", "plus"], [], ["loc", [null, [36, 18], [36, 49]]]], " hierarchy-expand icon"]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "edit icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element5, 'class');
          morphs[1] = dom.createAttrMorph(element5, 'disabled');
          morphs[2] = dom.createElementMorph(element5);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ui-edit object-list-view-row-edit-button mobile ", ["get", "buttonClass", ["loc", [null, [42, 68], [42, 79]]]], " ", ["subexpr", "if", [["get", "readonly", ["loc", [null, [42, 87], [42, 95]]]], "disabled"], [], ["loc", [null, [42, 82], [42, 108]]]], " button"]]], ["attribute", "disabled", ["get", "readonly", ["loc", [null, [43, 19], [43, 27]]]]], ["element", "action", ["onRowClick", ["get", "record", ["loc", [null, [44, 30], [44, 36]]]], ["subexpr", "hash", [], ["column", null, "columnIndex", null, "rowEdit", true], ["loc", [null, [44, 37], [44, 85]]]]], ["bubbles", false], ["loc", [null, [44, 8], [44, 101]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 48,
              "column": 4
            },
            "end": {
              "line": 56,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "copy icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element4, 'class');
          morphs[1] = dom.createAttrMorph(element4, 'disabled');
          morphs[2] = dom.createElementMorph(element4);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ui-edit object-list-view-row-prototype-button mobile ", ["get", "buttonClass", ["loc", [null, [51, 73], [51, 84]]]], " ", ["subexpr", "if", [["get", "readonly", ["loc", [null, [51, 92], [51, 100]]]], "disabled"], [], ["loc", [null, [51, 87], [51, 113]]]], " button"]]], ["attribute", "disabled", ["get", "readonly", ["loc", [null, [52, 19], [52, 27]]]]], ["element", "action", [["get", "createNewByPrototype", ["loc", [null, [53, 17], [53, 37]]]], ["subexpr", "get", [["get", "record", ["loc", [null, [53, 43], [53, 49]]]], "data.id"], [], ["loc", [null, [53, 38], [53, 60]]]]], ["bubbles", false], ["loc", [null, [53, 8], [53, 76]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 57,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "minus icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element3, 'class');
          morphs[1] = dom.createAttrMorph(element3, 'disabled');
          morphs[2] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ui-edit object-list-view-row-delete-button mobile ", ["get", "buttonClass", ["loc", [null, [60, 70], [60, 81]]]], " ", ["subexpr", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [60, 93], [60, 101]]]], ["subexpr", "not", [["get", "record.rowConfig.canBeDeleted", ["loc", [null, [60, 107], [60, 136]]]]], [], ["loc", [null, [60, 102], [60, 137]]]]], [], ["loc", [null, [60, 89], [60, 138]]]], "disabled"], [], ["loc", [null, [60, 84], [60, 151]]]], " button"]]], ["attribute", "disabled", ["subexpr", "or", [["get", "readonly", ["loc", [null, [61, 22], [61, 30]]]], ["subexpr", "not", [["get", "record.rowConfig.canBeDeleted", ["loc", [null, [61, 36], [61, 65]]]]], [], ["loc", [null, [61, 31], [61, 66]]]]], [], ["loc", [null, [61, 17], [61, 68]]]]], ["element", "action", [["get", "deleteRow", ["loc", [null, [62, 17], [62, 26]]]], ["get", "record", ["loc", [null, [62, 27], [62, 33]]]]], ["bubbles", false], ["loc", [null, [62, 8], [62, 49]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 72,
                "column": 10
              },
              "end": {
                "line": 77,
                "column": 10
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "item");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "edit icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
            return morphs;
          },
          statements: [["element", "action", [["get", "rowClick", ["loc", [null, [73, 40], [73, 48]]]], ["get", "record", ["loc", [null, [73, 49], [73, 55]]]]], [], ["loc", [null, [73, 30], [73, 58]]]], ["inline", "t", ["components.object-list-view.menu-in-row.edit-menu-item-title"], [], ["loc", [null, [75, 20], [75, 88]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 78,
                "column": 10
              },
              "end": {
                "line": 83,
                "column": 10
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "item");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "trash icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
            return morphs;
          },
          statements: [["element", "action", [["get", "deleteRow", ["loc", [null, [79, 40], [79, 49]]]], ["get", "record", ["loc", [null, [79, 50], [79, 56]]]]], [], ["loc", [null, [79, 30], [79, 59]]]], ["inline", "t", ["components.object-list-view.menu-in-row.delete-menu-item-title"], [], ["loc", [null, [81, 20], [81, 90]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 67,
              "column": 2
            },
            "end": {
              "line": 87,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          dom.setAttribute(el1, "class", "object-list-view-menu");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "right pointing ui icon dropdown button");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "list layout icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "left menu");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1, 1, 3]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element2, 1, 1);
          morphs[1] = dom.createMorphAt(element2, 2, 2);
          return morphs;
        },
        statements: [["block", "if", [["get", "showEditMenuItemInRow", ["loc", [null, [72, 16], [72, 37]]]]], [], 0, null, ["loc", [null, [72, 10], [77, 17]]]], ["block", "if", [["get", "showDeleteMenuItemInRow", ["loc", [null, [78, 16], [78, 39]]]]], [], 1, null, ["loc", [null, [78, 10], [83, 17]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child6 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 90,
                "column": 2
              },
              "end": {
                "line": 118,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "object-list-view-row", [], ["record", ["subexpr", "@mut", [["get", "record", ["loc", [null, [92, 13], [92, 19]]]]], [], []], "columns", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [93, 14], [93, 21]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [94, 15], [94, 23]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [95, 15], [95, 23]]]]], [], []], "showMenuColumn", ["subexpr", "@mut", [["get", "showMenuColumn", ["loc", [null, [96, 21], [96, 35]]]]], [], []], "showHelperColumn", ["subexpr", "@mut", [["get", "showHelperColumn", ["loc", [null, [97, 23], [97, 39]]]]], [], []], "defaultRowConfig", ["subexpr", "@mut", [["get", "defaultRowConfig", ["loc", [null, [98, 23], [98, 39]]]]], [], []], "showValidationMessages", ["subexpr", "@mut", [["get", "showValidationMessages", ["loc", [null, [99, 29], [99, 51]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [100, 24], [100, 41]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [101, 24], [101, 41]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [102, 28], [102, 49]]]]], [], []], "showEditButtonInRow", ["subexpr", "@mut", [["get", "showEditButtonInRow", ["loc", [null, [103, 26], [103, 45]]]]], [], []], "showPrototypeButtonInRow", ["subexpr", "@mut", [["get", "showPrototypeButtonInRow", ["loc", [null, [104, 31], [104, 55]]]]], [], []], "isParentRecordPropertyName", ["subexpr", "@mut", [["get", "isParentRecordPropertyName", ["loc", [null, [105, 33], [105, 59]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "inHierarchicalMode", ["loc", [null, [106, 25], [106, 43]]]]], [], []], "inExpandMode", ["subexpr", "unbound", [["get", "inExpandMode", ["loc", [null, [107, 28], [107, 40]]]]], [], ["loc", [null, [107, 19], [107, 41]]]], "singleColumnCellComponent", ["subexpr", "@mut", [["get", "singleColumnCellComponent", ["loc", [null, [108, 32], [108, 57]]]]], [], []], "loadRecords", ["subexpr", "@mut", [["get", "loadRecords", ["loc", [null, [109, 18], [109, 29]]]]], [], []], "rowClick", ["subexpr", "@mut", [["get", "rowClick", ["loc", [null, [110, 15], [110, 23]]]]], [], []], "selectRow", ["subexpr", "@mut", [["get", "selectRow", ["loc", [null, [111, 16], [111, 25]]]]], [], []], "deleteRow", ["subexpr", "@mut", [["get", "deleteRow", ["loc", [null, [112, 16], [112, 25]]]]], [], []], "createNewByPrototype", ["subexpr", "@mut", [["get", "createNewByPrototype", ["loc", [null, [113, 27], [113, 47]]]]], [], []], "_currentLevel", ["subexpr", "@mut", [["get", "_currentLevel", ["loc", [null, [114, 20], [114, 33]]]]], [], []], "hierarchicalIndent", ["subexpr", "@mut", [["get", "_hierarchicalIndent", ["loc", [null, [115, 25], [115, 44]]]]], [], []], "configurateRow", ["subexpr", "@mut", [["get", "configurateRow", ["loc", [null, [116, 21], [116, 35]]]]], [], []]], ["loc", [null, [91, 4], [117, 6]]]]],
          locals: ["record"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 89,
              "column": 0
            },
            "end": {
              "line": 119,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "records", ["loc", [null, [90, 10], [90, 17]]]]], ["key", "key"], 0, null, ["loc", [null, [90, 2], [118, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 120,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("tr");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("td");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "hidden");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("td");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element10 = dom.childAt(fragment, [0]);
        var element11 = dom.childAt(element10, [1]);
        var element12 = dom.childAt(element10, [3]);
        var morphs = new Array(13);
        morphs[0] = dom.createAttrMorph(element10, 'class');
        morphs[1] = dom.createAttrMorph(element11, 'class');
        morphs[2] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[3] = dom.createMorphAt(element11, 3, 3);
        morphs[4] = dom.createAttrMorph(element12, 'style');
        morphs[5] = dom.createElementMorph(element12);
        morphs[6] = dom.createMorphAt(element12, 1, 1);
        morphs[7] = dom.createMorphAt(element12, 3, 3);
        morphs[8] = dom.createMorphAt(element12, 4, 4);
        morphs[9] = dom.createMorphAt(element12, 5, 5);
        morphs[10] = dom.createMorphAt(element12, 6, 6);
        morphs[11] = dom.createMorphAt(element10, 5, 5);
        morphs[12] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", [["get", "record.rowConfig.customClass", ["loc", [null, [1, 13], [1, 41]]]]]]], ["attribute", "class", ["concat", ["object-list-view-helper-column ", ["subexpr", "unless", [["get", "showHelperColumn", ["loc", [null, [2, 53], [2, 69]]]], "hidden"], [], ["loc", [null, [2, 44], [2, 80]]]]]]], ["content", "record.key", ["loc", [null, [3, 24], [3, 38]]]], ["block", "if", [["get", "showHelperColumn", ["loc", [null, [4, 10], [4, 26]]]]], [], 0, null, ["loc", [null, [4, 4], [21, 11]]]], ["attribute", "style", ["concat", ["padding-left:", ["get", "hierarchicalIndent", ["loc", [null, [25, 26], [25, 44]]]], "px;"]]], ["element", "action", ["onRowClick", ["get", "record", ["loc", [null, [24, 26], [24, 32]]]], ["subexpr", "hash", [], ["column", ["get", "columns", ["loc", [null, [24, 46], [24, 53]]]]], ["loc", [null, [24, 33], [24, 54]]]]], ["preventDefault", false], ["loc", [null, [24, 4], [24, 77]]]], ["inline", "component", [["get", "singleColumnCellComponent.componentName", ["loc", [null, [26, 16], [26, 55]]]]], ["model", ["subexpr", "@mut", [["get", "record.data", ["loc", [null, [27, 12], [27, 23]]]]], [], []], "columns", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [28, 14], [28, 21]]]]], [], []], "showValidationMessages", ["subexpr", "@mut", [["get", "showValidationMessages", ["loc", [null, [29, 29], [29, 51]]]]], [], []], "hasEditableValues", ["subexpr", "@mut", [["get", "hasEditableValues", ["loc", [null, [30, 24], [30, 41]]]]], [], []], "dynamicProperties", ["subexpr", "@mut", [["get", "singleColumnCellComponent.componentProperties", ["loc", [null, [31, 24], [31, 69]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [32, 15], [32, 23]]]]], [], []]], ["loc", [null, [26, 4], [33, 6]]]], ["block", "if", [["subexpr", "and", [["get", "inHierarchicalMode", ["loc", [null, [34, 15], [34, 33]]]], ["get", "hasRecords", ["loc", [null, [34, 34], [34, 44]]]]], [], ["loc", [null, [34, 10], [34, 45]]]]], [], 1, null, ["loc", [null, [34, 4], [38, 11]]]], ["block", "if", [["get", "showEditButtonInRow", ["loc", [null, [39, 10], [39, 29]]]]], [], 2, null, ["loc", [null, [39, 4], [47, 11]]]], ["block", "if", [["get", "showPrototypeButtonInRow", ["loc", [null, [48, 10], [48, 34]]]]], [], 3, null, ["loc", [null, [48, 4], [56, 11]]]], ["block", "if", [["get", "showDeleteButtonInRow", ["loc", [null, [57, 10], [57, 31]]]]], [], 4, null, ["loc", [null, [57, 4], [65, 11]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [67, 8], [67, 22]]]]], [], 5, null, ["loc", [null, [67, 2], [87, 9]]]], ["block", "if", [["subexpr", "and", [["get", "_expanded", ["loc", [null, [89, 11], [89, 20]]]], ["get", "inHierarchicalMode", ["loc", [null, [89, 21], [89, 39]]]]], [], ["loc", [null, [89, 6], [89, 40]]]]], [], 6, null, ["loc", [null, [89, 0], [119, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6]
    };
  })());
});
define("dummy/templates/mobile/components/object-list-view", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 8
              },
              "end": {
                "line": 7,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("th");
            dom.setAttribute(el1, "class", "object-list-view-operations collapsing");
            dom.setAttribute(el1, "data-olv-header-property-name", "OlvRowToolbar");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 8
              },
              "end": {
                "line": 11,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("th");
            dom.setAttribute(el1, "class", "object-list-view-menu collapsing");
            dom.setAttribute(el1, "data-olv-header-property-name", "OlvRowMenu");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 14,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("thead");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("tr");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("th");
          dom.setAttribute(el3, "class", "dt-head-left me class");
          dom.setAttribute(el3, "data-olv-header-property-name", "OlvHeader");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element11 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element11, 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element11, [3]), 0, 0);
          morphs[2] = dom.createMorphAt(element11, 5, 5);
          return morphs;
        },
        statements: [["block", "if", [["get", "showHelperColumn", ["loc", [null, [5, 14], [5, 30]]]]], [], 0, null, ["loc", [null, [5, 8], [7, 15]]]], ["content", "singleColumnHeaderTitle", ["loc", [null, [8, 84], [8, 111]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [9, 14], [9, 28]]]]], [], 1, null, ["loc", [null, [9, 8], [11, 15]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 8
              },
              "end": {
                "line": 22,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "object-list-view-helper-column-cell");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element9 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element9, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["object-list-view-helper-column ", ["subexpr", "unless", [["get", "showHelperColumn", ["loc", [null, [19, 61], [19, 77]]]], "hidden"], [], ["loc", [null, [19, 52], [19, 88]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 27,
                  "column": 14
                },
                "end": {
                  "line": 39,
                  "column": 14
                }
              },
              "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "filter-operation");
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["inline", "flexberry-dropdown", [], ["value", ["subexpr", "@mut", [["get", "column.filter.condition", ["loc", [null, [30, 26], [30, 49]]]]], [], []], "items", ["subexpr", "@mut", [["get", "column.filter.conditions", ["loc", [null, [31, 26], [31, 50]]]]], [], []], "displayCaptions", ["subexpr", "not", [["subexpr", "is-array", [["get", "column.filter.conditions", ["loc", [null, [32, 51], [32, 75]]]]], [], ["loc", [null, [32, 41], [32, 76]]]]], [], ["loc", [null, [32, 36], [32, 77]]]], "class", "compact fluid", "placeholder", ["subexpr", "t", ["components.object-list-view.filter-condition"], [], ["loc", [null, [34, 32], [34, 82]]]], "needChecksOnValue", false, "onChange", ["subexpr", "action", ["filterConditionChanged", ["get", "column.filter", ["loc", [null, [36, 62], [36, 75]]]]], [], ["loc", [null, [36, 29], [36, 76]]]]], ["loc", [null, [29, 18], [37, 20]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 40,
                  "column": 14
                },
                "end": {
                  "line": 59,
                  "column": 14
                }
              },
              "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "fluid action input ui filter-value");
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("button");
              dom.setAttribute(el2, "type", "button");
              dom.setAttribute(el2, "class", "ui clear-filter button");
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("i");
              dom.setAttribute(el3, "class", "remove icon");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                  ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element6 = dom.childAt(fragment, [1]);
              var element7 = dom.childAt(element6, [3]);
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(element6, 1, 1);
              morphs[1] = dom.createAttrMorph(element7, 'title');
              morphs[2] = dom.createElementMorph(element7);
              return morphs;
            },
            statements: [["inline", "component", [["get", "column.filter.component.name", ["loc", [null, [42, 30], [42, 58]]]]], ["value", ["subexpr", "@mut", [["get", "column.filter.pattern", ["loc", [null, [43, 26], [43, 47]]]]], [], []], "readonly", ["subexpr", "or", [["subexpr", "eq", [["get", "column.filter.condition", ["loc", [null, [45, 26], [45, 49]]]], "empty"], [], ["loc", [null, [45, 22], [45, 58]]]], ["subexpr", "eq", [["get", "column.filter.condition", ["loc", [null, [46, 26], [46, 49]]]], "nempty"], [], ["loc", [null, [46, 22], [46, 59]]]]], [], ["loc", [null, [44, 29], [47, 21]]]], "dynamicProperties", ["subexpr", "@mut", [["get", "column.filter.component.properties", ["loc", [null, [48, 38], [48, 72]]]]], [], []]], ["loc", [null, [42, 18], [49, 20]]]], ["attribute", "title", ["subexpr", "t", ["components.object-list-view.clear-filter-in-column"], [], ["loc", [null, [53, 26], [53, 84]]]]], ["element", "action", ["clearFilterForColumn", ["get", "column.filter", ["loc", [null, [54, 52], [54, 65]]]]], [], ["loc", [null, [54, 20], [54, 67]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 24,
                "column": 10
              },
              "end": {
                "line": 61,
                "column": 10
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "inline fields filter");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(":");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element8 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(element8, 3, 3);
            morphs[2] = dom.createMorphAt(element8, 4, 4);
            return morphs;
          },
          statements: [["inline", "if", [["get", "column.keyLocale", ["loc", [null, [26, 26], [26, 42]]]], ["subexpr", "t", [["get", "column.keyLocale", ["loc", [null, [26, 46], [26, 62]]]]], [], ["loc", [null, [26, 43], [26, 63]]]], ["get", "column.header", ["loc", [null, [26, 64], [26, 77]]]]], [], ["loc", [null, [26, 21], [26, 79]]]], ["block", "if", [["get", "column.filter.conditions", ["loc", [null, [27, 20], [27, 44]]]]], [], 0, null, ["loc", [null, [27, 14], [39, 21]]]], ["block", "if", [["get", "column.filter.component.name", ["loc", [null, [40, 20], [40, 48]]]]], [], 1, null, ["loc", [null, [40, 14], [59, 21]]]]],
          locals: ["column"],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 63,
                "column": 8
              },
              "end": {
                "line": 65,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1, "class", "object-list-view-menu");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          dom.setAttribute(el1, "class", "object-list-view-filters");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "class", "overflowed-cell");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element10 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element10, 'onkeydown');
          morphs[1] = dom.createMorphAt(element10, 1, 1);
          morphs[2] = dom.createMorphAt(dom.childAt(element10, [3]), 1, 1);
          morphs[3] = dom.createMorphAt(element10, 5, 5);
          return morphs;
        },
        statements: [["attribute", "onkeydown", ["subexpr", "action", ["applyFiltersByEnter"], [], ["loc", [null, [17, 53], [17, 85]]]]], ["block", "if", [["get", "showHelperColumn", ["loc", [null, [18, 14], [18, 30]]]]], [], 0, null, ["loc", [null, [18, 8], [22, 15]]]], ["block", "each", [["get", "columns", ["loc", [null, [24, 18], [24, 25]]]]], [], 1, null, ["loc", [null, [24, 10], [61, 19]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [63, 14], [63, 28]]]]], [], 2, null, ["loc", [null, [63, 8], [65, 15]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 68,
              "column": 4
            },
            "end": {
              "line": 74,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "style", "text-align:center;");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element5, 'colspan');
          morphs[1] = dom.createMorphAt(element5, 1, 1);
          return morphs;
        },
        statements: [["attribute", "colspan", ["concat", [["get", "colspan", ["loc", [null, [70, 23], [70, 30]]]]]]], ["content", "placeholder", ["loc", [null, [71, 12], [71, 27]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 75,
                "column": 6
              },
              "end": {
                "line": 108,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "object-list-view-row", [], ["record", ["subexpr", "@mut", [["get", "record", ["loc", [null, [77, 17], [77, 23]]]]], [], []], "columns", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [78, 18], [78, 25]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [79, 19], [79, 27]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [80, 19], [80, 27]]]]], [], []], "showMenuColumn", ["subexpr", "@mut", [["get", "showMenuColumn", ["loc", [null, [81, 25], [81, 39]]]]], [], []], "showHelperColumn", ["subexpr", "@mut", [["get", "showHelperColumn", ["loc", [null, [82, 27], [82, 43]]]]], [], []], "defaultRowConfig", ["subexpr", "@mut", [["get", "defaultRowConfig", ["loc", [null, [83, 27], [83, 43]]]]], [], []], "showValidationMessages", ["subexpr", "@mut", [["get", "showValidationMessagesInRow", ["loc", [null, [84, 33], [84, 60]]]]], [], []], "showDeleteMenuItemInRow", ["subexpr", "@mut", [["get", "showDeleteMenuItemInRow", ["loc", [null, [85, 34], [85, 57]]]]], [], []], "showEditMenuItemInRow", ["subexpr", "@mut", [["get", "showEditMenuItemInRow", ["loc", [null, [86, 32], [86, 53]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [87, 28], [87, 45]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [88, 28], [88, 45]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [89, 32], [89, 53]]]]], [], []], "showEditButtonInRow", ["subexpr", "@mut", [["get", "showEditButtonInRow", ["loc", [null, [90, 30], [90, 49]]]]], [], []], "showPrototypeButtonInRow", ["subexpr", "@mut", [["get", "showPrototypeButtonInRow", ["loc", [null, [91, 35], [91, 59]]]]], [], []], "isParentRecordPropertyName", ["subexpr", "@mut", [["get", "isParentRecordPropertyName", ["loc", [null, [92, 37], [92, 63]]]]], [], []], "inExpandMode", ["subexpr", "unbound", [["get", "inExpandMode", ["loc", [null, [93, 32], [93, 44]]]]], [], ["loc", [null, [93, 23], [93, 45]]]], "hierarchicalIndent", ["subexpr", "@mut", [["get", "hierarchicalIndent", ["loc", [null, [94, 29], [94, 47]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "inHierarchicalMode", ["loc", [null, [95, 29], [95, 47]]]]], [], []], "singleColumnCellComponent", ["subexpr", "@mut", [["get", "singleColumnCellComponent", ["loc", [null, [96, 36], [96, 61]]]]], [], []], "loadRecords", ["subexpr", "@mut", [["get", "loadRecords", ["loc", [null, [97, 22], [97, 33]]]]], [], []], "doRenderData", ["subexpr", "@mut", [["get", "record.doRenderData", ["loc", [null, [98, 23], [98, 42]]]]], [], []], "rowClick", ["subexpr", "action", ["rowClick"], [], ["loc", [null, [99, 19], [99, 38]]]], "selectRow", ["subexpr", "action", ["selectRow"], [], ["loc", [null, [100, 20], [100, 40]]]], "deleteRow", ["subexpr", "action", ["deleteRow"], [], ["loc", [null, [101, 20], [101, 40]]]], "createNewByPrototype", ["subexpr", "@mut", [["get", "createNewByPrototype", ["loc", [null, [102, 31], [102, 51]]]]], [], []], "hierarchyPaging", ["subexpr", "@mut", [["get", "hierarchyPaging", ["loc", [null, [103, 26], [103, 41]]]]], [], []], "fixedHeader", ["subexpr", "@mut", [["get", "fixedHeader", ["loc", [null, [104, 22], [104, 33]]]]], [], []], "configurateRow", ["subexpr", "@mut", [["get", "configurateRow", ["loc", [null, [105, 25], [105, 39]]]]], [], []], "allSelect", ["subexpr", "@mut", [["get", "allSelect", ["loc", [null, [106, 20], [106, 29]]]]], [], []]], ["loc", [null, [76, 8], [107, 10]]]]],
          locals: ["record"],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 109,
                "column": 6
              },
              "end": {
                "line": 116,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "style", "text-align:center;");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "ui active centered inline loader");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element4, 'colspan');
            morphs[1] = dom.createMorphAt(element4, 3, 3);
            return morphs;
          },
          statements: [["attribute", "colspan", ["concat", [["get", "colspan", ["loc", [null, [111, 25], [111, 32]]]]]]], ["inline", "t", ["components.object-list-view.loading-text"], [], ["loc", [null, [113, 12], [113, 60]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 74,
              "column": 4
            },
            "end": {
              "line": 117,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "contentWithKeys", ["loc", [null, [75, 14], [75, 29]]]]], ["key", "key"], 0, null, ["loc", [null, [75, 6], [108, 15]]]], ["block", "if", [["get", "rowByRowLoadingProgress", ["loc", [null, [109, 12], [109, 35]]]]], [], 1, null, ["loc", [null, [109, 6], [116, 13]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 123,
                "column": 4
              },
              "end": {
                "line": 131,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "flexberry-menu", [], ["_skipDropdownInit", true, "onlyClickHandler", true, "items", ["subexpr", "@mut", [["get", "_checkRowsSettingsItems", ["loc", [null, [127, 14], [127, 37]]]]], [], []], "settings", ["subexpr", "hash", [], ["direction", "upward"], ["loc", [null, [128, 17], [128, 42]]]], "onItemClick", ["subexpr", "action", ["onCheckRowMenuItemClick"], [], ["loc", [null, [129, 20], [129, 54]]]]], ["loc", [null, [124, 6], [130, 8]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 131,
                "column": 4
              },
              "end": {
                "line": 139,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "check-square-o icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createAttrMorph(element0, 'title');
            morphs[2] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui check-all-at-page-button icon ", ["get", "buttonClass", ["loc", [null, [134, 50], [134, 61]]]], " ", ["subexpr", "if", [["get", "readonly", ["loc", [null, [134, 69], [134, 77]]]], "disabled"], [], ["loc", [null, [134, 64], [134, 90]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.check-all-at-page-button-text"], [], ["loc", [null, [135, 14], [135, 74]]]]], ["element", "action", ["checkAllAtPage"], [], ["loc", [null, [136, 8], [136, 35]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 121,
              "column": 0
            },
            "end": {
              "line": 161,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "check-rows-container");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2, "class", "count-selected-rows");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "delete icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "remove icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [5]);
          var element3 = dom.childAt(element1, [7]);
          var morphs = new Array(10);
          morphs[0] = dom.createMorphAt(element1, 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
          morphs[2] = dom.createAttrMorph(element2, 'class');
          morphs[3] = dom.createAttrMorph(element2, 'title');
          morphs[4] = dom.createAttrMorph(element2, 'disabled');
          morphs[5] = dom.createElementMorph(element2);
          morphs[6] = dom.createMorphAt(element2, 1, 1);
          morphs[7] = dom.createAttrMorph(element3, 'class');
          morphs[8] = dom.createAttrMorph(element3, 'title');
          morphs[9] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "not-eq", [["get", "class", ["loc", [null, [123, 18], [123, 23]]]], "groupedit-container"], [], ["loc", [null, [123, 10], [123, 46]]]]], [], 0, 1, ["loc", [null, [123, 4], [139, 11]]]], ["content", "_selectedCountMobileMenu", ["loc", [null, [141, 39], [141, 67]]]], ["attribute", "class", ["concat", ["ui delete-button ", ["get", "buttonClass", ["loc", [null, [145, 32], [145, 43]]]], " ", ["subexpr", "if", [["get", "readonly", ["loc", [null, [145, 51], [145, 59]]]], "disabled"], [], ["loc", [null, [145, 46], [145, 72]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.delete-button-text"], [], ["loc", [null, [146, 12], [146, 61]]]]], ["attribute", "disabled", ["get", "readonly", ["loc", [null, [147, 17], [147, 25]]]]], ["element", "action", ["deleteSelectedRow"], [], ["loc", [null, [148, 6], [148, 36]]]], ["inline", "t", ["components.olv-toolbar.delete-button-text"], [], ["loc", [null, [149, 8], [149, 57]]]], ["attribute", "class", ["concat", ["ui clear-select-button ", ["get", "buttonClass", ["loc", [null, [155, 38], [155, 49]]]], " circular icon button"]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.clear-select-button-text"], [], ["loc", [null, [156, 12], [156, 67]]]]], ["element", "action", ["clearSelectedRecords"], [], ["loc", [null, [157, 6], [157, 39]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 162,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("table");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tbody");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element12 = dom.childAt(fragment, [0]);
        var element13 = dom.childAt(element12, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element12, 'class');
        morphs[1] = dom.createMorphAt(element12, 1, 1);
        morphs[2] = dom.createMorphAt(element13, 1, 1);
        morphs[3] = dom.createMorphAt(element13, 2, 2);
        morphs[4] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["object-list-view ui unstackable celled ", ["subexpr", "if", [["get", "readonly", ["loc", [null, [1, 58], [1, 66]]]], "readonly"], [], ["loc", [null, [1, 53], [1, 79]]]], " ", ["get", "tableClass", ["loc", [null, [1, 82], [1, 92]]]], " table"]]], ["block", "if", [["get", "singleColumnHeaderTitle", ["loc", [null, [2, 8], [2, 31]]]]], [], 0, null, ["loc", [null, [2, 2], [14, 9]]]], ["block", "if", [["get", "showFilters", ["loc", [null, [16, 10], [16, 21]]]]], [], 1, null, ["loc", [null, [16, 4], [67, 11]]]], ["block", "unless", [["get", "content", ["loc", [null, [68, 14], [68, 21]]]]], [], 2, 3, ["loc", [null, [68, 4], [117, 15]]]], ["block", "if", [["subexpr", "and", [["get", "_selectedMobileMenu", ["loc", [null, [121, 11], [121, 30]]]], ["get", "showCheckBoxInRow", ["loc", [null, [121, 31], [121, 48]]]]], [], ["loc", [null, [121, 6], [121, 49]]]]], [], 4, null, ["loc", [null, [121, 0], [161, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("dummy/templates/mobile/sitemap-node", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/mobile/sitemap-node.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "partial", ["sitemap-node-content"], [], ["loc", [null, [3, 4], [3, 38]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/mobile/sitemap-node.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", [["get", "model.link", ["loc", [null, [2, 11], [2, 21]]]]], ["class", "item", "title", ["subexpr", "@mut", [["get", "model.title", ["loc", [null, [2, 41], [2, 52]]]]], [], []], "invokeAction", ["subexpr", "action", ["hideSidebar"], [], ["loc", [null, [2, 66], [2, 88]]]]], 0, null, ["loc", [null, [2, 0], [4, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/mobile/sitemap-node.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "item item-menu");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "item-plus");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "item-minus hidden");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element0, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element1, 'onclick');
          morphs[1] = dom.createAttrMorph(element2, 'onclick');
          morphs[2] = dom.createMorphAt(element0, 5, 5);
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", ["subMenuEl"], ["bubbles", false], ["loc", [null, [7, 35], [7, 71]]]]], ["attribute", "onclick", ["subexpr", "action", ["subMenuEl"], ["bubbles", false], ["loc", [null, [8, 43], [8, 79]]]]], ["inline", "partial", ["sitemap-node-content"], [], ["loc", [null, [9, 4], [9, 38]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/mobile/sitemap-node.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "model.link", ["loc", [null, [1, 6], [1, 16]]]]], [], 0, 1, ["loc", [null, [1, 0], [11, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/new-platform-flexberry-services-lock-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 35,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/new-platform-flexberry-services-lock-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.new-platform-flexberry-services-lock-list.caption"], [], ["loc", [null, [2, 4], [2, 67]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [5, 12], [5, 17]]]]], [], []], "modelName", ["subexpr", "@mut", [["get", "modelName", ["loc", [null, [6, 14], [6, 23]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [7, 20], [7, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [8, 18], [8, 31]]]]], [], []], "refreshButton", true, "createNewButton", false, "deleteButton", true, "showCheckBoxInRow", true, "showDeleteButtonInRow", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [17, 22], [17, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [18, 20], [18, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [19, 16], [19, 27]]]]], [], []], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [22, 17], [22, 40]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [23, 27], [23, 60]]]], "orderable", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [25, 12], [25, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [26, 17], [26, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [27, 23], [27, 52]]]], "componentName", "LockObjectListView", "customButtons", ["subexpr", "@mut", [["get", "customButtons", ["loc", [null, [29, 18], [29, 31]]]]], [], []], "changeUserName", "changeUserName", "openReadOnly", "openReadOnly", "unlockObject", "unlockObject"], ["loc", [null, [4, 2], [33, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/sitemap-node-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/sitemap-node-content.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "render", ["sitemap-node", ["get", "child", ["loc", [null, [5, 30], [5, 35]]]]], [], ["loc", [null, [5, 6], [5, 37]]]]],
          locals: ["child"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/sitemap-node-content.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "menu subMenu hidden");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "model.children", ["loc", [null, [4, 12], [4, 26]]]]], [], 0, null, ["loc", [null, [4, 4], [6, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 7
          }
        },
        "moduleName": "dummy/templates/sitemap-node-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "title-item-menu");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createAttrMorph(element0, 'onclick');
        morphs[1] = dom.createMorphAt(element0, 0, 0);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "onclick", ["subexpr", "action", ["subMenuEl"], ["bubbles", false], ["loc", [null, [1, 36], [1, 72]]]]], ["content", "model.caption", ["loc", [null, [1, 73], [1, 90]]]], ["block", "if", [["get", "model.children.length", ["loc", [null, [2, 6], [2, 27]]]]], [], 0, null, ["loc", [null, [2, 0], [8, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/sitemap-node", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/sitemap-node.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "partial", ["sitemap-node-content"], [], ["loc", [null, [3, 4], [3, 38]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/sitemap-node.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", [["get", "model.link", ["loc", [null, [2, 11], [2, 21]]]]], ["class", "item", "title", ["subexpr", "@mut", [["get", "model.title", ["loc", [null, [2, 41], [2, 52]]]]], [], []]], 0, null, ["loc", [null, [2, 0], [4, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/sitemap-node.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "item item-menu");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "item-plus");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "item-minus hidden");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element0, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element1, 'onclick');
          morphs[1] = dom.createAttrMorph(element2, 'onclick');
          morphs[2] = dom.createMorphAt(element0, 5, 5);
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", ["subMenuEl"], ["bubbles", false], ["loc", [null, [7, 35], [7, 71]]]]], ["attribute", "onclick", ["subexpr", "action", ["subMenuEl"], ["bubbles", false], ["loc", [null, [8, 43], [8, 79]]]]], ["inline", "partial", ["sitemap-node-content"], [], ["loc", [null, [9, 4], [9, 38]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/sitemap-node.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "model.link", ["loc", [null, [1, 6], [1, 16]]]]], [], 0, 1, ["loc", [null, [1, 0], [11, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/sitemap", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/sitemap.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("	");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "render", ["sitemap-node", ["get", "node", ["loc", [null, [2, 25], [2, 29]]]]], [], ["loc", [null, [2, 1], [2, 31]]]]],
        locals: ["node"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/sitemap.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "model.nodes", ["loc", [null, [1, 8], [1, 19]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/user-setting-forms/user-setting-delete", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 35,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/user-setting-forms/user-setting-delete.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "flexberry-error", [], ["error", ["subexpr", "@mut", [["get", "error", ["loc", [null, [1, 24], [1, 29]]]]], [], []]], ["loc", [null, [1, 0], [1, 31]]]], ["inline", "t", ["forms.user-setting-forms.user-setting-delete.caption"], [], ["loc", [null, [2, 4], [2, 64]]]], ["inline", "flexberry-objectlistview", [], ["modelName", ["subexpr", "@mut", [["get", "modelName", ["loc", [null, [5, 16], [5, 25]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 22], [6, 37]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 14], [7, 19]]]]], [], []], "createNewButton", false, "refreshButton", true, "deleteButton", true, "filterButton", true, "filterText", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [12, 15], [12, 21]]]]], [], []], "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [13, 21], [13, 48]]]], "beforeDeleteAllRecords", ["subexpr", "action", ["beforeDeleteAllRecords"], [], ["loc", [null, [14, 27], [14, 60]]]], "showCheckBoxInRow", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [16, 14], [16, 29]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [18, 19], [18, 42]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [19, 25], [19, 54]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [20, 12], [20, 17]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [21, 19], [21, 31]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [22, 20], [22, 33]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [23, 22], [23, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [24, 22], [24, 37]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [25, 18], [25, 29]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [26, 19], [26, 42]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [27, 15], [27, 34]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [28, 15], [28, 34]]]], "customButtons", ["subexpr", "@mut", [["get", "customButtons", ["loc", [null, [29, 18], [29, 31]]]]], [], []], "allDelButtonAction", "allDelButtonAction", "componentName", "userSettingObjectListView", "rowClickable", false], ["loc", [null, [4, 2], [33, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('dummy/transforms/components-examples/flexberry-dropdown/conditional-render-example/enumeration', ['exports', 'ember-flexberry-data/transforms/flexberry-enum', 'dummy/enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration'], function (exports, _emberFlexberryDataTransformsFlexberryEnum, _dummyEnumsComponentsExamplesFlexberryDropdownConditionalRenderExampleEnumeration) {
  exports['default'] = _emberFlexberryDataTransformsFlexberryEnum['default'].extend({
    'enum': _dummyEnumsComponentsExamplesFlexberryDropdownConditionalRenderExampleEnumeration['default']
  });
});
define('dummy/transforms/components-examples/flexberry-dropdown/settings-example/enumeration', ['exports', 'ember-flexberry-data/transforms/flexberry-enum', 'dummy/enums/components-examples/flexberry-dropdown/settings-example/enumeration'], function (exports, _emberFlexberryDataTransformsFlexberryEnum, _dummyEnumsComponentsExamplesFlexberryDropdownSettingsExampleEnumeration) {
  exports['default'] = _emberFlexberryDataTransformsFlexberryEnum['default'].extend({
    'enum': _dummyEnumsComponentsExamplesFlexberryDropdownSettingsExampleEnumeration['default']
  });
});
define('dummy/transforms/components-examples/flexberry-groupedit/shared/detail-enumeration', ['exports', 'ember-flexberry-data/transforms/flexberry-enum', 'dummy/enums/components-examples/flexberry-groupedit/shared/detail-enumeration'], function (exports, _emberFlexberryDataTransformsFlexberryEnum, _dummyEnumsComponentsExamplesFlexberryGroupeditSharedDetailEnumeration) {
  exports['default'] = _emberFlexberryDataTransformsFlexberryEnum['default'].extend({
    'enum': _dummyEnumsComponentsExamplesFlexberryGroupeditSharedDetailEnumeration['default']
  });
});
define('dummy/transforms/decimal', ['exports', 'ember-flexberry-data/transforms/decimal'], function (exports, _emberFlexberryDataTransformsDecimal) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataTransformsDecimal['default'];
    }
  });
});
define('dummy/transforms/ember-flexberry-dummy-gender', ['exports', 'ember-flexberry-data/transforms/flexberry-enum', 'dummy/enums/ember-flexberry-dummy-gender'], function (exports, _emberFlexberryDataTransformsFlexberryEnum, _dummyEnumsEmberFlexberryDummyGender) {
  exports['default'] = _emberFlexberryDataTransformsFlexberryEnum['default'].extend({
    'enum': _dummyEnumsEmberFlexberryDummyGender['default']
  });
});
define('dummy/transforms/ember-flexberry-dummy-vote-type', ['exports', 'ember-flexberry-data/transforms/flexberry-enum', 'dummy/enums/ember-flexberry-dummy-vote-type'], function (exports, _emberFlexberryDataTransformsFlexberryEnum, _dummyEnumsEmberFlexberryDummyVoteType) {
  exports['default'] = _emberFlexberryDataTransformsFlexberryEnum['default'].extend({
    'enum': _dummyEnumsEmberFlexberryDummyVoteType['default']
  });
});
define('dummy/transforms/file', ['exports', 'ember-flexberry-data/transforms/file'], function (exports, _emberFlexberryDataTransformsFile) {
  exports['default'] = _emberFlexberryDataTransformsFile['default'];
});
define('dummy/transforms/flexberry-enum', ['exports', 'ember-flexberry-data/transforms/flexberry-enum'], function (exports, _emberFlexberryDataTransformsFlexberryEnum) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataTransformsFlexberryEnum['default'];
    }
  });
});
define('dummy/transforms/guid', ['exports', 'ember-flexberry-data/transforms/guid'], function (exports, _emberFlexberryDataTransformsGuid) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataTransformsGuid['default'];
    }
  });
});
define('dummy/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-execution-variant', ['exports', 'ember-flexberry-data/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-execution-variant'], function (exports, _emberFlexberryDataTransformsICSSoftSTORMNETBusinessAuditObjectsTExecutionVariant) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataTransformsICSSoftSTORMNETBusinessAuditObjectsTExecutionVariant['default'];
    }
  });
});
define('dummy/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-type-of-audit-operation', ['exports', 'ember-flexberry-data/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-type-of-audit-operation'], function (exports, _emberFlexberryDataTransformsICSSoftSTORMNETBusinessAuditObjectsTTypeOfAuditOperation) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataTransformsICSSoftSTORMNETBusinessAuditObjectsTTypeOfAuditOperation['default'];
    }
  });
});
define('dummy/transforms/integration-examples/edit-form/readonly-mode/enumeration', ['exports', 'ember-flexberry-data/transforms/flexberry-enum', 'dummy/enums/integration-examples/edit-form/readonly-mode/enumeration'], function (exports, _emberFlexberryDataTransformsFlexberryEnum, _dummyEnumsIntegrationExamplesEditFormReadonlyModeEnumeration) {
  exports['default'] = _emberFlexberryDataTransformsFlexberryEnum['default'].extend({
    'enum': _dummyEnumsIntegrationExamplesEditFormReadonlyModeEnumeration['default']
  });
});
define('dummy/transforms/integration-examples/edit-form/validation/enumeration', ['exports', 'ember-flexberry-data/transforms/flexberry-enum', 'dummy/enums/integration-examples/edit-form/validation/enumeration'], function (exports, _emberFlexberryDataTransformsFlexberryEnum, _dummyEnumsIntegrationExamplesEditFormValidationEnumeration) {
  exports['default'] = _emberFlexberryDataTransformsFlexberryEnum['default'].extend({
    'enum': _dummyEnumsIntegrationExamplesEditFormValidationEnumeration['default']
  });
});
define('dummy/utils/batch-queries', ['exports', 'ember-flexberry-data/utils/batch-queries'], function (exports, _emberFlexberryDataUtilsBatchQueries) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataUtilsBatchQueries['default'];
    }
  });
});
define('dummy/utils/cut-string-by-length', ['exports', 'ember-flexberry/utils/cut-string-by-length'], function (exports, _emberFlexberryUtilsCutStringByLength) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryUtilsCutStringByLength['default'];
    }
  });
});
define('dummy/utils/deserialize-sorting-param', ['exports', 'ember-flexberry/utils/deserialize-sorting-param'], function (exports, _emberFlexberryUtilsDeserializeSortingParam) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryUtilsDeserializeSortingParam['default'];
    }
  });
});
define('dummy/utils/get-attr-locale-key', ['exports', 'ember-flexberry/utils/get-attr-locale-key'], function (exports, _emberFlexberryUtilsGetAttrLocaleKey) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryUtilsGetAttrLocaleKey['default'];
    }
  });
});
define('dummy/utils/get-current-agregator', ['exports', 'ember-flexberry/utils/get-current-agregator'], function (exports, _emberFlexberryUtilsGetCurrentAgregator) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryUtilsGetCurrentAgregator['default'];
    }
  });
});
define('dummy/utils/get-projection-by-name', ['exports', 'ember-flexberry/utils/get-projection-by-name'], function (exports, _emberFlexberryUtilsGetProjectionByName) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryUtilsGetProjectionByName['default'];
    }
  });
});
define('dummy/utils/i18n/compile-template', ['exports', 'ember-i18n/utils/i18n/compile-template'], function (exports, _emberI18nUtilsI18nCompileTemplate) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nUtilsI18nCompileTemplate['default'];
    }
  });
});
define('dummy/utils/i18n/missing-message', ['exports', 'ember-i18n/utils/i18n/missing-message'], function (exports, _emberI18nUtilsI18nMissingMessage) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nUtilsI18nMissingMessage['default'];
    }
  });
});
define('dummy/utils/need-save-current-agregator', ['exports', 'ember-flexberry/utils/need-save-current-agregator'], function (exports, _emberFlexberryUtilsNeedSaveCurrentAgregator) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryUtilsNeedSaveCurrentAgregator['default'];
    }
  });
});
define('dummy/utils/serialize-sorting-param', ['exports', 'ember-flexberry/utils/serialize-sorting-param'], function (exports, _emberFlexberryUtilsSerializeSortingParam) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryUtilsSerializeSortingParam['default'];
    }
  });
});
define('dummy/validators/local/datetime', ['exports', 'ember-flexberry/validators/local/datetime'], function (exports, _emberFlexberryValidatorsLocalDatetime) {
  exports['default'] = _emberFlexberryValidatorsLocalDatetime['default'];
});
/* jshint ignore:start */



/* jshint ignore:end */

/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

/* jshint ignore:end */

/* jshint ignore:start */

if (!runningTests) {
  require("dummy/app")["default"].create({"name":"dummy","backendUrl":"http://stands-backend.flexberry.net","backendUrls":{"root":"http://stands-backend.flexberry.net","api":"http://stands-backend.flexberry.net/odata"},"log":{"enabled":true,"storeErrorMessages":true,"storeWarnMessages":true,"storeLogMessages":false,"storeInfoMessages":true,"storeDebugMessages":true,"storeDeprecationMessages":true,"storePromiseErrors":true,"showPromiseErrors":true,"errorMessageFilterActive":true},"perf":{"enabled":false},"lock":{"enabled":true,"openReadOnly":true,"unlockObject":true},"useUserSettingsService":true,"useAdvLimitService":true,"components":{"flexberryFile":{"uploadUrl":"http://stands-backend.flexberry.net/api/File","maxUploadFileSize":null,"uploadOnModelPreSave":true,"showUploadButton":true,"showModalDialogOnUploadError":true,"showModalDialogOnDownloadError":true}},"version":"2.6.1+aea1b9a2"});
}

/* jshint ignore:end */
//# sourceMappingURL=dummy.map
